[
    {
        "prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Ellen\u0151rizze, hogy a megadott sz\u00e1mok list\u00e1j\u00e1ban van-e k\u00e9t sz\u00e1m, amelyek k\u00f6zelebb vannak egym\u00e1shoz, mint a megadott k\u00fcsz\u00f6b\u00e9rt\u00e9k.\nP\u00e9lda:\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "canonical_solution":"for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" A f\u00fcggv\u00e9ny bemenete egy olyan karakterl\u00e1nc, amely t\u00f6bb csoport egym\u00e1sba \u00e1gyazott z\u00e1r\u00f3jelet tartalmaz. A c\u00e9l az, hogy ezeket a csoportokat k\u00fcl\u00f6n karakterl\u00e1ncokra bontsuk, \u00e9s visszaadjuk ezek list\u00e1j\u00e1t. A k\u00fcl\u00f6n\u00e1ll\u00f3 csoportok kiegyens\u00falyozottak, \u00e9s nem \u00e1gyaz\u00f3dnak egym\u00e1sba. Hagyjuk figyelmen k\u00edv\u00fcl az input karakterl\u00e1ncban tal\u00e1lhat\u00f3 sz\u00f3k\u00f6z\u00f6ket. P\u00e9lda:\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"
    },
    {
        "prompt":"\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Adott egy pozit\u00edv lebeg\u0151pontos sz\u00e1m, amely felbonthat\u00f3 egy eg\u00e9sz r\u00e9szre \u00e9s egy tizedes r\u00e9szre.\n\nAdja vissza a sz\u00e1m tizedes r\u00e9sz\u00e9t.\nP\u00e9lda:\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "canonical_solution":"    return number % 1.0\n",
        "test":"def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Az al\u00e1bbi mondatot ford\u00edtsd le magyarra.\n\nAdott egy lista a banki sz\u00e1mla befizet\u00e9si \u00e9s kifizet\u00e9si m\u0171veleteir\u0151l, amely nulla egyenleggel indul. Az \u00d6n feladata annak \u00e9szlel\u00e9se, hogy az egyenleg b\u00e1rmikor null\u00e1n\u00e1l alacsonyabbra cs\u00f6kken-e, \u00e9s ebben az esetben a f\u00fcggv\u00e9nynek True \u00e9rt\u00e9ket kell visszaadnia. Ellenkez\u0151 esetben False \u00e9rt\u00e9ket kell visszaadnia.\nP\u00e9lda:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Egy adott bemeneti sz\u00e1mok list\u00e1ja eset\u00e9n sz\u00e1m\u00edtsa ki az \u00e1tlagos abszol\u00fat elt\u00e9r\u00e9st az adathalmaz \u00e1tlag\u00e1hoz k\u00e9pest. Az \u00e1tlagos abszol\u00fat elt\u00e9r\u00e9s az egyes elemek \u00e9s egy k\u00f6z\u00e9ppont k\u00f6z\u00f6tti \u00e1tlagos abszol\u00fat k\u00fcl\u00f6nbs\u00e9g:\n\nMAD = \u00e1tlag | x - x_\u00e1tlag |\n\nP\u00e9lda:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n",
        "test":"def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Sz\u00farjon be egy 'hat\u00e1rol\u00f3' sz\u00e1mot a `numbers` bemeneti lista minden k\u00e9t egym\u00e1st k\u00f6vet\u0151 eleme k\u00f6z\u00e9.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" A f\u00fcggv\u00e9ny bemenete egy olyan karakterl\u00e1nc, amely t\u00f6bb csoportot tartalmaz egym\u00e1sba \u00e1gyazott z\u00e1r\u00f3jelek sz\u00e1m\u00e1ra, sz\u00f3k\u00f6z\u00f6kkel elv\u00e1lasztva.\n    Minden egyes csoportra adja meg a maxim\u00e1lis z\u00e1r\u00f3jelek egym\u00e1sba \u00e1gyaz\u00e1s\u00e1nak m\u00e9lys\u00e9g\u00e9t.\n    P\u00e9ld\u00e1ul a) maxim\u00e1lisan k\u00e9t szint\u0171 egym\u00e1sba \u00e1gyaz\u00e1st tartalmaz, m\u00edg a)) h\u00e1rom szintet.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "canonical_solution":"    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Sz\u0171rje meg egy bemeneti karakterl\u00e1nc-list\u00e1t, csak azokat, amelyek tartalmazz\u00e1k a megadott r\u00e9szstringet.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if substring in x]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Egy adott eg\u00e9sz sz\u00e1mokb\u00f3l \u00e1ll\u00f3 lista eset\u00e9n t\u00e9rj vissza egy olyan n-esekkel, amely az \u00f6sszes eg\u00e9sz sz\u00e1m \u00f6sszeg\u00e9t \u00e9s szorzat\u00e1t tartalmazza a list\u00e1ban.\n    Az \u00fcres lista \u00f6sszege legyen 0, \u00e9s az \u00fcres lista szorzata legyen 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "canonical_solution":"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test":"def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" Egy adott eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 list\u00e1b\u00f3l hozz l\u00e9tre egy olyan list\u00e1t, amely a sorozatban az adott pillanatig megtal\u00e1lhat\u00f3 g\u00f6rd\u00fcl\u0151 maximum elemet tartalmazza.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Teszteld, hogy a megadott karakterl\u00e1nc palindr\u00f3m-e. \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "canonical_solution":"    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" A bemenet k\u00e9t, csak 1-esekb\u0151l \u00e9s 0-\u00e1kb\u00f3l \u00e1ll\u00f3 a \u00e9s b string.\n    V\u00e9gezze el a bin\u00e1ris XOR m\u0171veletet ezeken a bemeneteken, \u00e9s az eredm\u00e9nyt is stringk\u00e9nt adja vissza.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "canonical_solution":"    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test":"def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n"
    },
    {
        "prompt":"from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" A karakterl\u00e1ncok list\u00e1j\u00e1b\u00f3l add vissza a leghosszabbat. T\u00f6bb azonos hossz\u00fas\u00e1g\u00fa l\u00e1nc eset\u00e9n az els\u0151t add vissza. \u00dcres bemeneti lista eset\u00e9n None-t adj vissza.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "canonical_solution":"    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test":"def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n"
    },
    {
        "prompt":"\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Adja vissza a k\u00e9t eg\u00e9sz sz\u00e1m, a \u00e9s b legnagyobb k\u00f6z\u00f6s oszt\u00f3j\u00e1t.\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    while b:\n        a, b = b, a % b\n    return a\n",
        "test":"def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Adja vissza a bemeneti string \u00f6sszes el\u0151tagj\u00e1t a legr\u00f6videbbt\u0151l a leghosszabbig.\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n"
    },
    {
        "prompt":"\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Adjon vissza egy karakterl\u00e1ncot, amely sz\u00f3k\u00f6zzel elv\u00e1lasztott sz\u00e1mokat tartalmaz 0-t\u00f3l n-ig, bele\u00e9rtve n-t is.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test":"def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "prompt":"\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Egy adott karakterl\u00e1ncr\u00f3l \u00e1llap\u00edtsd meg, h\u00e1ny k\u00fcl\u00f6nb\u00f6z\u0151 karakterb\u0151l \u00e1ll.\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "canonical_solution":"    return len(set(string.lower()))\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" A f\u00fcggv\u00e9ny bemenete egy speci\u00e1lis ASCII form\u00e1tumban megadott zenei hangokat reprezent\u00e1l\u00f3 karakterl\u00e1nc.\nA feladat az, hogy elemezd ezt a karakterl\u00e1ncot, \u00e9s t\u00e9rj vissza egy olyan eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 list\u00e1val, amely megmutatja, hogy h\u00e1ny \u00fctemig tart minden egyes hang.\n\n    \u00cdme a legenda:\n    'o' - eg\u00e9sz hangjegy, n\u00e9gy \u00fctemig tart\n    'o|' - f\u00e9l hangjegy, k\u00e9t \u00fctemig tart\n    '.|' - negyed hangjegy, egy \u00fctemig tart\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n"
    },
    {
        "prompt":"\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Tal\u00e1ld meg, hogy egy adott r\u00e9szsz\u00f6veg h\u00e1nyszor fordul el\u0151 az eredeti sz\u00f6vegben. Sz\u00e1mold az \u00e1tfed\u00e9seket is.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "canonical_solution":"    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test":"def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" A bemenet egy sz\u00f3k\u00f6z\u00f6kkel elv\u00e1lasztott sz\u00e1mjegyeket tartalmaz\u00f3 karakterl\u00e1nc 'null\u00e1t\u00f3l' 'kilencig'.\n    A lehets\u00e9ges v\u00e1laszt\u00e1sok: 'nulla', 'egy', 'kett\u0151', 'h\u00e1rom', 'n\u00e9gy', '\u00f6t', 'hat', 'h\u00e9t', 'nyolc' \u00e9s 'kilenc'.\n    Add vissza a karakterl\u00e1ncot a sz\u00e1mok kisebbt\u0151l nagyobbig rendezve.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "canonical_solution":"    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" A megadott sz\u00e1mok list\u00e1j\u00e1b\u00f3l v\u00e1laszd ki \u00e9s add vissza azt a k\u00e9t sz\u00e1mot, amelyek egym\u00e1shoz a legk\u00f6zelebb vannak, \u00e9s add vissza \u0151ket sorrendben.\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Adott sz\u00e1mok list\u00e1j\u00e1ra, alkalmazzon egy line\u00e1ris transzform\u00e1ci\u00f3t, \n    \u00fagy, hogy a legkisebb sz\u00e1m 0 legyen, a legnagyobb pedig 1.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n",
        "test":"def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"
    },
    {
        "prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Sz\u0171rd ki a megadott list\u00e1b\u00f3l csak az eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 Python \u00e9rt\u00e9keket.\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in values if isinstance(x, int)]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"
    },
    {
        "prompt":"\n\ndef strlen(string: str) -> int:\n    \"\"\" Adja vissza a megadott karakterl\u00e1nc hossz\u00e1t.\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "canonical_solution":"    return len(string)\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n"
    },
    {
        "prompt":"\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" Egy adott n sz\u00e1m eset\u00e9n tal\u00e1ld meg a legnagyobb sz\u00e1mot, amely osztja n-t marad\u00e9k n\u00e9lk\u00fcl, \u00e9s kisebb n-n\u00e9l.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test":"def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Adja vissza a megadott eg\u00e9sz sz\u00e1m pr\u00edmt\u00e9nyez\u0151inek list\u00e1j\u00e1t a legkisebbt\u0151l a legnagyobbig rendezve.\n    Minden t\u00e9nyez\u0151t annyiszor kell felsorolni, ah\u00e1nyszor az megjelenik a faktoriz\u00e1ci\u00f3ban.\n    A bemeneti sz\u00e1mnak egyenl\u0151nek kell lennie az \u00f6sszes t\u00e9nyez\u0151 szorzat\u00e1val.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n \/\/= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test":"def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Egy eg\u00e9sz sz\u00e1mok list\u00e1j\u00e1b\u00f3l t\u00e1vol\u00edtsd el az \u00f6sszes olyan elemet, amely t\u00f6bbsz\u00f6r is el\u0151fordul.\n    Tartsd meg az elemek sorrendj\u00e9t ugyan\u00fagy, mint a bemenetben.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n"
    },
    {
        "prompt":"\n\ndef flip_case(string: str) -> str:\n    \"\"\" Egy adott karakterl\u00e1ncban alak\u00edtsd a kisbet\u0171s karaktereket nagybet\u0171ss\u00e9, \u00e9s a nagybet\u0171s karaktereket kisbet\u0171ss\u00e9.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "canonical_solution":"    return string.swapcase()\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" F\u0171zd \u00f6ssze a sztringek list\u00e1j\u00e1t egyetlen sztringg\u00e9.\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "canonical_solution":"    return ''.join(strings)\n",
        "test":"def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Sz\u0171rj\u00f6n egy bemeneti sztringlist\u00e1t csak azokra, amelyek egy adott el\u0151taggal kezd\u0151dnek.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"
    },
    {
        "prompt":"\n\ndef get_positive(l: list):\n    \"\"\"Adja vissza csak a pozit\u00edv sz\u00e1mokat a list\u00e1ban.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "canonical_solution":"    return [e for e in l if e > 0]\n",
        "test":"def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n"
    },
    {
        "prompt":"\n\ndef is_prime(n):\n    \"\"\"Igazat adjon vissza, ha egy adott sz\u00e1m pr\u00edmsz\u00e1m, k\u00fcl\u00f6nben hamisat.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "canonical_solution":"    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n"
    },
    {
        "prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Polinomot \u00e9rt\u00e9kel xs egy\u00fctthat\u00f3kkal az x pontban.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test":"def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"
    },
    {
        "prompt":"\n\ndef sort_third(l: list):\n    \"\"\"Ez a f\u00fcggv\u00e9ny egy l list\u00e1t kap bemenetk\u00e9nt, \u00e9s egy olyan l' list\u00e1t ad vissza, amelyben az l' azokon az indexeken azonos az l-lel, amelyek nem oszthat\u00f3k h\u00e1rommal, m\u00edg azokon az indexeken, amelyek oszthat\u00f3k h\u00e1rommal, az \u00e9rt\u00e9kei megegyeznek az l megfelel\u0151 indexeinek \u00e9rt\u00e9keivel, de rendezve vannak.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "canonical_solution":"    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n"
    },
    {
        "prompt":"\n\ndef unique(l: list):\n    \"\"\"Adja vissza a rendezett egyedi elemeket egy list\u00e1ban.\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(list(set(l)))\n",
        "test":"def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n"
    },
    {
        "prompt":"\n\ndef max_element(l: list):\n    \"\"\"Adja vissza a lista legnagyobb elem\u00e9t.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"
    },
    {
        "prompt":"\n\ndef fizz_buzz(n: int):\n    \"\"\"Adja vissza, hogy h\u00e1nyszor jelenik meg a 7-es sz\u00e1mjegy azokon az n-n\u00e9l kisebb eg\u00e9sz sz\u00e1mokon, amelyek oszthat\u00f3k 11-gyel vagy 13-mal.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test":"def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"
    },
    {
        "prompt":"\n\ndef sort_even(l: list):\n    \"\"\"Ez a f\u00fcggv\u00e9ny egy l list\u00e1t vesz, \u00e9s egy olyan l' list\u00e1t ad vissza, amely\n    azonos az l list\u00e1val a p\u00e1ratlan indexekn\u00e9l, m\u00edg a p\u00e1ros indexekn\u00e9l l\u00e9v\u0151 \u00e9rt\u00e9kek\n    megegyeznek az l lista p\u00e1ros indexeinek \u00e9rt\u00e9keivel, de sorba rendezve.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "canonical_solution":"    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n"
    },
    {
        "prompt":"\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    visszaadja a k\u00f3dolt karakterl\u00e1ncot h\u00e1rom karakteres csoportok cikliz\u00e1l\u00e1s\u00e1val.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"
    },
    {
        "prompt":"\n\ndef prime_fib(n: int):\n    \"\"\"\n    A prime_fib visszaadja az n-edik sz\u00e1mot, amely Fibonacci-sz\u00e1m \u00e9s egyben pr\u00edmsz\u00e1m is.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "canonical_solution":"    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test":"def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n"
    },
    {
        "prompt":"\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    A `triples_sum_to_zero` egy eg\u00e9sz sz\u00e1mokb\u00f3l \u00e1ll\u00f3 list\u00e1t kap bemenetk\u00e9nt.\n    Igaz \u00e9rt\u00e9ket ad vissza, ha vannak a list\u00e1ban h\u00e1rom k\u00fcl\u00f6nb\u00f6z\u0151 elem, amelyek \u00f6sszege nulla, \u00e9s hamisat egy\u00e9bk\u00e9nt.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n"
    },
    {
        "prompt":"\n\ndef car_race_collision(n: int):\n    \"\"\"\n    K\u00e9pzelj el egy utat, amely egy t\u00f6k\u00e9letesen egyenes, v\u00e9gtelen hossz\u00fa vonal.\n    n aut\u00f3 balr\u00f3l jobbra halad; ezzel egyidej\u0171leg egy m\u00e1sik n aut\u00f3b\u00f3l \u00e1ll\u00f3 csoport\n    jobbr\u00f3l balra halad. A k\u00e9t aut\u00f3csoport kezdetben nagyon messze van\n    egym\u00e1st\u00f3l. Minden aut\u00f3 ugyanabban a sebess\u00e9gben halad. Akkor mondjuk, hogy k\u00e9t aut\u00f3 \u00fctk\u00f6zik, amikor egy balr\u00f3l jobbra halad\u00f3 aut\u00f3 \u00fctk\u00f6zik egy jobbr\u00f3l balra halad\u00f3 aut\u00f3val.\n    Azonban az aut\u00f3k v\u00e9gtelen\u00fcl strapab\u00edr\u00f3ak \u00e9s er\u0151sek; ennek eredm\u00e9nyek\u00e9nt folytatj\u00e1k \u00fatvonalukat, mintha nem \u00fctk\u00f6ztek volna.\n\n    Ez a f\u00fcggv\u00e9ny az ilyen \u00fctk\u00f6z\u00e9sek sz\u00e1m\u00e1t adja meg.\n    \"\"\"\n",
        "canonical_solution":"    return n**2\n",
        "test":"def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"
    },
    {
        "prompt":"\n\ndef incr_list(l: list):\n    \"\"\"Adja vissza a list\u00e1t, amelynek elemei 1-el n\u00f6veltek.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "canonical_solution":"    return [(e + 1) for e in l]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n"
    },
    {
        "prompt":"\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    A \"pairs_sum_to_zero\" egy eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 list\u00e1t vesz be bemenetk\u00e9nt.\n    Igaz \u00e9rt\u00e9ket ad vissza, ha a list\u00e1ban van k\u00e9t k\u00fcl\u00f6n\u00e1ll\u00f3 elem, amelyek \u00f6sszege nulla,\n    \u00e9s hamis \u00e9rt\u00e9ket ad vissza, ha nincs ilyen elem.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n"
    },
    {
        "prompt":"\n\ndef change_base(x: int, base: int):\n    \"\"\"V\u00e1ltoztassa meg az x bemeneti sz\u00e1m sz\u00e1mrendszer\u00e9t a megadott sz\u00e1mrendszerre.\n    Adja vissza a konverzi\u00f3 ut\u00e1ni sztring \u00e1br\u00e1zol\u00e1st.\n    A sz\u00e1mrendszer alapjai 10-n\u00e9l kisebbek.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "canonical_solution":"    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x \/\/= base\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n"
    },
    {
        "prompt":"\n\ndef triangle_area(a, h):\n    \"\"\"Adott egy oldal hossza \u00e9s a magass\u00e1g, adja vissza a h\u00e1romsz\u00f6g ter\u00fclet\u00e9t.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "canonical_solution":"    return a * h \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"
    },
    {
        "prompt":"\n\ndef fib4(n: int):\n    \"\"\"A Fib4 sz\u00e1msorozat egy olyan sorozat, amely hasonl\u00f3 a Fibonacci sorozathoz, \u00e9s az al\u00e1bbiak szerint van defini\u00e1lva:\n    fib4 -> 0\n    fib4 -> 0\n    fib4 -> 2\n    fib4 -> 0\n    fib4 -> fib4 + fib4 + fib4 + fib4.\n    K\u00e9rj\u00fck, \u00edrj egy f\u00fcggv\u00e9nyt, amely hat\u00e9konyan kisz\u00e1m\u00edtja a fib4 sz\u00e1msorozat n-edik elem\u00e9t. Ne haszn\u00e1lj rekurzi\u00f3t.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "canonical_solution":"    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test":"def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n"
    },
    {
        "prompt":"\n\ndef median(l: list):\n    \"\"\"Adja vissza az l lista elemeinek medi\u00e1nj\u00e1t.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "canonical_solution":"    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) \/\/ 2]\n    else:\n        return (l[len(l) \/\/ 2 - 1] + l[len(l) \/\/ 2]) \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Ellen\u0151rzi, hogy a megadott sz\u00f6veg palindr\u00f3m-e.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n"
    },
    {
        "prompt":"\n\ndef modp(n: int, p: int):\n    \"\"\"Adja vissza 2^n mod p.\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "canonical_solution":"    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n"
    },
    {
        "prompt":"\n\ndef encode_shift(s: str):\n    \"\"\"\n    visszaad egy k\u00f3dolt karakterl\u00e1ncot, amelyben minden karaktert 5 hellyel eltolnak az \u00e1b\u00e9c\u00e9ben.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n"
    },
    {
        "prompt":"\n\ndef remove_vowels(text):\n    \"\"\"\n    A remove_vowels egy olyan f\u00fcggv\u00e9ny, amely egy karakterl\u00e1ncot vesz \u00e1t, \u00e9s visszaadja a mag\u00e1nhangz\u00f3k n\u00e9lk\u00fcli karakterl\u00e1ncot.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"
    },
    {
        "prompt":"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Igaz \u00e9rt\u00e9ket ad vissza, ha az l list\u00e1ban tal\u00e1lhat\u00f3 \u00f6sszes sz\u00e1m a t k\u00fcsz\u00f6b\u00e9rt\u00e9k alatt van.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"
    },
    {
        "prompt":"\n\ndef add(x: int, y: int):\n    \"\"\"Adjon \u00f6ssze k\u00e9t sz\u00e1mot, x-et \u00e9s y-t.\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "canonical_solution":"    return x + y\n",
        "test":"def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n"
    },
    {
        "prompt":"\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Ellen\u0151rizze, hogy k\u00e9t sz\u00f3 ugyanazokat a karaktereket tartalmazza-e.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "canonical_solution":"    return set(s0) == set(s1)\n",
        "test":"def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n"
    },
    {
        "prompt":"\n\ndef fib(n: int):\n    \"\"\"Add vissza az n-edik Fibonacci sz\u00e1mot.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test":"def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" A z\u00e1r\u00f3jelek egy \"<\" \u00e9s \">\" karakterekb\u0151l \u00e1ll\u00f3 karakterl\u00e1nc. \n    Adjon vissza True \u00e9rt\u00e9ket, ha minden nyit\u00f3 z\u00e1r\u00f3jelnek van egy megfelel\u0151 z\u00e1r\u00f3 z\u00e1r\u00f3jele.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n"
    },
    {
        "prompt":"\n\ndef monotonic(l: list):\n    \"\"\"Adjon vissza Igaz \u00e9rt\u00e9ket, ha a lista elemei monoton n\u00f6vekv\u0151k vagy cs\u00f6kken\u0151k.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"
    },
    {
        "prompt":"\n\ndef common(l1: list, l2: list):\n    \"\"\"Adja vissza k\u00e9t lista rendezett, egyedi k\u00f6z\u00f6s elemeit.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "canonical_solution":"    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test":"def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n"
    },
    {
        "prompt":"\n\ndef largest_prime_factor(n: int):\n    \"\"\"Adja vissza n legnagyobb pr\u00edmt\u00e9nyez\u0151j\u00e9t. Tegy\u00fck fel, hogy n > 1 \u00e9s nem pr\u00edmsz\u00e1m.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test":"def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"
    },
    {
        "prompt":"\n\ndef sum_to_n(n: int):\n    \"\"\"A sum_to_n egy olyan f\u00fcggv\u00e9ny, amely \u00f6sszeadja az 1-t\u0151l n-ig terjed\u0151 sz\u00e1mokat.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "canonical_solution":"    return sum(range(n + 1))\n",
        "test":"def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" A z\u00e1r\u00f3jelek egy \"\" karakterekb\u0151l \u00e1ll\u00f3 karakterl\u00e1nc.\n    Adjon vissza True \u00e9rt\u00e9ket, ha minden nyit\u00f3 z\u00e1r\u00f3jelnek van egy megfelel\u0151 z\u00e1r\u00f3 z\u00e1r\u00f3jele.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n"
    },
    {
        "prompt":"\n\ndef derivative(xs: list):\n    \"\"\" Az xs egy polinom egy\u00fctthat\u00f3it k\u00e9pviselik.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Adja vissza ennek a polinomnak a deriv\u00e1ltj\u00e1t ugyanolyan form\u00e1ban.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "canonical_solution":"    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n"
    },
    {
        "prompt":"\n\ndef fibfib(n: int):\n    \"\"\"A FibFib sz\u00e1mok sorozata egy olyan sorozat, amely hasonl\u00f3 a Fibonacci-sorozathoz, \u00e9s a k\u00f6vetkez\u0151k\u00e9ppen van defini\u00e1lva:\n    fibfib == 0\n    fibfib == 0\n    fibfib == 1\n    fibfib == fibfib + fibfib + fibfib.\n    K\u00e9rj\u00fck, \u00edrjon egy f\u00fcggv\u00e9nyt, amely hat\u00e9konyan kisz\u00e1m\u00edtja a FibFib sz\u00e1mok sorozat\u00e1nak n-edik elem\u00e9t.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"
    },
    {
        "prompt":"\nFIX = \"\"\"\nAdj hozz\u00e1 t\u00f6bb tesztesetet.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef circular_shift(x, shift):\n    \"\"\"Forgasd el az x eg\u00e9sz sz\u00e1m sz\u00e1mjegyeit k\u00f6rk\u00f6r\u00f6sen jobbra a shift \u00e9rt\u00e9k\u00e9vel, \u00e9s az eredm\u00e9nyt add vissza sztringk\u00e9nt.\nHa a shift nagyobb, mint a sz\u00e1mjegyek sz\u00e1ma, add vissza a sz\u00e1mjegyeket megford\u00edtva.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef digitSum(s):\n    \"\"\"Feladat\n    \u00cdrj egy f\u00fcggv\u00e9nyt, amely egy karakterl\u00e1ncot vesz bemenetk\u00e9nt, \u00e9s visszaadja csak a nagybet\u0171k ASCII k\u00f3djainak \u00f6sszeg\u00e9t.\n\n    P\u00e9ld\u00e1k:\n        digitSum => 0\n        digitSum => 131\n        digitSum => 67\n        digitSum => 69\n        digitSum => 131\n        digitSum => 153\n    \"\"\"\n",
        "canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef fruit_distribution(s,n):\n    \"\"\"\n    Ebben a feladatban egy olyan karakterl\u00e1ncot kap, amely az alm\u00e1k \u00e9s narancsok sz\u00e1m\u00e1t jelenti, amelyek egy gy\u00fcm\u00f6lcskos\u00e1rban vannak elosztva. Ez a kos\u00e1r tartalmaz alm\u00e1kat, narancsokat \u00e9s mang\u00f3kat. Adott a karakterl\u00e1nc, amely az alm\u00e1k \u00e9s narancsok teljes sz\u00e1m\u00e1t jelenti, valamint egy eg\u00e9sz sz\u00e1m, amely a kos\u00e1rban l\u00e9v\u0151 gy\u00fcm\u00f6lcs\u00f6k teljes sz\u00e1m\u00e1t jelenti. Adja vissza a kos\u00e1rban l\u00e9v\u0151 mang\u00f3 gy\u00fcm\u00f6lcs\u00f6k sz\u00e1m\u00e1t.\nP\u00e9ld\u00e1ul:\nfruit_distribution -> 19 - 5 - 6 = 8\nfruit_distribution -> 3 - 0 - 1 = 2\nfruit_distribution -> 100 - 2 - 3 = 95\nfruit_distribution -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "canonical_solution":"    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n"
    },
    {
        "prompt":"\ndef pluck(arr):\n    \"\"\"\n    \"Adott egy t\u00f6mb, amely egy fa \u00e1g\u00e1t \u00e1br\u00e1zolja, amelyben nem negat\u00edv eg\u00e9sz sz\u00e1m\u00fa csom\u00f3pontok vannak.\n    Az \u00d6n feladata az, hogy kiszak\u00edtson egy csom\u00f3pontot \u00e9s visszaadja azt.\n    A kiszak\u00edtott csom\u00f3pontnak a legkisebb p\u00e1ros \u00e9rt\u00e9k\u0171 csom\u00f3pontnak kell lennie.\n    Ha t\u00f6bb azonos legkisebb p\u00e1ros \u00e9rt\u00e9k\u0171 csom\u00f3pont tal\u00e1lhat\u00f3, adja vissza a legkisebb index\u0171 csom\u00f3pontot.\n\n    A kiszak\u00edtott csom\u00f3pontot egy list\u00e1ban kell visszaadni, [ legkisebb_\u00e9rt\u00e9k, indexe ],\n    Ha nincsenek p\u00e1ros \u00e9rt\u00e9kek vagy a megadott t\u00f6mb \u00fcres, t\u00e9rjen vissza []-al.\n\n    1. p\u00e9lda:\n        Bemenet: [4,2,3]\n        Kimenet: [2, 1]\n        Magyar\u00e1zat: A 2-nek van a legkisebb p\u00e1ros \u00e9rt\u00e9ke, \u00e9s a 2-nek van a legkisebb indexe.\n\n    2. p\u00e9lda:\n        Bemenet: [1,2,3]\n        Kimenet: [2, 1]\n        Magyar\u00e1zat: A 2-nek van a legkisebb p\u00e1ros \u00e9rt\u00e9ke, \u00e9s a 2-nek van a legkisebb indexe.\n\n    3. p\u00e9lda:\n        Bemenet: []\n        Kimenet: []\n\n    4. p\u00e9lda:\n        Bemenet: [5, 0, 3, 0, 4, 2]\n        Kimenet: [0, 1]\n        Magyar\u00e1zat: A 0 a legkisebb \u00e9rt\u00e9k, de k\u00e9t nulla van,\n                     \u00edgy az els\u0151 null\u00e1t v\u00e1lasztjuk, amelynek a legkisebb az indexe.\n\n    Felt\u00e9telek:\n        * 1 <= csom\u00f3pontok.hossza <= 10000\n        * 0 <= csom\u00f3pont.\u00e9rt\u00e9ke\"\n    \"\"\"\n",
        "canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"
    },
    {
        "prompt":"\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "canonical_solution":"    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "canonical_solution":"    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)\/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n"
    },
    {
        "prompt":"\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u00e2 -> False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u00e2 -> False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u00e2 -> True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u00e2 -> True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "canonical_solution":"    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n"
    },
    {
        "prompt":"\ndef smallest_change(arr):\n    \"\"\"\n    Adott egy eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 arr arr t\u00f6mb, keresse meg a minim\u00e1lisan sz\u00fcks\u00e9ges elemek sz\u00e1m\u00e1t, amelyeket meg kell v\u00e1ltoztatni ahhoz, hogy a t\u00f6mb palindromm\u00e1v\u00e1 v\u00e1ljon. Egy palindromikus t\u00f6mb olyan t\u00f6mb, amelyet visszafel\u00e9 \u00e9s el\u0151refel\u00e9 olvasva ugyanaz. Egy v\u00e1ltoztat\u00e1s sor\u00e1n egy elemet b\u00e1rmely m\u00e1sik elemre meg lehet v\u00e1ltoztatni.\n\nP\u00e9ld\u00e1ul:\nsmallest_change == 4\nsmallest_change == 1\nsmallest_change == 0\n    \"\"\"\n",
        "canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"
    },
    {
        "prompt":"\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u00e2 -> []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u00e2 -> ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u00e2 -> ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u00e2 -> ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u00e2 -> ['4']\n    '''\n",
        "canonical_solution":"    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n"
    },
    {
        "prompt":"\ndef is_multiply_prime(a):\n    \"\"\"\u00cdrj egy f\u00fcggv\u00e9nyt, ami igaz \u00e9rt\u00e9ket ad vissza, ha a megadott sz\u00e1m h\u00e1rom pr\u00edmsz\u00e1m szorzata,\n    \u00e9s hamis \u00e9rt\u00e9ket ad vissza egy\u00e9bk\u00e9nt.\n    Tudva, hogy kisebb mint 100.\n    P\u00e9lda:\n    is_multiply_prime == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"
    },
    {
        "prompt":"\ndef is_simple_power(x, n):\n    \"\"\"A feladatod az, hogy \u00edrj egy f\u00fcggv\u00e9nyt, amely igaz \u00e9rt\u00e9ket ad vissza, ha az x sz\u00e1m egy egyszer\u0171 hatv\u00e1nya n-nek, \u00e9s hamis \u00e9rt\u00e9ket m\u00e1s esetekben.\nAz x akkor egyszer\u0171 hatv\u00e1nya n-nek, ha n**int=x.\nP\u00e9ld\u00e1ul:\nis_simple_power => igaz\nis_simple_power => igaz\nis_simple_power => igaz\nis_simple_power => hamis\nis_simple_power => hamis\nis_simple_power => hamis\n    \"\"\"\n",
        "canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "canonical_solution":"    a = abs(a)\n    return int(round(a ** (1. \/ 3))) ** 3 == a\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n"
    },
    {
        "prompt":"\ndef hex_key(num):\n    \"\"\"\u00d6n egy olyan f\u00fcggv\u00e9ny meg\u00edr\u00e1s\u00e1val lett megb\u00edzva, amely egy hexadecim\u00e1lis sz\u00e1mot kap karakterl\u00e1nc form\u00e1j\u00e1ban, \u00e9s megsz\u00e1molja, hogy h\u00e1ny hexadecim\u00e1lis sz\u00e1mjegy pr\u00edmsz\u00e1m.\nA hexadecim\u00e1lis sz\u00e1mjegyek a k\u00f6vetkez\u0151k: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nA pr\u00edmsz\u00e1mok: 2, 3, 5, 7, 11, 13, 17,...\nTeh\u00e1t meg kell hat\u00e1roznod a k\u00f6vetkez\u0151 sz\u00e1mjegyek sz\u00e1m\u00e1t: 2, 3, 5, 7, B, D.\nMegjegyz\u00e9s: felt\u00e9telezheted, hogy a bemenet mindig helyes vagy \u00fcres karakterl\u00e1nc, \u00e9s az A, B, C, D, E, F szimb\u00f3lumok mindig nagybet\u0171sek.\nP\u00e9ld\u00e1k:\nHa num = \"AB\", akkor az eredm\u00e9nynek 1-nek kell lennie.\nHa num = \"1077E\", akkor az eredm\u00e9nynek 2-nek kell lennie.\nHa num = \"ABED1A33\", akkor az eredm\u00e9nynek 4-nek kell lennie.\nHa num = \"123456789ABCDEF0\", akkor az eredm\u00e9nynek 6-nak kell lennie.\nHa num = \"2020\", akkor az eredm\u00e9nynek 2-nek kell lennie.\n    \"\"\"\n",
        "canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"
    },
    {
        "prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"Egy tizedes sz\u00e1mot fogsz kapni, \u00e9s a feladatod az, hogy bin\u00e1ris form\u00e1tumba konvert\u00e1ld. A f\u00fcggv\u00e9nynek egy karakterl\u00e1ncot kell visszaadnia, amelyben minden karakter egy bin\u00e1ris sz\u00e1mot k\u00e9pvisel. A karakterl\u00e1nc minden karaktere '0' vagy '1' lesz.\n\nLesz n\u00e9h\u00e1ny extra karakter 'db' a karakterl\u00e1nc elej\u00e9n \u00e9s a v\u00e9g\u00e9n. Az extra karakterek a form\u00e1tum seg\u00edt\u00e9s\u00e9re szolg\u00e1lnak.\n\nP\u00e9ld\u00e1k:\ndecimal_to_binary   # visszaadja: \"db1111db\"\ndecimal_to_binary   # visszaadja: \"db100000db\"\n    \"\"\"\n",
        "canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef is_happy(s):\n    \"\"\"Adott egy s karakterl\u00e1nc.\n    A feladatod annak ellen\u0151rz\u00e9se, hogy a karakterl\u00e1nc boldog-e vagy sem.\n    Egy karakterl\u00e1nc akkor boldog, ha hossza legal\u00e1bb 3, \u00e9s minden 3 egym\u00e1st k\u00f6vet\u0151 bet\u0171 k\u00fcl\u00f6nb\u00f6zik egym\u00e1st\u00f3l.\n    P\u00e9ld\u00e1ul:\n    is_happy => Hamis\n    is_happy => Hamis\n    is_happy => Igaz\n    is_happy => Hamis\n    is_happy => Igaz\n    is_happy => Hamis\n    \"\"\"\n",
        "canonical_solution":"    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n"
    },
    {
        "prompt":"\ndef numerical_letter_grade(grades):\n    \"\"\"Ez az utols\u00f3 h\u00e9t a szemeszterb\u0151l, \u00e9s a tan\u00e1rnak ki kell osztania a jegyeket a di\u00e1koknak. A tan\u00e1r saj\u00e1t algoritmust k\u00e9sz\u00edtett a jegyek oszt\u00e1s\u00e1ra. Az egyetlen probl\u00e9ma az, hogy elvesztette a k\u00f3dot, amit a jegyek oszt\u00e1s\u00e1ra haszn\u00e1lt. Adott egy lista n\u00e9h\u00e1ny di\u00e1k \u00e1tlagpontsz\u00e1m\u00e1r\u00f3l, \u00e9s neked kell \u00edrnod egy f\u00fcggv\u00e9nyt, amely a k\u00f6vetkez\u0151 t\u00e1bl\u00e1zat alapj\u00e1n list\u00e1t ad vissza a bet\u0171s jegyekr\u0151l:\n\n             GPA       |    Bet\u0171s jegy\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    P\u00e9lda:\n    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "canonical_solution":"\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef prime_length(string):\n    \"\"\"\u00cdrjon egy f\u00fcggv\u00e9nyt, amely egy karakterl\u00e1ncot vesz \u00e1t, \u00e9s True \u00e9rt\u00e9ket ad vissza, ha a karakterl\u00e1nc hossza pr\u00edmsz\u00e1m, vagy False \u00e9rt\u00e9ket egy\u00e9bk\u00e9nt.\nP\u00e9ld\u00e1k:\nprime_length == True\nprime_length == True\nprime_length == True\nprime_length == False\n    \"\"\"\n",
        "canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"
    },
    {
        "prompt":"\ndef starts_one_ends(n):\n    \"\"\"\n    Adott egy pozit\u00edv eg\u00e9sz sz\u00e1m n, \u00e9s t\u00e9rj vissza azon n sz\u00e1mjegy\u0171 pozit\u00edv eg\u00e9sz sz\u00e1mok sz\u00e1m\u00e1val, amelyek 1-gyel kezd\u0151dnek vagy v\u00e9gz\u0151dnek.\n    \"\"\"\n",
        "canonical_solution":"    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(N):\n    \"\"\"Adott egy pozit\u00edv eg\u00e9sz sz\u00e1m, N, add vissza a sz\u00e1mjegyeinek \u00f6sszeg\u00e9t bin\u00e1risan.\n\n    P\u00e9lda:\n        Ha N = 1000, a sz\u00e1mjegyek \u00f6sszege 1 lesz, az eredm\u00e9ny \"1\" kell legyen.\n        Ha N = 150, a sz\u00e1mjegyek \u00f6sszege 6 lesz, az eredm\u00e9ny \"110\" kell legyen.\n        Ha N = 147, a sz\u00e1mjegyek \u00f6sszege 12 lesz, az eredm\u00e9ny \"1100\" kell legyen.\n    \n    V\u00e1ltoz\u00f3k:\n        @N eg\u00e9sz sz\u00e1m\n             Korl\u00e1toz\u00e1sok: 0 \u2264 N \u2264 10000.\n    Kimenet:\n         egy bin\u00e1ris sz\u00e1mot tartalmaz\u00f3 string\n    \"\"\"\n",
        "canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"
    },
    {
        "prompt":"\ndef add(lst):\n    \"\"\"Tekintve egy nem \u00fcres eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 lista, lst. Add \u00f6ssze a p\u00e1ros elemeket, amelyek p\u00e1ratlan indexeken vannak.\n\nP\u00e9ld\u00e1k:\n    add ==> 2 \n    \"\"\"\n",
        "canonical_solution":"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n"
    },
    {
        "prompt":"\ndef anti_shuffle(s):\n    \"\"\"\n    \u00cdrj egy f\u00fcggv\u00e9nyt, ami egy karakterl\u00e1ncot vesz \u00e1t \u00e9s egy rendezett verzi\u00f3j\u00e1t adja vissza.\n    A karakterl\u00e1nc rendezett verzi\u00f3ja egy olyan karakterl\u00e1nc, ahol minden sz\u00f3\n    egy \u00faj sz\u00f3ra van cser\u00e9lve, ahol az \u00f6sszes karakter n\u00f6vekv\u0151 sorrendben van rendezve\n    az ascii \u00e9rt\u00e9k\u00fck alapj\u00e1n.\n    Megjegyz\u00e9s: Meg kell tartani a szavak \u00e9s a sz\u00f3k\u00f6z\u00f6k sorrendj\u00e9t a mondatban.\n\n    P\u00e9ld\u00e1ul:\n    anti_shuffle visszat\u00e9r 'Hi'\n    anti_shuffle visszat\u00e9r 'ehllo'\n    anti_shuffle visszat\u00e9r 'Hello !!!Wdlor'\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef get_row(lst, x):\n    \"\"\"\n    \u00d6n k\u00e9t dimenzi\u00f3s adatokat kap, be\u00e1gyazott listak\u00e9nt, amely hasonl\u00f3 a m\u00e1trixhoz, azonban a m\u00e1trixokt\u00f3l elt\u00e9r\u0151en minden sor k\u00fcl\u00f6nb\u00f6z\u0151 sz\u00e1m\u00fa oszlopot tartalmazhat. Adott a `lst` \u00e9s egy eg\u00e9sz sz\u00e1m `x`, keresse meg az eg\u00e9sz sz\u00e1mokat `x` a list\u00e1ban, \u00e9s adjon vissza egy list\u00e1t tuple-\u00f6kkel, [, ...], \u00fagy, hogy minden tuple egy koordin\u00e1ta -, 0-t\u00f3l kezdve. Rendezd a koordin\u00e1t\u00e1kat kezdetben sorok szerint n\u00f6vekv\u0151 sorrendben. Tov\u00e1bb\u00e1, rendezd az adott sor koordin\u00e1t\u00e1it oszlopok szerint cs\u00f6kken\u0151 sorrendben.\n\nP\u00e9ld\u00e1k:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [,,,,]\nget_row == []\nget_row == []\n    \"\"\"\n",
        "canonical_solution":"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef sort_array(array):\n    \"\"\"\n    Adott egy nem negat\u00edv eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 t\u00f6mb, t\u00e9rj vissza a megadott t\u00f6mb egy m\u00e1solat\u00e1val rendez\u00e9s ut\u00e1n. \n    A megadott t\u00f6mb\u00f6t n\u00f6vekv\u0151 sorrendbe rendezed, ha az els\u0151 index \u00e9rt\u00e9k\u00e9nek \u00e9s az utols\u00f3 index \u00e9rt\u00e9k\u00e9nek \u00f6sszege p\u00e1ratlan, \n    vagy cs\u00f6kken\u0151 sorrendbe rendezed, ha az els\u0151 index \u00e9rt\u00e9k\u00e9nek \u00e9s az utols\u00f3 index \u00e9rt\u00e9k\u00e9nek \u00f6sszege p\u00e1ros.\n\n    Megjegyz\u00e9s:\n    * ne v\u00e1ltoztasd meg a megadott t\u00f6mb\u00f6t.\n\n    P\u00e9ld\u00e1k:\n    * sort_array => []\n    * sort_array => [5]\n    * sort_array => [0, 1, 2, 3, 4, 5]\n    * sort_array => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
        "canonical_solution":"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef encrypt(s):\n    \"\"\"Hozzon l\u00e9tre egy `encrypt` nev\u0171 f\u00fcggv\u00e9nyt, amely egy karakterl\u00e1ncot vesz \u00e1t argumentumk\u00e9nt, \u00e9s visszaad egy titkos\u00edtott karakterl\u00e1ncot azzal, hogy az \u00e1b\u00e9c\u00e9t elforgatja. Az \u00e1b\u00e9c\u00e9t \u00fagy kell elforgatni, hogy a bet\u0171k k\u00e9t helyre eltol\u00f3dnak. P\u00e9ld\u00e1ul:\n- `encrypt` visszaadja a 'lm'-et\n- `encrypt` visszaadja az 'ewhjklnop'-ot\n- `encrypt` visszaadja a 'kj'-t\n- `encrypt` visszaadja az 'ix'-et\n    \"\"\"\n",
        "canonical_solution":"    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef next_smallest(lst):\n    \"\"\"\n    \u00cdme egy lista eg\u00e9sz sz\u00e1mokkal.\n\u00cdrj egy next_smallest f\u00fcggv\u00e9nyt, amely visszaadja a lista 2. legkisebb elem\u00e9t.\nAdjon vissza None-t, ha nincs ilyen elem.\n\nnext_smallest == 2\nnext_smallest == 2\nnext_smallest == None\nnext_smallest == None\n    \"\"\"\n",
        "canonical_solution":"    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_bored(S):\n    \"\"\"\n    A k\u00f6vetkez\u0151 mondatot kell leford\u00edtanom magyarra:\n\n\"Egy szavakb\u00f3l \u00e1ll\u00f3 karakterl\u00e1ncot fogsz kapni, \u00e9s a feladatod az unalmak sz\u00e1m\u00e1nak megsz\u00e1ml\u00e1l\u00e1sa. Az unalom egy olyan mondat, amely az '\u00c9n' sz\u00f3val kezd\u0151dik. A mondatokat a '.', '?' vagy '!' hat\u00e1rolja.\n\nP\u00e9ld\u00e1ul:\"\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "canonical_solution":"    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u00e2 -> True\n    \n    any_int(3, 2, 2) \u00e2 -> False\n\n    any_int(3, -2, 1) \u00e2 -> True\n    \n    any_int(3.6, -2.2, 2) \u00e2 -> False\n  \n\n    \n    '''\n",
        "canonical_solution":"    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef encode(message):\n    \"\"\"\n    \u00cdrj egy f\u00fcggv\u00e9nyt, amely fogad egy \u00fczenetet, \u00e9s olyan m\u00f3don k\u00f3dolja, hogy az \u00f6sszes bet\u0171 eset\u00e9t megcser\u00e9li, az \u00fczenet \u00f6sszes mag\u00e1nhangz\u00f3j\u00e1t pedig az angol \u00e1b\u00e9c\u00e9ben k\u00e9t hellyel el\u0151r\u00e9bb tal\u00e1lhat\u00f3 bet\u0171re cser\u00e9li. Felt\u00e9telezz\u00fck, hogy csak bet\u0171k vannak.\n\nP\u00e9ld\u00e1k:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\n\ndef skjkasdkd(lst):\n    \"\"\"\u00d6n kap egy eg\u00e9sz sz\u00e1mok list\u00e1j\u00e1t.\n    Meg kell tal\u00e1lnia a legnagyobb pr\u00edmsz\u00e1mot, \u00e9s vissza kell adnia a sz\u00e1mjegyeinek \u00f6sszeg\u00e9t.\n\n    P\u00e9ld\u00e1k:\n    Ha a lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], akkor a kimenet 10\n    Ha a lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1], akkor a kimenet 25\n    Ha a lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3], akkor a kimenet 13\n    Ha a lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6], akkor a kimenet 11\n    Ha a lst = [0,81,12,3,1,21], akkor a kimenet 3\n    Ha a lst = [0,8,1,2,1,7], akkor a kimenet 7\n    \"\"\"\n",
        "canonical_solution":"    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"
    },
    {
        "prompt":"\ndef check_dict_case(dict):\n    \"\"\"\n    Adott egy sz\u00f3t\u00e1r, amely akkor ad vissza True \u00e9rt\u00e9ket, ha minden kulcs kisbet\u0171s vagy minden kulcs nagybet\u0171s, egy\u00e9bk\u00e9nt False \u00e9rt\u00e9ket ad vissza.\nA f\u00fcggv\u00e9ny False \u00e9rt\u00e9ket ad vissza, ha a megadott sz\u00f3t\u00e1r \u00fcres.\nP\u00e9ld\u00e1k:\ncheck_dict_case True \u00e9rt\u00e9ket kell visszaadjon.\ncheck_dict_case False \u00e9rt\u00e9ket kell visszaadjon.\ncheck_dict_case False \u00e9rt\u00e9ket kell visszaadjon.\ncheck_dict_case False \u00e9rt\u00e9ket kell visszaadjon.\ncheck_dict_case True \u00e9rt\u00e9ket kell visszaadjon.\n    \"\"\"\n",
        "canonical_solution":"    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"
    },
    {
        "prompt":"\ndef count_up_to(n):\n    \"\"\"Val\u00f3s\u00edts meg egy olyan f\u00fcggv\u00e9nyt, amely egy nem negat\u00edv eg\u00e9sz sz\u00e1mot vesz \u00e1t, \u00e9s visszaad egy t\u00f6mb\u00f6t az els\u0151 n pr\u00edmsz\u00e1mmal, amelyek kisebbek n-n\u00e9l.\n    p\u00e9ld\u00e1ul:\n    count_up_to => [2,3]\n    count_up_to => [2,3,5,7]\n    count_up_to => []\n    count_up_to => [2,3,5,7,11,13,17,19]\n    count_up_to => []\n    count_up_to => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "canonical_solution":"    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"
    },
    {
        "prompt":"\ndef multiply(a, b):\n    \"\"\"Eg\u00e9sz\u00edtse ki a f\u00fcggv\u00e9nyt, amely k\u00e9t eg\u00e9sz sz\u00e1mot vesz be, \u00e9s visszaadja a sz\u00e1mok utols\u00f3 sz\u00e1mjegyeinek szorzat\u00e1t.\n    Felt\u00e9telezz\u00fck, hogy a bemenet mindig \u00e9rv\u00e9nyes.\n    P\u00e9ld\u00e1k:\n    multiply vissza kell adnia 16-ot.\n    multiply vissza kell adnia 72-t.\n    multiply vissza kell adnia 0-t.\n    multiply vissza kell adnia 20-t.\n    \"\"\"\n",
        "canonical_solution":"    return abs(a % 10) * abs(b % 10)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n"
    },
    {
        "prompt":"\ndef count_upper(s):\n    \"\"\"\n    Adott egy s karakterl\u00e1nc, sz\u00e1mold meg a nagybet\u0171s mag\u00e1nhangz\u00f3kat a p\u00e1ros indexeken.\n\n    P\u00e9ld\u00e1ul:\n    count_upper 1-et ad vissza\n    count_upper 0-t ad vissza\n    count_upper 0-t ad vissza\n    \"\"\"\n",
        "canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For Exampleclosest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "canonical_solution":"    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n"
    },
    {
        "prompt":"\ndef make_a_pile(n):\n    \"\"\"\n    Adott egy pozit\u00edv eg\u00e9sz sz\u00e1m n, egy n szintes k\u0151rak\u00e1st kell k\u00e9sz\u00edtened.\n    Az els\u0151 szinten n k\u0151 van.\n    A k\u00f6vetkez\u0151 szint k\u00f6veinek sz\u00e1ma:\n        - a k\u00f6vetkez\u0151 p\u00e1ratlan sz\u00e1m, ha n p\u00e1ratlan.\n        - a k\u00f6vetkez\u0151 p\u00e1ros sz\u00e1m, ha n p\u00e1ros.\n    Add vissza a k\u00f6vek sz\u00e1m\u00e1t minden szinten egy list\u00e1ban, ahol az i. index\u0171 elem az. szint k\u00f6veinek sz\u00e1m\u00e1t jelenti.\n\n    P\u00e9ld\u00e1k:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    return [n + 2*i for i in range(n)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef words_string(s):\n    \"\"\"\n    \u00d6n egy szavakb\u00f3l \u00e1ll\u00f3 karakterl\u00e1ncot fog kapni, amely vessz\u0151kkel vagy sz\u00f3k\u00f6z\u00f6kkel van elv\u00e1lasztva. Az \u00d6n feladata az, hogy a karakterl\u00e1ncot szavakra bontsa \u00e9s egy t\u00f6mbk\u00e9nt adja vissza.\n\nP\u00e9ld\u00e1ul:\nwords_string == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "canonical_solution":"    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n"
    },
    {
        "prompt":"\ndef choose_num(x, y):\n    \"\"\"Ez a f\u00fcggv\u00e9ny k\u00e9t pozit\u00edv sz\u00e1mot, x-et \u00e9s y-t fogad, \u00e9s visszat\u00e9r\u00edti a legnagyobb p\u00e1ros eg\u00e9sz sz\u00e1mot, amely az [x, y] tartom\u00e1nyban tal\u00e1lhat\u00f3, bele\u00e9rtve a hat\u00e1r\u00e9rt\u00e9keket is. Ha nincs ilyen sz\u00e1m, akkor a f\u00fcggv\u00e9ny -1-et ad vissza.\n\nP\u00e9ld\u00e1ul:\nchoose_num = 14\nchoose_num = -1\n    \"\"\"\n",
        "canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"
    },
    {
        "prompt":"\ndef rounded_avg(n, m):\n    \"\"\"K\u00e9t pozit\u00edv eg\u00e9sz sz\u00e1mot, n-t \u00e9s m-et kapunk meg, \u00e9s a feladat az, hogy kisz\u00e1m\u00edtsuk az n-t\u0151l m-ig terjed\u0151 sz\u00e1mok \u00e1tlag\u00e1t. Kerek\u00edts\u00fck az eredm\u00e9nyt a legk\u00f6zelebbi eg\u00e9sz sz\u00e1mra, \u00e9s konvert\u00e1ljuk bin\u00e1ris form\u00e1tumba. Ha n nagyobb, mint m, akkor t\u00e9rj\u00fcnk vissza -1 \u00e9rt\u00e9kkel.\nP\u00e9ld\u00e1k:\nrounded_avg => \"0b11\"\nrounded_avg => -1\nrounded_avg => \"0b1111\"\nrounded_avg => \"0b11010\"\n    \"\"\"\n",
        "canonical_solution":"    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation\/(m - n + 1)))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n"
    },
    {
        "prompt":"\ndef unique_digits(x):\n    \"\"\"Adott egy pozit\u00edv eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 lista x. Adj vissza egy rendezett list\u00e1t azokb\u00f3l az elemekb\u0151l, amelyekben nincs p\u00e1ros sz\u00e1mjegy.\n\n    Megjegyz\u00e9s: A visszaadott list\u00e1nak n\u00f6vekv\u0151 sorrendben kell lennie.\n\n    P\u00e9ld\u00e1ul:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef by_length(arr):\n    \"\"\"\n    Adott egy eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 t\u00f6mb, rendezd a 1 \u00e9s 9 k\u00f6z\u00f6tti sz\u00e1mokat, ford\u00edtsd meg a kapott t\u00f6mb\u00f6t, majd cser\u00e9ld ki minden sz\u00e1mjegyet a megfelel\u0151 n\u00e9vre az al\u00e1bbiak szerint: \"Egy\", \"Kett\u0151\", \"H\u00e1rom\", \"N\u00e9gy\", \"\u00d6t\", \"Hat\", \"H\u00e9t\", \"Nyolc\", \"Kilenc\".\n\nP\u00e9ld\u00e1ul:\n  t\u00f6mb = [2, 1, 1, 4, 5, 8, 2, 3] \n        -> rendezd a t\u00f6mb\u00f6t -> [1, 1, 2, 2, 3, 4, 5, 8]\n        -> ford\u00edtsd meg a t\u00f6mb\u00f6t -> [8, 5, 4, 3, 2, 2, 1, 1]\n  visszaadott \u00e9rt\u00e9k [\"Nyolc\", \"\u00d6t\", \"N\u00e9gy\", \"H\u00e1rom\", \"Kett\u0151\", \"Kett\u0151\", \"Egy\", \"Egy\"]\n\n  Ha a t\u00f6mb \u00fcres, t\u00e9rj vissza egy \u00fcres t\u00f6mbbel:\n  t\u00f6mb = []\n  visszaadott \u00e9rt\u00e9k []\n\n  Ha a t\u00f6mb b\u00e1rmilyen furcsa sz\u00e1mot tartalmaz, hagyd figyelmen k\u00edv\u00fcl:\n  t\u00f6mb = [1, -1, 55] \n        -> rendezd a t\u00f6mb\u00f6t -> [-1, 1, 55]\n        -> ford\u00edtsd meg a t\u00f6mb\u00f6t -> [55, 1, -1]\n  visszaadott \u00e9rt\u00e9k = ['Egy']\n    \"\"\"\n",
        "canonical_solution":"    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n"
    },
    {
        "prompt":"\ndef f(n):\n    \"\"\" Val\u00f3s\u00edtsd meg az f f\u00fcggv\u00e9nyt, amely n param\u00e9tert kap, \u00e9s egy n m\u00e9ret\u0171 list\u00e1t ad vissza. A lista i index\u00e9n l\u00e9v\u0151 elem \u00e9rt\u00e9ke i faktori\u00e1lisa, ha i p\u00e1ros, \u00e9s az 1-t\u0151l i-ig terjed\u0151 sz\u00e1mok \u00f6sszege, ha i p\u00e1ratlan. i \u00e9rt\u00e9ke 1-t\u0151l kezd\u0151dik. Az i faktori\u00e1lisa az 1-t\u0151l i-ig terjed\u0151 sz\u00e1mok szorzata.\n\nP\u00e9lda:\nf == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "canonical_solution":"    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n"
    },
    {
        "prompt":"\ndef even_odd_palindrome(n):\n    \"\"\"\n    Adott egy pozit\u00edv eg\u00e9sz sz\u00e1m n, adj vissza egy olyan tuple-t, amely tartalmazza a p\u00e1ros \u00e9s p\u00e1ratlan\n    eg\u00e9sz sz\u00e1m palindr\u00f3m\u00e1k sz\u00e1m\u00e1t, amelyek a tartom\u00e1ny-en bel\u00fcl vannak, bele\u00e9rtve.\n\n    P\u00e9lda1:\n\n        Bemenet: 3\n        Kimenet:\n        Magyar\u00e1zat:\n        Az eg\u00e9sz sz\u00e1m palindr\u00f3m\u00e1k 1, 2, 3. Ebb\u0151l egy p\u00e1ros, \u00e9s kett\u0151 p\u00e1ratlan.\n\n    P\u00e9lda2:\n\n        Bemenet: 12\n        Kimenet:\n        Magyar\u00e1zat:\n        Az eg\u00e9sz sz\u00e1m palindr\u00f3m\u00e1k 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Ebb\u0151l n\u00e9gy p\u00e1ros, \u00e9s hat p\u00e1ratlan.\n\n    Megjegyz\u00e9s:\n        1. 1 <= n <= 10^3\n        2. A visszaadott tuple tartalmazza a p\u00e1ros \u00e9s p\u00e1ratlan eg\u00e9sz sz\u00e1m palindr\u00f3m\u00e1k sz\u00e1m\u00e1t.\n    \"\"\"\n",
        "canonical_solution":"    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef count_nums(arr):\n    \"\"\"\n    \u00cdrj egy count_nums nev\u0171 f\u00fcggv\u00e9nyt, amely egy eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 t\u00f6mb\u00f6t vesz \u00e1t, \u00e9s visszaadja azoknak az elemeknek a sz\u00e1m\u00e1t, amelyek sz\u00e1mjegyeinek \u00f6sszege nagyobb, mint 0.\n    Ha egy sz\u00e1m negat\u00edv, akkor az els\u0151 el\u0151jeles sz\u00e1mjegye negat\u00edv lesz:\n    pl. -123 el\u0151jeles sz\u00e1mjegyei: -1, 2 \u00e9s 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef move_one_ball(arr):\n    \"\"\"Van egy 'arr' nev\u0171 t\u00f6mb\u00fcnk N eg\u00e9sz sz\u00e1mmal: arr[1], arr[2], ..., arr[N]. A\nsz\u00e1mok a t\u00f6mbben v\u00e9letlenszer\u0171 sorrendben lesznek. Az \u00d6n feladata annak meghat\u00e1roz\u00e1sa,\nhogy lehets\u00e9ges-e a t\u00f6mb\u00f6t nem cs\u00f6kken\u0151 sorrendbe rendezni az al\u00e1bbi m\u0171velet\nelv\u00e9gz\u00e9s\u00e9vel a megadott t\u00f6mb\u00f6n:\n    B\u00e1rmennyi jobbra tol\u00e1s m\u0171veletet v\u00e9gezhet\u00fcnk.\n\nEgy jobbra tol\u00e1s m\u0171velet azt jelenti, hogy a t\u00f6mb \u00f6sszes elem\u00e9t egy poz\u00edci\u00f3val\njobbra toljuk. A t\u00f6mb utols\u00f3 eleme az els\u0151 poz\u00edci\u00f3ba ker\u00fcl, azaz a 0. indexre.\n\nHa lehets\u00e9ges a rendezett t\u00f6mb\u00f6t el\u00e9rni a fenti m\u0171velet elv\u00e9gz\u00e9s\u00e9vel,\nakkor t\u00e9rjen vissza Igaz \u00e9rt\u00e9kkel, k\u00fcl\u00f6nben Hamis \u00e9rt\u00e9kkel.\nHa a megadott t\u00f6mb \u00fcres, akkor t\u00e9rjen vissza Igaz \u00e9rt\u00e9kkel.\n\nMegjegyz\u00e9s: Garant\u00e1lt, hogy a megadott lista egyedi elemeket tartalmaz.\n\nP\u00e9ld\u00e1k:\n\nmove_one_ball==>Igaz\nMagyar\u00e1zat: 2 jobbra tol\u00e1s m\u0171velet elv\u00e9gz\u00e9s\u00e9vel a megadott t\u00f6mb nem cs\u00f6kken\u0151\n            sorrendje el\u00e9rhet\u0151.\nmove_one_ball==>Hamis\nMagyar\u00e1zat: Nem lehets\u00e9ges a nem cs\u00f6kken\u0151 sorrendet el\u00e9rni a megadott\n            t\u00f6mb\u00f6n b\u00e1rmennyi jobbra tol\u00e1s m\u0171velet elv\u00e9gz\u00e9s\u00e9vel.\n                \n    \"\"\"\n",
        "canonical_solution":"    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n"
    },
    {
        "prompt":"\ndef exchange(lst1, lst2):\n    \"\"\"Ebben a feladatban egy olyan f\u00fcggv\u00e9nyt kell megval\u00f3s\u00edtanod, amely k\u00e9t sz\u00e1mokb\u00f3l \u00e1ll\u00f3 list\u00e1t fogad, \u00e9s meghat\u00e1rozza, hogy lehets\u00e9ges-e elemek cser\u00e9je k\u00f6z\u00f6tt\u00fck annak \u00e9rdek\u00e9ben, hogy az lst1 csak p\u00e1ros sz\u00e1mokat tartalmazzon. Az elemek cser\u00e9j\u00e9nek sz\u00e1m\u00e1t nem korl\u00e1tozzuk az lst1 \u00e9s lst2 k\u00f6z\u00f6tt. Ha lehets\u00e9ges az elemek cser\u00e9je az lst1 \u00e9s lst2 k\u00f6z\u00f6tt \u00fagy, hogy az lst1 \u00f6sszes eleme p\u00e1ros legyen, akkor t\u00e9rj vissza \"IGEN\"-nel. Ellenkez\u0151 esetben t\u00e9rj vissza \"NEM\"-mel. P\u00e9ld\u00e1ul:\nexchange => \"IGEN\"\nexchange => \"NEM\"\nFelt\u00e9telezz\u00fck, hogy a bemeneti list\u00e1k nem lesznek \u00fcresek.\n    \"\"\"\n",
        "canonical_solution":"    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"
    },
    {
        "prompt":"\ndef histogram(test):\n    \"\"\"Adott egy sz\u00f3k\u00f6zzel elv\u00e1lasztott kisbet\u0171ket tartalmaz\u00f3 karakterl\u00e1nc, t\u00e9rj vissza egy sz\u00f3t\u00e1rral, amely tartalmazza a legt\u00f6bbsz\u00f6r el\u0151fordul\u00f3 bet\u0171t \u00e9s a megfelel\u0151 sz\u00e1ml\u00e1l\u00f3t. Ha t\u00f6bb bet\u0171 is ugyanannyiszor fordul el\u0151, mindet vissza kell adni.\n\nP\u00e9ld\u00e1k:\nhistogram == {'a': 1, 'b': 1, 'c': 1}\nhistogram == {'a': 2, 'b': 2}\nhistogram == {'a': 2, 'b': 2}\nhistogram == {'b': 4}\nhistogram == {}\n\n    \"\"\"\n",
        "canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef reverse_delete(s,c):\n    \"\"\"Feladat\n    Adva van k\u00e9t sztring, s \u00e9s c, el kell t\u00e1vol\u00edtanod minden olyan karaktert s-b\u0151l, amely megegyezik b\u00e1rmely karakterrel c-ben,\n    majd ellen\u0151rizned kell, hogy az eredm\u00e9ny sztring palindr\u00f3m-e.\n    Egy sztringet akkor nevez\u00fcnk palindr\u00f3mnak, ha el\u0151lr\u0151l h\u00e1trafel\u00e9 olvasva ugyanaz, mint h\u00e1tulr\u00f3l el\u0151re.\n    Egy olyan tuple-t kell visszaadnod, amely tartalmazza az eredm\u00e9ny sztringet \u00e9s az ellen\u0151rz\u00e9s eredm\u00e9ny\u00e9t.\n    P\u00e9lda\n    Ha s = \"abcde\", c = \"ae\", az eredm\u00e9ny kell legyen.\n    Ha s = \"abcdef\", c = \"b\", az eredm\u00e9ny kell legyen.\n    Ha s = \"abcdedcba\", c = \"ab\", az eredm\u00e9ny kell legyen.\n    \"\"\"\n",
        "canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"
    },
    {
        "prompt":"\ndef odd_count(lst):\n    \"\"\"Adott egy karakterl\u00e1ncok list\u00e1ja, ahol minden karakterl\u00e1nc csak sz\u00e1mjegyekb\u0151l \u00e1ll, vissza kell adni egy list\u00e1t. A kimenet minden i-edik eleme legyen \"az i-edik bemeneti karakterl\u00e1ncban l\u00e9v\u0151 p\u00e1ratlan elemek sz\u00e1ma\", ahol az \u00f6sszes i-t le kell cser\u00e9lni az i-edik bemeneti karakterl\u00e1ncban l\u00e9v\u0151 p\u00e1ratlan sz\u00e1mjegyek sz\u00e1m\u00e1ra.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "canonical_solution":"    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minSubArraySum(nums):\n    \"\"\"\n    Adott egy eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 t\u00f6mb, nums, keresse meg b\u00e1rmely nem \u00fcres r\u00e9sz-t\u00f6mb legkisebb \u00f6sszeg\u00e9t a nums-ban.\nP\u00e9lda:\nminSubArraySum == 1\nminSubArraySum == -6\n    \"\"\"\n",
        "canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"
    },
    {
        "prompt":"\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    Az al\u00e1bbi mondatot ford\u00edtsd le magyarra.\n\nN\u00e9gyzetes elrendez\u00e9s\u0171 kutak egy r\u00e1cs\u00e1t kapod meg. Minden sor egyetlen kutat k\u00e9pvisel,\n\u00e9s minden 1 egy sorban egyetlen v\u00edzegys\u00e9get jelent.\nMinden k\u00fatnak van egy megfelel\u0151 v\u00f6dre, amelyet a v\u00edz kivon\u00e1s\u00e1ra lehet haszn\u00e1lni,\n\u00e9s minden v\u00f6d\u00f6rnek azonos kapacit\u00e1sa van.\nA feladatod az, hogy a v\u00f6dr\u00f6kkel ki\u00fcr\u00edtsd a kutakat.\nAdd meg, hogy h\u00e1nyszor kell leengedned a v\u00f6dr\u00f6ket.\n\n1. p\u00e9lda:\n    Bemenet:\n        r\u00e1cs: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        v\u00f6d\u00f6r kapacit\u00e1sa: 1\n    Kimenet: 6\n\n2. p\u00e9lda:\n    Bemenet:\n        r\u00e1cs: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        v\u00f6d\u00f6r kapacit\u00e1sa: 2\n    Kimenet: 5\n\n3. p\u00e9lda:\n    Bemenet:\n        r\u00e1cs: [[0,0,0], [0,0,0]]\n        v\u00f6d\u00f6r kapacit\u00e1sa: 5\n    Kimenet: 0\n\nKorl\u00e1toz\u00e1sok:\n    * minden k\u00fat azonos hossz\u00fas\u00e1g\u00fa\n    * 1 <= r\u00e1cs hossza <= 10^2\n    * 1 <= r\u00e1cs[:,1]. hossza <= 10^2\n    * r\u00e1cs[i][j] -> 0 | 1\n    * 1 <= kapacit\u00e1s <= 10\n    \"\"\"\n",
        "canonical_solution":"    return sum([math.ceil(sum(arr)\/capacity) for arr in grid])\n",
        "test":"def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef sort_array(arr):\n    \"\"\"\n    Ebben a Kat\u00e1ban egy t\u00f6mb\u00f6t nem-negat\u00edv eg\u00e9sz sz\u00e1mokb\u00f3l kell rendezni a bin\u00e1ris \u00e1br\u00e1zol\u00e1sukban tal\u00e1lhat\u00f3 egyesek sz\u00e1ma szerint n\u00f6vekv\u0151 sorrendben. Ha az egyesek sz\u00e1ma megegyezik, akkor a tizedes \u00e9rt\u00e9k alapj\u00e1n kell rendezni.\n\n\u00dagy kell megval\u00f3s\u00edtani, mint ez:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef select_words(s, n):\n    \"\"\"Adott egy s karakterl\u00e1nc \u00e9s egy term\u00e9szetes sz\u00e1m n, \u00e9s az a feladatod, hogy \n    egy olyan f\u00fcggv\u00e9nyt val\u00f3s\u00edts meg, amely visszaadja az s karakterl\u00e1ncb\u00f3l az \n    \u00f6sszes olyan sz\u00f3 list\u00e1j\u00e1t, amelyek pontosan n m\u00e1ssalhangz\u00f3t tartalmaznak, \n    abban a sorrendben, ahogyan ezek a szavak az s karakterl\u00e1ncban megjelennek.\n    Ha az s karakterl\u00e1nc \u00fcres, akkor a f\u00fcggv\u00e9nynek egy \u00fcres list\u00e1t kell visszaadnia.\n    Megjegyz\u00e9s: felt\u00e9telezheted, hogy a bemeneti karakterl\u00e1nc csak bet\u0171ket \u00e9s \n    sz\u00f3k\u00f6z\u00f6ket tartalmaz.\n    P\u00e9ld\u00e1k:\n    select_words ==> [\"little\"]\n    select_words ==> [\"Mary\", \"lamb\"]\n    select_words ==> []\n    select_words ==> [\"world\"]\n    select_words ==> [\"Uncle\"]\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"
    },
    {
        "prompt":"\ndef get_closest_vowel(word):\n    \"\"\"A k\u00f6vetkez\u0151 mondatot ford\u00edtsd le magyarra:\n\nAdott egy sz\u00f3. A feladatod az, hogy megtal\u00e1ld a legk\u00f6zelebbi mag\u00e1nhangz\u00f3t, amely k\u00e9t m\u00e1ssalhangz\u00f3 k\u00f6z\u00f6tt \u00e1ll a sz\u00f3 jobb oldal\u00e1r\u00f3l n\u00e9zve.\n\nA sz\u00f3 elej\u00e9n \u00e9s v\u00e9g\u00e9n l\u00e9v\u0151 mag\u00e1nhangz\u00f3k nem sz\u00e1m\u00edtanak. \u00dcres karakterl\u00e1ncot adj vissza, ha nem tal\u00e1lsz olyan mag\u00e1nhangz\u00f3t, amely megfelel a fenti felt\u00e9telnek.\n\nFelt\u00e9telezheted, hogy az adott karakterl\u00e1nc csak angol bet\u0171ket tartalmaz.\n\nP\u00e9lda:\nget_closest_vowel ==> \"u\"\nget_closest_vowel ==> \"U\"\nget_closest_vowel ==> \"\"\nget_closest_vowel ==> \"\"\n    \"\"\"\n",
        "canonical_solution":"    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "canonical_solution":"    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n"
    },
    {
        "prompt":"\ndef maximum(arr, k):\n    \"\"\"\n    Adott egy arr nev\u0171 eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 t\u00f6mb \u00e9s egy pozit\u00edv k eg\u00e9sz sz\u00e1m, t\u00e9rj vissza egy rendezett list\u00e1val, amely hossza k \u00e9s az arr t\u00f6mb legnagyobb k sz\u00e1m\u00e1t tartalmazza.\n\n    P\u00e9lda1:\n\n        Bemenet: arr = [-3, -4, 5], k = 3\n        Kimenet: [-4, -3, 5]\n\n    P\u00e9lda2:\n\n        Bemenet: arr = [4, -4, 4], k = 2\n        Kimenet: [4, 4]\n\n    P\u00e9lda3:\n\n        Bemenet: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Kimenet: [2]\n\n    Megjegyz\u00e9s:\n        1. A t\u00f6mb hossza [1, 1000] tartom\u00e1nyban lesz.\n        2. A t\u00f6mb elemei [-1000, 1000] tartom\u00e1nyban lesznek.\n        3. 0 <= k <= len\n    \"\"\"\n",
        "canonical_solution":"    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n"
    },
    {
        "prompt":"\ndef solution(lst):\n    \"\"\"Adott egy nem \u00fcres eg\u00e9sz sz\u00e1mokb\u00f3l \u00e1ll\u00f3 lista, add vissza az \u00f6sszes olyan p\u00e1ratlan elem \u00f6sszeg\u00e9t, amelyek p\u00e1ros poz\u00edci\u00f3kban vannak.\n\nP\u00e9ld\u00e1k:\nsolution ==> 12\nsolution ==> 9\nsolution ==> 0\n    \"\"\"\n",
        "canonical_solution":"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"
    },
    {
        "prompt":"\ndef add_elements(arr, k):\n    \"\"\"\n    Adott egy nem \u00fcres eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 t\u00f6mb, arr \u00e9s egy eg\u00e9sz sz\u00e1m, k. Add vissza azon elemek \u00f6sszeg\u00e9t, amelyek legfeljebb k\u00e9tjegy\u0171ek az arr els\u0151 k elem\u00e9b\u0151l.\n\nP\u00e9lda:\n\n    Bemenet: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Kimenet: 24 # az \u00f6sszeg 21 + 3\n\nFelt\u00e9telek:\n    1. 1 <= len <= 100\n    2. 1 <= k <= len\n    \"\"\"\n",
        "canonical_solution":"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef get_odd_collatz(n):\n    \"\"\"\n    Adjon meg egy pozit\u00edv eg\u00e9sz sz\u00e1mot n, \u00e9s adjon vissza egy rendezett list\u00e1t, amely tartalmazza a p\u00e1ratlan sz\u00e1mokat a Collatz-sorozatban.\n\n    A Collatz-sejt\u00e9s egy matematikai sejt\u00e9s, amely egy k\u00f6vetkez\u0151k\u00e9ppen defini\u00e1lt sorozattal \n    foglalkozik: kezdj\u00fcnk b\u00e1rmely pozit\u00edv eg\u00e9sz sz\u00e1mmal n. Ezut\u00e1n minden tag az el\u0151z\u0151 \n    tagb\u00f3l sz\u00e1rmazik a k\u00f6vetkez\u0151k\u00e9ppen: ha az el\u0151z\u0151 tag p\u00e1ros, akkor a k\u00f6vetkez\u0151 tag az \n    el\u0151z\u0151 tag fele. Ha az el\u0151z\u0151 tag p\u00e1ratlan, akkor a k\u00f6vetkez\u0151 tag az el\u0151z\u0151 tag h\u00e1romszorosa \n    plusz egy. A sejt\u00e9s az, hogy az n \u00e9rt\u00e9k\u00e9t\u0151l f\u00fcggetlen\u00fcl a sorozat mindig el\u00e9ri az 1-et.\n\n    Megjegyz\u00e9s:\n        1. Collatz [1].\n        2. a visszaadott lista n\u00f6vekv\u0151 sorrendben rendezett.\n\n    P\u00e9ld\u00e1ul:\n    get_odd_collatz visszaadja [1, 5] # Az 5 Collatz-sorozata [5, 16, 8, 4, 2, 1], \u00edgy a p\u00e1ratlan sz\u00e1mok csak 1 \u00e9s 5.\n    \"\"\"\n",
        "canonical_solution":"    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n\/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef valid_date(date):\n    \"\"\"\u00cdrnod kell egy f\u00fcggv\u00e9nyt, amely \u00e9rv\u00e9nyes\u00edti a megadott d\u00e1tum stringet, \u00e9s\n    visszaadja True \u00e9rt\u00e9ket, ha a d\u00e1tum \u00e9rv\u00e9nyes, k\u00fcl\u00f6nben False \u00e9rt\u00e9ket.\n    A d\u00e1tum \u00e9rv\u00e9nyes, ha az al\u00e1bbi szab\u00e1lyok mindegyike teljes\u00fcl:\n    1. A d\u00e1tum string nem \u00fcres.\n    2. A napok sz\u00e1ma nem lehet kevesebb, mint 1 vagy nagyobb, mint 31 a 1,3,5,7,8,10,12 h\u00f3napokban. \u00c9s a napok sz\u00e1ma nem lehet kevesebb, mint 1 vagy nagyobb, mint 30 a 4,6,9,11 h\u00f3napokban. \u00c9s a napok sz\u00e1ma nem lehet kevesebb, mint 1 vagy nagyobb, mint 29 a 2 h\u00f3napban.\n    3. A h\u00f3napok sz\u00e1ma nem lehet kevesebb, mint 1 vagy nagyobb, mint 12.\n    4. A d\u00e1tumnak az al\u00e1bbi form\u00e1tumban kell lennie: mm-nn-yyyy\n\n    p\u00e9ld\u00e1ul: \n    valid_date => True\n\n    valid_date => False\n\n    valid_date => False\n\n    valid_date => True\n\n    valid_date => False\n    \"\"\"\n",
        "canonical_solution":"    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n"
    },
    {
        "prompt":"\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"
    },
    {
        "prompt":"\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5]) \u00e2 -> False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u00e2 -> False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u00e2 -> True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u00e2 -> False\n    '''\n",
        "canonical_solution":"    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef intersection(interval1, interval2):\n    \"\"\"\u00cdme a mondat magyar ford\u00edt\u00e1sa:\n\nK\u00e9t intervallumot kapunk, ahol minden intervallum egy eg\u00e9sz sz\u00e1mokb\u00f3l \u00e1ll\u00f3 p\u00e1r. P\u00e9ld\u00e1ul, intervallum = =. A megadott intervallumok z\u00e1rtak, ami azt jelenti, hogy az intervallum tartalmazza mind a kezd\u0151t, mind a v\u00e9get. Minden megadott intervallum eset\u00e9n felt\u00e9telezz\u00fck, hogy a kezd\u0151 \u00e9rt\u00e9ke kisebb vagy egyenl\u0151 a v\u00e9g \u00e9rt\u00e9k\u00e9vel. A feladatod az, hogy meghat\u00e1rozd, hogy a k\u00e9t intervallum metszet\u00e9nek hossza pr\u00edm sz\u00e1m-e. P\u00e9ld\u00e1ul, az intervallumok \u00e9s metszete, amelynek hossza 1, ami nem pr\u00edm sz\u00e1m. Ha a metszet hossza pr\u00edm sz\u00e1m, akkor \"IGEN\"-t kell visszaadni, k\u00fcl\u00f6nben \"NEM\"-et. Ha a k\u00e9t intervallum nem metszi egym\u00e1st, akkor is \"NEM\"-et kell visszaadni.\n\n[input\/output] p\u00e9ld\u00e1k:\nmetszet,) ==> \"NEM\"\nmetszet,) ==> \"NEM\"\nmetszet,) ==> \"IGEN\"\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n"
    },
    {
        "prompt":"\ndef prod_signs(arr):\n    \"\"\"\n    Egy arr nev\u0171 t\u00f6mb\u00f6t kapsz, amely eg\u00e9sz sz\u00e1mokat tartalmaz, \u00e9s vissza kell adnod\n    az eg\u00e9sz sz\u00e1mok abszol\u00fat \u00e9rt\u00e9keinek \u00f6sszeg\u00e9t, megszorozva az \u00f6sszes sz\u00e1m,\n    a t\u00f6mbben tal\u00e1lhat\u00f3 sz\u00e1mok el\u0151jeles szorzat\u00e1val, amelyeket 1, -1 vagy 0 k\u00e9pvisel.\n    Megjegyz\u00e9s: \u00fcres t\u00f6mb eset\u00e9n None-t adj vissza.\n\n    P\u00e9lda:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "canonical_solution":"    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minPath(grid, k):\n    \"\"\"\n    Adott egy N sorb\u00f3l \u00e9s N oszlopb\u00f3l \u00e1ll\u00f3 r\u00e1cs \u00e9s egy pozit\u00edv eg\u00e9sz sz\u00e1m k, \n    a r\u00e1cs minden cell\u00e1ja tartalmaz egy \u00e9rt\u00e9ket. Az [1, N * N] tartom\u00e1nyban l\u00e9v\u0151\n    minden eg\u00e9sz sz\u00e1m pontosan egyszer jelenik meg a r\u00e1cs cell\u00e1iban.\n\n    Meg kell tal\u00e1lnod a minim\u00e1lis hossz\u00fas\u00e1g\u00fa k utat a r\u00e1csban. B\u00e1rmely cell\u00e1b\u00f3l\n    kezdheted, \u00e9s minden l\u00e9p\u00e9sben b\u00e1rmelyik szomsz\u00e9dos cell\u00e1ba l\u00e9phetsz,\n    m\u00e1s sz\u00f3val, olyan cell\u00e1kba mehetsz, amelyek \u00e9llel osztoznak az aktu\u00e1lis\n    cell\u00e1ddal.\n    K\u00e9rlek, vedd figyelembe, hogy a k hossz\u00fas\u00e1g\u00fa \u00fat pontosan k cella\n    megl\u00e1togat\u00e1s\u00e1t jelenti.\n    A r\u00e1csb\u00f3l nem l\u00e9phetsz ki.\n    Egy A \u00fatvonal kisebbnek sz\u00e1m\u00edt egy B \u00fatvonaln\u00e1l,\n    ha miut\u00e1n l\u00e9trehoztuk az A \u00e9s B \u00fatvonalon v\u00e9gighalad\u00f3 cell\u00e1k \u00e9rt\u00e9keinek rendezett list\u00e1j\u00e1t, lst_A lexikografikusan kisebb, mint lst_B,\n    m\u00e1s sz\u00f3val l\u00e9tezik egy i eg\u00e9sz index, amelyre igaz, hogy lst_A[i] < lst_B[i],\n    \u00e9s b\u00e1rmely j eset\u00e9n lst_A[j] = lst_B[j].\n    Garant\u00e1lt, hogy a v\u00e1lasz egyedi.\n    Adj vissza egy rendezett list\u00e1t a cell\u00e1k \u00e9rt\u00e9keir\u0151l, amelyeken a minim\u00e1lis \u00fat v\u00e9gighalad.\n\n    P\u00e9ld\u00e1k:\n\n        Bemenet: r\u00e1cs = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Kimenet: [1, 2, 1]\n\n        Bemenet: r\u00e1cs = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Kimenet: [1]\n    \"\"\"\n",
        "canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"
    },
    {
        "prompt":"\ndef tri(n):\n    \"\"\"Mindenki ismeri a Fibonacci-sorozatot, amelyet az elm\u00falt p\u00e1r \u00e9vsz\u00e1zadban alaposan tanulm\u00e1nyoztak a matematikusok. Azonban, amit az emberek nem ismernek, az a Tribonacci-sorozat. A Tribonacci-sorozatot a k\u00f6vetkez\u0151 rekurzi\u00f3 hat\u00e1rozza meg:\ntri = 3\ntri = 1 + n \/ 2, ha n p\u00e1ros.\ntri = tri + tri + tri, ha n p\u00e1ratlan.\nP\u00e9ld\u00e1ul:\ntri = 1 + = 2\ntri = 3\ntri = tri + tri + tri\n       = 2 + 3 + 3 = 8\nAdva van egy nem-negat\u00edv eg\u00e9sz sz\u00e1m n, vissza kell adnod a Tribonacci-sorozat els\u0151 n + 1 sz\u00e1m\u00e1t.\nP\u00e9ld\u00e1k:\ntri = [1, 3, 2, 8]\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i \/ 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) \/ 2)\n    return my_tri\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"
    },
    {
        "prompt":"\ndef digits(n):\n    \"\"\"Adott egy pozit\u00edv eg\u00e9sz sz\u00e1m n, add vissza a p\u00e1ratlan sz\u00e1mjegyek szorzat\u00e1t.\n    Add vissza 0-t, ha minden sz\u00e1mjegy p\u00e1ros.\n    P\u00e9ld\u00e1ul:\n    digits  == 1\n    digits  == 0\n    digits == 15\n    \"\"\"\n",
        "canonical_solution":"    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n"
    },
    {
        "prompt":"\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u00e2 -> True\n    is_nested('[]]]]]]][[[[[]') \u00e2 -> False\n    is_nested('[][]') \u00e2 -> False\n    is_nested('[]') \u00e2 -> False\n    is_nested('[[][]]') \u00e2 -> True\n    is_nested('[[]][[') \u00e2 -> True\n    '''\n",
        "canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"
    },
    {
        "prompt":"\n\ndef sum_squares(lst):\n    \"\"\"Itt van egy sz\u00e1mokb\u00f3l \u00e1ll\u00f3 lista.\n    Vissza kell adnod a list\u00e1ban szerepl\u0151 sz\u00e1mok n\u00e9gyzet\u00e9nek \u00f6sszeg\u00e9t,\n    el\u0151sz\u00f6r minden elemet a legk\u00f6zelebbi eg\u00e9sz sz\u00e1mra kell kerek\u00edteni.\n    P\u00e9ld\u00e1k:\n    Ha a lista [1,2,3], az eredm\u00e9ny 14 kell legyen.\n    Ha a lista [1,4,9], az eredm\u00e9ny 98 kell legyen.\n    Ha a lista [1,3,5,7], az eredm\u00e9ny 84 kell legyen.\n    Ha a lista [1.4,4.2,0], az eredm\u00e9ny 29 kell legyen.\n    Ha a lista [-2.4,1,1], az eredm\u00e9ny 6 kell legyen.\n    \n\n    \"\"\"\n",
        "canonical_solution":"    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u00e2 -> True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"\") \u00e2 -> False \n    '''\n",
        "canonical_solution":" \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef can_arrange(arr):\n    \"\"\"Hozz l\u00e9tre egy f\u00fcggv\u00e9nyt, amely visszaadja annak az elemnek a legnagyobb index\u00e9t, amely nem nagyobb vagy egyenl\u0151 a k\u00f6zvetlen\u00fcl el\u0151tte l\u00e9v\u0151 elemmel. Ha nincs ilyen elem, akkor t\u00e9rjen vissza -1-gyel. A megadott t\u00f6mb nem tartalmaz majd ism\u00e9tl\u0151d\u0151 \u00e9rt\u00e9keket.\n\nP\u00e9ld\u00e1k:\ncan_arrange = 3\ncan_arrange = -1\n    \"\"\"\n",
        "canonical_solution":"    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n"
    },
    {
        "prompt":"\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"
    },
    {
        "prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    \u00cdrj egy f\u00fcggv\u00e9nyt, amely eg\u00e9szeket, lebeg\u0151pontos sz\u00e1mokat vagy val\u00f3s sz\u00e1mokat reprezent\u00e1l\u00f3 karakterl\u00e1ncokat fogad, \u00e9s visszaadja a nagyobb v\u00e1ltoz\u00f3t annak adott v\u00e1ltoz\u00f3 t\u00edpus\u00e1ban. Adjon vissza None-t, ha az \u00e9rt\u00e9kek egyenl\u0151ek.\nMegjegyz\u00e9s: Ha egy val\u00f3s sz\u00e1m karakterl\u00e1nck\u00e9nt van \u00e1br\u00e1zolva, a tizedesjel lehet . vagy ,.\n\ncompare_one -> 2.5\ncompare_one -> \"2,3\"\ncompare_one -> \"6\"\ncompare_one -> None\n    \"\"\"\n",
        "canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_equal_to_sum_even(n):\n    \"\"\"\u00c9rt\u00e9kelje, hogy a megadott n sz\u00e1m \u00edrhat\u00f3-e pontosan 4 pozit\u00edv p\u00e1ros sz\u00e1m \u00f6sszegek\u00e9nt.\n    P\u00e9lda\n    is_equal_to_sum_even == Hamis\n    is_equal_to_sum_even == Hamis\n    is_equal_to_sum_even == Igaz\n    \"\"\"\n",
        "canonical_solution":"    return n%2 == 0 and n >= 8\n",
        "test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"
    },
    {
        "prompt":"\ndef special_factorial(n):\n    \"\"\"A braziliai faktori\u00e1lis a k\u00f6vetkez\u0151k\u00e9ppen van meghat\u00e1rozva:\n    brazilian_factorial = n! *! *! * ... * 1!\n    ahol n > 0\n\n    P\u00e9ld\u00e1ul:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"
    },
    {
        "prompt":"\ndef fix_spaces(text):\n    \"\"\"\n    Adott egy sz\u00f6veg string, cser\u00e9lje le benne az \u00f6sszes sz\u00f3k\u00f6zt al\u00e1h\u00faz\u00e1sra, \u00e9s ha egy stringben t\u00f6bb mint 2 egym\u00e1st k\u00f6vet\u0151 sz\u00f3k\u00f6z van, akkor cser\u00e9lje le az \u00f6sszes egym\u00e1st k\u00f6vet\u0151 sz\u00f3k\u00f6zt k\u00f6t\u0151jelre.\n\nfix_spaces == \"Example\"\nfix_spaces == \"Example_1\"\nfix_spaces == \"_Example_2\"\nfix_spaces == \"_Example-3\"\n    \"\"\"\n",
        "canonical_solution":"    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef file_name_check(file_name):\n    \"\"\"\u00cdrj egy f\u00fcggv\u00e9nyt, amely egy f\u00e1jl nev\u00e9re utal\u00f3 karakterl\u00e1ncot fogad, \u00e9s 'Igen'-t ad vissza, ha a f\u00e1jln\u00e9v \u00e9rv\u00e9nyes, \u00e9s 'Nem'-et, ha nem az.\nEgy f\u00e1jln\u00e9v akkor tekinthet\u0151 \u00e9rv\u00e9nyesnek, ha \u00e9s csak akkor, ha az al\u00e1bbi felt\u00e9telek mind teljes\u00fclnek:\n- A f\u00e1jln\u00e9vben nem lehet h\u00e1romn\u00e1l t\u00f6bb sz\u00e1mjegy.\n- A f\u00e1jln\u00e9v pontosan egy pontot '.' tartalmaz.\n- A pont el\u0151tti r\u00e9sz nem lehet \u00fcres, \u00e9s latin bet\u0171vel kell kezd\u0151dnie.\n- A pont ut\u00e1ni r\u00e9sznek az al\u00e1bbiak egyike kell lennie: ['txt', 'exe', 'dll']\nP\u00e9ld\u00e1k:\nfile_name_check # => 'Igen'\nfile_name_check # => 'Nem'\n    \"\"\"\n",
        "canonical_solution":"    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('\/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n"
    },
    {
        "prompt":"\n\n\ndef sum_squares(lst):\n    \"\"\"Ez a f\u00fcggv\u00e9ny egy eg\u00e9sz sz\u00e1mokat tartalmaz\u00f3 list\u00e1t fogad. A lista \u00f6sszes elem\u00e9re a f\u00fcggv\u00e9ny n\u00e9gyzetre emeli az eg\u00e9sz sz\u00e1mot, ha annak indexe 3 t\u00f6bbsz\u00f6r\u00f6se, \u00e9s k\u00f6bre emeli az eg\u00e9sz sz\u00e1mot, ha annak indexe 4 t\u00f6bbsz\u00f6r\u00f6se, de nem 3 t\u00f6bbsz\u00f6r\u00f6se. A f\u00fcggv\u00e9ny nem v\u00e1ltoztatja meg a lista azon elemeit, amelyek indexe nem 3 vagy 4 t\u00f6bbsz\u00f6r\u00f6se. A f\u00fcggv\u00e9ny ezut\u00e1n visszaadja az \u00f6sszes elem \u00f6sszeg\u00e9t.\n\nP\u00e9ld\u00e1k:\nHa a lst = [1,2,3], akkor a kimenet 6\nHa a lst = [], akkor a kimenet 0\nHa a lst = [-1,-5,2,-1,-5], akkor a kimenet -126\n    \"\"\"\n",
        "canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef words_in_sentence(sentence):\n    \"\"\"\n    Meg van adva egy karakterl\u00e1nc, amely egy mondatot reprezent\u00e1l,\n    a mondat sz\u00f3k\u00f6zzel elv\u00e1lasztott szavakat tartalmaz,\n    \u00e9s vissza kell adnod egy olyan karakterl\u00e1ncot, amely az eredeti mondat szavait tartalmazza,\n    amelyek hossz\u00fas\u00e1ga pr\u00edm sz\u00e1m,\n    az \u00faj karakterl\u00e1ncban a szavak sorrendje ugyanaz legyen, mint az eredeti mondatban.\n\n    P\u00e9lda1:\n        Bemenet: mondat = \"This is a test\"\n        Kimenet: \"is\"\n\n    P\u00e9lda2:\n        Bemenet: mondat = \"lets go for swimming\"\n        Kimenet: \"go for\"\n\n    Korl\u00e1toz\u00e1sok:\n        * 1 <= a mondat hossza <= 100\n        * A mondat csak bet\u0171ket tartalmaz\n    \"\"\"\n",
        "canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"
    },
    {
        "prompt":"\ndef simplify(x, n):\n    \"\"\"Feladatod egy olyan f\u00fcggv\u00e9ny implement\u00e1l\u00e1sa, amely egyszer\u0171s\u00edti a kifejez\u00e9st\n    x * n. A f\u00fcggv\u00e9ny True \u00e9rt\u00e9ket ad vissza, ha x * n eg\u00e9sz sz\u00e1mra \u00e9rt\u00e9kel\u0151dik ki, \u00e9s False \u00e9rt\u00e9ket\n    k\u00fcl\u00f6nben. Mind x, mind n t\u00f6rt form\u00e1j\u00fa karakterl\u00e1ncok, \u00e9s a k\u00f6vetkez\u0151 form\u00e1tum\u00faak,\n    <sz\u00e1ml\u00e1l\u00f3>\/<nevez\u0151>, ahol mind a sz\u00e1ml\u00e1l\u00f3, mind a nevez\u0151 pozit\u00edv eg\u00e9sz sz\u00e1mok.\n\n    Felt\u00e9telezheted, hogy x \u00e9s n \u00e9rv\u00e9nyes t\u00f6rtek, \u00e9s nincs nulla a nevez\u0151ben.\n\n    simplify = True\n    simplify = False\n    simplify = False\n    \"\"\"\n",
        "canonical_solution":"    a, b = x.split(\"\/\")\n    c, d = n.split(\"\/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator\/denom == int(numerator\/denom)):\n        return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test1'\n    assert candidate(\"1\/6\", \"2\/1\") == False, 'test2'\n    assert candidate(\"5\/1\", \"3\/1\") == True, 'test3'\n    assert candidate(\"7\/10\", \"10\/2\") == False, 'test4'\n    assert candidate(\"2\/10\", \"50\/10\") == True, 'test5'\n    assert candidate(\"7\/2\", \"4\/2\") == True, 'test6'\n    assert candidate(\"11\/6\", \"6\/1\") == True, 'test7'\n    assert candidate(\"2\/3\", \"5\/2\") == False, 'test8'\n    assert candidate(\"5\/2\", \"3\/5\") == False, 'test9'\n    assert candidate(\"2\/4\", \"8\/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2\/4\", \"4\/2\") == True, 'test11'\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test12'\n    assert candidate(\"1\/5\", \"1\/5\") == False, 'test13'\n\n"
    },
    {
        "prompt":"\ndef order_by_points(nums):\n    \"\"\"\n    \u00cdrj egy f\u00fcggv\u00e9nyt, amely rendezi a megadott eg\u00e9sz sz\u00e1mok list\u00e1j\u00e1t n\u00f6vekv\u0151 sorrendbe a sz\u00e1mjegyeik \u00f6sszege alapj\u00e1n.\n    Megjegyz\u00e9s: ha t\u00f6bb elemnek hasonl\u00f3 a sz\u00e1mjegyek \u00f6sszege, akkor rendezd \u0151ket az eredeti lista indexe alapj\u00e1n.\n\n    P\u00e9ld\u00e1ul:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef specialFilter(nums):\n    \"\"\"\u00cdrj egy f\u00fcggv\u00e9nyt, amely egy sz\u00e1mokat tartalmaz\u00f3 t\u00f6mb\u00f6t vesz bemenetk\u00e9nt, \u00e9s visszaadja a t\u00f6mbben l\u00e9v\u0151 azon elemek sz\u00e1m\u00e1t, amelyek nagyobbak 10-n\u00e9l, \u00e9s amelyek els\u0151 \u00e9s utols\u00f3 sz\u00e1mjegyei is p\u00e1ratlanok.\nP\u00e9ld\u00e1ul:\nspecialFilter => 1 \nspecialFilter => 2\n    \"\"\"\n",
        "canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"
    },
    {
        "prompt":"\ndef get_max_triples(n):\n    \"\"\"\n    A k\u00f6vetkez\u0151 mondatot ford\u00edtsa le magyarra:\n\n\u00d6n egy pozit\u00edv eg\u00e9sz sz\u00e1mot, n kap. L\u00e9tre kell hoznia egy n hossz\u00fas\u00e1g\u00fa eg\u00e9sz sz\u00e1m t\u00f6mb\u00f6t, a-t.\nMinden i-re, a[i] \u00e9rt\u00e9ke = i * i - i + 1.\nAdja vissza azon h\u00e1rmasok sz\u00e1m\u00e1t a-ban, ahol i < j < k,\n\u00e9s a[i] + a[j] + a[k] oszthat\u00f3 3-mal.\n\nP\u00e9lda:\n    Bemenet: n = 5\n    Kimenet: 1\n    Magyar\u00e1zat:\n    a = [1, 3, 7, 13, 21]\n    Az egyetlen \u00e9rv\u00e9nyes h\u00e1rmas.\n    \"\"\"\n",
        "canonical_solution":"    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n"
    },
    {
        "prompt":"\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"
    },
    {
        "prompt":"\ndef sorted_list_sum(lst):\n    \"\"\"\u00cdrj egy f\u00fcggv\u00e9nyt, amely param\u00e9terk\u00e9nt elfogad egy karakterl\u00e1ncokb\u00f3l \u00e1ll\u00f3 list\u00e1t, t\u00f6rli a list\u00e1b\u00f3l azokat a karakterl\u00e1ncokat, amelyek hossza p\u00e1ratlan, \u00e9s visszat\u00e9r az eredm\u00e9ny\u00fcl kapott lista rendezett v\u00e1ltozat\u00e1val. A lista mindig egy karakterl\u00e1ncokb\u00f3l \u00e1ll\u00f3 lista, \u00e9s soha nem sz\u00e1msorozat, \u00e9s tartalmazhat ism\u00e9tl\u0151d\u00e9seket is. A lista sorrendje legyen n\u00f6vekv\u0151 az egyes szavak hossza szerint, \u00e9s vissza kell adnod a list\u00e1t ebben a sorrendben rendezve. Ha k\u00e9t sz\u00f3nak azonos a hossza, a list\u00e1t \u00e1b\u00e9c\u00e9rendben kell rendezni. A f\u00fcggv\u00e9nynek egy rendezett sorrend\u0171 karakterl\u00e1ncok list\u00e1j\u00e1t kell visszaadnia. Felt\u00e9telezheted, hogy minden sz\u00f3nak azonos lesz a hossza. P\u00e9ld\u00e1ul:\nassert list_sort => [\"aa\"]\nassert list_sort => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "canonical_solution":"    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n"
    },
    {
        "prompt":"\ndef x_or_y(n, x, y):\n    \"\"\"Egy egyszer\u0171 program, amely visszaadja x \u00e9rt\u00e9k\u00e9t, ha n pr\u00edmsz\u00e1m, \u00e9s y \u00e9rt\u00e9k\u00e9t adja vissza egy\u00e9bk\u00e9nt.\n\nP\u00e9ld\u00e1k:\nx_or_y == 34\nx_or_y == 5\n    \n    \"\"\"\n",
        "canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"
    },
    {
        "prompt":"\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "canonical_solution":"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef compare(game,guess):\n    \"\"\"\u00dagy gondolom, mindannyian eml\u00e9ksz\u00fcnk arra az \u00e9rz\u00e9sre, amikor egy r\u00e9g\u00f3ta v\u00e1rt esem\u00e9ny eredm\u00e9nye v\u00e9gre kider\u00fcl. Azok az \u00e9rz\u00e9sek \u00e9s gondolatok, amelyeket akkor tapasztalunk, mindenk\u00e9ppen \u00e9rdemesek arra, hogy feljegyezz\u00fck \u00e9s \u00f6sszehasonl\u00edtsuk \u0151ket. A feladatod az, hogy meghat\u00e1rozd, egy szem\u00e9ly helyesen tal\u00e1lta-e el egy sor m\u00e9rk\u0151z\u00e9s eredm\u00e9ny\u00e9t. K\u00e9t, azonos hossz\u00fas\u00e1g\u00fa t\u00f6mb\u00f6t kapsz, az egyik a pontsz\u00e1mokat, a m\u00e1sik a tippeket tartalmazza, ahol minden index egy m\u00e9rk\u0151z\u00e9st jel\u00f6l. Adj vissza egy azonos hossz\u00fas\u00e1g\u00fa t\u00f6mb\u00f6t, amely azt jelzi, mennyire t\u00e9rt el minden tipp a val\u00f3s eredm\u00e9nyt\u0151l. Ha helyesen tippeltek, az \u00e9rt\u00e9k 0, ha nem, az \u00e9rt\u00e9k a tipp \u00e9s a pontsz\u00e1m k\u00f6z\u00f6tti abszol\u00fat k\u00fcl\u00f6nbs\u00e9g.\n\np\u00e9lda:\n\ncompare -> [0,0,0,0,3,3]\ncompare -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "canonical_solution":"    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"A k\u00f6vetkez\u0151 mondatot kell leford\u00edtani magyarra:\n\n\u00d6n megkapja egy oszt\u00e1ly nev\u00e9t \u00e9s egy lista kiterjeszt\u00e9seket.\nA kiterjeszt\u00e9seket kell haszn\u00e1lni az oszt\u00e1lyhoz tov\u00e1bbi oszt\u00e1lyok bet\u00f6lt\u00e9s\u00e9re. A\nkiterjeszt\u00e9s er\u0151ss\u00e9ge a k\u00f6vetkez\u0151k\u00e9ppen alakul: Legyen CAP a nagybet\u0171k sz\u00e1ma a\nkiterjeszt\u00e9s nev\u00e9ben, \u00e9s legyen SM a kisbet\u0171k sz\u00e1ma a kiterjeszt\u00e9s nev\u00e9ben, az er\u0151ss\u00e9get\na k\u00f6vetkez\u0151 t\u00f6rt adja meg: CAP - SM. Meg kell tal\u00e1lnia a leger\u0151sebb kiterjeszt\u00e9st \u00e9s vissza kell adnia egy stringet ebben a form\u00e1tumban: Oszt\u00e1lyN\u00e9v.Leger\u0151sebbKiterjeszt\u00e9sN\u00e9v.\nHa k\u00e9t vagy t\u00f6bb kiterjeszt\u00e9snek ugyanaz az er\u0151ss\u00e9ge, akkor azt kell v\u00e1lasztania,\namelyik el\u0151sz\u00f6r szerepel a list\u00e1ban.\nP\u00e9ld\u00e1ul, ha megkapja a \"Slices\" oszt\u00e1lyt \u00e9s a kiterjeszt\u00e9sek list\u00e1j\u00e1t: ['SErviNGSliCes', 'Cheese', 'StuFfed'], akkor a visszat\u00e9r\u00e9si \u00e9rt\u00e9knek 'Slices.SErviNGSliCes' kell lennie, mivel a 'SErviNGSliCes' a leger\u0151sebb kiterjeszt\u00e9s.\nP\u00e9lda:\naz er\u0151sebb kiterjeszt\u00e9s megtal\u00e1l\u00e1s\u00e1hoz: Strongest_Extension == 'my_class.AA'\n    \"\"\"\n",
        "canonical_solution":"    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n"
    },
    {
        "prompt":"\ndef cycpattern_check(a , b):\n    \"\"\"A k\u00f6vetkez\u0151 mondatot ford\u00edtsd le magyarra.\n\n    \"\"\"\n",
        "canonical_solution":"    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n"
    },
    {
        "prompt":"\ndef even_odd_count(num):\n    \"\"\"Adott egy eg\u00e9sz sz\u00e1m. Adjon vissza egy olyan tuple-t, amely tartalmazza a p\u00e1ros \u00e9s p\u00e1ratlan sz\u00e1mjegyek sz\u00e1m\u00e1t.\n\n     P\u00e9lda:\n        even_odd_count ==>\n        even_odd_count ==>\n    \"\"\"\n",
        "canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef int_to_mini_roman(number):\n    \"\"\"\n    Adott egy pozit\u00edv eg\u00e9sz sz\u00e1m, alak\u00edtsd \u00e1t r\u00f3mai sz\u00e1mm\u00e1, \u00e9s add vissza kisbet\u0171kkel.\n    Korl\u00e1toz\u00e1sok: 1 <= num <= 1000\n\n    P\u00e9ld\u00e1k:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "canonical_solution":"    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"
    },
    {
        "prompt":"\ndef find_max(words):\n    \"\"\"\u00cdrj egy f\u00fcggv\u00e9nyt, amely egy sztringek list\u00e1j\u00e1t fogadja el.\n    A lista k\u00fcl\u00f6nb\u00f6z\u0151 szavakat tartalmaz. T\u00e9rj vissza azzal a sz\u00f3val,\n    amely a legt\u00f6bb egyedi karaktert tartalmazza. Ha t\u00f6bb sztring is\n    rendelkezik a maxim\u00e1lis sz\u00e1m\u00fa egyedi karakterrel, t\u00e9rj vissza azzal,\n    amelyik lexikogr\u00e1fiai sorrendben el\u0151bb szerepel.\n\n    find_max == \"string\"\n    find_max == \"enam\"\n    find_max == \"aaaaaaa\"\n    \"\"\"\n",
        "canonical_solution":"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n"
    },
    {
        "prompt":"\ndef eat(number, need, remaining):\n    \"\"\"\n    Te egy \u00e9hes ny\u00fal vagy, \u00e9s m\u00e1r megett\u00e9l egy bizonyos sz\u00e1m\u00fa r\u00e9p\u00e1t, de most t\u00f6bb r\u00e9p\u00e1t kell enned, hogy befejezd a napi \u00e9tkez\u00e9seket.\nVissza kell adnod egy t\u00f6mb\u00f6t a k\u00f6vetkez\u0151 form\u00e1tumban:\n[ az \u00e9tkez\u00e9sek ut\u00e1n \u00f6sszesen elfogyasztott r\u00e9p\u00e1k sz\u00e1ma, az \u00e9tkez\u00e9sek ut\u00e1n megmaradt r\u00e9p\u00e1k sz\u00e1ma ]\nHa nincs el\u00e9g megmaradt r\u00e9pa, akkor megeszed az \u00f6sszes megmaradt r\u00e9p\u00e1t, de m\u00e9g mindig \u00e9hes maradsz.\n\nP\u00e9ld\u00e1k:\n* eat -> [11, 4]\n* eat -> [12, 1]\n* eat -> [11, 0]\n* eat -> [7, 0]\n\nV\u00e1ltoz\u00f3k:\n@number : eg\u00e9sz sz\u00e1m\n    az a r\u00e9p\u00e1k sz\u00e1ma, amelyet m\u00e1r megett\u00e9l.\n@need : eg\u00e9sz sz\u00e1m\n    az a r\u00e9p\u00e1k sz\u00e1ma, amelyet meg kell enned.\n@remaining : eg\u00e9sz sz\u00e1m\n    a megmaradt r\u00e9p\u00e1k sz\u00e1ma, amelyek k\u00e9szleten vannak\n\nKorl\u00e1tok:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nJ\u00f3 sz\u00f3rakoz\u00e1st :)\n    \"\"\"\n",
        "canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef do_algebra(operator, operand):\n    \"\"\"\n    Adott k\u00e9t lista: oper\u00e1tor \u00e9s operandus. Az els\u0151 lista alapvet\u0151 algebrai m\u0171veleteket tartalmaz, a m\u00e1sodik lista pedig eg\u00e9sz sz\u00e1mok list\u00e1ja. Haszn\u00e1ld a megadott k\u00e9t list\u00e1t algebrai kifejez\u00e9s fel\u00e9p\u00edt\u00e9s\u00e9hez, \u00e9s t\u00e9rj vissza a kifejez\u00e9s \u00e9rt\u00e9kel\u00e9s\u00e9vel.\n\nAz alapvet\u0151 algebrai m\u0171veletek:\n\u00d6sszead\u00e1s \nKivon\u00e1s \nSzorz\u00e1s \nEg\u00e9sz oszt\u00e1s \nHatv\u00e1nyoz\u00e1s \n\nP\u00e9lda:\noper\u00e1tor['+', '*', '-']\nt\u00f6mb = [2, 3, 4, 5]\neredm\u00e9ny = 2 + 3 * 4 - 5\n=> eredm\u00e9ny = 9\n\nMegjegyz\u00e9s:\n    Az oper\u00e1tor lista hossza megegyezik az operandus lista hossz\u00e1val m\u00ednusz egy.\n    Az operandus egy nem negat\u00edv eg\u00e9sz sz\u00e1mok list\u00e1ja.\n    Az oper\u00e1tor list\u00e1ban legal\u00e1bb egy oper\u00e1tor van, \u00e9s az operandus list\u00e1ban legal\u00e1bb k\u00e9t operandus tal\u00e1lhat\u00f3.\n\n    \"\"\"\n",
        "canonical_solution":"    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['\/\/', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(s):\n    \"\"\"A k\u00f6vetkez\u0151 mondatot ford\u00edtsd le magyarra.\n\nAdott egy s string.\n    Ha s[i] bet\u0171, v\u00e1ltoztasd meg a kisbet\u0171t nagybet\u0171re vagy ford\u00edtva,\n    k\u00fcl\u00f6nben hagyd meg \u00fagy, ahogy van.\n    Ha a string nem tartalmaz bet\u0171ket, ford\u00edtsd meg a stringet.\n    A f\u00fcggv\u00e9nynek a kapott stringet kell visszaadnia.\n    P\u00e9ld\u00e1k\n    solve = \"4321\"\n    solve = \"AB\"\n    solve = \"#A@c\"\n    \"\"\"\n",
        "canonical_solution":"    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef string_to_md5(text):\n    \"\"\"\n    Adott egy 'text' sz\u00f6veg, t\u00e9rj vissza annak md5 hash egyen\u00e9rt\u00e9k\u0171 sz\u00f6veg\u00e9vel.\n    Ha a 'text' egy \u00fcres string, t\u00e9rj vissza None \u00e9rt\u00e9kkel.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef generate_integers(a, b):\n    \"\"\"\n    K\u00e9t pozit\u00edv eg\u00e9sz sz\u00e1m, a \u00e9s b megad\u00e1s\u00e1val t\u00e9rj vissza a kett\u0151 k\u00f6z\u00f6tti p\u00e1ros sz\u00e1mjegyekkel n\u00f6vekv\u0151 sorrendben.\n\nP\u00e9ld\u00e1ul:\ngenerate_integers => [2, 4, 6, 8]\ngenerate_integers => [2, 4, 6, 8]\ngenerate_integers => []\n    \"\"\"\n",
        "canonical_solution":"    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    }
]