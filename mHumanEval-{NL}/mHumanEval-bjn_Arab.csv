prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" تجك كمبالي دالم داڤتاران انكا يڠ دبريك، اداكاه ادا دوان انكا يڠ لبيه دكات سواتو سمدنڠن باطاڽڠ دبريك.
    كوتوهن:
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" مداتن كدلام فنكسي اين اتاڽ اداله سترينغ يڠ ممڤويني كمڤولن براليه داير يڠ برتيمڤال. توجوان كمو اداله انتوق مميسهكن كمڤولن-كمڤولن اتو منجادي سترينغ-سترينغ يڠ برلبيه دان منغنبل كليست كمڤولن-كمڤولن اتو.
كمڤولن يڠ ترپيسه تربالنس دان تيدق برتيمڤال ددالم ساتو سام لاين.
ابايكن سبراڤاڤنڤون ڤادا سترينغ ماسوقن.
كونتوه:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" Diberikan angka pecahan positif, angka tersebut dapat diurai menjadi bagian bilangan bulat dan pecahan.

Kembalikan bagian pecahan dari angka tersebut.
Contoh:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" Given the complexity and specificity of the sentence, translating it into Banjar using Arabic script while maintaining its technical accuracy is a challenging task. However, I will do my best to provide a translation:

انتوا دهاروساكا ينغن داڤتر ڤرأوسن ديبوزيت دان ڤناريكن دويت دالم اكاون بنكا ينغ مولاي دڠن سالدو نول. تڠڤوڠن کالين اداله منكتاهوئي كالو دالم ساتو وقت سالدو اكاون ترسبوت جاڠن سمڤي كوروڠي لبيه داري نول، دان دالم وقت ايتو فڠسي هاروس منچتتكن بنر. كالو تيدق، فڠسي ايتو هاروس منچتتكن صلاح.
كنتوهن:

Note: The Banjar language is typically written in Latin script nowadays, and the use of Arabic script is less common. The translation provided here attempts to capture the essence of the original text while considering the linguistic nuances of Banjar.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" Buat daftar angka masukan yang diberikan, hitung Deviansi Absolut Rata-rata di sekitar rata-rata dataset ini.
Deviansi Absolut Rata-rata adalah rata-rata perbedaan absolut antara setiap elemen dan titik pusat:
MAD = rata-rata | x - x_mean |
Contoh:

بوات دفتر أڠك ماسوقن يغ دبيريك، هيتوڠ ديفيانسي أبسولت رتا٢ د سراڠ رتا٢ داتاست اين.
ديفيانسي أبسولت رتا٢ اده رتا٢ ڤربيدأن أبسولت انتارا ستيڠڬ كلمنت دان تيتوق ڤوسات:
MAD = رتا٢ | x - x_mean |
چونتوه:
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" سيسيبكن سواتو 'دلIMITER' انتارا ستياب دوا أنصر بترتورن داري داڤت ماسوقن `نمبر'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" مدايان كاين فُونكسي إيني أداله سترينغ يان منورنكه بربراپا كلوڤوقن فآنتيسيس برلسان سمڤت.  
    انتوق سبوا كلوڤوقن، كلواركن تاهفان تردالم منڠرنڠ فآنتيسيس.  
    مثالن،) ممليكي دوا تاهفان تردالم سدانڠكن)) ممليكي تيڠا.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" فلترىن دافتار ماسوك ساجا ڤرحال ڠنداڠ كاتا يڠ ممڤوني سبوا كاتا يڠ تلا ديبريكن
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" إنتوك كا داڤت دافتار انتيجر، كيمبليكن توبل ين ترديري داري جوملهن دان هاسي ڤركليهن سمو انتيجر دالم دافتار.
    جوملهن كوسونڠ هروس سام دڠن 0 دان هاسي ڤركليهن كوسونڠ هروس سام دڠن 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" Dari daftar bilangan bulat yang diberikan, buatlah daftar elemen maksimum bergulir yang ditemukan hingga saat ini dalam urutan.

Translating to Banjar:

داري دافتار بيلڠنڠ بولت يڠ ديبريكاً، بواتله دافتار ايلمن ماكسيموم برڬولير يڠ ديتيموكان هڠݢ ساءت اين دالم اوروتن.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" تست كأدا سوسرأن داري كتا دلم عده مرپلكن كأدا تيدق """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" داتا ماسوك اداله دوا سترينگ ا دان ب يڠ هانيا ترديري داري 1 دان 0.
    لاكوكن بيناري XOR ڤد ماسوككن اين دان كيمباليكن هسيل جك ڤنسترينگ.
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" من لستة السلسلات، رجع السلسلة الأكاو. كاين رجع السلسلة الأولى كالو كاين سلاسل باندوكاوان ساييك. رجع None كالو لستة المدخل كوسونغ.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Mengembalikan pembagi terbesar dari dua bilangan bulat a dan b

In Banjar:
مڠمباليکن ڤمبايق تر بيسار دري دوا بيلڠن بولت ا دان ب
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" سيمبان دافتار سموڽا دڤنڠن داري ڤاليڠ ڤنديق كأڤاليڠ پانجڠ داري سترين ماسوقن
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" مبالسكن كالوڠنڠ دلڠكنڠنڠ ڠڠنڠن ڠڠنڠن ڠڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠنڠڠنڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠڠ
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" دٱمبٱن سبوايك, كٱيٱهو بٱربٱرٱبٱ كمٱنٱ كٱرٱكتر يٱڠ بٱدٱ دٱلم سبوايكٱن سبوايك.
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" باماسوكان كأ دلم فونسيني اداله سترينغ يڠ منوحيکن نادا موسيق ددلام فورمات ASCII يڠ خاص.
    تڠڤتون کمو اداله منغوراين سترينغ اين دان ممباليکن ليست انتجر يڠ مرايکن برپا لما کدقن نوت کاداءن.

    اين اداله لجند:
    'o' - نوت سمفورنا، برکدقن امڤت کدقن
    'o|' - نوت ستيڠه، برکدقن دوا کدقن
    '.|' - نوت ستيڠه، برکدقن ساتو کدقن

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" ايناك كم كالي سبواه سبسترينگ دابت ددلام سترينگ اصلي. كيتوا كاسوس يڠ برتنداڠن.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" مَسُك ديه سبَراڠ دلَمي مُرُس كتا كتا عدد داري 'نُل' سايڠ 'سَمبيلن'.
    ڤيليهن يڠ صحيح اداله 'نُل', 'ساتو', 'دو', 'تيجا', 'امڤت', 'ليما', 'أنَم', 'توجُه', 'دَلان' دان 'سَمبيلن'.
    كَمباليكن سبَراڠ ايتُ دڠن عدد ترتوروت داري كچل كڤد بِسار.
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" من لست أڠك بوتيه ڤيلهي دان كمباليكن دوه يڠ تر دكت سساما اين دڠن كمباليكن مريكا بروزوران.
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers, apply a linear transform to that list,
such that the smallest number will become 0 and the largest will become 1

بريكن دافتار انكا ترابكن ترانفورماسي لينير كفد دافتار اتو، دميكيانڽ انكا يڠ پالين كچيل اكن منجادي 0 دان يڠ پالين بسار اكن منجادي 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" مُنالاي سِناراي داڤت دَفتر يَڠ ديبَري انتوق ڤيليح ساهاج ڤڽَنتُم انتوق ڤَڠنتَارَن إنتيجر.
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" مبالك طول كلمة دبيركن
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" ڤارا سواتو انكا ن، كاري انكا يڠ پالين بسر يڠ مباڬي ن دڠن سساما، يڠ ليبيه كچيل داري ن
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" كembali daftar faktor prima dari integer diberi dalam urutan dari terkecil hingga terbesar.
    Masing-masing faktor hendaknya dicatatkan sebanyak berapa kali faktor tersebut muncul dalam faktorisasi.
    Angka input hendaknya sama dengan hasil perkalian semua faktor.
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" داري دافتار عدد صحيح، حابس سموا عنصر ين يديه ليبيه سكاليوه لبيه من سكاليوه.
تابي دتنجاك كترتران عنصر ين كددا سسواي دنان ماسكن.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" ڤر سواته سترينڠ، اوبه حروف کچل كا حروف بصر دان حروف بصر كا حروف کچل.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Menggabungkan daftar string menjadi satu string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" فلتر دافتار ماسوق ماسوقن هانيا انك كتا كتا يڠ مولاي دڠن ڤريفكس يڠ ديبريكن.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""ارجعي فقط انكا انكا ين بوسيتف دالم ليست.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""بالعربيه: سُرْكَاكَن صحيح إذا عدد يعنكنان بيلانغان برایم، دَنْ سُرْكَاكَن سَلاهْ كالو سَباَلِكنْنَ.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    Menghitung polinomial dengan koefisien xs di titik x.
    balikan xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""تابعة اين منيمبا اءنء ياءخذ دافتار l وء منغءمبءلءكن دافتار l' دءنءن شرطء:
    l' ادءلءهء سءمء دءنءن l دءلءمء بءكءءنءنءءنءءءء يءنء تءدءءكء دءنءنءدءءءءنءءءء تءءكءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءءء
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""مٲمبالكن ايليمن يڠ اونيك دالم دافت منوروت اوروتن
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""عودي كنقن عنصر ددالم دافتار.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""باليحكن عدد كالي كادد 7 مونسول ددالم كاينتيجر يڠ كورڠ درڤد n يڠ تريبه دڤد 11 اتاو 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.

Could you kindly provide me with the translation of this text into Banjar?
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    يُرجع سلسلة مشفرة عن طريق تدوير مجموعات من ثلاث أحرف.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    برايم_فيب كمباليكن انكا كا-ن برابيسا فيبوناسي دان ايجا انكا براما.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero مناقاكاتكن سيليس قائمة انتجر.
    ايني مامبالكن بنار جكا اد ثالث انصر يڠ برلاينن ددالم سيليس ايتو يڠ
    جمعنڽ نول، دان ساله دالم حال يڠ لاين.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    Bayangkan sebuah jalan yang merupakan garis lurus sempurna yang tak berujung. n mobil berjalan dari kiri ke kanan; secara bersamaan, satu set mobil lain yang terdiri dari n mobil berjalan dari kanan ke kiri. Kedua kelompok mobil ini mulai dari jarak yang sangat jauh satu sama lain. Semua mobil bergerak dengan kecepatan yang sama. Dua mobil dikatakan bertabrakan ketika sebuah mobil yang bergerak dari kiri ke kanan bertabrakan dengan mobil yang bergerak dari kanan ke kiri. Namun, mobil-mobil ini sangat kuat dan kokoh; akibatnya, mereka terus bergerak dalam lintasannya seolah-olah tidak bertabrakan. Fungsi ini mengeluarkan jumlah tabrakan tersebut.

تخيل سوَك انه سبوط كريس لوروس سمفورنا ين تاق بروجنك. ن موبل برجلن دري كيري ك كنان؛ سكارا برسامأن، ساتو ست موبل لين ين ترديري دري ن موبل برجلن دري كنان ك كيري. كدوا كلمڤوق موبل اين مولا دري جراك ين سڠت جاؤ ستو سام لين. سموا موبل برگرق دڠن كچڤتن ين سام. دوا موبل دكتهن برتبراكن كتيك سواتو موبل ين برگرق دري كيري ك كنان برتبراكن دڠن موبل ين برگرق دري كنان ك كيري. هوني، موبل-موبل اين سڠت كوات دان كوكوه; اكبطن، مريكا تروس برگرق دالم لنتسنڽ ساءك كتيك تيدق برتبراكن. فڠسي اين منكلواركن جمله تبراكن ترتسبوت.
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""باريكين دافتار دڠن أنصر-أنصر يڠ تله دتمنبهن سواتو.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero mengambil daftar bilangan bulat sebagai input.
    itu mengembalikan Benar jika ada dua elemen berbeda dalam daftar yang
    jumlahnya nol, dan Salah jika tidak.

pairs_sum_to_zero منغالما داڤتر بيلڠن بولاك سباڬاي اينڤوت.
    ايتو منڬمباليکن بنار جيكا ادا دوا المين بر‌بدا دالم داڤتر يڠ
    جمڽهنڽا نول، دان صلاح جيكا تيدق.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""Mengubah basis numerik dari angka input x menjadi basis.
    kembalikan representasi string setelah konversi.
    angka basis kurang dari 10.

Mengubah basis numerik dari angka input x menjadi basis.
    kembalikan representasi string setelah konversi.
    angka basis kurang dari 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""Considering that Banjar language uses Arabic script, here is the translation:

مِمبريكان ڤنجڠ سواتو سيسي دان تِنڬي ممبريكان لوأك اونتوق سڬيتيڬا.
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""ترجمأن جمليني ني كأ دلام بحسا بانجار:

سكوينس نومور فيب4 أيالا سكوينس ين سابرد كأ سكوينس فيبوناشي ين ديفينيسكن سباقي برإيكوت:
    فيب4 -> 0
    فيب4 -> 0
    فيب4 -> 2
    فيب4 -> 0
    فيب4 -> فيب4 + فيب4 + فيب4 + فيب4.
    تولهولا مبوات فنكسيون انتوق منغيتون كأ انصر كأ-ن ين كأ دلام سكوينس نومور فيب4 دنجن أفيسين . جانن منغونكن ركورسي.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""عوديكان قيمه متوسطه داري عنصر-عنصر دالم دافتار l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    يقار مونه كتا بنوارن ادالا باليندروم
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""عودي ٢^ن مودولو ف.
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    مبالسياكن سترينك ينق انكود دنان منغيسرک ستياب حرڤ دنان ڤينداهن 5 دالم حروف.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    ريموڤ_فوولس اياله ايك فونسى كا منمبيل سترينج دان منغيمبيلكن سترينج تنفا فوولس.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""ارجع بنار اذا سموه عدد دالم ليست l دي بواه تاهاب دباوهه threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""تاڬيه دوع عدد x دنجن y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    بركس كالو دوا كتا كا داكن كاركتر يك ساما.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""مباليكن angka Fibonacci ka-n.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" براكيت ايهلا سترة ""<"" دان "">"".
    باليككن بيار جكول ستياب براكيت مبوكه ادا برسماان براكيت تيتوب.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""عودي حقيقة إذا كان عناصر القائمة تتزايد أو تتناقص بانتظام.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""عادكن عنصر ين سرته ين اده ساما دلام دويه داڤترسچاره ينبترت.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""بالنار كembaliakan fator prima paling besar dari n. Anggap n > 1 dan kada prima.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""sum_to_n adalah fungsi yang menjumlahkan angka dari 1 hingga n.

In Banjar:
سم_تو_ن اداله فڠسي يڠ منجمعهكن اڠك دري ١ هيڠڬ ن
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" براكيتس اداله سترينغ من """".
    كايمباليكن بنر جكا ستياب براكيت دبانيا مملكي براكيت تتوڠݢل ڤنانوتوڠ.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" كس مروپكن كؤفيسين بوات سواتو پولينوميال.
   كس[0] + كس[1] * كس + كس[2] * كس^2 + ....
    كأمباليكن دريفاتيف داري پولينوميال اين دالم بنجوكن يڠ سام.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""سريه انكاڠن فيبفيب اداله سريه انكاڠن يڠ سام ڤريتي دڠن سريه انكاڠن فيبوناشي يڠ ددفينيسيكأن سباڬاي بركوت:
    فيبفيب == 0
    فيبفيب == 0
    فيبفيب == 1
    فيبفيب == فيبفيب + فيبفيب + فيبفيب.
    تولوڠ توليسكن فڠسي اونتوق مڠهيتوڠ العنصر ك-ن دري سريه انكاڠن فيبفيب دڠن افيسين.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
Tambahi kasus uji lagi.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""دودسكن دجيت دري انتيجر x، دودسكن دجيت كنان كنان كنان shift
دان كباليكن هسيلنا سباگاي سترينگ.
جكا shift > جومله دجيت، كنباليكن دجيت سباگاي يان تربليك.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""مكتب
    تولاك منغكت فنكسي ينغأمبيل سواتو سترينغ سباگي ماسوكان دان منغنباليكن جملاه كود ASCII داري حروف بسار ساجا.

    كونتوه:
        digitSum => 0
        digitSum => 131
        digitSum => 67
        digitSum => 69
        digitSum => 131
        digitSum => 153
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    Dalam tugas ini, Anda akan diberikan sebuah string yang mewakili jumlah apel dan jeruk yang didistribusikan dalam sebuah keranjang buah. Keranjang ini berisi apel, jeruk, dan buah mangga. Diberikan string yang mewakili jumlah total jeruk dan apel dan sebuah bilangan bulat yang mewakili jumlah total buah dalam keranjang tersebut, kembalikan jumlah buah mangga dalam keranjang tersebut. Contohnya: 
تاسك_بوواه -> 19 - 5 - 6 = 8 
تاسك_بوواه -> 3 - 0 - 1 = 2 
تاسك_بوواه -> 100 - 2 - 3 = 95 
تاسك_بوواه -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    ""Diberikan array yang mewakili ranting dari pohon yang memiliki node integer non-negatif,
tugas Anda adalah untuk memetik salah satu node dan mengembalikannya.
Node yang dipetik haruslah node dengan nilai genap terkecil.
Jika beberapa node dengan nilai genap terkecil yang sama ditemukan, kembalikan node yang memiliki indeks terkecil.

Node yang dipetik harus dikembalikan dalam daftar, [nilai_terkecil, indeksnya],
Jika tidak ada nilai genap atau array yang diberikan kosong, kembalikan [].

Contoh1:
    Input: [4,2,3]
    Output: [2, 1]
    Penjelasan: 2 memiliki nilai genap terkecil, dan 2 memiliki indeks terkecil.

Contoh2:
    Input: [1,2,3]
    Output: [2, 1]
    Penjelasan: 2 memiliki nilai genap terkecil, dan 2 memiliki indeks terkecil. 

Contoh3:
    Input: []
    Output: []
    
Contoh4:
    Input: [5, 0, 3, 0, 4, 2]
    Output: [0, 1]
    Penjelasan: 0 adalah nilai terkecil, tetapi ada dua nol,
                jadi kita akan memilih nol pertama, yang memiliki indeks terkecil.

Kendala:
    * 1 <= nodes.length <= 10000
    * 0 <= node.value""
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change == 4
    smallest_change == 1
    smallest_change == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""نتولس ايك فنكسي ينغ مغمبليكن صحيح جكا أنكا ينغ دiberikan اداله حاصل كلي من 3 بيلنغن برما.
دان سلاحني سيلاهكن.
مغتاهوي بهاوا كروانغ داري 100.
كونتو:
is_multiply_prime == صحيح
30 = 2 * 3 * 5
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""Tugas pian adalah menulis fungsi yang mengembalikan benar jika angka x adalah pangkat sederhana dari n dan salah dalam kasus lain.
x adalah pangkat sederhana dari n jika n**int=x
Sebagai contoh:
is_simple_power => benar
is_simple_power => benar
is_simple_power => benar
is_simple_power => salah
is_simple_power => salah
is_simple_power => salah
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""Kamu ditugasi untuk menulis fungsi yang menerima angka heksadesimal sebagai string dan menghitung jumlah digit heksadesimal yang merupakan bilangan prima. Digit heksadesimal adalah 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Bilangan prima adalah 2, 3, 5, 7, 11, 13, 17,... Jadi kamu harus menentukan jumlah dari digit berikut: 2, 3, 5, 7, B, D. Catatan: kamu dapat menganggap input selalu benar atau string kosong, dan simbol A,B,C,D,E,F selalu huruf besar. Contoh:
Untuk num = ""AB"" hasilnya harus 1.
Untuk num = ""1077E"" hasilnya harus 2.
Untuk num = ""ABED1A33"" hasilnya harus 4.
Untuk num = ""123456789ABCDEF0"" hasilnya harus 6.
Untuk num = ""2020"" hasilnya harus 2.
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""Anda akan diberikan sebuah angka dalam bentuk desimal dan tugas Anda adalah mengonversinya ke
format biner. Fungsi harus mengembalikan sebuah string, dengan setiap karakter mewakili angka biner.
Setiap karakter dalam string akan berupa '0' atau '1'.

Akan ada beberapa karakter tambahan 'db' di awal dan di akhir string.
Karakter tambahan tersebut ada untuk membantu dengan format.

Contoh:
decimal_to_binary   # mengembalikan ""db1111db""
decimal_to_binary   # mengembalikan ""db100000db""

In Banjar:
اندأ اكن دبيريكأن سبواه أڠك دالم بنتوق ديسيمال دان توڬس اندأ اداله مڠونڤيرسيني ك
فورمت باءينر. فوڠسي هاروس مڠمباليكن سبواه سترينڬ, دڠن ستياب كركتر ميوكيلكن أڠك باءينر.
ستياب كركتر دالم سترينڬ اكن بروڤ ""0"" أتو ""1"".

اكن ادأ بربراف كركتر تامبهأن ""db"" د أؤل دان د اخير سترينڬ.
كركتر تامبهأن تردسبوت ادأ انتوق ممبنتو دڠن فورمت.

چونتوه:
decimal_to_binary   # مڠمباليكن ""db1111db""
decimal_to_binary   # مڠمباليكن ""db100000db""
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""Ikam diberi satu string s.
Tugas ikam adalah memeriksa apakah string itu bahagia atau tidak.
String disebut bahagia jika panjangnya minimal 3 dan setiap 3 huruf berturut-turut berbeda.
Misalnya:
is_happy => Salah
is_happy => Salah
is_happy => Benar
is_happy => Salah
is_happy => Benar
is_happy => Salah
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""Ini adalah minggu terakhir semester dan guru harus memberikan nilai kepada siswa. Guru tersebut telah membuat algoritma sendiri untuk penilaian. Satu-satunya masalah adalah, dia telah kehilangan kode yang dia gunakan untuk penilaian. Dia telah memberikan Anda daftar IPK beberapa siswa dan Anda harus menulis fungsi yang dapat mengeluarkan daftar nilai huruf menggunakan tabel berikut:
             
             IPK       |    Nilai huruf
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E

    Contoh:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']

Translation to Banjar:

Ini adalah minggu terakhir semester dan guru harus memberikan nilai kepada siswa. Guru tersebut telah membuat algoritma sendiri untuk penilaian. Satu-satunya masalah adalah, dia telah kehilangan kode yang dia gunakan untuk penilaian. Dia telah memberikan Anda daftar IPK beberapa siswa dan Anda harus menulis fungsi yang dapat mengeluarkan daftar nilai huruf menggunakan tabel berikut:
             
             IPK       |    Nilai huruf
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E

    Contoh:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""نولس يڠ ممبوات فنقسي يڠ مغنبل سترينڬ دان مغمبلي True كالو ڤنجڠ سترينڬ اتو اداله بيلڠن ڤريماو False كالو تيدق.
كونتوه:
prime_length == True
prime_length == True
prime_length == True
prime_length == False
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    ممبرىكن سوأتو انتيجر ن يڠ ڤوسيتيڤ، كيرمن باليك جومله انكا دري انتيجر دڠن انكا ن داري ڤوسيتيڤ يڠ مولاو اتاو اكهير دڠن انكا 1.
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""Diberikan bilangan bulat positif N, kembalikan jumlah total digitnya dalam biner.

    Contoh:
        Untuk N = 1000, jumlah digitnya akan menjadi 1, outputnya harus ""1"".
        Untuk N = 150, jumlah digitnya akan menjadi 6, outputnya harus ""110"".
        Untuk N = 147, jumlah digitnya akan menjadi 12, outputnya harus ""1100"".

    Variabel:
        @N bilangan bulat
             Batasan: 0 ≤ N ≤ 10000.
    Keluaran:
         sebuah string dari angka biner
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""Diberikan daftar bilangan bulat lst yang tidak kosong. tambahkan elemen genap yang berada pada indeks ganjil.

    Contoh:
        tambah ==> 2

Dalam aksara Arab Banjar:

ديبريكن دافتار بيلڠن بولاڠ lst يڠ تيدق كوسوڠ. تمبهن الكن-كن يڠ جناب يڠ براد دڤد اينديقس ڬانجيل.

    چنتوه:
        تمبه ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    Write a function that takes a string and returns an ordered version of it.
Ordered version of string, is a string where all words
are replaced by a new word where all the characters arranged in
ascending order based on ascii value.
Note: You should keep the order of words and blank spaces in the sentence.

For example:
anti_shuffle returns 'Hi'
anti_shuffle returns 'ehllo'
anti_shuffle returns 'Hello !!!Wdlor'

Tulisi fungsi nang ngambil string dan mambalikan versi urutan dari itu.
Versi urutan string, adalah string dimana semua kata
diganti dengan kata baru dimana semua karakter tersusun dalam
urutan naik berdasarkan nilai ascii.
Catatan: Anda harus menjaga urutan kata dan spasi dalam kalimat.

Misalnya:
anti_shuffle mambalikan 'Hi'
anti_shuffle mambalikan 'ehllo'
anti_shuffle mambalikan 'Hello !!!Wdlor'
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    Anda diberikan data 2 dimensi, sebagai daftar bersarang,
    yang mirip dengan matriks, namun, tidak seperti matriks,
    setiap baris mungkin mengandung jumlah kolom yang berbeda.
    Diberikan lst, dan bilangan bulat x, temukan bilangan bulat x dalam daftar,
    dan kembalikan daftar tuple, [, ...] sehingga
    setiap tuple adalah koordinat -, dimulai dengan 0.
    Urutkan koordinat awalnya berdasarkan baris dalam urutan menaik.
    Juga, urutkan koordinat dari baris berdasarkan kolom dalam urutan menurun.

    Contoh:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [,,,,]
    get_row == []
    get_row == []
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    Berikan suatu array yang terdiri dari bilangan bulat non-negatif, kembalikan salinan dari array tersebut setelah diurutkan.
    Anda akan mengurutkan array tersebut dalam urutan menaik jika jumlah adalah ganjil,
    atau urutkan dalam urutan menurun jika jumlah adalah genap.

    Catatan:
    * jangan mengubah array yang diberikan.

    Contoh:
    * sort_array => []
    * sort_array => [5]
    * sort_array => [0, 1, 2, 3, 4, 5]
    * sort_array => [6, 5, 4, 3, 2, 1, 0]

    ترجمة:
    أريهكا سواتو أراي يڠ تر دري دري بيلغن بولت نون-نيغتيف، كمباليكن ساليان دري أراي ترسبوت ستله ديوترتكن.
    أندا اكن مڠورتكن أراي ترسبوت دالم أروتن منايك جيكا جومله أداله غنجيل،
    أو أورتكن دالم أروتن منورن جيكا جومله أداله غناب.

    كاتأن:
    * جانن مڠوباه أراي يڠ دريكن.

    شونتوه:
    * sort_array => []
    * sort_array => [5]
    * sort_array => [0, 1, 2, 3, 4, 5]
    * sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""Cipta fungsi encrypt nang maambil string sabagai argumen dan 
    mengembalikan string nang dienkripsi dengan alfabet nang diputar. 
    Alfabet harus diputar sedemikian rupa sehingga huruf-huruf 
    bergeser turun dengan dua kali dua tempat.
    Contohnya:
    encrypt mengembalikan 'lm'
    encrypt mengembalikan 'ewhjklnop'
    encrypt mengembalikan 'kj'
    encrypt mengembalikan 'ix'
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    Berikut adalah terjemahan kalimat tersebut ke dalam Bahasa Banjar dengan aksara Arab:

ڤيڠگياوي سابوا دفتار انتجر.
تولس فڠسئ نكست_سملست ين منمبلكن العنصر كدوا ترموروڠ دري دفتار.
منمبلكن نن اولها تيدق ادا العنصر ايترسوبوت.

نكست_سملست == 2
نكست_سملست == 2
نكست_سملست == نن
نكست_سملست == نن
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    Kamu akan diberi satu untaian kata-kata, dan tugas kamu adalah menghitung jumlah kebosanan. Kebosanan adalah kalimat yang dimulai dengan kata ""Aku"". Kalimat-kalimat dibatasi oleh '.', '?' atau '!'.

Contohnya:

أنتاكن دبري ساتو أونتاين كاتا-كاتا، دان تڬس كامو أداله منغيتوڠ جوملاه كبوسنن. كبوسنن أداله كليمت يڠ ديمولاي دڠن كات ""أكو"". كليمت-كليمت ديباتسي اوليه '.', '?' اتاو '!'.

چونتوه:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    Here is the translation of the given text into Banjar:

تولسوركن فوسين يك منمبه بسن، دان منچودي دلم سوتو كارا يغ منوكر 
سواتو داري سغالا حرڤ كيس، منغنتي سغالا فوكل دالم بسن دڠن حرڤ يغ منونجول دلام 2 تمڤت دي ڤن ڤادا فوكل ترسبوت دلم الفبت اينڬريس. 
اسوامي حرڤ سايا. 

كونتوه:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""Anda diberi daftar bilangan bulat.
Anda perlu mencari nilai prima terbesar dan mengembalikan jumlah digitnya.

Contoh:
Untuk lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] hasilnya adalah 10
Untuk lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] hasilnya adalah 25
Untuk lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] hasilnya adalah 13
Untuk lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] hasilnya adalah 11
Untuk lst = [0,81,12,3,1,21] hasilnya adalah 3
Untuk lst = [0,8,1,2,1,7] hasilnya adalah 7

Anda diberi daftar bilangan bulat.
اند بيرين داڤتر بيلڠن بولت.
اند ڤرلو مچاري نايلئ ڤريما تربسر دان مڠمباليکن جمله ديجيتڽ.

چونتوه:
اونتوق lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] حسيلاڽ اداله 10
اونتوق lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] حسيلاڽ اداله 25
اونتوق lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] حسيلاڽ اداله 13
اونتوق lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] حسيلاڽ اداله 11
اونتوق lst = [0,81,12,3,1,21] حسيلاڽ اداله 3
اونتوق lst = [0,8,1,2,1,7] حسيلاڽ اداله 7
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    Diberikan kamus, kembalikan True jika semua kunci adalah string dalam huruf kecil atau semua kunci adalah string dalam huruf besar, jika tidak kembalikan False.
Fungsi harus mengembalikan False jika kamus yang diberikan kosong.
Contoh:
check_dict_case harus mengembalikan True.
check_dict_case harus mengembalikan False.
check_dict_case harus mengembalikan False.
check_dict_case harus mengembalikan False.
check_dict_case harus mengembalikan True.

دبريکن کاموس، کمباليکن True جيکا سموا کونچي اداله سترينغ دالم حروف کچيل اتاو سموا کونچي اداله سترينغ دالم حروف بسر، جيکا تيدق کمباليکن False.
فڠسي هاروس مکمباليکن False جيکا کاموس يڠ دبريکن کوسوڠ.
چونتوه:
check_dict_case هاروس مکمباليکن True.
check_dict_case هاروس مکمباليکن False.
check_dict_case هاروس مکمباليکن False.
check_dict_case هاروس مکمباليکن False.
check_dict_case هاروس مکمباليکن True.
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""Implementasikan fungsi yang menerima integer non-negatif dan mengembalikan array dari n integer pertama yang merupakan bilangan prima dan kurang dari n.
    contohnya:
    count_up_to => [2,3]
    count_up_to => [2,3,5,7]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17,19]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17]
    
Translation into Banjar:

امڤليمنتاسيكن فنقسي ين مغنمبر اينتيجر نون-نگاتيف دان منگمباليكن اراءي داري ن اينتيجر ڤرتما يڠ مرڤاكن بيلڠن ڤريما دان كورڠ داري ن.
    چنتوهڽ:
    count_up_to => [٢,٣]
    count_up_to => [٢,٣,٥,٧]
    count_up_to => []
    count_up_to => [٢,٣,٥,٧,١١,١٣,١٧,١٩]
    count_up_to => []
    count_up_to => [٢,٣,٥,٧,١١,١٣,١٧]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""سيلسايكن فونسين ينغ ميمباوا دوا بيلنغن دان منغحاسيلكن
    هاسيل كالي دارى أنكا أكير مرىكا.
    أنغغابكان ماسوكان سلالو صح.
    كونتو:
    كالي هاروس منغحاسيلكن 16.
    كالي هاروس منغحاسيلكن 72.
    كالي هاروس منغحاسيلكن 0.
    كالي هاروس منغحاسيلكن 20.
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    برياكن سترينغ س، هيتون جومله حروف عله كابسر ددلام انديكس ڤن.
    
    سباگي كونتوه:
    count_upper منمبلي 1
    count_upper منمبلي 0
    count_upper منمبلي 0
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    Diberikan sebuah bilangan bulat positif n, anda harus membuat tumpukan dengan n tingkat batu.
    Tingkat pertama memiliki n batu.
    Jumlah batu di tingkat berikutnya adalah:
        - bilangan ganjil berikutnya jika n ganjil.
        - bilangan genap berikutnya jika n genap.
    Kembalikan jumlah batu di setiap tingkat dalam sebuah daftar, di mana elemen pada indeks
    i mewakili jumlah batu di tingkat.

    Contoh:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    Ikam akan diberi string kata yang dipisahakan dengan koma atau spasi. Tugas ikam adalah membagi string itu jadi kata-kata dan mengembalikan array dari kata-kata itu.

Sebagai contoh:
words_string == [""Hi"", ""my"", ""name"", ""is"", ""John""]
words_string == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""Fungsi ini mengambil dua angka positif x dan y dan mengembalikan angka bulat genap terbesar yang berada dalam rentang [x, y] inklusif. Jika tidak ada angka seperti itu, maka fungsi harus mengembalikan -1.

Contohnya:
choose_num = 14
choose_num = -1

ڤونكسي ايني ممباء دۏا اڠک ڤوزيتيف x دان y دان مڠمباليکن اڠک بولت ڬينڤ تربسر يڠ براد دالم رنتغ [x, y] اينکلوسيف. جيک تد اڠک سڤرتي ايتو، مک ڤونكسي هرۏس مڠمباليکن -1.

چونتوه:
choose_num = 14
choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""Ikam diparingi dua bilangan bulat positif n dan m, dan tugas ikam adalah menghitung rata-rata bilangan dari n sampai m. Bulatkan jawaban ke bilangan bulat terdekat dan konversi itu ke biner. Mun n lebih besar dari m, balikan -1.
Contoh:
rounded_avg => ""0b11""
rounded_avg => -1
rounded_avg => ""0b1111""
rounded_avg => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit.

Note: Returned list should be sorted in increasing order.

For example:

باياكاي داڤت دفتر اينتيجر ڤوزيتيف x. باليكن دافتار يڠ تله دي اوروتكن داري 
    سموا العنصر يڠ تيدق مميلكي انكا ڤاري.

    ڤرينگتن: دافتار يڠ دي باليكن هاروس دي اوروتكن دالم ترتيب منينگكت.

    سبيماڽ:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

For example:
  arr = [2, 1, 1, 4, 5, 8, 2, 3]   
        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
  return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]

If the array is empty, return an empty array:
arr = []
return []

If the array has any strange number ignore it:
arr = [1, -1 , 55] 
      -> sort arr -> [-1, 1, 55]
      -> reverse arr -> [55, 1, -1]
return = ['One']

---

Diberikan sebuah array dari bilangan bulat, urutkan bilangan bulat yang berada di antara 1 dan 9 termasuk, balikkan array yang dihasilkan, lalu ganti setiap digit dengan nama yang sesuai dari ""Satu"", ""Dua"", ""Tiga"", ""Empat"", ""Lima"", ""Enam"", ""Tujuh"", ""Delapan"", ""Sembilan"".

Misalnya:
  arr = [2, 1, 1, 4, 5, 8, 2, 3]   
        -> urutkan arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
        -> balikkan arr -> [8, 5, 4, 3, 2, 2, 1, 1]
  return [""Delapan"", ""Lima"", ""Empat"", ""Tiga"", ""Dua"", ""Dua"", ""Satu"", ""Satu""]

Jika array kosong, kembalikan array kosong:
arr = []
return []

Jika array memiliki angka aneh abaikan:
arr = [1, -1 , 55] 
      -> urutkan arr -> [-1, 1, 55]
      -> balikkan arr -> [55, 1, -1]
return = ['Satu']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" Implementasikan fungsi f yang menerima n sebagai parameter,
    dan mengembalikan daftar dengan ukuran n, sehingga nilai elemen pada indeks i adalah faktorial dari i jika i genap
    atau jumlah angka dari 1 sampai i jika tidak.
    i dimulai dari 1.
    faktorial dari i adalah perkalian dari angka 1 sampai i.
    Contoh:
    f == [1, 2, 6, 24, 15]

In Banjar:
جلنكن فونس ف ينغ نرما ن سباڬاي ڤراميتر،
    دان مڠمباليکن داڠن اوكورن ن، سجڠا نيلأي ايلمن ڤد ايندكس i اداله فكتوريال دري i جيك i ڬنڤ
    اتاو جومله انك دري 1 سامپي i جيك تيدق.
    i ديمولاي دري 1.
    فكتوريال دري i اداله ڤركاليان دري انك 1 سامپي i.
    چنتوه:
    f == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range, inclusive.

Example1:

Input: 3
Output:
Explanation:
Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

Example2:

Input: 12
Output:
Explanation:
Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

Note:
1. 1 <= n <= 10^3
2. returned tuple has the number of even and odd integer palindromes respectively.

Translation in Banjar:
مباريكن عدد انتىجر ن، باليككن سيك توبل ينغ اد كدودكن جملا انتىجر باليندروم جنابار دان گنجيل ينغ ترمسوك دلما كوسا، اينكلوسف.

كونتور1:

ماسوككن: 3
كوارسان:
تجلاسن:
انتىجر باليندروم اداله 1، 2، 3. ساتو ديانتارانيا اداله جنابار، دان دو ديانتارانيا اداله گنجيل.

كونتور2:

ماسوككن: 12
كوارسان:
تجلاسن:
انتىجر باليندروم اداله 1، 2، 3، 4، 5، 6، 7، 8، 9، 11. امفت ديانتارانيا اداله جنابار، دان 6 ديانتارانيا اداله گنجيل.

كاتا2:
1. 1 <= ن <= 10^3
2. توبل ينغ ديكبالكن اد جملا انتىجر باليندروم جنابار دان گنجيل سبايني.
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    تولس fungsi count_nums nang mangambil array integers dan mengembalikan jumlah elemen nang punya jumlah digit > 0.
Mun suatu angka negatif, maka digit pertama nang bertanda akan negatif:
contohnya -123 punya digit bertanda -1, 2, dan 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""Kami memiliki array 'arr' dari N bilangan bulat arr[1], arr[2], ..., arr[N]. Angka-angka dalam array akan diacak secara acak. Tugas Anda adalah menentukan apakah mungkin untuk mendapatkan array yang diurutkan dalam urutan tidak menurun dengan melakukan operasi berikut pada array yang diberikan:
    Anda diizinkan melakukan operasi shift kanan beberapa kali.

Satu operasi shift kanan berarti menggeser semua elemen array dengan satu posisi ke arah kanan. Elemen terakhir dari array akan dipindahkan ke posisi awal dalam array yaitu indeks 0.

Jika memungkinkan untuk mendapatkan array yang diurutkan dengan melakukan operasi di atas maka kembalikan True jika tidak kembalikan False.
Jika array yang diberikan kosong maka kembalikan True.

Catatan: Daftar yang diberikan dijamin memiliki elemen unik.

Contoh:

move_one_ball==>True
Penjelasan: Dengan melakukan 2 operasi shift kanan, urutan tidak menurun dapat dicapai untuk array yang diberikan.
move_one_ball==>False
Penjelasan: Tidak mungkin mendapatkan urutan tidak menurun untuk array yang diberikan dengan melakukan beberapa kali operasi shift kanan.
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""دلام ماسالا اين، كامو اكن منغإمبليمنطاسيكن فونسين يڠ منريم دوا داڨتار أنك، دان مننتوكن ساما أدا مومڤركن پرتوكارن العنصر انتارا مريكا انتوق منجاديكن lst1 سباڬاي داڨتار يڠ حنيا ترديري داري أنك-أنك جناب. تيداق ادا حد انتوق جومله العنصر يڠ ديتوكاركن انتارا lst1 دان lst2. جكا مومڤركن انتوق منوكار العنصر انتارا lst1 دان lst2 انتوق منجاديكن سموا العنصر دي دلام lst1 جناب، باليك ""YES"". جك تياد، باليك ""NO"". سباڬاي كونطوه:
exchange => ""YES""
exchange => ""NO""
دي أنڬڬڤكن باوا داڤتار ماسوقن اكن تيداق كوسوڠ.
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""Diberikan sebuah string yang mewakili huruf kecil yang dipisahkan oleh spasi, kembalikan sebuah kamus
dari huruf dengan pengulangan terbanyak dan berisi jumlah yang sesuai.
Jika beberapa huruf memiliki kejadian yang sama, kembalikan semuanya.

Contoh:
```python
histogram == {'a': 1, 'b': 1, 'c': 1}
histogram == {'a': 2, 'b': 2}
histogram == {'a': 2, 'b': 2}
histogram == {'b': 4}
histogram == {}
```

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""Here is the translated sentence in Banjar:

توسك
    كتا دباير دواء سترينگ س دان ج، كتا هاروس منحاس هاروف-هاروف د س يڠ سام دڠن ستياب هاروف د ج
    لالو منچيك افك سترينگ هاسيل اداله ڤاليندروم.
    سترينگ ديسبوت ڤاليندروم جكا ديباچا سم دڠن كبلقكن.
    كتا هاروس منغيمبلكن تيوپل يڠ ممغنڬ سترينگ هاسيل دان بنر/سلاه اونتوق ڤراوان.
    كونتوه
    اونتوق س = ""abcde"", ج = ""ae"", هاسيلني اداله
    اونتوق س = ""abcdef"", ج = ""b"" هاسيلني اداله
    اونتوق س = ""abcdedcba"", ج = ""ab"", هاسيلني اداله
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""بركن كدافتار سترينج، دي مانا كتياب سترينج ترديري داري أنكا، باليكن دافتار.
سيتياب العنصر i داري هسليل كلوار ينبغي ""جدي أنكا غنجيل دالم سترينج i داري ماسوكان."" دي مانا سموا i ديغنتي دان أنكا غنجيل دالم سترينج ك i داري ماسوكان.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    Diberi sebuah array berisi bilangan bulat nums, carilah jumlah minimum dari setiap sub-array yang tidak kosong dari nums.
Contoh
minSubArraySum == 1
minSubArraySum == -6

Diterjemahkan ke dalam Bahasa Banjar:

دبيري سبواه اراءي برسي بيلڠن بولت نمس، چاريلا جملاه منيموم دري ستيڠ هرڤيان يڠ تيدق كسوڠن دري نمس.
چونتوه
minSubArraySum == 1
minSubArraySum == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    Anda diberikan kisi persegi panjang sumur. Setiap baris mewakili satu sumur,
    dan setiap 1 dalam baris mewakili satu unit air.
    Setiap sumur memiliki ember yang dapat digunakan untuk mengambil air darinya,
    dan semua ember memiliki kapasitas yang sama.
    Tugas Anda adalah menggunakan ember untuk mengosongkan sumur-sumur tersebut.
    Keluarkan jumlah penurunan ember yang Anda butuhkan.

    Contoh1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Contoh2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Contoh3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Kendala:
        * semua sumur memiliki panjang yang sama
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    دي دلام كاتا اني، كامو هاروس مغورتيركن سواتو ارراي داري انتج نون-نجاتيف برحسبكن جومله ساتو ديدلام ريبرزنتاسي بيناري مريكا دلام اوردان مننجكات.
انتوق جومله ساتو يڠ سما، غورتيركن برحسبكن نيلاي ديسيمال.

هاروس دي امبلمكن سباگي بركوت:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""Memandang kalimat s dan bilangan bulat n, ikam ditugasi handak melaksanakan fungsi yang mangembalikan daftar sabarataan kata dari kalimat s nang mangandung tepat n konsonan, dalam urutan kata-kata ini muncul di kalimat s. Lamun kalimat s kosong maka fungsi ini harus mangembalikan daftar kosong.
Catatan: ikam boleh manganggap masukan kalimat hanya mangandung huruf dan spasi.
Contoh:
select_words ==> [""little""]
select_words ==> [""Mary"", ""lamb""]
select_words ==> []
select_words ==> [""world""]
select_words ==> [""Uncle""]
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""Anda diberikan sebuah kata. Tugas Anda adalah untuk menemukan huruf vokal terdekat yang berada di antara dua konsonan dari sisi kanan kata tersebut.

Vokal di awal dan akhir tidak dihitung. Kembalikan string kosong jika Anda tidak menemukan vokal yang memenuhi kondisi di atas.

Anda dapat mengasumsikan bahwa string yang diberikan hanya berisi huruf bahasa Inggris.

Contoh:
get_closest_vowel ==> ""u""
get_closest_vowel ==> ""U""
get_closest_vowel ==> """"
get_closest_vowel ==> """"

**Banjar:**
اندا ديبريكن سبواه كتا. توغس اندا اداله انتوق منموقن هروف فوكل تدكات يڠ براد د انتارا دوا كنسونن دري سي سي كنان كتا تربيوقت.

فوكل د أءل دان أير تد اده ديهتوڠ. كمباليكن سترينڠ كوسوڠ جيك اندا تيدق منموقن فوكل يڠ مموهنهي كأدان د أتس.

اندا دافت مڠاسومسيكن بهاو سترينڠ يڠ ديبريكن هانيا بريسي هروف بهاس اينڬريس.

چونتوه:
get_closest_vowel ==> ""u""
get_closest_vowel ==> ""U""
get_closest_vowel ==> """"
get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    Berikan sebuah array arr yang berisi bilangan bulat dan sebuah bilangan bulat positif k, kembalikan daftar yang diurutkan dengan panjang k dengan angka maksimum k dalam arr.

Contoh 1:

Input: arr = [-3, -4, 5], k = 3
Output: [-4, -3, 5]

Contoh 2:

Input: arr = [4, -4, 4], k = 2
Output: [4, 4]

Contoh 3:

Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
Output: [2]

Catatan:
1. Panjang array akan berada dalam rentang [1, 1000].
2. Elemen dalam array akan berada dalam rentang [-1000, 1000].
3. 0 <= k <= len

Banjar:

بريكن سبواه أراي arr يڠ برسي بيلڠن بولت دان سبواه بيلڠن بولت ڤوزيتيف k, كمباليكن داٴفتر يڠ ديأورتكن دڠن ڤنجڠ k دڠن أڠك مكسيموم k دالم arr.

چونتوه 1:

إينڤوت: arr = [-3, -4, 5], k = 3
أوتڤوت: [-4, -3, 5]

چونتوه 2:

إينڤوت: arr = [4, -4, 4], k = 2
أوتڤوت: [4, 4]

چونتوه 3:

إينڤوت: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
أوتڤوت: [2]

کتن:
1. ڤنجڠ أراي اكن برادا دالم رنتڠ [1, 1000].
2. إليمين دالم أراي اكن برادا دالم رنتڠ [-1000, 1000].
3. 0 <= k <= len
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""كونتوح
    سلوسين ==> 12
    سلوسين ==> 9
    سلوسين ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    Berikan sebuah array bilangan bulat yang tidak kosong arr dan sebuah bilangan bulat k, kembalikan
jumlah elemen-elemen dengan paling banyak dua digit dari k elemen pertama arr.

Contoh:

Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
Output: 24 # jumlah dari 21 + 3

Kendala:
1. 1 <= len <= 100
2. 1 <= k <= len

Teks di atas dalam bahasa Banjar dengan aksara Arab:
بركن سبواه اراي بيلڠن بولاڠ ين تيدق كوسوڠ arr دان سبواه بيلڠن بولاڠ k, كمباليكن
جومله ايلمن-ايلمن دڠن ڤاليڠ باڽق دوا ديجيت دري k ايلمن ڤرتام arr.

چونته:

اينڤوت: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4
اوتڤوت: 24 # جومله دري 21 + 3

كندالا:
1. 1 <= len <= 100
2. 1 <= k <= len
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    Berikan sebuah bilangan bulat positif n, kembalikan daftar yang diurutkan yang berisi bilangan ganjil dalam urutan Collatz.

    Dugaan Collatz adalah sebuah dugaan dalam matematika yang berkaitan dengan urutan yang didefinisikan sebagai berikut: mulai dengan bilangan bulat positif n. Kemudian setiap istilah diperoleh dari istilah sebelumnya sebagai berikut: jika istilah sebelumnya adalah genap, istilah berikutnya adalah setengah dari istilah sebelumnya. Jika istilah sebelumnya adalah ganjil, istilah berikutnya adalah 3 kali istilah sebelumnya ditambah 1. Dugaan ini adalah bahwa tidak peduli berapa pun nilai n, urutannya akan selalu mencapai 1.

    Catatan:
        1. Collatz adalah [1].
        2. daftar yang dikembalikan diurutkan dalam urutan meningkat.

    Sebagai contoh:
    get_odd_collatz mengembalikan [1, 5] # Urutan collatz untuk 5 adalah [5, 16, 8, 4, 2, 1], jadi bilangan ganjilnya hanya 1 dan 5.

Banjar:
    
برکن سواتو بيلڠن بولاڠ ڤوسيتيف ن، كمباليكن دافتار يڠ ديورتكن يڠ برسي بيلڠن ڬنجيل دالم اوروتن كولاتز.

    دوقأن كولاتز اداله سواتو دوقأن دالم ماتيمتيك يڠ بركيتن دڠن اوروتن يڠ دديفينيسیکن سباڬي بركوت: مولاي دڠن بيلڠن بولاڠ ڤوسيتيف ن. كمودين ستياڤ ايستيله دپيروله دري ايستيله سبلمڽ سباڬي بركوت: جك ايستيله سبلمڽ اداله ڬيناب، ايستيله براءيكڽ اداله ستڠه دري ايستيله سبلمڽ. جك ايستيله سبلمڽ اداله ڬنجيل، ايستيله براءيكڽ اداله 3 كالي ايستيله سبلمڽ ديتمبه 1. دوقأن اين اداله بهوا تيدق ڤدولي برڤا ڤون نيلاءي ن، اوروتنڽ اكن سللوي مچاپي 1.

    چتتن:
        1. كولاتز اداله [1].
        2. دافتار يڠ كمبالي ديورتكن دالم اوروتن منينڠكت.

    سباڬي چونتوه:
    get_odd_collatz مڠمباليكن [1, 5] # اوروتن كولاتز انتوق 5 اداله [5, 16, 8, 4, 2, 1], جادي بيلڠن ڬنجيلڽ هانيا 1 دان 5.
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""Anda harus menulis sebuah fungsi yang memvalidasi string tanggal yang diberikan dan
mengembalikan True jika tanggal tersebut valid, sebaliknya False.
Tanggal tersebut valid jika semua aturan berikut dipenuhi:
1. String tanggal tidak kosong.
2. Jumlah hari tidak kurang dari 1 atau lebih dari 31 hari untuk bulan 1, 3, 5, 7, 8, 10, 12. Dan jumlah hari tidak kurang dari 1 atau lebih dari 30 hari untuk bulan 4, 6, 9, 11. Dan jumlah hari tidak kurang dari 1 atau lebih dari 29 untuk bulan 2.
3. Bulan tidak boleh kurang dari 1 atau lebih dari 12.
4. Tanggal harus dalam format: mm-dd-yyyy

misalnya:
valid_date => True

valid_date => False

valid_date => False

valid_date => True

valid_date => False

Anda harus menulis sebuah fungsi yang memvalidasi string tanggal yang diberikan dan
mengembalikan True jika tanggal tersebut valid, sebaliknya False.
Tanggal tersebut valid jika semua aturan berikut dipenuhi:
1. String tanggal tidak kosong.
2. Jumlah hari tidak kurang dari 1 atau lebih dari 31 hari untuk bulan 1, 3, 5, 7, 8, 10, 12. Dan jumlah hari tidak kurang dari 1 atau lebih dari 30 hari untuk bulan 4, 6, 9, 11. Dan jumlah hari tidak kurang dari 1 atau lebih dari 29 untuk bulan 2.
3. Bulan tidak boleh kurang dari 1 atau lebih dari 12.
4. Tanggal harus dalam format: mm-dd-yyyy

misalnya:
valid_date => True

valid_date => False

valid_date => False

valid_date => True

valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""Kamu diberi dua interval,
    di mana setiap interval adalah sepasang bilangan bulat. Sebagai contoh, interval = =.
    Interval yang diberikan adalah tertutup yang berarti interval
    termasuk mulai dan akhir.
    Untuk setiap interval yang diberikan, diasumsikan bahwa mulainya kurang dari atau sama dengan akhirnya.
    Tugas kamu adalah menentukan apakah panjang irisan dari dua interval ini adalah bilangan prima.
    Contoh, irisan dari interval, adalah
    yang panjangnya adalah 1, dan ini bukan bilangan prima.
    Jika panjang dari irisan adalah bilangan prima, kembalikan ""YA"",
    jika tidak, kembalikan ""TIDAK"".
    Jika kedua interval tidak beririsan, kembalikan ""TIDAK"".

    [contoh input/output]:
    irisan,) ==> ""TIDAK""
    irisan,) ==> ""TIDAK""
    irisan,) ==> ""YA""

Banjar:
كاڤدا كمو ديري دوا اينترڤال، دمن مانا ستياڤ اينترڤال اداله سباسڠ بيلڠن بولت. سباڬاي چنتوه، اينترڤال = =. اينترڤال يڠ ديري اداله ترتوتوڤ يڠ برارتي اينترڤال ماسوک ملاي دان اکهير. اونتوق ستياڤ اينترڤال يڠ ديري، دياسومسيکن بهاوا ملاين ڬورڠ داري اتاو سام دڠن اکهير. توڬس کمو اداله منتوکن اپاکه ڤنجڠ ايريسن داري دوا اينترڤال اين اداله بيلڠن ڤريما. چنتوه، ايريسن داري اينترڤال، اداله يڠ ڤنجڠنا اداله ١، دان اين بوکن بيلڠن ڤريما. جيکا ڤنجڠ داري ايريسن اداله بيلڠن ڤريما، کامباليکن ""يا""، جيکا تيدق، کامباليکن ""تيدق"". جيکا کاڽ اينترڤال تيدق برييريسن، کامباليکن ""تيدق"".

چنتوه اينڤوت/اووت:
ايريسن،) ==> ""تيدق""
ايريسن،) ==> ""تيدق""
ايريسن،) ==> ""يا""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    Here is the translation of the provided sentence into Banjar:

Anda diberikan sebuah array arr yang berisi bilangan bulat dan Anda perlu mengembalikan jumlah magnitudo dari bilangan-bilangan tersebut yang dikalikan dengan produk dari semua tanda dari setiap angka dalam array, yang diwakili oleh 1, -1 atau 0. Catatan: kembalikan None jika array arr kosong.

Contoh:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    Diberi sebuah grid dengan N baris dan N kolom dan sebuah bilangan bulat positif k,
    setiap sel pada grid mengandung nilai. Setiap bilangan bulat dalam kisaran [1, N * N]
    inklusif muncul tepat sekali pada sel-sel grid.

    Anda harus menemukan jalur minimum dengan panjang k di dalam grid. Anda bisa mulai
    dari sel mana saja, dan pada setiap langkah Anda bisa berpindah ke salah satu sel tetangga,
    dengan kata lain, Anda bisa pergi ke sel-sel yang berbagi sisi dengan sel Anda saat ini.
    Harap dicatat bahwa jalur dengan panjang k berarti mengunjungi tepat k sel (tidak
    harus berbeda).
    Anda TIDAK BISA keluar dari grid.
    Jalur A dianggap lebih kecil dari jalur B jika
    setelah membuat daftar berurutan dari nilai-nilai pada sel-sel yang dilalui A dan B, lst_A secara leksikografis lebih kecil
    dari lst_B, dengan kata lain, ada indeks bilangan bulat i
    yang mana lst_A[i] < lst_B[i] dan untuk setiap j kita memiliki
    lst_A[j] = lst_B[j].
    Dijamin bahwa jawabannya unik.
    Kembalikan daftar berurutan dari nilai-nilai pada sel-sel yang jalur minimum lalui.

    Contoh:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""سميعا urang tahu runtuyan Fibonacci, itu di kaji dgn dalam oleh ahli matematika di abad-abad terakhir. Tapi, apa yg urang indak tahu adalah runtuyan Tribonacci. Runtuyan Tribonacci di definisikan oleh rekurensi:
tri = 3
tri = 1 + n / 2, mun n adalah genap.
tri = tri + tri + tri, mun n adalah ganjil.
Sebagai contoh:
tri = 1 + = 2
tri = 3
tri = tri + tri + tri
         = 2 + 3 + 3 = 8
Ikam diberi angka bulat non-negatif n, ikam mesti mengembalikan daftar angka pertama dari runtuyan Tribonacci sampai n + 1.
Contoh:
tri = [1, 3, 2, 8]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""Given سأت إيجابيا n, عادهوا كنباليكن حاصيل كالي داري آنكا آنكا گنجيل.
    كنباليكن 0 جكا سموآنكا ڬنجيل.
    كونتوه:
    digits == 1
    digits == 0
    digits == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""Ikam diparikan daftar angka.
Ikam kudu mambalikan jumlah angka-angka kuadrat di dalam daftar ini,
madanakan tiapa unsur di daftar ini ka angka bulat pang atas dulu.
Contoh:
Untuk lst = [1,2,3] maka keluaran harus 14
Untuk lst = [1,4,9] maka keluaran harus 98
Untuk lst = [1,3,5,7] maka keluaran harus 84
Untuk lst = [1.4,4.2,0] maka keluaran harus 29
Untuk lst = [-2.4,1,1] maka keluaran harus 6
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""بوات ڤونكسي ينغ منمبليككن انديڠس تربسار دري سواتو العنصر ينغ تيدق لبيه بسر اتاو سام دڠن العنصر ينغ منددولويني. جك تيدق ادا العنصر سرتي ات سنديري مڠمبليككن -1. أراي ينغ دبرين تيدق اكن مڠندڠڠ ڤندولن ڤيليي.

كونتوه:
can_arrange = 3
can_arrange = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    Here's the translation of the provided text into Banjar:

تولحا فنگسي يڠ منمبه اتا انتيجر, فلوتس, اتاو سترينڠ يڠ منمبهكن انكا ڬتوي, دان منمبهكن ڬر كبسرن ڬنڠ نڠن ڬنڠن جنيڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن ڬنڠن
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""مڠكن نڠاكن اڤاكن انكاين ن بوليه دتولس سباڬاي جملهن دري ٤ انكا ڤوسيتيف ڤارا
    کونتوه
    is_equal_to_sum_even == تيدق
    is_equal_to_sum_even == تيدق
    is_equal_to_sum_even == يا
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""Faktorial Brasil didefinisikan sebagai:
    faktorial_brasil = n! *! *! * ... * 1!
    di mana n > 0

    Sebagai contoh:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces == ""Example""
    fix_spaces == ""Example_1""
    fix_spaces == ""_Example_2""
    fix_spaces == ""_Example-3""

ترجمان ما جادي جاوا قرآن بنجر:
مبريكان سترينج تكست، غانتي سموأ سباس دالميا دنان أندرسكور، دان جك سترينج أد لبهري داري 2 سباس برتروتوت، 
مكا غانتي سموأ سباس برتروتوت اتو دنان خط تندا -

fix_spaces == ""Contoh""
fix_spaces == ""Contoh_1""
fix_spaces == ""_Contoh_2""
fix_spaces == ""_Contoh-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""Mambuat fungsi yang mengambil string mewakili nama file, dan mengembalikan ""Iya"" jika nama file itu valid, dan mengembalikan ""Tidak"" jika tidak valid. Nama file dianggap valid jika dan hanya jika semua kondisi berikut terpenuhi:

- Tidak boleh ada lebih dari tiga digit dalam nama file.
- Nama file mengandung tepat satu titik '.'
- Substring sebelum titik tidak boleh kosong, dan dimulai dengan huruf dari alfabet latin.
- Substring setelah titik harus salah satu dari ini: ['txt', 'exe', 'dll']

Contoh:
file_name_check # => 'Iya'
file_name_check # => 'Tidak'
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""Translating the given sentence into Banjar:

""
    Ini fungsi akan mengambil daftar bilangan bulat. Untuk semua entri dalam daftar, fungsi ini akan menguadratkan entri bilangan bulat jika indeksnya adalah kelipatan 3 dan akan mengkubuskan entri bilangan bulat jika indeksnya adalah kelipatan 4 dan bukan kelipatan 3. Fungsi ini tidak akan mengubah entri dalam daftar yang indeksnya bukan kelipatan 3 atau 4. Fungsi ini kemudian akan mengembalikan jumlah semua entri.
    
    Contoh:
    Untuk lst = [1,2,3] outputnya harus 6
    Untuk lst = [] outputnya harus 0
    Untuk lst = [-1,-5,2,-1,-5] outputnya harus -126
""

Banjar:
""
    ايݢي ڤوڠسي اكن مڠامبيل داڽار بيلڠن بولت. اونتوق سموا انتري دالم داڽار, ڤوڠسي ايني اكن مڠواڽاتكن انتري بيلڠن بولت جيكا ايندكسڽ اداله كليڤتن 3 دان اكن مڠكوبوسكن انتري بيلڠن بولت جيكا ايندكسڽ اداله كليڤتن 4 دان بوكڽ كليڤتن 3. ڤوڠسي ايني تيدق اكن مڠوڬه انتري دالم داڽار يڠ ايندكسڽ بوكڽ كليڤتن 3 او 4. ڤوڠسي ايني كمودين اكن مڠمباليكن جومله سموا انتري.

    كونتو:
    اونتوق lst = [1,2,3] اوتوڤتڽ هاروس 6
    اونتوق lst = [] اوتوڤتڽ هاروس 0
    اونتوق lst = [-1,-5,2,-1,-5] اوتوڤتڽ هاروس -126
""
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    Andaikan pian diberi suatu string yang mewakili kalimat,
    kalimatnya mengandung beberapa kata dipisah dengan spasi,
    dan pian harus mengembalikan suatu string yang mengandung kata-kata dari kalimat asli,
    yang panjangnya adalah bilangan prima,
    urutan kata-kata dalam string baru harus sama dengan yang asli.

    Contoh1:
        Input: kalimat = ""Ini adalah tes""
        Output: ""adalah""

    Contoh2:
        Input: kalimat = ""ayuh pergi berenang""
        Output: ""pergi berenang""

    Kendala:
        * 1 <= panjang <= 100
        * kalimat hanya mengandung huruf-huruf
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""Sure, here's the translation of the given sentence into Banjar:

مهمت انجا لتو ايه منغيلواريكن فنكسي يڠ منيرهنكن ايكسبريسي
    x * n. فنكسي اني منغحسيلكن بنر كالو x * n منجديكن انك كاڬن، دان سلهم
    تيدق منغحسيلكن بنر. كبايكن x دان n اداله ترمسوك ڤمباڬين، دان مميلكي فرمات
    <بيلڠنڬنتر>/<بيلڠنڬنتر> دمن بيلڠنڬنتر دان بيلڠنڬنتر اداله بيلڠن كاڬن يڠ ڤوزيتيف.

    كامو بوڠكن بحوا x دان n اداله ڤمباڬين يڠ صح، دان تيدق مميلكي نول سباڬي بيلڠنڬنتر.

    simplify = بنر
    simplify = تيدق
    simplify = تيدق
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    Here is the translated sentence in Banjar:

كاداكن فونسئي يڠ منوروتكن دافتار انتيجر يڠ دبيريك
دالم اوردن منننجق سسواي دڠن جملهن انك دريكو.
كت: جكا ادا برابا ايتم يڠ مميلكي جملهن انك يڠ سميلا،
اوردكن مرڠكا برساسركن انديكس مريكا ددافتار اصلي.

سبيڬاي كنتوهن:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""تولس فونسين يعنمباك آرامبان يانغ مريبوتكان أرراي أنكا سبي كماسوكان دان منغيمبالكان 
    جملة العنصر دلم أرراي يانغ ليبيه داري 10 دان كدوا دجيت ڤرتام دان ترفخير دري سواتو أنكا 
    أداله غنجيل.
    مع كونتوه:
    specialFilter => 1 
    specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    Given the complexity and specificity of the problem, here's the translation of the entire sentence into Banjar:

متاكاهم كاينتهن انتيجر ڤوسيتيڤ ن. كاينهن انتا منيبن انتيجر ارراي اڠ طولن ن.
سبايك ايتو, نائلهن ارراي [ايتو] = ايتو * ايتو - ايتو + 1.
كاباليكن جوملهن تريبل دري ارراي  ديمانا ايتو < ج < ك,
دن ارراي [ايتو] + ارراي [ج] + ارراي [ك] اداله كاليڤتن دري 3.

تيلاد:
ماسوقن: ن = 5
هسيلاهن: 1
پنجلسن:
ارراي = [1, 3, 7, 13, 21]
ساتو-ساتونه تريبل ينڠ صح اداله.
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""Menulis fungsi yang menerima daftar string sebagai parameter,
menghapus string yang memiliki panjang ganjil dari daftar tersebut,
dan mengembalikan daftar yang dihasilkan dengan urutan yang terurut,
Daftar tersebut selalu merupakan daftar string dan tidak pernah berupa array angka,
dan mungkin mengandung duplikat.
Urutan daftar harus menaik berdasarkan panjang setiap kata, dan Anda
harus mengembalikan daftar yang diurutkan berdasarkan aturan tersebut.
Jika dua kata memiliki panjang yang sama, urutkan daftar secara alfabetis.
Fungsi harus mengembalikan daftar string dalam urutan yang terurut.
Anda dapat mengasumsikan bahwa semua kata akan memiliki panjang yang sama.
Sebagai contoh:
assert list_sort => [""aa""]
assert list_sort => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""برنامج بسيط يمباليكان نيلائي x اذا n اكوڽڽا ادالاڽ انكا ڤريما دان يمباليكان نيلائي y كالو تيداق.

كونتوه:
كالو x_or_y == 34
كالو x_or_y == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""Aku kira kita semua ingat perasaan itu, waktu hasil dari suatu acara yang sudah lama ditunggu-tunggu akhirnya diketahui. Perasaan dan pikiran yang kamu punya pada saat itu pasti patut dicatat dan dibandingkan.
Tugas kamu adalah menentukan apakah seseorang menebak hasil dari sejumlah pertandingan dengan benar.
Kamu diberikan dua array skor dan tebakan dengan panjang yang sama, di mana setiap indeks menunjukkan satu pertandingan.
Kembalikan array dengan panjang yang sama yang menunjukkan seberapa jauh setiap tebakan. Jika mereka menebak dengan benar, nilainya adalah 0, dan jika tidak, nilainya adalah selisih mutlak antara tebakan dan skor.

Contoh:

compare -> [0,0,0,0,3,3]
compare -> [4,4,1,0,0,6]

ترجمة الجملة إلى لغة بنجر:

أكو كيرا كيتا سموا إِنغت ڤراسان إتو, وقتو هاسيل دري سواتو أچارا يڠ سوداه لاما ديتونڬو-تونڬو أخيرنيا دكتاهوي. ڤراسان دان فكيرن يڠ كمو ڤونيا ڤادا سات إتو ڤستي ڤتوت دچات دان ديباندڠكن.
تڬس كمو أده منتوقكن apakah سسأورڠ منيبق هاسيل دري سچومله ڤرتندينڠن دڠن بنر.
كمو ديبريكڠ دوا أراي سكور دان تباكن دڠن ڤنجڠ يڠ سام, دي مانا ستياب إندكس منونجوكن ساتو ڤرتندينڠن.
كمباليكن أراي دڠن ڤنجڠ يڠ سام يڠ منونجوكن سڤرا جوه ستياب تباكن. جك مريك منيبق دڠن بنر, نيلانيا أده 0, دان جك تيدق, نيلانيا أده سليسهموتلق أنترا تباكن دان سكور.

چونتو:

compare -> [0,0,0,0,3,3]
compare -> [4,4,1,0,0,6]
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""Kamu akan diberi nama kelas dan daftar ekstensi.
	Ekstensi ini digunakan untuk memuat kelas tambahan ke dalam kelas utama. Kekuatan ekstensi diperhitungkan sebagai berikut: Biarkan CAP menjadi jumlah huruf besar dalam nama ekstensi, dan biarkan SM menjadi jumlah huruf kecil dalam nama ekstensi, kekuatan diberikan dengan pecahan CAP - SM. Kamu harus menemukan ekstensi terkuat dan mengembalikan string dalam format ini: NamaKelas.NamaEkstensiTerkuat. Jika ada dua atau lebih ekstensi dengan kekuatan yang sama, kamu harus memilih yang pertama dalam daftar. Misalnya, jika kamu diberi ""Slices"" sebagai kelas dan daftar ekstensi: ['SErviNGSliCes', 'Cheese', 'StuFfed'] maka kamu harus mengembalikan 'Slices.SErviNGSliCes' karena 'SErviNGSliCes' adalah ekstensi terkuat. Contoh: untuk Strongest_Extension == 'my_class.AA'
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""In Banjar, the translated sentence would be:

کماں ددے 2 کتا. کامواں ہارو سسوار ہاروس سسوار ہارو سسوار ہارو ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار کیتا ہارو سسوار

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""مباريكن سوتو بيلنچ. باليكن سوتو تيوبيل انق مملكي جملا سنتيجاكن بيلنچ بنجيتن دان گنجيل سكاليان.

     كونتو:
        even_odd_count ==>
        even_odd_count ==>
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    مؤلڠکن ساتو انتيجر ڤوسيتيف، دڤتكن كڤدئن روم نمرلنا سباڬاي سترينڬ،
دأولڠكن دالم حروف كچيل.
ساساتوان: 1 <= نم <= 1000

كونتوه:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""تولس فوسئي ينمراكء دأكن دفتار داري سترينغ.
    دفتار اين ترديري دأري بربأغئي كتا. كأمبأليكن كتا يڠ مميلكي جومله
    كركتر اونيك تربيانيق. جك بربأغئي سترينغ مميلكي جومله كركتر اونيك
    تربيانيق، كأمبأليكن ين يڠ برتم كالي دالم اوردن ليكسيكوغرافيس.

    find_max == ""string""
    find_max == ""enam""
    find_max == """"aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    Kamu adalah kelinci lapar, dan kamu sudah makan sejumlah wortel, 
    tetapi sekarang kamu perlu makan lebih banyak wortel untuk menyelesaikan makanan hari ini.
    kamu harus mengembalikan array [ jumlah total wortel yang dimakan setelah makanmu,
                                    jumlah wortel yang tersisa setelah makanmu ]
    jika tidak ada cukup wortel yang tersisa, kamu akan memakan semua wortel yang tersisa, tetapi tetap akan lapar.
    
    Contoh:
    * makan -> [11, 4]
    * makan -> [12, 1]
    * makan -> [11, 0]
    * makan -> [7, 0]
    
    Variabel:
    @jumlah : integer
        jumlah wortel yang sudah kamu makan.
    @perlu : integer
        jumlah wortel yang perlu kamu makan.
    @sisa : integer
        jumlah wortel yang tersisa dalam stok
    
    Batasan:
    * 0 <= jumlah <= 1000
    * 0 <= perlu <= 1000
    * 0 <= sisa <= 1000

    Selamat bersenang-senang :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    Diberikan dua daftar operator, dan operand. Daftar pertama memiliki operasi aljabar dasar, dan daftar kedua adalah daftar bilangan bulat. Gunakan dua daftar yang diberikan untuk membangun ekspresi aljabar dan kembalikan evaluasi dari ekspresi ini.

Operasi aljabar dasar:
Penambahan
Pengurangan
Perkalian
Pembagian lantai
Eksponensiasi

Contoh:
operator['+', '*', '-']
array = [2, 3, 4, 5]
hasil = 2 + 3 * 4 - 5
=> hasil = 9

Catatan:
Panjang daftar operator sama dengan panjang daftar operand dikurangi satu.
Operand adalah daftar bilangan bulat non-negatif.
Daftar operator memiliki setidaknya satu operator, dan daftar operand memiliki setidaknya dua operand.

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""Ikam dipasahi string s.
    lamun s[i] adalah huruf, tukar aksara na dari huruf kecil ka huruf besar atawa sabalikna,
    lamun lain huruf, biarkan haja.
    Lamun string nya kada ada huruf, tukar urutan string nya.
    Fungsi nya harus mengembalikan string hasil.
    Contoh:
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    مماكن 'text' اتاكن، باليكه حاش 'md5' متاكن.
كالوا 'text' كرامن، باليكه None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    Berikan dua bilangan bulat positif a dan b, kembalikan digit-genap antara a dan b, dalam urutan menaik.

Misalnya:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []

Dalam aksara Banjar:
بركن دوا بيلڠن بولت ڤوسيتيف a دان b، كمباليكن دجيت-ڬينڤ انتارا a دان b، دالم اوروتن منايق

ميسالن:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
