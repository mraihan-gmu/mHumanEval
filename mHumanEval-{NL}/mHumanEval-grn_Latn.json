[
    {
        "prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Please provide the example you would like me to translate along with the sentence.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "canonical_solution":"for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Here is the translation of the provided sentence into Guarani:\n\n**Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced and not nested within each other. Ignore any spaces in the input string. Example:**\n\n**Ko funci\u00f3n-pe o\u00f1emoinge pete\u0129 \u00f1e\u2019\u1ebdryru ha\u2019\u00e9va heta aty oikeh\u00e1pe \u00f1embojevy renda. Nde rembiapo ha\u2019e peheja umi aty pete\u0129te\u0129va \u00f1e\u2019\u1ebdryru ha emboguejy umi aty ku\u00e9ra lista-pe. Umi aty ha\u2019e orek\u00f3ta ijurujere ha ndaha\u2019\u00e9i o\u00f1embojevy joapyku\u00e9ri. \u00d1amboja\u2019o umi espaci\u00f3gui pe \u00f1e\u2019\u1ebdryru-pe. Techapyr\u00e3:**\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"
    },
    {
        "prompt":"\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Here is the translation of the given sentence into Guarani:\n\n\"Pete\u0129 n\u00famero flotante positivo rehegua, ikatu o\u00f1emboja'o mok\u00f5i peh\u1ebdme:\n    pe peh\u1ebdngue entero ha umi decimal.\n\n    Eme'\u1ebd pe peh\u1ebdngue decimal pe n\u00famero rehegua.\n    Techapyr\u00e3:\"\n\nPlease note that Guarani uses some Spanish loanwords and the structure might vary slightly depending on regional dialects.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "canonical_solution":"    return number % 1.0\n",
        "test":"def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Here's the translation of the sentence into Guarani:\n\nKo'\u00e1pe ojejapo haipyre pete\u0129 lista umi dep\u00f3sito ha jeyejoko operaci\u00f3n rehe pete\u0129 viruviru renda pyahu o\u0129va cero saldo. Nde rembiapor\u00e3 h\u00edna ohechakuaa pe saldo o\u0129va viruviru rend\u00e1pe oje\u00edvo cero gu\u00fdpe, ha upe mom\u00e9ntope la funci\u00f3n ohechauk\u00e1ta True. Ambue hend\u00e1icha katu ohechauk\u00e1ta False. Ejemplo:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Pete pete\u0129 lista de n\u00famero de entrada, eikuaava'er\u00e3pa Mba'erechah\u00e1ra Apyra rehegua umi jehepyme'\u1ebd ha'eha'\u1ef9va-rehegua ko'\u00e3 temimo'\u00e3me. Mba'erechah\u00e1ra Apyra ha'e pete\u00ee tembiapo apyt\u00e9pe ojehepyme'\u1ebdvo mombyryreko ha'eha'\u1ef9va pete\u00ee tenda:\nMAD = promedio | x - x_promedio |\nTechapyr\u00e3:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n",
        "test":"def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Mboja pete\u0129 n\u00famero 'delimeter' mbyte mok\u00f5i tembiapojoj\u00e1va apyt\u00e9pe o\u0129va `numbers\u2019 \u00f1emohenda apyt\u00e9pe.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Here is the translation of the sentence into Guarani:\n\n\"Ko tembiapo omoinge pete\u0129 \u00f1e'\u1ebd ijapytepeku\u00e9ra heta aty peh\u1ebdngue \u00f1embyaty parenthesis rehegua ojuehegua o\u00f1emohenda tembi'u rupi.\n    Pete\u0129-te\u0129va aty peh\u1ebdngue rehegua, emoka\u00f1y peimeteve pe \u00f1embyaty parenthesis rehegua.\n    Por eh\u00e9mplo,) oguereko mok\u00f5i nivel \u00f1embyaty rehegua ijapytepeku\u00e9ra ha)) oguereko mbohapy nivel.\"\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "canonical_solution":"    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Mbogueko pete\u0129 tenda jeporavo mbohapyva aty mbohapyve jehaipyre pete\u0129va jehaipyre o\u0129va pete\u0129va mbohapyve jehaipyre oinyva pete\u0129 mbohapyve jehaipyre.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if substring in x]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Pete pete\u0129 apopyre papapyku\u00e9ra rehegua, eikuaauka pete\u0129 tup\u00e3megua oguereko'\u1ef9va pete\u0129 mbohap\u00fdpe: pete\u0129 mbohapyha ha pete\u0129 mbopyre opaite papapyku\u00e9ra apopyr\u00e9pe. \n    Mbohapy mbyt\u00e9va ohechauk\u00e1va 0 ha mbohapy mbyt\u00e9va ohechauk\u00e1va 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "canonical_solution":"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test":"def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" Here is the translation of the sentence into Guarani:\n\n\"Umi papaha o\u0129va pete\u0129 papap\u00fdpe, ejapo pete\u0129 papaha opaite umi pehengue pete\u0129te\u0129gui, peiporav\u00f3va pe tuichav\u00e9va peve o\u00favo.\"\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Eha'ar\u00f5ke pe \u00f1e'\u1ebd \u00f1embohasa va'er\u00e3 katuete oiko ha'e\u00f1o. \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "canonical_solution":"    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" \"Embojevy pete\u0129va mok\u00f5i ta'anga a ha b, ojejap\u00f3va 1 ha 0-ramoguinte.\n    Eikatu binary XOR ko'\u00e3 ta'anga rehe ha ejuvykuaa avei pete\u0129 ta'anga ramo.\"\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "canonical_solution":"    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test":"def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n"
    },
    {
        "prompt":"from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Ko'\u00e3va apyt\u00e9gui, ejuvy pe ipukuv\u00e9va. Ejupyty pe pete\u0129ha jave o\u0129 ramo heta ipukujoj\u00e1va. Embojev\u00fdta mba'eve ha'ev\u00e9r\u00f5 entrada lista nandi.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "canonical_solution":"    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test":"def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n"
    },
    {
        "prompt":"\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Eme\u2019\u1ebd pete\u0129 mbohapyveve tuichav\u00e9va mok\u00f5i papapy a ha b-gua.\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    while b:\n        a, b = b, a % b\n    return a\n",
        "test":"def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Embohasa opaite \u00f1epyr\u0169 porundyh\u00e1ra umi mich\u0129v\u00e9va guive pe tuichav\u00e9vape pe \u00f1e\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\u2019\u1ebdme\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n"
    },
    {
        "prompt":"\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Eikutu pete\u0129 \u00f1e'\u1ebdme umi papaha umi papaha espasio rehegua o\u00f1epyr\u0169va 0 guive ha opa n peve.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test":"def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "prompt":"\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Here is the translation of the sentence into Guarani:\n\nPete\u0129 \u00f1andut\u00edpe, ehek\u00e1ta mboy pu\u2019ae \u00f1emopete\u0129 rehegua o\u0129pa.\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "canonical_solution":"    return len(set(string.lower()))\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" The sentence translated into Guarani is:\n\n\"Ko funci\u00f3n-pe ojeinput pete\u0129 cadena ohechauk\u00e1va purah\u00e9i mba'epu pete\u0129 formato ASCII especial-pe. \nNde rembiapo ha'e oparse ko cadena ha ome'\u1ebd pete\u0129 lista de enteros ohechauk\u00e1va mbo\u00fdpa beat oikotev\u1ebd\nk\u00f3va pe nota.\n\nKo'\u00e1pe o\u0129 pete\u0129 leyenda:\n'o' - purah\u00e9i completo, cuatro beats\n'o|' - media nota, dos beats\n'.|' - cuarto nota, un beat\"\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n"
    },
    {
        "prompt":"\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Eheka mboy jeypa pete\u0129 \u00f1e\u2019\u1ebdpeh\u1ebdtai o\u0129 kuatiarogue ypykuepe. Eipapa jepytaso rehegua.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "canonical_solution":"    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test":"def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Here is the translation of the provided sentence into Guarani:\n\n\"Input ha'e pete\u0129 cadena de texto o\u0129ha umi numeral ha'eva'er\u00e3 'zero' guive 'nine' peve o\u0129va espacio rupi.\n    Umi elecci\u00f3n hekopegu\u00e1va ha'e 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' ha 'nine'.\n    Embojuapy cadena de texto umi n\u00famero o\u00f1emohend\u00e1va mich\u0129v\u00e9vagui tuichav\u00e9va peve.\"\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "canonical_solution":"    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Here is the translation of the given sentence into Guarani:\n\n\"Mo\u0129va pete\u0129 apopyr\u00e3me umi papapy haipyr\u00e3 ha myatyr\u00f5 mok\u00f5ive ha i\u00f1embojaite ha myatyr\u00f5 haime ha.\"\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Ko tembiapo ojehupyty hag\u0303ua pete\u0129 lista de n\u00fameros, ojejapo pete\u0129 transformaci\u00f3n lineal pe lista rehe, ikatu hag\u0303u\u00e1icha pe n\u00famero mich\u0129v\u00e9va oiko 0 ha pe tuichav\u00e9va oiko 1.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n",
        "test":"def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"
    },
    {
        "prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Ehek\u00fdi pete\u0129 lista ome'\u1ebdva'er\u00e3 umi valor de python orek\u00f3va enteros a\u00f1\u00f3nte.\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in values if isinstance(x, int)]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"
    },
    {
        "prompt":"\n\ndef strlen(string: str) -> int:\n    \"\"\" Ejuvy jehaipyre ipuku.\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "canonical_solution":"    return len(string)\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n"
    },
    {
        "prompt":"\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" Pete\u0129 n\u00famero n rehegua, eheka pe tuichav\u00e9va n\u00famero omboja'o por\u00e3va n-pe, ha'eva n-gui mich\u0129v\u00e9va.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test":"def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Embojoapy kuatiahaipyre mo\u00f1ondiveveha umi tenda papa hesegua pe marandu ome'\u1ebdva jehe'a rupi pe mich\u00eev\u00e9va guive pe tuichav\u00e9va peve.\n    K\u00f3va \u00f1embyaty pete\u0129 te\u0129va tapyku\u00e9rape o\u0129va tekotev\u1ebdr\u00f5 guare apyt\u00e9pe heta jey ojehechauka hagu\u00e9icha.\n    Pe mba'ekuaar\u00e3 ojeporu va'er\u00e3 tekotev\u1ebdva ha'eh\u00edna pe mba'ekuaar\u00e3 ap\u00fdra pegua.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n \/\/= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test":"def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Rejoh\u00e9i pete\u0129 apopyr\u00fdgui umi papapy oik\u00f3va hetave jey.\n    Emohenda hekopete umi opyta va'er\u00e3 pete\u0129cha pe mba'e reme'\u1ebdhagueicha.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n"
    },
    {
        "prompt":"\n\ndef flip_case(string: str) -> str:\n    \"\"\" Pete\u0129 \u00f1emohenda rehegua, mboguejy umi karacter mich\u0129gui tuichapyr\u00e3me ha umi karacter tuich\u00e1gui mich\u0129vape.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "canonical_solution":"    return string.swapcase()\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Mboguepy umi apopyre \u00f1emboja'o pete\u0129nte apopyre.\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "canonical_solution":"    return ''.join(strings)\n",
        "test":"def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Embogua apo pete\u0129 lista \u00f1e\u2019\u1ebd oik\u00f3va ha\u2019\u00e9va umi ijypykue pete\u0129 \u00f1e\u2019\u1ebdmbyre.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"
    },
    {
        "prompt":"\n\ndef get_positive(l: list):\n    \"\"\"Ejerure umi n\u00famero ipositiv\u00f3va a\u00f1\u00f3nte pe lista-pe.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "canonical_solution":"    return [e for e in l if e > 0]\n",
        "test":"def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n"
    },
    {
        "prompt":"\n\ndef is_prime(n):\n    \"\"\"Embojoja a\u00f1etete pete\u0129 pape araka'eve ha'e mar\u00e3, ha japu ambue jave.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "canonical_solution":"    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n"
    },
    {
        "prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Oikuaauka polinomioku\u00e9ra xs rehegua ko'\u00e3ga x \u00e1ra.\n    jevy xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test":"def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"
    },
    {
        "prompt":"\n\ndef sort_third(l: list):\n    \"\"\"Ko funci\u00f3n ogueraha pete\u00ee lista l ha oikutu pete\u00ee lista l' o\u00eeh\u00e1icha\n    l' ojogua l-pe umi \u00edndice ndaha'\u00e9iva mboja'\u00fdva mbohapyre, ha hembiapo umi valor-pe umi \u00edndice-pe mboja'\u00fdva mbohapyre ojojogua\n    umi valor-pe ko'\u00e3 \u00edndice-pe l-pe, p\u00e9ro o\u00f1embosako'i.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "canonical_solution":"    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n"
    },
    {
        "prompt":"\n\ndef unique(l: list):\n    \"\"\"Eme'\u00ea umi mba'e o\u0129va pete\u0129 apopyre-pe ha o\u0129va pete\u0129nte.\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(list(set(l)))\n",
        "test":"def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n"
    },
    {
        "prompt":"\n\ndef max_element(l: list):\n    \"\"\"Emyengovia mboyvevegua haipyrepe.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"
    },
    {
        "prompt":"\n\ndef fizz_buzz(n: int):\n    \"\"\"Eikuaami mboy jeypa ojehecha umi papapy 7 umi papap\u00fdpe mich\u0129veva n-gui, ha'eva ikatuva ojepe'a por\u00e3 11 t\u00e9r\u00e3 13 rehe.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test":"def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"
    },
    {
        "prompt":"\n\ndef sort_even(l: list):\n    \"\"\"Ko tembiapo oipe'a pete\u0129 lista l ha omoinge pete\u0129 lista l' p\u00e9icha\n    l' he'iseha l-pe umi \u00edndice impar-pe, ha ijeheguiete umi valor \u00edndice par-pe\n    ha katu umi valor \u00edndice par-pe o\u0129 l-pe, ha katu o\u00f1emohenda por\u00e3.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "canonical_solution":"    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n"
    },
    {
        "prompt":"\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    ohepyme'\u1ebd pete\u0129 \u00f1e'\u1ebd \u00f1emboja'o mbohapy pu'ae rupi.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"
    },
    {
        "prompt":"\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib oipe\u2019a pe ipyah\u00fava n-avo pete\u0129 mba\u2019e Fibonacci ha avei pete\u0129 mymbaku\u00e9ra.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "canonical_solution":"    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test":"def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n"
    },
    {
        "prompt":"\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero ojagarra pete\u0129 lista de enteros entradaicha.\n    ohepyme'\u1ebd True o\u0129ramo mbohapy mba'e ojekua\u00e1va pe listape\n    omo\u00f1ondivepa ha ipah\u00e1pe o\u00f1embojoja cero, ha False ambue hend\u00e1icha.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n"
    },
    {
        "prompt":"\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Emo\u00f1epyr\u0169mi tape pete\u0129 l\u00ed\u00f1a ojejap\u00f3va peichaite peve ha ipuk\u00fava ndop\u00e1iha.\n    n mba'yruoguata oho ojehegui os\u1ebdvo;  \u00e1ga katu, ambue aty n mba'yruoguata\n    ou o\u00favo.  Umi mok\u00f5i aty mba'yruoguata o\u00f1epyr\u0169 mombyryeterei ojuehegui.  Mba'yruoguata opaichagua oho pete\u0129cha tapia.  Mok\u00f5i mba'yruoguata o\u00f1emotenonde jave pete\u0129 mba'yruoguata oho ojehegui os\u1ebdvo ha ambue mba'yruoguata ou o\u00favo.\n    Ko'\u00e3 mba'yruoguata katuete oim\u00e9ne ikatu o\u0129 \u00f1embyepoti; upevare, o\u00f1embojoapy hiku\u00e1i\n    ha os\u1ebd oho hekoh\u00e1icha oim\u00e9ne ndaip\u00f3ri \u00f1embyepoti.\n\n    Ko tembiporu oikuaa mba'\u00e9ichapa umi \u00f1embyepoti oik\u00f3ta.\n    \"\"\"\n",
        "canonical_solution":"    return n**2\n",
        "test":"def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"
    },
    {
        "prompt":"\n\ndef incr_list(l: list):\n    \"\"\"Ejuvy pe lista ha umi mba'e \u00f1emohenda pete\u0129me.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "canonical_solution":"    return [(e + 1) for e in l]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n"
    },
    {
        "prompt":"\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero oipe'\u00e1ta pete\u0129 lista de enteros.\n    ombopyru True o\u0129ramo mok\u00f5i elemento op\u00e1ichagua lista-pe\n    o\u00f1e\u00f1and\u00fava cero-pe, ha False ambue hend\u00e1icha.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n"
    },
    {
        "prompt":"\n\ndef change_base(x: int, base: int):\n    \"\"\"Mbohasa x n\u00famero de entrada a otro sistema num\u00e9rico.\n    embohasa jey haipyvoicha rire.\n    base n\u00famero ndohas\u00e1i 10-gui.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "canonical_solution":"    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x \/\/= base\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n"
    },
    {
        "prompt":"\n\ndef triangle_area(a, h):\n    \"\"\"Eme\u2019\u1ebdva\u2019ekue pe yvate ha pe pehengue pukukue, eipe\u2019a pe yvyra renda pete\u0129 \u00f1emohenda.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "canonical_solution":"    return a * h \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"
    },
    {
        "prompt":"\n\ndef fib4(n: int):\n    \"\"\"Pe ipyah\u00fava Fib4 kuatiarogue ha'e pete\u0129 kuatiarogue ojogu\u00e1va Fibonacci kuatiaroguepe ojehechauk\u00e1va ko'\u00e3icha:\n    fib4 -> 0\n    fib4 -> 0\n    fib4 -> 2\n    fib4 -> 0\n    fib4 -> fib4 + fib4 + fib4 + fib4.\n    Ehai por favor pete\u0129 tembiapo ikat\u00fava oha'ar\u00f5 por\u00e3va peve pe n-avei mba'e Fib4 kuatiaroguepe. Ani eipuru recursi\u00f3n.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "canonical_solution":"    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test":"def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n"
    },
    {
        "prompt":"\n\ndef median(l: list):\n    \"\"\"Emeg\u0303u\u0303e jevy umi mba'e o\u0129va l apyt\u00e9pe ha embohasa mbyt\u00e9pe.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "canonical_solution":"    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) \/\/ 2]\n    else:\n        return (l[len(l) \/\/ 2 - 1] + l[len(l) \/\/ 2]) \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Ohecha ma'er\u00e3pa hemiandu pete\u0129 \u00f1e'\u1ebd he'is\u00e9va \u00f1embojoja.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n"
    },
    {
        "prompt":"\n\ndef modp(n: int, p: int):\n    \"\"\"Eju jey 2^n modulo p.\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "canonical_solution":"    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n"
    },
    {
        "prompt":"\n\ndef encode_shift(s: str):\n    \"\"\"\n    ojegueru jey \u00f1e\u2019\u1ebd\u00f1emi o\u00f1embohasa rire opaite pu'ae ku\u00e9ra 5 pu'ae rupi.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n"
    },
    {
        "prompt":"\n\ndef remove_vowels(text):\n    \"\"\"\n    \"remove_vowels\" ha'e pete\u0129 funci\u00f3n ojap\u00f3va pe\u1ebdva pete\u0129 k\u00e1sope ha omboje\u00fdva upe k\u00e1sope ha'ev\u00e9va sin vocales.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"
    },
    {
        "prompt":"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Ejekuaa Mba\u2019ever\u00e3 o\u0129pa opa umi papaha l-pe gu\u00fdpe t rembe'y.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"
    },
    {
        "prompt":"\n\ndef add(x: int, y: int):\n    \"\"\"Mbojoapy mok\u00f5i papaha x ha y.\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "canonical_solution":"    return x + y\n",
        "test":"def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n"
    },
    {
        "prompt":"\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Ehecha mba\u02bcer\u00e3 mok\u00f5i \u00f1e\u02bc\u1ebd oguereko pete\u0129chagua pu\u02bcae.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "canonical_solution":"    return set(s0) == set(s1)\n",
        "test":"def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n"
    },
    {
        "prompt":"\n\ndef fib(n: int):\n    \"\"\"Ejev\u00fdpy n-avo Fibonacci p\u00fanta.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test":"def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" Here is the translation of the sentence into Guarani:\n\n\"brackets\" ha'e pete\u0129 \"string\" rehegua \"<\" ha \">\" rehegua. \n    Eikua\u00e1ta a\u00f1eteh\u00e1pe opa jave pe bracket ojepe'\u00e1va ha'e pete\u0129 bracket ojepytas\u00f3vape.\n\nNote: Guarani, like many languages, may not have direct translations for some technical or modern computing terms like \"string\" or \"brackets\". Therefore, these terms are often borrowed directly from English.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n"
    },
    {
        "prompt":"\n\ndef monotonic(l: list):\n    \"\"\"Eju True umi lista rembiapo oik\u00f3va t\u00e9r\u00e3gue oguejyh\u00e1pe.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"
    },
    {
        "prompt":"\n\ndef common(l1: list, l2: list):\n    \"\"\"Ejekuaa umi mba\u2019e o\u0129va mok\u00f5ive apopyr\u00fdpe ha ejoku\u00e1i por\u00e3.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "canonical_solution":"    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test":"def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n"
    },
    {
        "prompt":"\n\ndef largest_prime_factor(n: int):\n    \"\"\"Ejuvy pe tuichav\u00e9va ku\u00e1ra prime orek\u00f3va n. E\u00f1amindu'u n > 1 ha ndoik\u00f3i hese pete\u0129 ku\u00e1ra prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test":"def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"
    },
    {
        "prompt":"\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n ha'e pete\u00ee funci\u00f3n omo\u0129va umi papaha 1 guive n peve.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "canonical_solution":"    return sum(range(n + 1))\n",
        "test":"def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" Here is the translation of the sentence into Guarani:\n\n\"brackets ha'e pete\u0129 \u00f1embojoaju \"\" rehegua.\n    eguereko a\u00f1etete ramo opa \u00f1epyr\u0169va bracket oguereko pete\u0129 mbotyha bracket.\"\n\nNote that Guarani might not have direct equivalents for all programming terms, so some English terms are retained for clarity.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n"
    },
    {
        "prompt":"\n\ndef derivative(xs: list):\n    \"\"\" Ko'\u00e3 xs ohechauka umi coeficiente pete\u0129 polinomiopegua.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Eme'\u1ebd jey ko polinomio derivada upeichagua t\u00e9ra pyahu rupive.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "canonical_solution":"    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n"
    },
    {
        "prompt":"\n\ndef fibfib(n: int):\n    \"\"\"Here is the translation of the given sentence into Guarani:\n\nKo'\u00e3ga ahechauk\u00e1ta mba'\u00e9ichapa ojejapo \u00f1emohenda FibFib umi n\u00famero-pe, ha'\u00e9va pete\u0129 \u00f1emohenda ojogua pe Fibonacci \u00f1emohend\u00e1pe ha odefin\u00edva ko'\u00e3icha:\n    fibfib == 0\n    fibfib == 0\n    fibfib == 1\n    fibfib == fibfib + fibfib + fibfib.\n    Up\u00e9vare, ejapo pete\u0129 funci\u00f3n ikat\u00fava oikuaa por\u00e3ve mba'\u00e9pa pe n-avo elemento pe \u00f1emohenda FibFib n\u00famero-pe.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"
    },
    {
        "prompt":"\nFIX = \"\"\"\nEmo\u0129veve ambue tembiapo.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef circular_shift(x, shift):\n    \"\"\"Here is the translation of the given sentence into Guarani:\n\n\"Emboja'o circularmente umi papaha integer x, emboja'o umi papaha akat\u00faa gotyo jevyve shift-pe\nha embojevy resultado pete\u0129 \u00f1e'\u1ebdme. \nNderehechakua\u00e1iramo shift hetaveha umi papaha retakue-gui, embojevy umi papaha o\u00f1embojoja.\"\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef digitSum(s):\n    \"\"\"Mbohasa ko tembiapo Guarani \u00f1e'\u1ebdme:\n\n**Tembiapo:**\n    Emo\u0129 pete\u0129 tembiapo orek\u00f3va pete\u0129 \u00f1e'\u1ebdt\u00e9va ha ome'\u1ebdva umi t\u00e9ra tuich\u00e1va ASCII c\u00f3digo aty sum\u00e1pe.\n\n    Techapyr\u00e3:\n        digitSum => 0\n        digitSum => 131\n        digitSum => 67\n        digitSum => 69\n        digitSum => 131\n        digitSum => 153\n    \"\"\"\n",
        "canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef fruit_distribution(s,n):\n    \"\"\"\n    Ko tembiap\u00f3pe, ojehech\u00e1ta pete\u0129 \u00f1e'\u1ebdjoaju ohechauk\u00e1va mbokaja ha nar\u00e3 remimo\u0129mbyre pete\u0129 yvyraty ryep\u00fdpe. Ko yvyraty oreko mbokaja, nar\u00e3 ha mango. Eme'\u1ebdramo pete\u0129 \u00f1e'\u1ebdjoaju ohechauk\u00e1va mbokaja ha nar\u00e3 rembimo\u0129mbyre ha pete\u0129 papapy ohechauk\u00e1va yvyraty ryep\u00fdpe opaite yva, eikuaauk\u00e1ta mango rembimo\u0129mbyre yvyraty ryep\u00fdpe.\n\nTechapyr\u00e3:\nfruit_distribution -> 19 - 5 - 6 = 8\nfruit_distribution -> 3 - 0 - 1 = 2\nfruit_distribution -> 100 - 2 - 3 = 95\nfruit_distribution -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "canonical_solution":"    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n"
    },
    {
        "prompt":"\ndef pluck(arr):\n    \"\"\"\n    \"K\u00f3va pete\u0129 ary ohechauk\u00e1va pete\u0129 yvyra rak\u00e3 oguerek\u00f3va umi tenda non-negative integer rehegua\n        nde rembiapo h\u00edna omboguejy pete\u0129va umi tend\u00e1gui ha ombyepot\u00edvo.\n        Upe tend\u00e1 omboguejyva'er\u00e3 oikotev\u1ebdva'er\u00e3 pete\u0129 tend\u00e1 oguerek\u00f3va pe mich\u0129v\u00e9va umi tend\u00e1 hepyku\u00e9va apyt\u00e9pe.\n        Jep\u00e9mo heta tend\u00e1 oguerek\u00f3va pe mich\u0129v\u00e9va umi tend\u00e1 hepyku\u00e9va ojehech\u00e1vo, ombu\u00e9vo pe tend\u00e1 oguerek\u00f3va pe mich\u0129v\u00e9va tenda.\n\n        Pe tend\u00e1 omboguejyva'er\u00e3 o\u00f1emoguah\u1ebdta pete\u0129 lista-pe, [ mich\u0129v\u00e9va, i tenda ],\n        \u00d1eha'\u00e3 ndaip\u00f3ri umi tend\u00e1 hepyku\u00e9va t\u00e9r\u00e3 pe ary o\u0129va nandi, ombotapyku\u00e9vo [].\n\n        Techapyr\u00e31:\n            Input: [4,2,3]\n            Output: [2, 1]\n            \u00d1emyesak\u00e3: 2 oguereko pe mich\u0129v\u00e9va tend\u00e1 hepyku\u00e9va, ha 2 oguereko pe mich\u0129v\u00e9va tenda.\n\n        Techapyr\u00e32:\n            Input: [1,2,3]\n            Output: [2, 1]\n            \u00d1emyesak\u00e3: 2 oguereko pe mich\u0129v\u00e9va tend\u00e1 hepyku\u00e9va, ha 2 oguereko pe mich\u0129v\u00e9va tenda. \n\n        Techapyr\u00e33:\n            Input: []\n            Output: []\n\n        Techapyr\u00e34:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            \u00d1emyesak\u00e3: 0 h\u00edna pe mich\u0129v\u00e9va tend\u00e1, p\u00e9ro mok\u00f5i cer\u00f3 o\u0129, \n                        up\u00e9vare roiporav\u00f3ta pe primer cer\u00f3, oguerek\u00f3va pe mich\u0129v\u00e9va tenda.\n\n        Mba'\u00e9ichapa ojejapo:\n            * 1 <= tendaku\u00e9ra.ku\u00e9ra => 10000\n            * 0 <= tenda.vale\"\n    \"\"\"\n",
        "canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"
    },
    {
        "prompt":"\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "canonical_solution":"    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "canonical_solution":"    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)\/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n"
    },
    {
        "prompt":"\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u00e2 -> False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u00e2 -> False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u00e2 -> True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u00e2 -> True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "canonical_solution":"    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n"
    },
    {
        "prompt":"\ndef smallest_change(arr):\n    \"\"\"\n    Ko'\u00e3va apopyr\u00e3me, ko'\u00e3 apopyr\u00e3 ojepur\u00fava Guarani \u00f1e'\u1ebdme:\n\nO\u0129ramo pete\u0129 arr ndive umi papapy integer-ku\u00e9ra, eheka mbovymi tembiapopyre tekotev\u1ebdva o\u00f1emoambue ikatu hag\u0303u\u00e1icha pe array oiko pal\u00edndromo. Pete\u0129 pal\u00edndromo array ha'e pete\u0129 array ojehech\u00e1va pete\u0129chagua tapykue ha tenonde gotyo. Pete\u0129 jepytaso-pe, ikatu remoambue pete\u0129 tembiapopyre ambue tembiapopyre rehe.\n\nTechapyr\u00e3r\u00f5:\nsmallest_change == 4\nsmallest_change == 1\nsmallest_change == 0\n    \"\"\"\n",
        "canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"
    },
    {
        "prompt":"\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u00e2 -> []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u00e2 -> ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u00e2 -> ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u00e2 -> ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u00e2 -> ['4']\n    '''\n",
        "canonical_solution":"    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n"
    },
    {
        "prompt":"\ndef is_multiply_prime(a):\n    \"\"\"Mbohasa ko \u00f1e'\u1ebdme:\n\nEmboguapy pete\u0129 funci\u00f3n oporand\u00fava oim\u00e9pa tembiapoha ome'\u1ebdva pete\u0129 n\u00famero ha'\u00e9pa mbohap\u00fdva mbohapy tet\u00e3me'\u1ebdre'\u1ef9va ha ndaha'\u00e9i ambueh\u00e1icha.\nEikuaa hag\u0303ua mich\u0129veha 100-gui.\nTechapyr\u00e3:\nis_multiply_prime == A\u00f1ete\n30 = 2 * 3 * 5\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"
    },
    {
        "prompt":"\ndef is_simple_power(x, n):\n    \"\"\"Ne rembiapo h\u00edna embopyahu pete\u00ee funci\u00f3n oikuaauk\u00e1va a\u00f1etegua pete\u0129 n\u00famero x ha'eha pete\u0129 simple\n    mbarete n-gui ha japu ambue k\u00e1sope.\n    x ha'e pete\u0129 simple mbarete n-gui n**int=x\n    Techapyr\u00e3r\u00f5:\n    is_simple_power => a\u00f1etegua\n    is_simple_power => a\u00f1etegua\n    is_simple_power => a\u00f1etegua\n    is_simple_power => japu\n    is_simple_power => japu\n    is_simple_power => japu\n    \"\"\"\n",
        "canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "canonical_solution":"    a = abs(a)\n    return int(round(a ** (1. \/ 3))) ** 3 == a\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n"
    },
    {
        "prompt":"\ndef hex_key(num):\n    \"\"\"Rehepyme'\u1ebdv\u00e9va nd\u00e9ve \u00f1emo\u0129 hag\u0303ua pete\u0129 tembiapor\u00e3 oikotev\u1ebdva reha\u00edva pete\u0129 funci\u00f3n oguerek\u00f3va pete\u0129 n\u00famero hexadecimalicha pete\u0129 k\u00e1dena-pe ha ohesa'\u1ef9ij\u00f3va mboy d\u00edgito hexadecimal ha'e prime. D\u00edgito hexadecimal-ku\u00e9ra ha'e: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. N\u00famero primo-ku\u00e9ra ha'e: 2, 3, 5, 7, 11, 13, 17,... Up\u00e9ichar\u00f5 tekotev\u1ebd rehesa'\u1ef9ijo mboy n\u00famero o\u0129va ko'\u00e3 d\u00edgito-pe: 2, 3, 5, 7, B, D. Note: ikatu rembohov\u00e1i natekotev\u1ebdiva rehecha o\u0129pa error t\u00e9r\u00e3 k\u00e1dena nandi, ha umi s\u00edmbolu A,B,C,D,E,F o\u0129ta siempre may\u00fascula-pe. Ejemploku\u00e9ra: Num = \"AB\" peguar\u00e3 salida ha'eta 1. Num = \"1077E\" peguar\u00e3 salida ha'eta 2. Num = \"ABED1A33\" peguar\u00e3 salida ha'eta 4. Num = \"123456789ABCDEF0\" peguar\u00e3 salida ha'eta 6. Num = \"2020\" peguar\u00e3 salida ha'eta 2.\n    \"\"\"\n",
        "canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"
    },
    {
        "prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"P\u00e9ina o\u00f1eme'\u1ebdta nd\u00e9ve pete\u0129 n\u00famero decimal-pe ha ne rembiapo h\u00edna ombohekopyre binary-pe. Pe funci\u00f3n oikova'er\u00e3 ombohov\u00e1i pete\u0129 cadena, ha k\u00e1da karakter oik\u00f3va binary n\u00famero-pe. K\u00e1da karakter ko cadena-pe oik\u00f3ta '0' t\u00e9r\u00e3 '1'.\n\nO\u0129ta mok\u00f5i karakter 'db' \u00f1epyr\u0169me ha ipah\u00e1pe pe cadena-pe. Ko'\u00e3 karakter \u00f1embytegua o\u0129 hiku\u00e1i ikatuhag\u0303u\u00e1icha ojehechakuaa pe formato.\n\nTechapyr\u00e3:\ndecimal_to_binary   # ombohov\u00e1i \"db1111db\"\ndecimal_to_binary   # ombohov\u00e1i \"db100000db\"\n    \"\"\"\n",
        "canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef is_happy(s):\n    \"\"\"Here is the translation of the given sentence into Guarani:\n\nRe\u00f1eme\u2019\u1ebd pete\u0129 \u00f1emboheko s.\n    Nde rembiapo ha\u2019e ohecha nde \u00f1emboheko ovy\u2019a t\u00e9r\u00e3 nah\u00e1niri.\n    Pete\u0129 \u00f1emboheko ovy\u2019a ramo ipeh\u1ebdngue ipukukue mich\u0129v\u00e9va mbohapy ha oimera\u1ebd mbohapy achegety ojuehegui ha\u2019e oikotev\u1ebdva\n    Techapyr\u00e3re:\n    is_happy => Nah\u00e1niri\n    is_happy => Nah\u00e1niri\n    is_happy => A\u00f1ete\n    is_happy => Nah\u00e1niri\n    is_happy => A\u00f1ete\n    is_happy => Nah\u00e1niri\n    \"\"\"\n",
        "canonical_solution":"    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n"
    },
    {
        "prompt":"\ndef numerical_letter_grade(grades):\n    \"\"\"Ko'\u00e1ga \u00e1ra paha pe semestre ha mbo'eh\u00e1ra oikotev\u1ebd ome'\u1ebd umi notas temimbo'eku\u00e9pe. Pe mbo'eh\u00e1ra ojapo pete\u0129 algoritmo ijeheguiete ome'\u1ebd hag\u0303ua umi notas. Pe problema ha'e h\u00edna, oka\u00f1y hese pe c\u00f3digo ojapo va'ekue ome'\u1ebd hag\u0303ua umi notas. Ha'e ne'\u1ebdrendu nd\u00e9ve pete\u00ee lista umi GPA rehegua umi temimbo'eku\u00e9ra ha nde reikotev\u1ebd rehai pete\u0129 funci\u00f3n ikat\u00fava ome'\u1ebd pete\u0129 lista umi notas letras rehegua ko'\u00e3 mba'e o\u00f1e'\u1ebdh\u00e1icha:\n             GPA       |    Nota letra\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Techapyr\u00e3:\n    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "canonical_solution":"\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef prime_length(string):\n    \"\"\"Here is the translation of the provided sentence into Guarani:\n\n```\nEmbokuatia pete\u0129 tembiapokuaa omoing\u00e9va pete\u0129 haiha ha ome'\u1ebdva True pe haiha pukukue pete\u0129 n\u00famero prime ramo t\u00e9r\u00e3 False ambue hend\u00e1icha.\nEhechaukaha\nprime_length == True\nprime_length == True\nprime_length == True\nprime_length == False\n```\n    \"\"\"\n",
        "canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"
    },
    {
        "prompt":"\ndef starts_one_ends(n):\n    \"\"\"\n    Considering the complexity of accurately translating technical content, especially into lesser-known languages like Guarani, it's important to convey the correct meaning. Here's the translation:\n\n\"Pe\u1ebdme pete\u0129 entero positivo n, pe\u1ebdme mbovy umi n-papaha entero positivo o\u00f1epyr\u0169va t\u00e9r\u00e3 opa 1-pe.\"\n\nPlease note that technical and mathematical terminology might not have direct equivalents in Guarani, so the translation aims to maintain the meaning as closely as possible.\n    \"\"\"\n",
        "canonical_solution":"    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(N):\n    \"\"\"O\u00f1eme'\u1ebdramo pete\u0129 n\u00famero entero N, embojev\u00fdta sumatoria total umi ijypykueku\u00e9ra binary-pe.\n\n    Techapyr\u00e3\n        N = 1000 jave, ijypykueku\u00e9ra sumatoria ha'e 1, up\u00e9ichar\u00f5 output oik\u00f3ta \"1\".\n        N = 150 jave, ijypykueku\u00e9ra sumatoria ha'e 6, up\u00e9ichar\u00f5 output oik\u00f3ta \"110\".\n        N = 147 jave, ijypykueku\u00e9ra sumatoria ha'e 12, up\u00e9ichar\u00f5 output oik\u00f3ta \"1100\".\n\n    Vars:\n        @N entero\n             Mba'epor\u00e3: 0 \u2264 N \u2264 10000.\n    Output:\n         pete\u0129 cadena n\u00famero binary-pe\n    \"\"\"\n",
        "canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"
    },
    {
        "prompt":"\ndef add(lst):\n    \"\"\"Ag\u0303uah\u1ebdvo pete\u00ee lista ndaha'\u00e9iva h\u0169inte de enteros lst. Emo\u0129 umi elemento par ojogu\u00e1va umi \u00edndice impar-pe.\n\n    Techapyr\u00e3:\n        emo\u00ee ==> 2 \n    \"\"\"\n",
        "canonical_solution":"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n"
    },
    {
        "prompt":"\ndef anti_shuffle(s):\n    \"\"\"\n    Here is the translation of the given sentence into Guarani:\n\n```\nEmbopyahu pete\u0129 tembiapo pete\u0129 \u00f1embohasa'\u1ef9va ombojopy pete\u0129 \u00f1e'\u1ebdme ha ome'\u1ebd pete\u0129 \u00f1e'\u1ebdmyatyr\u00f5va chugui.\n    \u00d1e'\u1ebdmyatyr\u00f5va pete\u0129 \u00f1e'\u1ebdme, ha'\u00e9va pete\u0129 \u00f1e'\u1ebd \u00f1emo\u0129ha\n    o\u00f1embojopy pete\u0129 \u00f1e'\u1ebd pyahu ojeporavokua\u00e1vo opaichagua ku\u00e9ra o\u00f1emo\u0129va\n    yvate rupi base pete\u00ee valor ascii rehe.\n    Note: Reipuruva'er\u00e3 \u00f1e'\u1ebd \u00f1emo\u0129ha ha pa'\u0169ngu\u00e9ra \u00f1e'\u1ebdme.\n\n    Techapyr\u00e3:\n    anti_shuffle ome'\u1ebd 'Hi'\n    anti_shuffle ome'\u1ebd 'ehllo'\n    anti_shuffle ome'\u1ebd 'Hello !!!Wdlor'\n```\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef get_row(lst, x):\n    \"\"\"\n    Ko'\u00e1pe o\u0129 ne 2 dimensional data, ha'e pete\u0129 lista nested-pe,\n    ojogu\u00e1va matriz-pe, p\u00e9ro, matriz-ku\u00e9raicha,\n    k\u00e1da rregla ikatu oreko kolumna pete\u0129cha.\n    Oime lst ha entero x, eheka entero x pe lista-pe,\n    ha embojev\u00fd lista tupla-ku\u00e9ra, [, ...] um\u00edvaicha\n    k\u00e1da tupla ha'e pete\u0129 koordin\u00e1da -, o\u00f1epyr\u0169va 0-gui.\n    Emo\u0129 koordin\u00e1da-ku\u00e9ra rregla-ku\u00e9ra-pe ascendente orden-pe.\n    Avei, emo\u0129 koordin\u00e1da-ku\u00e9ra rregla-pe kolumna-ku\u00e9ra descendente orden-pe.\n\n    Ejemploku\u00e9ra:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [,,,,]\n    get_row == []\n    get_row == []\n    \"\"\"\n",
        "canonical_solution":"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef sort_array(array):\n    \"\"\"\n    Here is the translation of the given sentence into Guarani:\n\nEikuave'\u00ea pete\u0129 apopyr\u00e3 umi papapy no\u00f1emomich\u0129va ha ani pya'e hag\u0303ua, embohasa pete\u0129 mba'epoka pe\u1ebdme peve \u00f1embosar\u00e1i rire,\n  rembosar\u00e1ita pe mba'epoka up\u00e9va sapy'anteve peve ha \u00f1embosar\u00e1i pya'e hag\u0303ua sapy'anteve peve \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 mba'epoka pe\u1ebdme peve ha \u00f1embosar\u00e1i \u00f1embosar\u00e1i pete\u0129 \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1embosar\u00e1i \u00f1emb\n    \"\"\"\n",
        "canonical_solution":"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef encrypt(s):\n    \"\"\"Mba'\u00e9ichapa, aguyje nde pytyv\u00f5re. Ko'\u00e1pe ningo pe \u00f1e'\u1ebd Guarani rehegua: \n\nCrea pete\u0129 funci\u00f3n \"encrypt\" ombohasa hag\u0303ua pete\u0129 cadena de texto ha\n    omyengovia hag\u0303ua pete\u0129 cadena encryptada pe abecedario o\u00f1embohas\u00e1va. \n    Pe abecedario o\u00f1embohasa va'er\u00e3 p\u00e9icha, umi pu'ae os\u1ebdk\u00f3sa mok\u00f5i jey mok\u00f5i hend\u00e1pe.\n    Techapyr\u00e3:\n    encrypt ome'\u1ebd 'lm'\n    encrypt ome'\u1ebd 'ewhjklnop'\n    encrypt ome'\u1ebd 'kj'\n    encrypt ome'\u1ebd 'ix'\n    \"\"\"\n",
        "canonical_solution":"    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef next_smallest(lst):\n    \"\"\"\n    Here is the translation of the given sentence into Guarani:\n\nOje'e nd\u00e9ve pete\u0129 lista de enteros.\n    Ehai pete\u0129 funci\u00f3n h\u00e9rava next_smallest ikatuva ombohasa pe 2\u00ba elemento mich\u0129v\u00e9va lista-pe.\n    Eikutu None ndaha'\u00e9i ramo peichagua elemento.\n    \n    next_smallest == 2\n    next_smallest == 2\n    next_smallest == None\n    next_smallest == None\n    \"\"\"\n",
        "canonical_solution":"    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_bored(S):\n    \"\"\"\n    Here is the translation of the given sentence into Guarani:\n\nO\u00f1eme\u2019\u1ebdta nd\u00e9ve pete\u0129 ahy'o \u00f1e'\u1ebd, ha nde tembiapo h\u00edna kuenta mbo\u00fdpa \"kane'\u00f5\". Pete\u0129 kane'\u00f5 ha'e pete\u0129 \u00f1e'\u1ebdjoaju o\u00f1epyr\u0169va \u00f1e'\u1ebdme \"Che\". \u00d1e'\u1ebdjoaju ojepe'a '.'-pe, '?'-pe t\u00e9r\u00e3 '!'-pe.\n\nTechapyr\u00e3:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "canonical_solution":"    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u00e2 -> True\n    \n    any_int(3, 2, 2) \u00e2 -> False\n\n    any_int(3, -2, 1) \u00e2 -> True\n    \n    any_int(3.6, -2.2, 2) \u00e2 -> False\n  \n\n    \n    '''\n",
        "canonical_solution":"    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef encode(message):\n    \"\"\"\n    Here is the translation of the given sentence into Guarani:\n\n**Embopu pete\u0129 tembiapo oipyhyva pete\u0129 marandu, ha ombosako'i peichaite avei o\u00f1emoambueva umi pu'aka opaite pu'ae, omyengovia opaite pu'ae kuatiaroguegu\u00e1va pe marandupe kuatiarogue ambue mok\u00f5i tenda tenondegua umi pu'ae alpah\u00e9tape inglyespe.**\n**Erek\u00f3ke mba'ekuaar\u00e3nte kuatiarogue.**\n\n**Techapyr\u00e3:**\n\nPlease let me know if you have any specific examples or additional context you would like included.\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\n\ndef skjkasdkd(lst):\n    \"\"\"Here is the translated sentence into Guarani:\n\nO\u00f1eme'\u1ebd nd\u00e9ve pete\u0129 lista de enteros.\n    Nde tekotev\u1ebd rehekave pe valor m\u00e1s grande ha'eh\u00e1icha pete\u0129 n\u00famero primo ha emo\u0129 jey umi ijapytepegua suma de sus d\u00edgitos.\n\n    Ejemplos:\n    Pe lista = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] pe salida debe ser 10\n    Pe lista = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] pe salida debe ser 25\n    Pe lista = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] pe salida debe ser 13\n    Pe lista = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] pe salida debe ser 11\n    Pe lista = [0,81,12,3,1,21] pe salida debe ser 3\n    Pe lista = [0,8,1,2,1,7] pe salida debe ser 7\n    \"\"\"\n",
        "canonical_solution":"    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"
    },
    {
        "prompt":"\ndef check_dict_case(dict):\n    \"\"\"\n    Here is the translation of the sentence into Guarani:\n\nKo'\u00e3va ha'e umi eh\u00e9mplo:\n\ncheck_dict_case oik\u00f3ta True.\ncheck_dict_case oik\u00f3ta False.\ncheck_dict_case oik\u00f3ta False.\ncheck_dict_case oik\u00f3ta False.\ncheck_dict_case oik\u00f3ta True.\n\nMba'\u00e9ichapa o\u0129: pete\u0129 diksion\u00e1riope, oim\u00e9ramo opavave k\u00f3va h\u00edna strings min\u00fascula t\u00e9r\u00e3 opavave strings may\u00fascula, up\u00e9ichar\u00f5 oik\u00f3ta True, ambue k\u00e1sope oik\u00f3ta False. Pe funci\u00f3n oik\u00f3ta False diksion\u00e1rio he'\u00edva ikatuha h\u00edna vac\u00edo.\n    \"\"\"\n",
        "canonical_solution":"    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"
    },
    {
        "prompt":"\ndef count_up_to(n):\n    \"\"\"Embohape pete\u0129 funci\u00f3n oguerah\u00e1va pete\u0129 entero no-negativo ha ome'\u1ebd pete\u0129 array umi primero n entero o\u0129va prime n\u00fameros ha mich\u0129v\u00e9va n-gui.\nPor eh\u00e9mplo:\ncount_up_to => [2, 3]\ncount_up_to => [2, 3, 5, 7]\ncount_up_to => []\ncount_up_to => [2, 3, 5, 7, 11, 13, 17, 19]\ncount_up_to => []\ncount_up_to => [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n",
        "canonical_solution":"    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"
    },
    {
        "prompt":"\ndef multiply(a, b):\n    \"\"\"Here is the translation of the sentence into Guarani:\n\nCompleta pe funci\u00f3n oguerah\u00e1va mok\u00f5i entero ha ome'\u1ebdva \n    pe producto umi unidad ijapyt\u00e9pe.\n    E\u00f1e'\u1ebdme'\u1ebd pe entrada ha'eha katuete hekopete.\n    Ejemplos:\n    multiply ohechauka va'er\u00e3 16.\n    multiply ohechauka va'er\u00e3 72.\n    multiply ohechauka va'er\u00e3 0.\n    multiply ohechauka va'er\u00e3 20.\n    \"\"\"\n",
        "canonical_solution":"    return abs(a % 10) * abs(b % 10)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n"
    },
    {
        "prompt":"\ndef count_upper(s):\n    \"\"\"\n    Here is the translation of your sentence into Guarani:\n\nEme'\u1ebdvo pete\u0129 s k\u00e1racterpe, eipapa mboy umi ijyvatet\u00e9va pu'ae o\u0129va umi \u00edndice parespe.\n\n    Por eh\u00e9mplo:\n    count_upper ome'\u1ebd 1\n    count_upper ome'\u1ebd 0\n    count_upper ome'\u1ebd 0\n    \"\"\"\n",
        "canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For Exampleclosest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "canonical_solution":"    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n"
    },
    {
        "prompt":"\ndef make_a_pile(n):\n    \"\"\"\n    Dado un n\u00famero entero positivo n, necesitas hacer una pila de n niveles de piedras.\n    El primer nivel tiene n piedras.\n    El n\u00famero de piedras en el siguiente nivel es:\n        - el siguiente n\u00famero impar si n es impar.\n        - el siguiente n\u00famero par si n es par.\n    Devuelve el n\u00famero de piedras en cada nivel en una lista, donde el elemento en el \u00edndice\n    i representa el n\u00famero de piedras en el nivel.\n\n    Ejemplos:\n\nEn Guarani:\nGiven un n\u00famero entero positivo n, reko pota rejapo pete\u0129 amontonamiento n niveles de ita.\n    Nivel primero oguereko n ita.\n    N\u00famero de ita nivel siguiente ha'e:\n        - siguiente n\u00famero impar n ha'e impar ramo.\n        - siguiente n\u00famero par n ha'e par ramo.\n    Emyengovi\u00e1ta n\u00famero de ita nivel k\u00f3va pete\u0129 lista-pe, mo\u00f5 elemento \u00edndice-pe\n    i omomba'eguasu n\u00famero de ita nivel-pe.\n\n    Ejemplos:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    return [n + 2*i for i in range(n)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef words_string(s):\n    \"\"\"\n    Ojejap\u00f3ta \u00f1emboja'o pete\u0129 \u00f1emohenda'\u1ef9va \u00f1e'\u1ebdngu\u00e9ra apyt\u00e9pe, omboja'o \u00f1emohenda'\u1ef9va ha umi \u00f1e'\u1ebd ojoapyku\u00e9ri pete\u0129 ary'ip\u00e1va t\u00e9r\u00e3 pete\u0129 tap\u00fdi rupi. Ne rembiapo h\u00edna omboja'o \u00f1emohenda'\u1ef9va \u00f1e'\u1ebdngu\u00e9ra ha ome'\u1ebd pete\u0129 apesapyr\u00fdva umi \u00f1e'\u1ebdngu\u00e9ra rehegua.\n\nTechapyr\u00e3:\nwords_string == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "canonical_solution":"    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n"
    },
    {
        "prompt":"\ndef choose_num(x, y):\n    \"\"\"Ko funci\u00f3n ogueraha mok\u00f5i n\u00famero positivo x ha y ha ohepyme'\u1ebd pe\n    tuichav\u00e9va n\u00famero entero par que o\u0129 pe rango [x, y] inclusivo. \n    \u00d1ande ndoguerek\u00f3iramo up\u00e9vaichagua n\u00famero, pe funci\u00f3n ohepyme'\u1ebdva'er\u00e3 -1.\n\n    Por ejemplo:\n    choose_num = 14\n    choose_num = -1\n    \"\"\"\n",
        "canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"
    },
    {
        "prompt":"\ndef rounded_avg(n, m):\n    \"\"\"E\u00f1e\u2019\u1ebdme\u2019\u1ebd mok\u00f5i papaha ipositiv\u00f3va n ha m, ha ne rembiapo ha'e kuatia pe\n    apopyta ha'eku\u00e9ra papaha n guive m peve. \n    Ejesareko mbarete peve ha eipyhy binariope.\n    Jeko n tuichaite m gui, emyengovi\u00e1 -1.\n    Techapyr\u00e3:\n    rounded_avg => \"0b11\"\n    rounded_avg => -1\n    rounded_avg => \"0b1111\"\n    rounded_avg => \"0b11010\"\n    \"\"\"\n",
        "canonical_solution":"    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation\/(m - n + 1)))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n"
    },
    {
        "prompt":"\ndef unique_digits(x):\n    \"\"\"Considering the given sentence, here is its translation into Guarani:\n\n\"Pe\u1ebdme pete\u0129 lista umi tenda hekor\u00e3va x-pegua. Emyengovia pete\u0129 lista por\u00e3pa umi \n    elemento oguerek\u00f3va pete\u0129ve mich\u0129mi ha'im\u00edva pete\u0129ve mbyky yvoty'i.\n\n    \u00d1emenda: Lista emyengovi\u00e1va o\u0129va'er\u00e3 \u00f1emohend\u00e1va ojehejava'eku\u00e9pe.\n\n    Por eh\u00e9mplo:\"\n\nPlease note that Guarani translations can vary slightly depending on regional dialects and exact phrasing preferences.\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n  If the array is empty, return an empty array:\n  arr = []\n  return []\n\n  If the array has any strange number ignore it:\n  arr = [1, -1 , 55] \n        -> sort arr -> [-1, 1, 55]\n        -> reverse arr -> [55, 1, -1]\n  return = ['One']\n\nTranslated into Guarani:\n\nEme'\u1ebdvo pete\u0129 array orek\u00f3va umi n\u00famero integer, embohap\u00e9ke umi n\u00famero o\u0129va 1 ha 9 apyt\u00e9pe,\nembojevy array ohupytyva'ekue, ha upe rire epytyv\u00f5ke pete\u0129te\u0129va umi n\u00famero h\u00e9ra\n\"Pete\u0129\", \"Moko\u0129\", \"Mbohapy\", \"Irundy\", \"Pote\u0129\", \"Pote\u0129\", \"Pok\u00f5i\", \"Pote\u0129\", \"Pote\u0129\".\n\nTechapyr\u00e3:\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> embohape arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> embojevy arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n  emyengovia [\"Pote\u0129\", \"Po\", \"Irundy\", \"Mbohapy\", \"Moko\u0129\", \"Moko\u0129\", \"Pete\u0129\", \"Pete\u0129\"]\n\n  Array ningo nane'\u1ebdi t\u00e9r\u00e3 ikatu oguah\u1ebd pete\u0129 array \u00f1emyengovia: \n  arr = []\n  emyengovia []\n\n  Array oguereko pete\u0129 n\u00famero ndaha'\u00e9iva umi pete\u0129 \u00f1emyengovia: \n  arr = [1, -1 , 55] \n        -> embohape arr -> [-1, 1, 55]\n        -> embojevy arr -> [55, 1, -1]\n  emyengovia ['Pete\u0129']\n    \"\"\"\n",
        "canonical_solution":"    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n"
    },
    {
        "prompt":"\ndef f(n):\n    \"\"\" Emo\u0129 \u00f1emigua f oguerek\u00f3va n param\u00e9troicha,\n    ha oik\u00e9va pete\u00ee lista n tuichakue rehegua, orek\u00f3va mba'erechauka i-pe factorial i ha'e ramo herungu\u00e1va\n    t\u00e9r\u00e3 suma umi pap\u00e1ra 1 guive i peve ambue hend\u00e1icha.\n    i o\u00f1epyr\u0169 1 guive.\n    factorial i rehegua ha'e pete\u0129te\u00ee jehe'a umi pap\u00e1ra 1 guive i peve.\n    Techapyr\u00e3:\n    f == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "canonical_solution":"    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n"
    },
    {
        "prompt":"\ndef even_odd_palindrome(n):\n    \"\"\"\n    Here is the translation of the given sentence into Guarani:\n\nAmba'\u00e9va pete\u0129 entero positivo n, embohasa pete\u0129 tuple orek\u00f3va umi n\u00famero de entero par ha impar\n    pal\u00edndromo o\u0129va dentro del rango, inclusivo.\n\n    Ejemplo1:\n\n        Entrada: 3\n        Salida:\n        Explicaci\u00f3n:\n        Entero pal\u00edndromo h\u00edna 1, 2, 3. Pete\u0129va h\u00edna par, ha mok\u00f5i h\u00edna impar.\n\n    Ejemplo2:\n\n        Entrada: 12\n        Salida:\n        Explicaci\u00f3n:\n        Entero pal\u00edndromo h\u00edna 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Irundyva h\u00edna par, ha pote\u0129 h\u00edna impar.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. Tuple ome'\u1ebdva orek\u00f3ta umi n\u00famero de entero par ha impar pal\u00edndromo, respectivamente.\n    \"\"\"\n",
        "canonical_solution":"    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef count_nums(arr):\n    \"\"\"\n    Here is the translation of the provided sentence into Guarani:\n\n\"Emboguapy pete\u0129 funci\u00f3n count_nums upe oguerohory pete\u0129 tapykue orek\u00f3va umi guarandipykua ha ombohov\u00e1i\n    het\u00e1pe umi mba'e orek\u00f3va pete\u0129 mbykymi ijyvat\u00e9va > 0.\n    Ha pete\u0129 guarandipyku\u00e1pe sa'i, up\u00e9ichar\u00f5 pe ipaha guarandipykua oik\u00f3ta sa'i:\n    techapyr\u00e3 -123 orek\u00f3ta guarandipykua sa'\u00edva -1, 2, ha 3.\"\n\nPlease note that some technical terms may not have direct translations in Guarani, so they are kept in their original form.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef move_one_ball(arr):\n    \"\"\"Rojap\u00f3ta \u00f1embohasa Guarani \u00f1e\u2019\u1ebdme ko \u00f1e\u2019\u1ebd:\n\nOre ningo oreko pete\u0129 aty \u00abarr\u00bb N papapy rehegua arr[1], arr[2], ..., arr[N]. Pe\n    papapykue aty o\u0129va o\u00f1emohenda\u2019\u1ef9va. Ne rembiapo h\u00edna ohechami ha\u2019ev\u00e9pa ikat\u00fapa\n    o\u00f1emohenda pe aty non-decreasing tapereko rupi \n    ojap\u00f3vo ko tembiapo pe aty rehegua:\n        Nde ikatu rejapo mbojeku\u2019a der\u00e9cho gotyo heta jey.\n\n    Pete\u0129 mbojeku\u2019a der\u00e9cho gotyo he\u2019ise opaite aty rembiapo o\u00f1emomombyry pete\u0129 \n    tend\u00e1pe der\u00e9cho gotyo. Pe ipahaite rembiapo pe aty pegua o\u00f1emomombyryta pe \n    \u00f1epyr\u0169me pe aty pegua, he\u2019ise 0ha tend\u00e1pe.\n\n    Ikat\u00faramo o\u00f1emohenda pe aty pe tapereko reheve ojap\u00f3vo pe tembiapo yvate, \n    up\u00e9ichar\u00f5 e\u00f1e\u2019\u1ebd True rehe, ambue hend\u00e1pe e\u00f1e\u2019\u1ebd False rehe.\n    Pe aty o\u0129\u2019\u1ef9ramo e\u00f1e\u2019\u1ebd True rehe.\n\n    Note: Pe aty ome\u2019\u1ebdva orek\u00f3ta papapykue pete\u0129\u2019\u1ef9.\n\n    Techapyr\u00e3pe:\n    \n    move_one_ball==>True\n    Mba\u2019erecha: Ojap\u00f3vo 2 mbojeku\u2019a der\u00e9cho gotyo, ikatu o\u00f1emohenda non-decreasing\n                tapereko rehe pe aty.\n    move_one_ball==>False\n    Mba\u2019erecha: No\u00f1emo\u0129mb\u00e1i ikatu hag\u0303u\u00e1icha o\u00f1emohenda non-decreasing tapereko\n                rehe pe aty ojap\u00f3vo heta jey mbojeku\u2019a der\u00e9cho gotyo.\n                \n    \"\"\"\n",
        "canonical_solution":"    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n"
    },
    {
        "prompt":"\ndef exchange(lst1, lst2):\n    \"\"\"Ko tembiapor\u00e3me, remo\u0129ta pete\u0129 tembiapo omboj\u00e1va mok\u00f5i tembiasakue papaha,\n    ha ohechakua\u00e1va ikat\u00fapa ojejapo mbojera tembiasaku\u00e9ra apyt\u00e9pe\n    ikatu hag\u0303u\u00e1icha lst1 oiko pete\u0129 tembiasakue umi papaha joja a\u00f1oit\u00e9va rehegua.\n    Ndaip\u00f3ri mbojera papaha apyt\u00e9pe ojejap\u00f3va mok\u00f5i tembiasaku\u00e9ra apyt\u00e9pe.\n    Ikat\u00faramo ojejapo mbojera tembiasaku\u00e9ra lst1 ha lst2 apyt\u00e9pe,\n    ha up\u00e9icha rupi opaite papaha lst1-pe oiko joja, embohov\u00e1i \"HEE\".\n    Ambue hend\u00e1icha, embohov\u00e1i \"NAH\u00c1NIRI\".\n    Techapyr\u00e3ramo:\n    exchange => \"HEE\"\n    exchange => \"NAH\u00c1NIRI\"\n    Ojehechakuaa tembiasakue \u00f1eme'\u1ebdva opyta'\u1ef9ha henyh\u1ebdva.\n    \"\"\"\n",
        "canonical_solution":"    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"
    },
    {
        "prompt":"\ndef histogram(test):\n    \"\"\"Dada pete\u0129 taipa ohechauk\u00e1va ko'\u00e3vaichagua \u00f1e'\u1ebd mich\u0129ngue o\u0129va sapy'agua, eporandu pete\u0129 kuatiarogue\n    pete\u0129vaichagua \u00f1e'\u1ebd reheve orek\u00f3va hetaiterei \u00f1embojoj\u00e1va ha oguerek\u00f3va pe kuatiahaipyre \u00f1emohenda.\n    Heta \u00f1e'\u1ebd orek\u00f3va pete\u0129te\u0129vaichagua \u00f1embojoja, eporandu opa umi orek\u00f3va.\n    \n    Techapyr\u00e3:\n    histogram == {'a': 1, 'b': 1, 'c': 1}\n    histogram == {'a': 2, 'b': 2}\n    histogram == {'a': 2, 'b': 2}\n    histogram == {'b': 4}\n    histogram == {}\n\n    \"\"\"\n",
        "canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef reverse_delete(s,c):\n    \"\"\"Mba'\u00e9ichapa\n    Oreko mok\u00f5i \u00f1e'\u1ebdjoaju s ha c, reipe'ava'er\u00e3 umi karakter s-pegua o\u00f1embojoaj\u00fava karakter c-pegu\u00e1re\n    up\u00e9i eheka mba'\u00e9ichapa upe \u00f1e'\u1ebdjoaju o\u00fava palindrome.\n    \u00d1e'\u1ebdjoaju o\u00f1emboh\u00e9rava palindrome oje'ejoajuramo ha ojehech\u00e1vape ojoj\u00e1va ta'angambyryre.\n    Reikua\u00e1va'er\u00e3me pete\u0129 tuple oreko \u00f1e'\u1ebdjoaju resultado ha A\u00f1etegua\/japu pehecha hag\u0303ua.\n    Techapyr\u00e3\n    s = \"abcde\", c = \"ae\", resultado oimeva'er\u00e3\n    s = \"abcdef\", c = \"b\"  resultado oimeva'er\u00e3\n    s = \"abcdedcba\", c = \"ab\", resultado oimeva'er\u00e3\n    \"\"\"\n",
        "canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"
    },
    {
        "prompt":"\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\nGuarani: \n\nEme'\u1ebd pete\u0129 lista de taiku\u00e9ra, ha pe lista de taiku\u00e9ra pete\u0129te\u0129me o\u0129 ha'ev\u00e9va umi n\u00famero. Eme'\u1ebd eju lista de taiku\u00e9ra.\n    Pete\u0129te\u0129va elemento i pe salida ha'eteva'er\u00e3 \"umi n\u00famero impar elemento\n    pe taiku\u00e9ra i pe entrada.\" ha umi i-ku\u00e9ra o\u00f1emo\u0129 ha'ev\u00e9va pe n\u00famero\n    de n\u00famero impar pe i'iha taiku\u00e9ra pe entrada.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "canonical_solution":"    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minSubArraySum(nums):\n    \"\"\"\n    Here is the translation of the sentence into Guarani:\n\nPe\u1ebdme pete\u0129 atyra papapyre nums, peheka pe mich\u0129v\u00e9va mbyre hepykue o\u0129va pe atyra'\u00edpe nums-pe.\nTechapyr\u00e3\nminSubArraySum == 1\nminSubArraySum == -6\n    \"\"\"\n",
        "canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"
    },
    {
        "prompt":"\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    Here is the translated sentence into Guarani:\n\nOjejapyhy pete\u0129 tape \u00f3ga orek\u00f3va pete\u0129 grilla rectangular. Pete\u0129te\u0129va l\u00ednea orepresenta pete\u0129 pozo, ha pete\u0129te\u0129va 1 pete\u0129 l\u00ednea-pe orepresenta pete\u0129 unidad de agua. Pete\u0129te\u0129va pozo oreko pete\u0129 balde orek\u00f3va capacidad igual. Nde remba'apo ha'e ojapo hag\u0303ua umi balde ojaho'i hag\u0303ua umi pozo. Eme\u2019\u1ebdta mboy jave reikotev\u1ebd omboguejy umi balde.\n\nEjemplo1:\n    Entrada: \n        grilla : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        capacidad_del_balde : 1\n    Salida: 6\n\nEjemplo2:\n    Entrada: \n        grilla : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        capacidad_del_balde : 2\n    Salida: 5\n\nEjemplo3:\n    Entrada: \n        grilla : [[0,0,0], [0,0,0]]\n        capacidad_del_balde : 5\n    Salida: 0\n\nRestricciones:\n    * todos los pozos tienen la misma longitud\n    * 1 <= tape_\u00f3ga.longitud <= 10^2\n    * 1 <= grilla[:,1].longitud <= 10^2\n    * grilla[i][j] -> 0 | 1\n    * 1 <= capacidad <= 10\n    \"\"\"\n",
        "canonical_solution":"    return sum([math.ceil(sum(arr)\/capacity) for arr in grid])\n",
        "test":"def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef sort_array(arr):\n    \"\"\"\n    En este Kata, reiku\u00e1ta re\u00f1ongatu pete\u0129 aranduka umi papapy ndaha'\u00e9iva oporomongy'a a\u00f1etete hembiapor\u00e3 um\u00edva pe jer\u00e9re pevepa mbovyve pe umi pete\u0129 papapy o\u0129va ijapopyre binary-pe ha ombojoja upeichaite pevepa.\n\nUpeichagua pete\u0129papape umi pete\u0129pe, e\u00f1ongatu decimal papapy-pe.\n\nOjejapova'er\u00e3 ko'\u00e3icha:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef select_words(s, n):\n    \"\"\"Eku\u00e9rape pete\u0129 k\u00e1so o\u0129 pete\u0129 k\u00e1so ha pete\u0129 n\u00famero natural n, o\u00f1emo\u0129 nde p\u00f3pe pete\u0129 tembiapo reimplementa hag\u0303ua pete\u0129 funci\u00f3n ome'\u1ebdva pete\u0129 lista opaite \u00f1e'\u1ebdgui s orek\u00f3va n consonantes, pe ordenpe ojehechah\u00e1icha umi \u00f1e'\u1ebdpe o\u0129va s-pe.\n    Pe o\u0129ramo pete\u0129 k\u00e1so ryep\u00fdpe ndaip\u00f3ri mba'evete, pe funci\u00f3n ohechauka va'er\u00e3 pete\u0129 lista nandi.\n    Nota: ikatu rehechakuaa pe entrada ndorek\u00f3i ambue mba'e haente ha espacioku\u00e9ra.\n    Ejemploku\u00e9ra:\n    select_words ==> [\"little\"]\n    select_words ==> [\"Mary\", \"lamb\"]\n    select_words ==> []\n    select_words ==> [\"world\"]\n    select_words ==> [\"Uncle\"]\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"
    },
    {
        "prompt":"\ndef get_closest_vowel(word):\n    \"\"\"Here is the translation of the given sentence into Guarani:\n\nO\u00f1eme'\u1ebd nd\u00e9ve pete\u0129 \u00f1e'\u1ebd. Ne rembiapo h\u00edna he'\u00edva mba'\u00e9pa h\u00edna pe t\u00efvopev\u00e9va pu'ae o\u0129va mok\u00f5i pu'aha apyt\u00e9pe, ha up\u00e9va ojehupytyva'er\u00e3 o\u00f1epyr\u0169vo pe \u00f1e'\u1ebd gotyo. \n\nPu'ae o\u00f1epyr\u0169 ha opa \u00f1epyr\u0169me ndoik\u00e9i. Eme'\u1ebd pete\u0129 \u00f1e'\u1ebd ndahe'is\u00e9iva mba'eve pe pu'ae nderehegu\u00e1icha nderehecha o\u0129ha mok\u00f5i pu'aha apyt\u00e9pe. \n\nIkatu ere pe \u00f1e'\u1ebd o\u00f1e'\u1ebdha angir\u0169\u00f1e'\u1ebd ha pukar\u00e3me a\u00f1oite.\n\nTechapyr\u00e3:\nget_closest_vowel ==> \"u\"\nget_closest_vowel ==> \"U\"\nget_closest_vowel ==> \"\"\nget_closest_vowel ==> \"\"\n    \"\"\"\n",
        "canonical_solution":"    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "canonical_solution":"    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n"
    },
    {
        "prompt":"\ndef maximum(arr, k):\n    \"\"\"\n    Here is the translation of the given sentence into Guarani:\n\n\"Arr pete\u0129veve arr ary integer ha pete\u0129veve integer ipor\u00e3 k, eju pete\u0129 sorted lista \n    jepe k ipukukue k umi maximum k n\u00famero arr-pe.\n\n    Techaukaha1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Techaukaha2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Techaukaha3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Marandu:\n        1. Pete\u0129veveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveveve\n    \"\"\"\n",
        "canonical_solution":"    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n"
    },
    {
        "prompt":"\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\nEhechami ko'\u00e3 eh\u00e9mplo:\nsolution ==> 12\nsolution ==> 9\nsolution ==> 0\n    \"\"\"\n",
        "canonical_solution":"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"
    },
    {
        "prompt":"\ndef add_elements(arr, k):\n    \"\"\"\n    Dado pete\u0129 array no-vac\u00edo de enteros arr ha pete\u0129 entero k, eju\n    pe suma de umi elemento ndorek\u00f3iva mas de mok\u00f5i dige de umi pete\u0129ha k elemento de arr.\n\n    Eh\u00e9mplo:\n\n        Entrada: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4\n        Salida: 24 # suma de 21 + 3\n\n    Restricciones:\n        1. 1 <= len <= 100\n        2. 1 <= k <= len\n    \"\"\"\n",
        "canonical_solution":"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef get_odd_collatz(n):\n    \"\"\"\n    Eikuave'\u1ef9re pete\u0129 ipu'akap\u00e1va n, embohov\u00e1i pete\u0129 lista o\u00f1embosako'\u00edva ha oguerek\u00f3va umi papaha umi Collatz apopyt\u00e9pe.\n\n    Ko Collatz conjecture ha'e pete\u0129 conjecture matem\u00e1ticape o\u00f1emongu'\u00e9va pete\u0129 apopyt\u00e9pe k\u00f3va:\n    e\u00f1epyr\u0169 hag\u0303ua pete\u0129 ipu'akap\u00e1va n reheve. Up\u00e9i pete\u0129te\u0129va \u00f1e'\u1ebd o\u00f1emotenonde k\u00f3va:\n    ha'ev\u00e9r\u00f5 pe \u00f1e'\u1ebd ymaguare ipor\u00e3, pe \u00f1e'\u1ebd pyahu ha'e pete\u0129 mbytekue pe \u00f1e'\u1ebd ymaguare.\n    Ha'ev\u00e9r\u00f5 pe \u00f1e'\u1ebd ymaguare ipukukue, pe \u00f1e'\u1ebd pyahu ha'e mbohapy jey pe \u00f1e'\u1ebd ymaguare ha pete\u0129.\n    Pe conjecture ha'e ndorek\u00f3i mba'ev\u00e9ichagua valor n, pe apopyte katuete ohupyty pete\u0129.\n\n    \u00d1e'\u1ebd:\n        1. Collatz ha'e [1].\n        2. lista ombohov\u00e1iva o\u00f1emohenda tekotev\u1ebdh\u00e1icha.\n\n    Techapyr\u00e3:\n    get_odd_collatz ombohov\u00e1i [1, 5] # Pe collatz apopyte 5 reheve ha'e [5, 16, 8, 4, 2, 1], up\u00e9ichar\u00f5 umi papaha ha'e 1 ha 5 a\u00f1\u00f3nte.\n    \"\"\"\n",
        "canonical_solution":"    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n\/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef valid_date(date):\n    \"\"\"Nde tekotev\u1ebdmba omo\u0129 pete\u0129 funci\u00f3n ombohecha por\u00e3va pete\u0129 \u00e1ra ha'\u00e9va pete\u0129 cadena ha ome'\u1ebd True o\u0129ramo por\u00e3 \u00e1ra ha False mba'ev\u00e9ramo. \u00c1ra o\u0129 por\u00e3ramo o\u0129ramo ko'\u00e3 regla o\u0129ramo por\u00e3:\n\n1. \u00c1ra cadena ndojap\u00f3i rei.\n2. Umi \u00e1ra nda'ipor\u00e3i 1-gui ha nda'arepor\u00e3i 31 \u00e1ra-gui jasy 1,3,5,7,8,10,12-pe. Ha umi \u00e1ra nda'ipor\u00e3i 1-gui ha nda'arepor\u00e3i 30 \u00e1ra-gui jasy 4,6,9,11-pe. Ha, umi \u00e1ra nda'ipor\u00e3i 1-gui ha nda'arepor\u00e3i 29 \u00e1ra-gui jasy 2-pe.\n3. Umi jasy nda'ipor\u00e3i 1-gui ha nda'arepor\u00e3i 12-gui.\n4. \u00c1ra o\u0129ramo ko formato-pe: mm-dd-yyyy\n\nTechapyr\u00e3ramo:\nvalid_date => True\n\nvalid_date => False\n\nvalid_date => False\n\nvalid_date => True\n\nvalid_date => False\n    \"\"\"\n",
        "canonical_solution":"    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n"
    },
    {
        "prompt":"\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"
    },
    {
        "prompt":"\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5]) \u00e2 -> False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u00e2 -> False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u00e2 -> True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u00e2 -> False\n    '''\n",
        "canonical_solution":"    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef intersection(interval1, interval2):\n    \"\"\"Ko'\u00e3va mok\u00f5i intervalo,\n    ha pete\u0129 intervalo ha'e pete\u0129 par de enteros. Por eh\u00e9mplo, intervalo = =.\n    Umi intervalo ome'\u1ebdva'ekue o\u00f1embotyva, he'is\u00e9va intervalo\n    o\u0129va'ekue mok\u00f5ive comienzo ha fin.\n    K\u00e1da intervalo ome'\u1ebdva, ojehechakuaa i\u00f1comienzo imich\u0129v\u00e9va t\u00e9r\u00e3 igual i\u00f1f\u00ednpe.\n    Ne rembiapo ha'e oikuaah\u00e1icha mba'erehepa umi intervalo mok\u00f5i\n    o\u0129va'ekue o\u00f1emo\u00f1e'\u1ebd o\u0129 pete\u0129 n\u00famero primo.\n    Por eh\u00e9mplo, umi intervalo, o\u0129va o\u0129\n    ha ipevo ha'e 1, ha'e pete\u0129 n\u00famero non primo.\n    Jep\u00e9mo o\u0129 pete\u0129 n\u00famero primo, e\u00f1e'\u1ebd \"H\u00caE\",\n    ambueh\u00e1pe, e\u00f1e'\u1ebd \"NDAIPORI\".\n    Jep\u00e9mo umi intervalo mok\u00f5i no\u0129ri, e\u00f1e'\u1ebd \"NDAIPORI\".\n\n    [entrada\/salida] eh\u00e9mplo:\n    intersection,) ==> \"NDAIPORI\"\n    intersection,) ==> \"NDAIPORI\"\n    intersection,) ==> \"H\u00caE\"\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n"
    },
    {
        "prompt":"\ndef prod_signs(arr):\n    \"\"\"\n    Here is the translation of the given sentence into Guarani:\n    \n    \"Nde eguerek\u00f3ta pete\u0129 arr de enteros ha nde re\u00f1eha'\u00e3 va'er\u00e3 reme'\u1ebd\n    \u00f1emohenda umi enteros pe magnit\u00fad re, ombojo\u00e1vo tembiapo opaite \n    signoku\u00e9ra rehegua pete\u0129te\u0129va umi n\u00famero-pe arr-pe, ohechauk\u00e1va 1, -1 t\u00e9r\u00e3 0.\n    Nota: reme'\u1ebd None arr nandi rehegua.\n\n    Techaukar\u00e3:\"\n\nNote: Guarani is a language spoken in Paraguay and parts of neighboring countries. The translation here is approximate and aims to convey the meaning as closely as possible.\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "canonical_solution":"    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minPath(grid, k):\n    \"\"\"\n    Here is the translation of the given text into Guarani:\n\n---\n\nO\u00f1eme'\u1ebd pete\u0129 grilla orek\u00f3va N renonde ha N kolumna ha pete\u0129 tembiapo integer k, \n    k\u00e1da c\u00e9lula grilla-pe orek\u00f3va pete\u0129 valor. K\u00e1da n\u00famero entero intervalo [1, N * N]\n    inclusive o\u0129 pete\u0129cha-ite c\u00e9lula-ku\u00e9ra grilla-pe.\n\n    Nde rembohap\u00e9va ohecha pe tape m\u00ednimo k pukukue grilla-pe. Ikatu re\u00f1epyr\u0169\n    pete\u0129 c\u00e9lula-pe, ha k\u00e1da paso-pe ikatu reho pete\u0129va c\u00e9lula o\u0129va rupi,\n    he'is\u00e9va ikatu reho c\u00e9lula-ku\u00e9ra ombojuajuva nde c\u00e9lula aktu\u00e1l ndive.\n    Emo'\u00e3ke tape k pukukue he'is\u00e9va ho'a heseh\u00e1pe k c\u00e9lula (ndaha'ei\n    tembiapo pete\u0129cha).\n    NDAIKAT\u00daI reh\u00f3vo grilla-gui.\n    Tape A he'is\u00e9va mich\u0129ve tape B-gui \n    ojeh\u00faramo ojejapo lista ordenada valor-ku\u00e9ra c\u00e9lula-ku\u00e9ra rehegua A ha B oguata, lst_A lexicogr\u00e1ficamente mich\u0129ve lst_B-gui, \n    he'is\u00e9va, o\u0129 pete\u0129 n\u00famero entero \u00edndice i \n    ha lst_A[i] < lst_B[i] ha jep\u00e9mo j oreko lst_A[j] = lst_B[j].\n    O\u00f1emoa\u00f1ete-pe o\u0129ha pete\u0129 tembiapo \u00fanico.\n    Eme'\u1ebd pete\u0129 lista ordenada valor-ku\u00e9ra c\u00e9lula-ku\u00e9ra rehegua tape m\u00ednimo oguata hese.\n\n    Ejemplos: \n\n        Entrada: grilla = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Salida: [1, 2, 1]\n\n        Entrada: grilla = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Salida: [1]\n\n---\n    \"\"\"\n",
        "canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"
    },
    {
        "prompt":"\ndef tri(n):\n    \"\"\"Maym\u00e1va oikuaa Fibonacci rembiapo, ojehechakuaa haimete ha'eku\u00e9ra kuatia arandup\u00fdpe ku\u00e9ra mbohapy ary paha rupi. Up\u00e9icharamo jepe, umi tapicha ndoikua\u00e1i Tribonacci rembiapo. Tribonacci rembiapo ojehechakuaa ko'\u00e3ichagua \u00f1emboheko rupive:\ntri = 3\ntri = 1 + n \/ 2, n o\u0129ramo jehegui.\ntri = tri + tri + tri, n o\u0129ramo jepe.\nTechapyr\u00e3:\ntri = 1 + = 2\ntri = 3\ntri = tri + tri + tri\n       = 2 + 3 + 3 = 8 \nNder\u00e9rape ojehepyme'\u1ebd pete\u0129 n\u00famero ipaha\u00edva n, nde reme'\u1ebdva'er\u00e3 pete\u0129 lista umi n + 1 n\u00famero Tribonacci rembiapo rehegua.\nTechapyr\u00e3:\ntri = [1, 3, 2, 8]\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i \/ 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) \/ 2)\n    return my_tri\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"
    },
    {
        "prompt":"\ndef digits(n):\n    \"\"\"Dado pete\u0129 n\u00famero entero positivo n, embohasa jevy pe producto umi d\u00edgito impar.\n    Embohasa pe 0 si umi d\u00edgito o\u0129va ha'e entero.\n    Por eh\u00e9mplo:\n    d\u00edgito  == 1\n    d\u00edgito  == 0\n    d\u00edgito == 15\n    \"\"\"\n",
        "canonical_solution":"    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n"
    },
    {
        "prompt":"\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u00e2 -> True\n    is_nested('[]]]]]]][[[[[]') \u00e2 -> False\n    is_nested('[][]') \u00e2 -> False\n    is_nested('[]') \u00e2 -> False\n    is_nested('[[][]]') \u00e2 -> True\n    is_nested('[[]][[') \u00e2 -> True\n    '''\n",
        "canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"
    },
    {
        "prompt":"\n\ndef sum_squares(lst):\n    \"\"\"P\u00e9ina nemba'apo pete\u0129 lista de n\u00fameros rehe.\n    K\u00e1so rehupytyva'er\u00e3 suma de umi n\u00fameros cuadrado o\u0129va lista-pe,\n    ejapo pe rounding k\u00e1da elemento-pe lista-pe ojejupi hagu\u00e3 entero peve.\n    Ejemplos:\n    Lista-pe = [1,2,3] pe salida va'er\u00e3 14\n    Lista-pe = [1,4,9] pe salida va'er\u00e3 98\n    Lista-pe = [1,3,5,7] pe salida va'er\u00e3 84\n    Lista-pe = [1.4,4.2,0] pe salida va'er\u00e3 29\n    Lista-pe = [-2.4,1,1] pe salida va'er\u00e3 6\n    \n\n    \"\"\"\n",
        "canonical_solution":"    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u00e2 -> True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"\") \u00e2 -> False \n    '''\n",
        "canonical_solution":" \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef can_arrange(arr):\n    \"\"\"Here is the translation of the sentence into Guarani:\n\n**Mbohas\u00e1pe:**\n\nEjapo pete\u00ee tembiapo ojap\u00f3va ko mba'e: ombohov\u00e1i pe tuichav\u00e9va \u00edndice pete\u00ee elemento rehegua ha'e'\u1ef9va tuichave t\u00e9r\u00e3 he'ih\u00e1icha elemento o\u00eeva hi'\u00e1ri. Ndarek\u00f3ivo pete\u00ee elemento p\u00e9icha, ombohov\u00e1i -1. Pe array ome'\u00eava ndorek\u00f3i valor duplicado.\n\n**Ejemple:\n\ncan_arrange = 3\ncan_arrange = -1\n    \"\"\"\n",
        "canonical_solution":"    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n"
    },
    {
        "prompt":"\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"
    },
    {
        "prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    Mboaje pete\u0129 funci\u00f3n omboj\u00e1va enteros, floats t\u00e9r\u00e3 cadenas ohechauk\u00e1va\n    umi n\u00famero real, ha oik\u00e9va pe variable tuichav\u00e9va pe tipo de variable ome\u2019\u1ebdva.\n    Emyengovia None umi valor oimepa ojoj\u00e1va.\n    Nota: Pete\u0129 n\u00famero real ojehechauk\u00e1ramo pete\u0129 cadena, pe punto flotante ikatu . t\u00e9r\u00e3 ,\n\n    compare_one -> 2.5\n    compare_one -> \"2,3\"\n    compare_one -> \"6\"\n    compare_one -> None\n    \"\"\"\n",
        "canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_equal_to_sum_even(n):\n    \"\"\"Here is the translation of the sentence into Guarani:\n\n\"Emohe\u00f1\u00f3i pe mbyja o\u0129pa pe n\u00famero n ikatu ojehai mbohapyve umi n\u00famero positivo even renda.\"\n    \"\"\"\n",
        "canonical_solution":"    return n%2 == 0 and n >= 8\n",
        "test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"
    },
    {
        "prompt":"\ndef special_factorial(n):\n    \"\"\"Ko'\u00e3ga atyguasu ojehechakuaa k\u00f3icha:\n    brazilian_factorial = n! *! *! * ... * 1!\n    up\u00e9icha rupi n > 0\n\n    Techapyr\u00e3:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"
    },
    {
        "prompt":"\ndef fix_spaces(text):\n    \"\"\"\n    Dada pete\u0129 k\u00e1dena de t\u00e9xto, mboyve opaichagua esp\u00e1ciospe undersc\u00f3res, \nha, oim\u00e9ramo k\u00e1dena oguereko hetave mok\u00f5i esp\u00e1cios segidoku\u00e9ra, \nup\u00e9ichar\u00f5 mboyve opaichagua esp\u00e1cios segidoku\u00e9ra - rehe\n    \nfix_spaces == \"Ejemplo\"\nfix_spaces == \"Ejemplo_1\"\nfix_spaces == \"_Ejemplo_2\"\nfix_spaces == \"_Ejemplo-3\"\n    \"\"\"\n",
        "canonical_solution":"    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef file_name_check(file_name):\n    \"\"\"Here's the translation of the given text into Guarani:\n\n**Create a function which takes a string representing a file's name, and returns 'Yes' if the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions are met:**\n- **There should not be more than three digits in the file's name.**\n- **The file's name contains exactly one dot '.'**\n- **The substring before the dot should not be empty, and it starts with a letter from the latin alphabet.**\n- **The substring after the dot should be one of these: ['txt', 'exe', 'dll']**\n**Examples:**\n**file_name_check # => 'Yes'**\n**file_name_check # => 'No'**\n\nTraducci\u00f3n:\n\n**Ejapo pete\u0129 funci\u00f3n oguerah\u00e1va pete\u0129 cadena ohechauk\u00e1va pete\u0129 archivo r\u00e9ra, ha ome'\u00e9va 'S\u00ed' archivo r\u00e9ra o\u0129ramo por\u00e3, ha ome'\u00e9va 'Nah\u00e1niri' ambue hend\u00e1icha.**\n- **Pete\u0129 archivo r\u00e9ra ojehechakuaa por\u00e3ramo ha'e a\u00f1oite umi mba'e ko'\u00e3va ojehupytyramo:**\n- **Ndoik\u00f3i va'er\u00e3 hetave mbohapyva papaha archivo r\u00e9rape.**\n- **Archivo r\u00e9rape o\u0129 va'er\u00e3 pete\u0129 punto '.' pete\u0129nte.**\n- **Punto mboyvegua ndopy'av\u00fdi va'er\u00e3, ha o\u00f1epyr\u0169va va'er\u00e3 pete\u0129 pu'ae latina.**\n- **Punto riregua pete\u0129 ko'\u00e3va apyt\u00e9pe: ['txt', 'exe', 'dll']**\n**Ehechauk\u00e1vo:**\n**file_name_check # => 'S\u00ed'**\n**file_name_check # => 'Nah\u00e1niri'**\n    \"\"\"\n",
        "canonical_solution":"    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('\/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n"
    },
    {
        "prompt":"\n\n\ndef sum_squares(lst):\n    \"\"\"Ko funci\u00f3n oiporav\u00f3ta pete\u0129 lista de enteros. Umi entrada opaichagua o\u0129va pe lista-pe, pe funci\u00f3n ombojoap\u00fdta pe entero ha'ete pe ijyvat\u00e9va 3 jepogua ha ombojoap\u00fdta pe entero ha'ete pe ijyvat\u00e9va 4 jepogua pero ndojepogu\u00e1i 3 rehe. Pe funci\u00f3n nombyai mo'\u00e3i umi entrada lista-pe ijyvat\u00e9va no\u0129riva 3 ni 4 jepogu\u00e1pe. Up\u00e9i pe funci\u00f3n ome'\u1ebdta opaite entrada rembiapo'apo.\n\nEhechami ko'\u00e3 mba'ere:\nHa'e lst = [1,2,3] pe salida ha'eta 6\nHa'e lst = [] pe salida ha'eta 0\nHa'e lst = [-1,-5,2,-1,-5] pe salida ha'eta -126\n    \"\"\"\n",
        "canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef words_in_sentence(sentence):\n    \"\"\"\n    Here is the translation of the given text into Guarani:\n\n    Re\u00f1eme'\u1ebd pete\u00ee k\u00e1dena he'is\u00e9va pete\u00ee \u00f1e'\u00ea,\n    pe \u00f1e'\u00ea oguereko heta \u00f1e'\u00ea o\u00f1emboja'o va'ekue pete\u00ee esp\u00e1siope,\n    ha nde reme'\u00eava'er\u00e3 pete\u00ee k\u00e1dena oguerek\u00f3va umi \u00f1e'\u00ea ypykuegu\u00e1pe,\n    umi \u00f1e'\u00ea ipukukue ha'e umi n\u00fameroku\u00e9ra prime,\n    pe ord\u00e9n umi \u00f1e'\u00ea pyahu k\u00e1denape tekotev\u1ebd ha'e pe ypykuegu\u00e1icha.\n\n    Ejemplor\u00e2:\n        Input: \u00f1e'\u00ea = \"Ko ha'e pete\u00ee mba'e\"\n        Output: \"ha'e\"\n\n    Ejemplor\u00e22:\n        Input: \u00f1e'\u00ea = \"jasuru \u1ef9r\u00f4 \u00f1ande yvoty\"\n        Output: \"\u1ef9r\u00f4 \u00f1ande\"\n\n    Mbokaku\u00e9ra:\n        * 1 <= len <= 100\n        * \u00f1e'\u00ea oguereko umi \u00f1e'\u00eantema\n\nNote: Guarani is a language spoken in Paraguay and some parts of Bolivia, Brazil, and Argentina. The translation above attempts to stay true to the original meaning while respecting the grammatical and syntactical rules of Guarani.\n    \"\"\"\n",
        "canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"
    },
    {
        "prompt":"\ndef simplify(x, n):\n    \"\"\"Here is the translation of the given sentence into Guarani:\n\n**Guarani:**\n\nNde rembiapor\u00e3 ha'e omo\u0129 pete\u0129 tembiapoukapy ombohas\u00e1va pe \u00f1e'\u1ebd \"x * n\" hesak\u00e3ve. Pe tembiapoukapy ome'\u1ebd True x * n omo\u0129 ramo pete\u0129 ipyah\u00fava ha False ambue hend\u00e1icha. Moko\u0129ve x ha n ha'e pete\u0129 fra\u00e7\u00e3o rembiasakue, ha oguereko ko'\u00e3 formato, <numerador>\/<denominador> ha'eku\u00e9ra mok\u00f5iv\u00e9va ha'e ipyah\u00fava tembipuru. Ikatu rejerovia x ha n ha'e fra\u00e7\u00e3o hekor\u00e3va, ha ndoguerek\u00f3i pete\u0129 zero denominador-pe.\n\nsimplify = True\nsimplify = False\nsimplify = False\n    \"\"\"\n",
        "canonical_solution":"    a, b = x.split(\"\/\")\n    c, d = n.split(\"\/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator\/denom == int(numerator\/denom)):\n        return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test1'\n    assert candidate(\"1\/6\", \"2\/1\") == False, 'test2'\n    assert candidate(\"5\/1\", \"3\/1\") == True, 'test3'\n    assert candidate(\"7\/10\", \"10\/2\") == False, 'test4'\n    assert candidate(\"2\/10\", \"50\/10\") == True, 'test5'\n    assert candidate(\"7\/2\", \"4\/2\") == True, 'test6'\n    assert candidate(\"11\/6\", \"6\/1\") == True, 'test7'\n    assert candidate(\"2\/3\", \"5\/2\") == False, 'test8'\n    assert candidate(\"5\/2\", \"3\/5\") == False, 'test9'\n    assert candidate(\"2\/4\", \"8\/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2\/4\", \"4\/2\") == True, 'test11'\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test12'\n    assert candidate(\"1\/5\", \"1\/5\") == False, 'test13'\n\n"
    },
    {
        "prompt":"\ndef order_by_points(nums):\n    \"\"\"\n    Here's the translation of the provided text into Guarani:\n\nEscribe pete\u0129 funci\u00f3n oipur\u00fava ko lista de enteros\n    omo\u0129 hag\u0303ua en orden ascendente seg\u00fan la suma de sus d\u00edgitos.\n    Nota: si o\u0129 heta \u00edtem orek\u00f3va suma de sus d\u00edgitos igual,\n    ombojoja chupeku\u00e9ra hend\u00e1pe ku lista original-pe.\n\n    Por ejemplo:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef specialFilter(nums):\n    \"\"\"Here is the translation of the given sentence into Guarani:\n\n\"Emoinge pete\u0129 funci\u00f3n oguerah\u00e1va pete\u0129 lista de n\u00fameros ha ome'\u1ebdva jey \n    mba'erehe o\u0129va pe lista-pe ohas\u00e1va 10 ha mok\u00f5ive pete\u0129ha ha paha ipuh\u00e1pe o\u0129va \n    pete\u0129, mbohapy, po, pok\u00f5i, ha porundy.\n    Techapyr\u00e3:\n    specialFilter => 1 \n    specialFilter => 2\"\n    \"\"\"\n",
        "canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"
    },
    {
        "prompt":"\ndef get_max_triples(n):\n    \"\"\"\n    Ojejapysaka pete\u0129 entero positivo n. Tekotev\u1ebdta rejapo pete\u0129 array de enteros a de ipukukue n.\n        K\u00e1da pete\u0129 i, a[i] = i * i - i + 1.\n        Embojeporeka tripleta de a donde i < j < k,\n    ha a[i] + a[j] + a[k] ha'e m\u00faltiplo de 3.\n\n    Ejemplo:\n        Entrada: n = 5\n        Salida: 1\n        Mba'eguasu: \n        a = [1, 3, 7, 13, 21]\n        Pe tripleta ha'e\u00f1o o\u0129va o\u0129 por\u00e3va ha'e.\n    \"\"\"\n",
        "canonical_solution":"    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n"
    },
    {
        "prompt":"\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"
    },
    {
        "prompt":"\ndef sorted_list_sum(lst):\n    \"\"\"Here is the translation of the given text into Guarani:\n\nEscribi pete\u0129 funci\u00f3n oipyhyva pete\u0129 lista de cadenas de texto como par\u00e1metro,\n    ombop\u00edri umi cadenas de texto orek\u00f3va umi longitudes impar,\n    ha ome\u2019\u1ebdva pe lista oresult\u00e1va ha o\u00f1esortiva,\n    Pe lista katuete pete\u0129 lista de cadenas de texto ha araka\u2019\u00e9i pete\u0129 arreglo de n\u00fameros,\n    ha ikatu oreko duplicados.\n    Pe orden de pe lista tuicha va\u2019er\u00e3 opu\u2019\u00e3nga pe longitud de cada palabra rehe, ha nde\n    rembohasa va\u2019er\u00e3 pe lista o\u00f1esortiva pe regla rehe.\n    O\u0129ramo mok\u00f5i palabras orek\u00f3va pe misma longitud, sort pe lista alfab\u00e9ticamente.\n    Pe funci\u00f3n ome\u2019\u1ebd va\u2019er\u00e3 pete\u0129 lista de cadenas de texto ha o\u00f1esortiva orden rehe.\n    Ikatu rembojerure opaite palabras oreko pe misma longitud.\n    Por ejemplo:\n    assert lista_ordenada => [\"aa\"]\n    assert lista_ordenada => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "canonical_solution":"    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n"
    },
    {
        "prompt":"\ndef x_or_y(n, x, y):\n    \"\"\"Pete\u00ee programa simple o\u00eeva'er\u00e3 ome'\u00ebva'er\u00e3 x remiandur\u00e3 n ha'eva'er\u00e3 pete\u0129 papaha, ha ome'\u00ebva'er\u00e3 y remiandur\u00e3 ambue jave.\n\nEjemplioku\u00e9ra:\nx_or_y == 34\nx_or_y == 5\n    \n    \"\"\"\n",
        "canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"
    },
    {
        "prompt":"\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "canonical_solution":"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef compare(game,guess):\n    \"\"\"A\u00f1eimo'\u00e3 \u00f1ande roguerek\u00f3va \u00f1ande py'apy pe mba'epor\u00e3 ha'e \u00f1antende jave pete\u0129 mba'e oha'ar\u00f5va\u00edva heta \u00e1ra ojekuaa hag\u0303ua. Umi mba'epy'apy ha \u00f1eimo'\u00e3 reim\u00e9va upe arapok\u00f5ime katuete o\u0129 por\u00e3 tembiporu ha \u00f1embojoja hag\u0303ua.\nNde rembiapo h\u00edna reikua\u00e1vo o\u0129pa pete\u0129 tapicha oikuaa por\u00e3h\u00edna umi mba'epor\u00e3 \u00f1emboj\u00e1va \u00f1emo\u0129mbyre.\nNde reiku\u00e1ta mok\u00f5ive araipuru ha mboheraguapy \u00f1embojoavy'\u1ef9va, ha pete\u0129te\u0129 tembiapo ohechauka \u00f1emboj\u00e1va. Eme'\u1ebdta pete\u0129 araipuru \u00f1embojoavy'\u1ef9va ohechauk\u00e1va mba'eichait\u00e9pa pete\u0129te\u0129 mboheraguapy oiko por\u00e3.\nOimera\u1ebdvo o\u00f1emohendapyre por\u00e3, mba'erepy ha'e 0, ha ndaha'\u00e9ir\u00f5, mba'erepy ha'e tembiapo rekoite.\n\ntechapyr\u00e3:\n\ncompare -> [0,0,0,0,3,3]\ncompare -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "canonical_solution":"    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"Here is the translation of the provided sentence into Guarani:\n\nOjehecharamo pe \u00f1embohys\u00fdi mymb\u00fdra ha pete\u0129 \u00f1embohys\u00fdi ojehechar\u00e3. Ko'\u00e3 jehechar\u00e3 ojeipuru hag\u0303ua omoingeve mymb\u00fdra ojehech\u00e1vape. Pe mbaretekue ojehechar\u00e3 rehegua ko'\u00e3 mba'\u00e9pe: Taha'e CAP pe ipaha okarapeh\u1ebdva pukukue, ha taha'e SM pe ipaha karapeha pukukue, pe mbaretekue ojehechar\u00e3 rehegua ojehecharamo pe mboja'o CAP - SM. Reikuaa va'er\u00e3 pe mymb\u00fdra mbaretev\u00e9va ha embohov\u00e1i pete\u0129 s\u00e3so ko'\u00e3 mba'\u00e9pe: ClassName.StrongestExtensionName. O\u0129ramo mok\u00f5i t\u00e9r\u00e3 hetave jehechar\u00e3 pe mbaretekue joja rehegua, reiporavo va'er\u00e3 pe o\u0129va tenonder\u00e3me pe \u00f1embohys\u00fdipe. Techapyr\u00e3icha, nd\u00e9ve o\u00f1eme'\u1ebdramo \"Slices\" mymb\u00fdra ha pete\u0129 \u00f1embohys\u00fdi jehechar\u00e3: ['SErviNGSliCes', 'Cheese', 'StuFfed'] up\u00e9ichar\u00f5 reme'\u1ebd va'er\u00e3 'Slices.SErviNGSliCes' pe mbaretev\u00e9va rehegua. Techapyr\u00e3: Strongest_Extension == 'my_class.AA'\n    \"\"\"\n",
        "canonical_solution":"    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n"
    },
    {
        "prompt":"\ndef cycpattern_check(a , b):\n    \"\"\"Rembiapor\u00e3me o\u0129 mok\u00f5i \u00f1e'\u1ebd. Reikotev\u1ebdme ere mba'eicha rupi \u00f1emboja'opyre pe mok\u00f5iha \u00f1e'\u1ebd t\u00e9r\u00e3 imboja'opyre ha'e pete\u0129 \u00f1e'\u1ebd pe pete\u0129ha \u00f1e'\u1ebdme guar\u00e3.\n    cycpattern_check => Nah\u00e1niri\n    cycpattern_check => A\u00f1ete\n    cycpattern_check => Nah\u00e1niri\n    cycpattern_check => A\u00f1ete\n    cycpattern_check => Nah\u00e1niri\n    cycpattern_check => A\u00f1ete\n\n    \"\"\"\n",
        "canonical_solution":"    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n"
    },
    {
        "prompt":"\ndef even_odd_count(num):\n    \"\"\"O\u00f1eme\u2019\u1ebd pete\u0129 papahaite. Eme\u2019\u1ebd pete\u0129 tupula oguerek\u00f3va umi papaha ipete\u0129me ha iparahyapegua kuatiarogueku\u00e9ra.\n\n     Techapyr\u00e3:\n        even_odd_count ==>\n        even_odd_count ==>\n    \"\"\"\n",
        "canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef int_to_mini_roman(number):\n    \"\"\"\n    Here is the translation of the given sentence into Guarani:\n\nAg\u0303uije pete\u0129 papapy imbarete, japo ijypykuaa r\u00f3ma rehegua pete\u0129 kuatiaroguepe,\n    ha emombe'u ichupe mboguepa reheve.\n    Mba'\u00e9ichapa oik\u00f3ta: 1 <= papapy <= 1000\n\n    Techapyr\u00e3:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "canonical_solution":"    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"
    },
    {
        "prompt":"\ndef find_max(words):\n    \"\"\"Here is the translation of the provided text into Guarani:\n\n**Guarani:**\n\n```\nEmoinge pete\u0129 funci\u00f3n ohas\u00e1va pete\u00ee lista de cadena.\n    Pe lista oreko heta \u00f1e'\u00ea. Ejeko'\u00fdpe embohasa pe \u00f1e'\u00ea oreko hetave\n    caracter \u00fanico. Peichagua heta cadena oreko caracter \u00fanico,\n    embohasa pe ha'\u00e9va pe primero en orden lexicogr\u00e1fico.\n\n    find_max == \"string\"\n    find_max == \"enam\"\n    find_max == \"\"aaaaaaa\"\n```\n\nNote: The translation may not be perfect, as Guarani is a language with its own structure and idiomatic expressions. The translated text aims to convey the same meaning as the original English text.\n    \"\"\"\n",
        "canonical_solution":"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n"
    },
    {
        "prompt":"\ndef eat(number, need, remaining):\n    \"\"\"\n    Nde ha'e pete\u0129 anguja \u00f1embyah\u00fdi, ha rekaru ma pete\u0129 mbovy zanahoria,\n    p\u00e9ro ko'\u00e1g\u0303a reikotev\u1ebd rekaru hetave zanahoria ikatu hag\u0303u\u00e1icha re\u00f1emohu'\u00e3 pe \u00e1ra rembi'u.\n    reikotev\u1ebd reme'\u1ebd pete\u0129 lista [ karu rire mbovy zanahoria rekaru va'ekue,\n                                    mbovy zanahoria opyta rire rekaru ]\n    ndohupytyir\u00f5 umi zanahoria o\u0129va, rekaru opaite umi zanahoria o\u0129va, p\u00e9ro re\u00f1e\u00f1andu vaer\u00e3 gueteri \u00f1embyah\u00fdi.\n\n    Techapyr\u00e3:\n    * eat -> [11, 4]\n    * eat -> [12, 1]\n    * eat -> [11, 0]\n    * eat -> [7, 0]\n\n    Mba'erepy:\n    @number : entero\n        umi zanahoria rekaru va'ekue.\n    @need : entero\n        umi zanahoria reikotev\u1ebdva rekaru.\n    @remaining : entero\n        umi zanahoria opyt\u00e1va stock-pe\n\n    \u00d1e\u00f1angareko:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Eguerek\u00f3ke vy'a :)\n    \"\"\"\n",
        "canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef do_algebra(operator, operand):\n    \"\"\"\n    Ko'\u00e3 mbohapy \u00f1e'\u1ebdme'\u1ebd o\u00f1embohasa Guarani \u00f1e'\u1ebdme:\n\nO\u00f1emo\u0129 mok\u00f5i lista: operad\u00f3r ha operand. Pete\u0129ha lista oguereko umi operaci\u00f3n algebra b\u00e1sica, ha \nmok\u00f5iha lista oguereko umi n\u00famero entero. Eipuru ko'\u00e3 mok\u00f5i lista o\u00f1emo\u0129va'ekue o\u00f1emohenda hag\u0303ua pe expresi\u00f3n algebra ha embojevy pe evaluaci\u00f3n ko expresi\u00f3n rehegua.\n\nUmi operaci\u00f3n algebra b\u00e1sica:\nA\u00f1embojoaju \n\u00d1emohenda \nMultiplicaci\u00f3n \nDivisi\u00f3n pisope \nExponenciaci\u00f3n \n\nEhechami pete\u0129 eh\u00e9mplo:\noperad\u00f3r['+', '*', '-']\narray = [2, 3, 4, 5]\nresultado = 2 + 3 * 4 - 5\n=> resultado = 9\n\nMandu'a:\n    Pe lista de operad\u00f3r ku\u00e9ra ipukukue ha'e pe lista de operand ku\u00e9ra ipukukue mich\u0129ve pete\u0129 rehe.\n    Operand ha'e pete\u0129 lista de n\u00fameros entero no-negativos.\n    Pe lista de operad\u00f3r ku\u00e9ra oguereko por lo menos pete\u0129 operad\u00f3r, ha pe lista de operand ku\u00e9ra oguereko por lo menos mok\u00f5i operand.\n\n    \"\"\"\n",
        "canonical_solution":"    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['\/\/', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(s):\n    \"\"\"Here is the translation of the provided text into Guarani:\n\nRe\u00f1eme'\u1ebd pete\u0129 s \u00f1e'\u1ebdpeh\u1ebdt\u0169.\n    mba'eveichagua s[i] pete\u0129 pu'ae ramo, ambue hend\u00e1pe ombojo'a ijapu'a guive mich\u0129va guive tuich\u00e1va t\u00e9r\u00e3 tuich\u00e1va guive mich\u0129va,\n    ambue hend\u00e1pe oheja ha'e o\u0129h\u00e1icha.\n    \u00d1e'\u1ebdpeh\u1ebdt\u0169 orek\u00f3ramo ndaip\u00f3ri pu'ae, ovrertina pe \u00f1e'\u1ebdpeh\u1ebdt\u0169.\n    Ava'oku\u00e9ra ohupyt\u00fdramo he'\u00edva pe \u00f1e'\u1ebdpeh\u1ebdt\u0169.\n\nTechapyr\u00e3:\nsolve = \"4321\"\nsolve = \"AB\"\nsolve = \"#A@c\"\n    \"\"\"\n",
        "canonical_solution":"    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef string_to_md5(text):\n    \"\"\"\n    Eme'\u00ea pete\u0129 'text' he'is\u00e9va, eikuaauka pe \u00f3ga md5 hash 'text' rehegua.\n    Pe 'text' ningo henyh\u1ebd'yva, embojev\u00fdke None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef generate_integers(a, b):\n    \"\"\"\n    Emee\u2019\u1ebd mok\u00f5i papapy ipositiv\u00f3va a ha b, embohasa umi papapy ijyvatev\u00e9va apyt\u00e9pe a ha b, o\u00f1emohend\u00e1va.\n\nTechapyr\u00e3 rupive:\ngenerate_integers => [2, 4, 6, 8]\ngenerate_integers => [2, 4, 6, 8]\ngenerate_integers => []\n    \"\"\"\n",
        "canonical_solution":"    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    }
]