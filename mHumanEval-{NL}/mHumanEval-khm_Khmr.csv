prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" សូមពិនិត្យមើលថាតើមានលេខពីរណាមួយនៅក្នុងបញ្ជីលេខដែលនៅជិតគ្នាណាស់ជាងចំនួនកំណត់ដែលបានផ្ដល់ឬទេ។
    ឧទាហរណ៍:
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" ការបញ្ចូលទៅក្នុងមុខងារនេះគឺជាខ្សែអក្សរមួយ ដែលមានក្រុមជាច្រើននៃសញ្ញាក្រចកដែលធ្វើឡើងដោយបន្តបន្ទាប់។ គោលដៅរបស់អ្នកគឺបំបែកក្រុមទាំងនោះទៅជាខ្សែអក្សរចែកចេញនិងប្រគល់បញ្ជីនៃក្រុមទាំងនោះ។ ក្រុមដែលបានបំបែកគឺមានតុល្យភាព ហើយមិនបានបញ្ចូលគ្នានៅក្នុងមួយទៀត។ មិនខ្វល់ពីគ្រប់លំហឯក្នុងខ្សែអក្សរបញ្ចូល។ ឧទាហរណ៍:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" អាស្រ័យលើលេខទសភាគវិជ្ជមានមួយ អាចបំបែកជាផ្នែកអាំងតឺជើរ និងទសភាគ។

ត្រឡប់ផ្នែកទសភាគនៃលេខ។
ឧទាហរណ៍:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" អ្នកត្រូវបានផ្ដល់នូវ​បញ្ជីនៃ​ប្រតិបត្តិការដាក់ប្រាក់ និងដកប្រាក់នៅលើគណនីធនាគារដែលចាប់ផ្ដើមដោយសមតុល្យសូន្យ។ ការងាររបស់អ្នកគឺត្រូវរកឃើញថាតើនៅពេលណាមួយសមតុល្យរបស់គណនីធ្លាក់ចុះក្រោមសូន្យ ហើយនៅពេលនោះមុខងារគួរតែបង្ហាញតម្លៃពិត។ បើមិនដូច្នោះទេ វាគួរតែបង្ហាញតម្លៃមិនពិត។
ឧទាហរណ៍:
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" សម្រាប់បញ្ជីចំនួនបញ្ចូលមួយដែលបានផ្តល់ឱ្យ គណនាឱ្យបានការបំបែកគណនាមធ្យម مطلق
នៅជុំវិញមធ្យមនៃទិន្នន័យនេះ។
ការបំបែកគណនាមធ្យម مطلق គឺជាការបំបែក مطلق មធ្យមរវាងនិរន្តរ៍នីមួយៗ និងចំណុចកណ្តាល:
MAD = មធ្យម | x - x_mean |
ឧទាហរណ៍:
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" តម្លើងលេខ 'delimeter' រវាងធាតុពីរដែលជាប់នឹងគ្នានៃបញ្ជីបញ្ចូល 'numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" ទិន្នន័យបញ្ចូលចូលទៅក្នុងមុខងារនេះគឺជាខ្សែអក្សរដែលតំណាងឱ្យក្រុមជាច្រើនសម្រាប់សញ្ញាក្រចកដែលស្ថិតនៅក្នុងក្រចកដែលបំបែកដោយដកឃ្លា។
    សម្រាប់ក្រុមនីមួយៗ ផលបញ្ចូលគឺកម្រិតជ្រៅបំផុតនៃការដាក់សញ្ញាក្រចក។
    ឧទាហរណ៍) មានកម្រិតនៃការដាក់សញ្ញាក្រចកពីរដង ខណៈពេលដែល)) មានបីដង។

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" ត្រង់បញ្ចូលបញ្ជីខ្សែអក្សរតែសម្រាប់ខ្សែអក្សរដែលមានខ្សែអក្សរដែលបានផ្តល់ជូន
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" សម្រាប់បញ្ជីលេខគត់មួយដែលបានផ្ដល់ឱ្យ ត្រឡប់មកជាគូរ ដែលមានសរុបនិងផលគុណនៃគ្រប់លេខគត់នៅក្នុងបញ្ជី។ 
    សរុបទទេគួរតែស្មើនឹង 0 ហើយផលគុណទទេគួរតែស្មើនឹង 1។
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" ពីបញ្ជីចំនួនគត់ដែលបានផ្តល់ឲ្យ សូមបង្កើតបញ្ជីរបស់ធាតុអតិបរិមាដែលបានរកឃើញមកទាល់តែពេលដែលបានផ្តល់ឲ្យនៅក្នុងបញ្ជីនោះ។
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" សាកល្បងមើលថាតើខ្សែអក្សរដែលបានផ្តល់ជូនមានលក្ខណៈជាពាក្យឆ្លងឆ្លើយឬអត់ """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" អត្ថបទចូលគឺជាខ្សែប៉ុន្មានពីរ a និង b ដែលមានតែ 1 និង 0 ប៉ុណ្ណោះ។
    អនុវត្តប្រតិបត្តិការប្រមាណវិធី XOR លើអត្ថបទចូលទាំងនេះ ហើយបង្វិលលទ្ធផលជាខ្សែអក្សរផងដែរ។
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" ពីបញ្ជីខ្សែអក្សរ សូមបង្រួមខ្សែអក្សរដែលវែងបំផុត។ បង្រួមខ្សែអក្សរដំបូងបើមានខ្សែអក្សរច្រើនដែលមានប្រវែងដូចគ្នា។ បង្រួម None បើបញ្ជីបញ្ចូលគឺទទេ។
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" ត្រឡប់មកវិញនូវឧបគមន៍ចំណុចធំបំផុតនៃតួលេខទាំងពីរគឺ a និង b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" សូមបញ្ជូនត្រឡប់នូវបញ្ជីនៃបុព្វបទទាំងអស់ចាប់ពីខ្លីបំផុតទៅវែងបំផុតនៃខ្សែអក្សរដែលបានបញ្ចូល
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" Here is the translation of the sentence into Khmer:

""ត្រលប់នូវខ្សែអក្សរមួយដែលមានលេខបំបែកដោយចន្លោះចាប់ពី 0 រហូតដល់ n រួមទាំងចំនួននោះដែរ។""
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" អោយ​អ្នកនូវ​អក្សរ​មួយ​នេះ សូម​ស្វែង​រក​ថា អក្សរ​នីមួយៗ​ដែល​មិន​ស្ទួន​គ្នា មាន​ចំនួន​ប៉ុន្មាន?
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" ការបញ្ចូលទៅក្នុងមុខងារនេះគឺជាខ្សែអក្សរមួយដែលតំណាងឱ្យកូដតន្ត្រីនៅក្នុងទ្រង់ទ្រាយ ASCII ពិសេស។ ការងាររបស់អ្នកគឺឆ្លុះផ្ទាំងខ្សែអក្សរនេះ ហើយត្រឡប់មកជាបញ្ជីចំនួនគត់ដែលសមស្របនឹងចំនួនប៉ុន្មានប៊ីតដែលនីមួយៗតន្ត្រីបន្ទាប់បន្សំ។ នេះគឺជាសៀវភៅចក្ខុវិស័យ៖ 'o' - តន្ត្រីពេញមួយ, រស់នៅបួនប៊ីត 'o|' - តន្ត្រីពាក់កណ្តាល, រស់នៅពីរប៊ីត '.|' - តន្ត្រីមួយភាគបួន, រស់នៅមួយប៊ីត

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" ស្វែងរកថាតើអក្សររងដែលបានផ្តល់អាចត្រូវបានរកឃើញប៉ុន្មានដងនៅក្នុងខ្សែអក្សរដើម។ អ្នកគួរធ្វើការរាប់ករណីដែលមានការជ្រៀតជ្រែកគ្នា។
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Here is the translation of the given sentence into Khmer:

ការបញ្ចូលគឺជាខ្សែអក្សរដែលមានចន្លោះរវាងលេខពី 'សូន្យ' ដល់ 'ប្រាំពីរ'។
ជម្រើសត្រឹមត្រូវគឺ 'សូន្យ', 'មួយ', 'ពីរ', 'បី', 'បួន', 'ប្រាំ', 'ប្រាំមួយ', 'ប្រាំពីរ', 'ប្រាំបី', និង 'ប្រាំបួន'។
ត្រឡប់ខ្សែអក្សរជាលេខដែលបានតម្រៀបពីតូចជាងទៅធំជាង។
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" ពីបញ្ជីលេខដែលផ្តល់ឱ្យ ជ្រើសរើសនិងត្រឡប់នូវពីរដែលនៅជិតគ្នាជាងគេ ហើយត្រឡប់វាក្នុងលំដាប់។
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" ឲ្យមានបញ្ជីនៃលេខ អនុវត្តការបំលែងសេដ្ឋកិច្ចលីនេអ៊ែរទៅបញ្ជីនោះ
ដូច្នេះលេខតូចបំផុតនឹងក្លាយទៅជា 0 ហើយលេខធំបំផុតនឹងក្លាយទៅជា 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" ច្រោះបញ្ជីដែលបានផ្ដល់អោយដោយជ្រើសតែតម្លៃពិតជាតែចំនួនគត់ ប៉ុណ្ណោះ
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" វិលត្រឡប់ប្រវែងនៃខ្សែអក្សរដែលបានផ្តល់ឱ្យ
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" សម្រាប់លេខ​មួយ n ដែល​បាន​ឲ្យ សូមស្វែងរក​លេខ​ធំ​បំផុត​ដែល​ចែក n បាន​ស្មើ តិច​ជាង n
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" Here's the translation of the given sentence into Khmer:

សូមបញ្ជូនបញ្ជីកត្តាមេគុណដំបូងនៃចំនួនគត់ដែលបានផ្ដល់ដោយរៀបតាមលំដាប់ពីតូចទៅធំ។
    កត្តាទាំងអស់គ្នាគួរតែត្រូវបានរាយបញ្ជីដើម្បីបង្ហាញចំនួនដងដែលវាធ្វើឡើងក្នុងការបំបែក។
    ចំនួនបញ្ចូលគួរតែស្មើនឹងផលគុណនៃកត្តាទាំងអស់។
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" ពីបញ្ជីចំនួនគត់ អ្នកត្រូវដកធាតុទាំងអស់ដែលកើតឡើងច្រើនជាងមួយដងចេញ។
    រក្សារបៀបលំដាប់ធាតុដែលនៅសល់ឲ្យដូចគ្នានឹងក្នុងបញ្ចូល។
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" សម្រាប់ខ្សែអក្សរដែលបានផ្ដល់ឱ្យ ប្រែតួអក្សរតូចទៅធំ និងតួអក្សរធំទៅតូច។
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" បញ្ចូលបញ្ជីខ្សែអក្សរទាំងអស់ជាខ្សែអក្សរតែមួយ
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" ត្រង់បញ្ជីបញ្ចូលនៃខ្សែអក្សរតាមរយៈតែខ្សែអក្សរដែលចាប់ផ្តើមដោយបុព្វបទមួយដែលបានកំណត់។
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""ត្រឡប់តែលេខវិជ្ជមាននៅក្នុងបញ្ជីប៉ុណ្ណោះ។
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""ត្រឡប់តម្លៃពិត ប្រសិនបើលេខដែលបានផ្តល់គឺជាភាពដាច់ដោយឡែក និងមិនដូចគ្នាមិនមែន។
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    វាយតម្លៃពូលីណូមដែលមានគុណកូអេហ្វីស្យង់ xs នៅចំណុច x។
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""មុខងារនេះទទួលបញ្ជី l និងបញ្ជូនត្រឡប់មកវិញជាបញ្ជី l' ដូចដែល
    l' ដូចគ្នាដោយជាក់លាក់នឹង l នៅតាមទីតាំងដែលមិនអាចចែកដាច់ដោយបី, ខណៈដែលតម្លៃនៅតាមទីតាំងដែលអាចចែកដាច់ដោយបីស្មើនឹងតម្លៃនៃទីតាំងដែលសមរម្យនៃ l, ប៉ុន្តែត្រូវបានតម្រៀប។
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""បង្រួមត្រឡប់នូវធាតុដ៏មានឯកត្តភាពដែលត្រូវបានតម្រៀបក្នុងបញ្ជី
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""ត្រឡប់មកវិញធាតុអតិបរមានៅក្នុងបញ្ជី។
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""សូមបញ្ជូនចំនួនដងដែលលេខ ៧ បង្ហាញនៅក្នុងចំនួនគត់តិចជាង n ដែលចែកឱ្យដាច់ដោយ ១១ ឬ ១៣។
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""មុខងារនេះទទួលយកបញ្ជី l ហើយបង្រួញបញ្ជី l' ដូច្នេះ
    l' ដូចគ្នានឹង l នៅក្នុងតំណាងសេស, ខណៈដែលតម្លៃរបស់វានៅក្នុងតំណាងគូស្មើនឹង
    តម្លៃនៃតំណាងគូរបស់ l, ប៉ុន្តែត្រូវបានតម្រៀប។
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    ត្រឡប់នូវខ្សែអក្សរដែលបានអ៊ិនកូដដោយបង្វិលក្រុមចំនួនបីតួអក្សរម្តងៗ។
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    prime_fib ត្រឡប់លេខទី n ដែលគឺជាលេខ Fibonacci ហើយវាក៏ជាលេខបឋមផងដែរ។
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    `triples_sum_to_zero` ទទួលបញ្ជីចំនួនគត់ជាអិនផុត។
វានឹងបញ្ចូនតម្លៃ `True` ប្រសិនបើមានធាតុបីផ្សេងគ្នានៅក្នុងបញ្ជីដែលបូកសរុបបានសូន្យ ហើយបញ្ចូនតម្លៃ `False` ប្រសិនបើមិនមាន។

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    សូមគិតពីផ្លូវមួយដែលជាខ្សែត្រង់ដ៏ប្រកបដោយភាពល្អឥតខ្ចោះ និងមានប្រវែងអនន្ត។ រថយន្តចំនួន n កំពុងបើកពីឆ្វេងទៅស្តាំ; ក្នុងពេលតែមួយនោះផងដែរ មានរថយន្តចំនួន n ផ្សេងទៀតកំពុងបើកពីស្តាំទៅឆ្វេង។ រថយន្តទាំងពីរសំណុំនេះចាប់ផ្តើមនៅចម្ងាយខ្លាំងពីគ្នា។ រថយន្តទាំងអស់មានល្បឿនដូចគ្នា។ រថយន្តពីរត្រូវបានគេហៅថាប៉ះទង្គិចគ្នា នៅពេលដែលរថយន្តមួយដែលកំពុងបើកពីឆ្វេងទៅស្តាំ ប៉ះទង្គិចនឹងរថយន្តមួយដែលកំពុងបើកពីស្តាំទៅឆ្វេង។ ទោះជាយ៉ាងណា រថយន្តទាំងនោះមានភាពរឹងមាំនិងខ្លាំងមិនអស់សព្វថ្ងៃ; ដោយលទ្ធផល រថយន្តទាំងនោះបន្តផ្លូវលំនឹងរបស់គេ ដូចជាមិនមានការប៉ះទង្គិចទេ។

មុខងារនេះបង្ហាញចំនួននៃការប៉ះទង្គិចទាំងនោះ។
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""ត្រឡប់បញ្ជីដែលមានធាតុត្រូវបានបន្ថែម 1។
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero ទទួលបញ្ជីលេខគត់ជាinput។
    វាប្រគល់តម្លៃ True ប្រសិនបើមានធាតុពីរដែលខុសគ្នានៅក្នុងបញ្ជីដែលបូកគ្នាដល់សូន្យ និង False ប្រសិនបើមិនមាន។
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""ផ្លាស់ប្ដូរមូលដ្ឋានលេខរបស់លេខបញ្ចូល x ទៅមូលដ្ឋាន។
    ត្រឡប់តាមរូបមន្តខ្សែអក្សរបន្ទាប់ពីការបម្លែង។
    លេខមូលដ្ឋានតិចជាង ១០។
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""ដោយផ្អែកលើប្រវែងខ្នងជ្រុង និងកំពស់ ប្រមូលផ្តុំតំបន់សម្រាប់ត្រីកោណ។
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""ចំនួនលំដាប់ Fib4 គឺជាលំដាប់ដែល ស្រដៀងនឹងលំដាប់ Fibonacci ដែលត្រូវបានកំណត់ដូចខាងក្រោម៖
    fib4 -> 0
    fib4 -> 0
    fib4 -> 2
    fib4 -> 0
    fib4 -> fib4 + fib4 + fib4 + fib4។
    សូមសរសេរមុខងារមួយ ដើម្បីគណនាធាតុនិរន្តរបស់ចំនួនលំដាប់ fib4 ដោយមានប្រសិទ្ធភាព។ កុំប្រើបច្ចេកទេសបំលែងដោយផ្ទាល់។
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""ត្រឡប់តម្លៃមេឌៀននៃធាតុក្នុងបញ្ជី l ។
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    ពិនិត្យមើលថាតើខ្សែអក្សរដែលបានផ្តល់នោះជាការបញ្ចប់ដែរឬទេ
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""ត្រឡប់ 2^n ម៉ូឌុល p.
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    បញ្ជូនអក្សរដែលបានកូដដោយផ្លាស់ប្តូរអក្សរគ្រប់អក្សរដោយ 5 ក្នុងអក្សរធំ។
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    remove_vowels គឺជាមុខងារមួយ ដែលទទួលយកខ្សែអក្សរ និងប្រគល់ខ្សែអក្សរដែលគ្មានអក្សរក្បៀសវិញ។
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""ត្រឡប់ True ប្រសិនបើលេខទាំងអស់នៅក្នុងបញ្ជី l ស្ថិតក្រោមកម្រិត t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""បន្ថែមលេខពីរចំនួន x និង y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    ពិនិត្យមើលថា ពាក្យពីរមានតួអក្សរដូចគ្នាឬអត់។
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""ត្រឡប់លេខហ្វីបូណាចីទី n។
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" សញ្ញាក្រចកគឺជាខ្សែអក្សររបស់ ""<"" និង "">""។
    ប្រសិនបើសញ្ញាបើកគ្រប់គ្រាន់មានបិទដែលឆ្លើយតបវិញទាំងអស់វិញនោះត្រឡប់ទៅ True.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""ត្រឡប់ True បើធាតុក្នុងបញ្ជីមានលំដាប់កើនឡើងឬធ្លាក់ចុះយ៉ាងជាបន្តបន្ទាប់។
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""ផ្តល់ត្រឡប់នូវធាតុទាំងឡាយដែលជាសាធារណៈមួយដែលមានតែម្តង និងតម្រៀបរួចជាសំរាប់បញ្ជីពីរនេះ។
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""ត្រឡប់ទៅកាន់កត្តាព្រៃមធំជាងគេបំផុតនៃ n។ សន្មត់ថា n > 1 ហើយមិនមែនជាចំនួនព្រៃមទេ។
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""sum_to_n គឺជាមុខងារដែលបូកលេខពី 1 ទៅ n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" បើងាវាជាខ្សែអក្សរនៃ """"។
    ត្រឡប់ទៅ True ប្រសិនបើដងសញ្ញាក្រចកបើកទាំងអស់មានសញ្ញាក្រចកបិទឆ្លើយតប។

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" លេខ xs តំណាងឱ្យសមាសភាពនៃពហុនុគមន៍មួយ។
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     ត្រឡប់ត្រឡប់នូវអនុគមន៍សម្ព័ន្ធនៃពហុនុគមន៍នេះក្នុងទម្រង់ដូចគ្នា។
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""លំដាប់លេខ FibFib គឺជាលំដាប់លេខដែលស្រដៀងនឹងលំដាប់លេខ Fibonacci ដែលកំណត់如下 ៖
    fibfib == 0
    fibfib == 0
    fibfib == 1
    fibfib == fibfib + fibfib + fibfib។
    សូមសរសេរមុខងារមួយដើម្បីគណនាអង្គធាតុទី n នៃលំដាប់លេខ fibfib ដោយប្រសិទ្ធភាព។
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
បន្ថែមករណីសាកល្បងបន្ថែមទៀត។
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""Here is the translation of the given sentence into Khmer:

បញ្ចូលខ្ទង់លេខនៃចំនួនគត់ x, បញ្ចូលខ្ទង់លេខទៅស្ដាំដោយចំនួនបញ្ចូល shift
    ហើយត្រឡប់លទ្ធផលជា ខ្សែអក្សរ។
    ប្រសិនបើ shift > ចំនួនខ្ទង់លេខ, ត្រឡប់ខ្ទង់លេខត្រឡប់ក្រោយ។
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""Here is the translation of the provided sentence into Khmer:

```
តួនាទី
    សរសេរមុខងារមួយដែលទទួលយកខ្សែអក្សរជាអិនផុត និងត្រឡប់មកវិញនូវផលបូកនៃកូដ ASCII
    របស់តួអក្សរធំៗប៉ុណ្ណោះ។

    ឧទាហរណ៍:
        digitSum => 0
        digitSum => 131
        digitSum => 67
        digitSum => 69
        digitSum => 131
        digitSum => 153
```
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    ក្នុងកិច្ចការនេះ អ្នកនឹងត្រូវបានផ្តល់អោយនូវខ្សែអក្សរមួយដែលតំណាងឱ្យចំនួនផ្លែប៉ោមនិងផ្លែក្រូចដែលត្រូវបានចែកចាយក្នុងកញ្ចប់ផ្លែឈើមួយ។ កញ្ចប់ផ្លែឈើនេះមានផ្លែប៉ោម ផ្លែក្រូច និងផ្លែស្វាយ។ តាមខ្សែអក្សរដែលតំណាងឱ្យចំនួនសរុបនៃផ្លែក្រូចនិងផ្លែប៉ោម និងចំនួនគត់ដែលតំណាងឱ្យចំនួនសរុបនៃផ្លែឈើក្នុងកញ្ចប់នោះ អ្នកត្រូវទាញយកចំនួនផ្លែស្វាយក្នុងកញ្ចប់នោះ។

ឧទាហរណ៍:
fruit_distribution -> 19 - 5 - 6 = 8
fruit_distribution -> 3 - 0 - 1 = 2
fruit_distribution -> 100 - 2 - 3 = 95
fruit_distribution -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    ដោយផ្អែកលើអារេដែលតំណាងឱ្យមែកមួយនៃដើមឈើដែលមានគ្រាប់ចំនួនគត់ដែលមិនអវិជ្ជមាន
    ភារកិច្ចរបស់អ្នកគឺដើម្បីបកចេញគ្រាប់មួយនៃគ្រាប់ទាំងនោះហើយត្រឡប់វាមកវិញ។
    គ្រាប់ទាំងនោះដែលបកចេញត្រូវតែជាគ្រាប់ដែលមានតម្លៃគូតូចបំផុត។
    ប្រសិនបើមានគ្រាប់ច្រើនដែលមានតម្លៃគូតូចបំផុតដូចគ្នា ត្រូវតែត្រឡប់ទៅគ្រាប់ដែលមានលំដាប់តូចបំផុត។

    គ្រាប់ដែលចេញត្រូវតែត្រឡប់មកវិញក្នុងបញ្ជីមួយ, [ តម្លៃតូចបំផុត, លំដាប់របស់វា ],
    បើគ្មានតម្លៃគូឬអារេដែលបានផ្តល់គឺទទេ ត្រូវតែត្រឡប់ []

    ឧទាហរណ៍1:
        បញ្ចូល: [4,2,3]
        លទ្ធផល: [2, 1]
        ពន្យល់: 2 មានតម្លៃគូតូចបំផុត ហើយ 2 មានលំដាប់តូចបំផុត។

    ឧទាហរណ៍2:
        បញ្ចូល: [1,2,3]
        លទ្ធផល: [2, 1]
        ពន្យល់: 2 មានតម្លៃគូតូចបំផុត ហើយ 2 មានលំដាប់តូចបំផុត។

    ឧទាហរណ៍3:
        បញ្ចូល: []
        លទ្ធផល: []

    ឧទាហរណ៍4:
        បញ្ចូល: [5, 0, 3, 0, 4, 2]
        លទ្ធផល: [0, 1]
        ពន្យល់: 0 គឺជាតម្លៃតូចបំផុត ប៉ុន្តែមានសូន្យពីរដែលមានតម្លៃដូចគ្នា
                      ដូច្នេះយើងនឹងជ្រើសរើសសូន្យដំបូងដែលមានលំដាប់តូចបំផុត។

    គម្លាត:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    ដោយគិតពីអារេ arr នៃលេខគត់ កំណត់ចំនួនអប្បបរមា​នៃធាតុដែលត្រូវផ្លាស់ប្តូរដើម្បីឱ្យអារេនេះក្លាយទៅជាអារេផាលីនដ្រូមិច។ អារេផាលីនដ្រូមិចគឺជាអារេដែលអាចអានជាពីរទិសដៅដូចគ្នា។ ក្នុងការផ្លាស់ប្តូរមួយអ្នកអាចផ្លាស់ប្តូរធាតុមួយទៅជាធាតុផ្សេងណាមួយផ្សេងទៀត។

ឧទាហរណ៍:
smallest_change == 4
smallest_change == 1
smallest_change == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""សរសេរ​មុខងារ​មួយ​ដែល​ត្រឡប់​ទៅ​ជា​មែន​ប្រសិន​បើ​លេខ​ដែល​បាន​ផ្ដល់​គឺ​ជា​ការ​គុណ​គ្នា​នៃ​លេខ​ភាគ​ទី ៣
  ហើយ​ក្លែងក្លាយ​ទៀត​ទេ។
  ដឹង​ថា តិច​ជាង ១០០។
  ឧទាហរណ៍:
  is_multiply_prime == មែន
  30 = 2 * 3 * 5
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""Here's the translation of the provided sentence into Khmer:

ភារកិច្ចរបស់អ្នកគឺសរសេរមុខងារមួយដែលបង្វិលតម្លៃពិតប្រសិនបើលេខ x គឺជាអនុព៌ម្រិតនៃ n និងតម្លៃមិនពិតនៅករណីផ្សេងៗ។
x គឺជាអនុព៌ម្រិតនៃ n ប្រសិនបើ n**int=x
ឧទាហរណ៍:
is_simple_power => true
is_simple_power => true
is_simple_power => true
is_simple_power => false
is_simple_power => false
is_simple_power => false
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""អ្នកត្រូវបានផ្ដល់ការងារដើម្បីសរសេរមុខងារមួយដែលទទួលយក
លេខសិបសមលាដូចជាស្ទ្រីងហើយរាប់ចំនួនខ្ទង់សិបសមលាដែល
ជាលេខនិទាឃរដូវ (លេខនិទាឃរដូវ គឺជាលេខធម្មជាតិដែលធំជាង 1 
ហើយមិនមែនជាផលផលិតនៃលេខធម្មជាតិនៅកម្រិតធ្ងន់ណាមួយទេ)។
ខ្ទង់សិបសមលាគឺ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F។
លេខនិទាឃរដូវគឺ 2, 3, 5, 7, 11, 13, 17,...
ដូច្នេះអ្នកត្រូវកំណត់ចំនួនខ្ទង់ដូចខាងក្រោម៖ 2, 3, 5, 7, 
B, D។
ចំណាំ៖ អ្នកអាចសន្មត់ថាការបញ្ចូលតែងតែត្រឹមត្រូវ ឬជាស្ទ្រីងទទេ,
ហើយសញ្ញា A,B,C,D,E,F តែងតែជាអក្សរធំ។
ឧទាហរណ៍៖
សម្រាប់ num = ""AB"" លទ្ធផលគួរតែជា 1។
សម្រាប់ num = ""1077E"" លទ្ធផលគួរតែជា 2។
សម្រាប់ num = ""ABED1A33"" លទ្ធផលគួរតែជា 4។
សម្រាប់ num = ""123456789ABCDEF0"" លទ្ធផលគួរតែជា 6។
សម្រាប់ num = ""2020"" លទ្ធផលគួរតែជា 2។
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""អ្នកនឹងត្រូវបានផ្ដល់លេខមួយនៅក្នុងទម្រង់ទសភាគ ហើយភារកិច្ចរបស់អ្នកគឺបម្លែងវាទៅ ទម្រង់ពីរជួរ។ មុខងារគួរតែត្រឡប់មកជាខ្សែអក្សរ ដែលអក្សរនីមួយៗតំណាងឱ្យលេខពីរជួរ។ អក្សរនីមួយៗនៅក្នុងខ្សែអក្សរគឺនឹងជា '0' ឬ '1'។

នឹងមានតួអក្សរបន្ថែមពីរគឺ 'db' នៅដើម និងនៅចុងខ្សែអក្សរ។ តួអក្សរបន្ថែមគឺមានដើម្បីជួយក្នុងទម្រង់។

ឧទាហរណ៍៖
decimal_to_binary   # ត្រឡប់មកវិញ ""db1111db""
decimal_to_binary   # ត្រឡប់មកវិញ ""db100000db""
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""អ្នកត្រូវបានផ្តល់ string s មួយ។
    ភារកិច្ចរបស់អ្នកគឺត្រូវពិនិត្យមើលថា string នោះមានសុភមង្គលឬអត់។
    string មួយមានសុភមង្គល ប្រសិនបើវាមានប្រវែងយ៉ាងហោចណាស់ ៣ ហើយអក្សរតាំងពី ៣ ជាប់គ្នាមានភាពខុសគ្នា។
    ឧទាហរណ៍៖
    is_happy => មិនមានសុភមង្គល
    is_happy => មិនមានសុភមង្គល
    is_happy => មានសុភមង្គល
    is_happy => មិនមានសុភមង្គល
    is_happy => មានសុភមង្គល
    is_happy => មិនមានសុភមង្គល
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""វាជាសប្តាហ៍ចុងក្រោយនៃឆមាស ហើយគ្រូត្រូវតែផ្តល់ពិន្ទុឱ្យសិស្ស។ គ្រូបានបង្កើតអាល់ហ្គរីធម៍ផ្ទាល់របស់គាត់សម្រាប់ការផ្តល់ពិន្ទុ។ បញ្ហាតែមួយគត់គឺ គាត់បានបាត់បង់កូដដែលគាត់ប្រើសម្រាប់ការផ្តល់ពិន្ទុ។ គាត់បានផ្តល់ឱ្យអ្នកនូវបញ្ជីនៃ GPA សម្រាប់សិស្សមួយចំនួន ហើយអ្នកត្រូវតែសរសេរមុខងារមួយដែលអាចបញ្ចេញបញ្ជីនៃពិន្ទុអក្សរដោយប្រើតារាងដូចខាងក្រោម៖

             GPA       |    ពិន្ទុអក្សរ
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    ឧទាហរណ៍:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""សរសេរមុខងារមួយដែលទទួលយកខ្សែអក្សរនិងត្រឡប់មកវិញជាកម្លាំងពិតប្រសិនបើប្រវែងនៃខ្សែអក្សរគឺជាចំនួនបឋមឬកលែងវិញប្រសិនបើមិនមែនជាចំនួនបឋម
ឧទាហរណ៍
    prime_length == True
    prime_length == True
    prime_length == True
    prime_length == False
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    ដោយផ្ដល់នូវចំនួនគត់វិជ្ជមាន n មួយ ត្រលប់ចំនួននៃចំនួនគត់វិជ្ជមានដែលមានចំនួនខ្ទង់ n និងចាប់ផ្តើមឬបញ្ចប់ដោយលេខ 1។
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.

    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""ដោយផ្តល់នូវបញ្ជីមិនទទេនៃចំនួនគត់ lst។ បូកធាតុគូដែលនៅចំនុចលំដាប់សេស។

    ឧទាហរណ៍:
        បូក ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    Here is the translation of the given sentence into Khmer:

សរសេរមុខងារមួយដែលទទួលយកខ្សែអក្សរនិងត្រឡប់មកវិញជាបច្ចេកទេសដើម្បីរៀបចំវា។ 
បច្ចេកទេសដើម្បីរៀបចំខ្សែអក្សរគឺជាខ្សែអក្សរដែលពាក្យទាំងអស់ ត្រូវបានជំនួសដោយពាក្យថ្មីដែលអក្សរទាំងអស់ត្រូវបានរៀបចំតាមលំដាប់កើនឡើងដោយផ្អែកលើតម្លៃ ascii។
ចំណាំ: អ្នកគួរតែរក្សាលំដាប់នៃពាក្យនិងចន្លោះទទេក្នុងប្រយោគ។

ឧទាហរណ៍:
anti_shuffle ត្រឡប់មកវិញជា 'Hi'
anti_shuffle ត្រឡប់មកវិញជា 'ehllo'
anti_shuffle ត្រឡប់មកវិញជា 'Hello !!!Wdlor'
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    អ្នកត្រូវបានផ្តល់ឱ្យនូវទិន្នន័យ ២ វិមាត្រ គឺជាបញ្ចីជាស្រទាប់ ដែលស្រដៀងទៅនឹងម៉ាទ្រីស ទោះបីជាមិនដូចម៉ាទ្រីសក៏ដោយ ព្រោះតែជួរដេកនីមួយៗអាចមានចំនួនជួរឈរខុសៗគ្នា។ 
ដោយបានផ្តល់ lst និងលេខគត់ x សូមស្វែងរកលេខគត់ x ក្នុងបញ្ជី ហើយត្រឡប់មកជាបញ្ជីនៃគូ [, ...] ដែលគូផ្សេងៗគ្នានេះជាពាណិជ្ជកម្ម - ដែលចាប់ផ្តើមពី 0។ 
តម្រៀបពាណិជ្ជកម្មដំបូងដោយជួរដេកតាមលំដាប់ឡើងលើ។ 
ក៏អាចតម្រៀបពាណិជ្ជកម្មនៃជួរដេកដោយជួរឈរតាមលំដាប់ចុះក្រោម។

ឧទាហរណ៍:
get_row([
  [1, 2, 3, 4, 5, 6],
  [1, 2, 3, 4, 1, 6],
  [1, 2, 3, 4, 5, 1]
], 1) == [,,,,]
get_row == []
get_row == []
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    ដោយពិនិត្យមើលអារេនៃចំនួនគត់មិនអវិជ្ជមាន សូមប្រគល់ចម្លងនៃអារេដែលបានផ្តល់ឱ្យបន្ទាប់ពីតម្រៀប។ 
អ្នកនឹងតម្រៀបអារេដែលបានផ្តល់ឱ្យតាមលំដាប់កើនឡើង ប្រសិនបើផលបូក គឺសេស។ 
ឬតម្រៀបវាតាមលំដាប់ថយចុះ បើផលបូក គឺគូ។

ចំណាំ:
* កុំផ្លាស់ប្តូរអារេដែលបានផ្តល់ឱ្យ។

ឧទាហរណ៍:
* sort_array => []
* sort_array => [5]
* sort_array => [0, 1, 2, 3, 4, 5]
* sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""បង្កើតមុខងារមួយឈ្មោះ encrypt ដែលទទួលអក្សរជាអាគុយម៉ង់ 
និងត្រឡប់មកវិញជាអក្សរដែលបានបំលែងដោយអក្សរត្រូវបានបង្វិល។ 
អក្សរត្រូវបានបង្វិលបែបនេះ៖អក្សរដែលបង្វិលទៅក្រោមដោយគូរត្រូវបានគុណដោយពីរទៅកន្លែងពីរ។
ឧទាហរណ៍ ៖
encrypt ត្រឡប់ទៅ 'lm'
encrypt ត្រឡប់ទៅ 'ewhjklnop'
encrypt ត្រឡប់ទៅ 'kj'
encrypt ត្រឡប់ទៅ 'ix'
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    អ្នកត្រូវបានផ្ដល់នូវបញ្ជីចំនួនគត់មួយ។
    សរសេរមុខងារ next_smallest ដើម្បីស្តារត្រឡប់ធាតុទី 2 ដែលតូចបំផុតនៃបញ្ជី។
    ត្រឡប់ None ប្រសិនបើមិនមានធាតุดังกล่าวទេ។
    
    next_smallest == 2
    next_smallest == 2
    next_smallest == None
    next_smallest == None
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    Here's the translation of the provided sentence into Khmer:

អ្នកនឹងត្រូវបានផ្តល់ឱ្យនូវខ្សែអក្សរមួយដែលមានពាក្យជាច្រើន ហើយភារកិច្ចរបស់អ្នកគឺដើម្បីរាប់ចំនួន
នៃការធុញទ្រាន់។ ការធុញទ្រាន់គឺជាប្រយោគមួយដែលចាប់ផ្តើមដោយពាក្យ ""ខ្ញុំ""។
ប្រយោគត្រូវបានបំបែកដោយ '.', '?' ឬ '!'.

ឧទាហរណ៍:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    Here is the translation of the given sentence into Khmer:

សរសេរអនុគមន៍មួយដែលទទួលសារមួយ ហើយអ៊ិនកូដសារនោះដោយប្តូរទ្រង់សញ្ញានៃអក្សរទាំងអស់ និងជំនួសស្រៈទាំងអស់ក្នុងសារដោយអក្សរដែលបង្ហាញពី២កន្លែងទៅមុខនៃស្រៈនោះក្នុងអក្សរអង់គ្លេស។ សន្សំពីអក្សរទាំងអស់ឯណោះ។ 

ឧទាហរណ៍:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""អ្នកត្រូវបានផ្តល់ឱ្យនូវបញ្ជីលេខគត់។
អ្នកត្រូវស្វែងរកតម្លៃគោលដប់ធំជាងគេហើយត្រឡប់តម្លៃផលគុណនៃខ្ទង់របស់វា។

ឧទាហរណ៍:
សម្រាប់ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] លទ្ធផលគឺ 10
សម្រាប់ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] លទ្ធផលគឺ 25
សម្រាប់ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] លទ្ធផលគឺ 13
សម្រាប់ lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] លទ្ធផលគឺ 11
សម្រាប់ lst = [0,81,12,3,1,21] លទ្ធផលគឺ 3
សម្រាប់ lst = [0,8,1,2,1,7] លទ្ធផលគឺ 7
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    ដោយប្រើពុម្ពពាក្យមួយ ឱ្យត្រឡប់មក True ប្រសិនបើគ្រប់កូនសោរគឺជាខ្សែអក្សរនៅលើផ្នែកខាងក្រោម ឬគ្រប់កូនសោរគឺជាខ្សែអក្សរនៅលើផ្នែកខាងលើ បើមិនដូច្នេះទេ ត្រឡប់ False ។ មុខងារគួរតែត្រឡប់ False ប្រសិនបើពុម្ពពាក្យមួយដែលបានផ្តល់គឺទទេ។
ឧទាហរណ៍:
check_dict_case គួរតែត្រឡប់ True។
check_dict_case គួរតែត្រឡប់ False។
check_dict_case គួរតែត្រឡប់ False។
check_dict_case គួរតែត្រឡប់ False។
check_dict_case គួរតែត្រឡប់ True។
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""អនុវត្តមុខងារមួយដែលទទួលយកចំនួនគត់មិនអវិជ្ជមាន និងបង្វិលអារេមួយនៃចំនួនគត់ n ដំបូងដែលជាចំនួនព្រាម និងតូចជាង n។
ឧទាហរណ៍៖
count_up_to => [2,3]
count_up_to => [2,3,5,7]
count_up_to => []
count_up_to => [2,3,5,7,11,13,17,19]
count_up_to => []
count_up_to => [2,3,5,7,11,13,17]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""បញ្ចប់មុខងារដែលទទួលសង្វាក់ពីរ និងបង្រួមផលិតផលនៃខ្ទង់ឯកភាពរបស់ពួកគេ។
    សន្មតថាការបញ្ចូលតែងតែត្រឹមត្រូវ។
    ឧទាហរណ៍៖
    multiply ត្រូវតែចេញ 16។
    multiply ត្រូវតែចេញ 72។
    multiply ត្រូវតែចេញ 0។
    multiply ត្រូវតែចេញ 20។
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    តាមទីនេះនេះជាផលបកប្រែទៅជាភាសាខ្មែរ៖

ដោយផ្តល់អក្សរជួរ s មួយ ចាប់គណនាចំនួនស្រៈធំៗដែលនៅក្នុងចំណាត់ថ្នាក់គូ។

    ឧទាហរណ៍៖
    count_upper ផ្តល់ជូន ១
    count_upper ផ្តល់ជូន ០
    count_upper ផ្តល់ជូន ០
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    ឱ្យ​ចំនួន​គត់​វិសមអនុគមន៍ n មួយ អ្នក​ត្រូវ​បង្កើត​ក្បាលថ្ម​ដែល​មាន​ជាន់ n។
    ជាន់​ទីមួយ​មាន​ថ្ម n។
    ចំនួន​ថ្ម​នៅ​ជាន់​បន្ទាប់​គឺ:
        - ចំនួន​ខាងក្រៅ​បន្ទាប់ ប្រសិនបើ n គឺ​គុណប្រក្រតី។
        - ចំនួន​ខាងក្នុង​បន្ទាប់ ប្រសិនបើ n គឺ​គុណប្រក្រតី។
    ត្រឡប់ចំនួនថ្មក្នុងជាន់នីមួយៗក្នុងបញ្ជីមួយ ដែលធាតុនៅសន្ទស្សន៍
    i តំណាងឱ្យចំនួនថ្មនៅជាន់។

    ឧទាហរណ៍:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    អ្នកនឹងត្រូវបានផ្តល់ឱ្យនូវខ្សែអក្សរមួយដែលមានពាក្យបំបែកដោយសញ្ញាកុម៉ា ឬចន្លោះ។ ភារកិច្ចរបស់អ្នកគឺបំបែកខ្សែអក្សរនោះជាពាក្យៗ ហើយត្រឡប់មកជារាយនាមនៃពាក្យ។

ឧទាហរណ៍:
words_string == [""Hi"", ""my"", ""name"", ""is"", ""John""]
words_string == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""ប្រសិនបើអនុគមន៍នេះទទួលយកលេខវិជ្ជមាន x និង y ហើយត្រឡប់លេខគុណគូធំបំផុតដែលស្ថិតក្នុងលំដាប់ [x, y] ។ ប្រសិនបើគ្មានលេខដូច្នោះទេ អនុគមន៍គួរតែត្រឡប់ -1 ។

ឧទាហរណ៍៖
choose_num = 14
choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""អ្នកត្រូវបានផ្តល់ឱ្យនូវចំនួនគត់វិជ្ជមានពីរ n និង m ហើយភារកិច្ចរបស់អ្នកគឺគណនាមធ្យមភាពនៃចំនួនគត់ចាប់ពី n ទៅ m។ បង្គត់ចម្លើយទៅចំនួនគត់ជិតបំផុត ហើយបម្លែងវាទៅក្នុងទម្រង់ទសភាគ។ ប្រសិនបើ n ធំជាង m សូមបង្រួមត្រឡប់ -1។
ឧទាហរណ៍:
rounded_avg => ""0b11""
rounded_avg => -1
rounded_avg => ""0b1111""
rounded_avg => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""នេះជាបញ្ជីនៃចំនួនគត់វិជ្ជមាន x ។ ត្រឡប់មកជាបញ្ជីតម្រៀបនៃធាតុទាំងអស់ 
ដែលគ្មានខ្ទង់សូន្យសូម្បីតែចំនួនដើម។

ចំណាំ៖ បញ្ជីដែលបានត្រឡប់មកគួរតែតម្រៀបតាមលំដាប់កើនឡើង។

ឧទាហរណ៍:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    ដោយផ្តល់អារេនៃចំនួនគត់ មេីលជួរលេខដែលស្ថិតក្នុងចន្លោះពី 1 ទៅ 9 រួចតម្រៀបជួរលេខទាំងនោះ បន្ទាប់មកបញ្ច្រាសជួរលេខដែលបានកែច្នៃ ហើយប្តូរចំនួនគត់នីមួយៗជាឈ្មោះដែលត្រូវនឹងចំនួននោះពី ""មួយ"", ""ពីរ"", ""បី"", ""បួន"", ""ប្រាំ"", ""ប្រាំមួយ"", ""ប្រាំពីរ"", ""ប្រាំបី"", ""ប្រាំបួន""។

ឧទាហរណ៍៖
    arr = [2, 1, 1, 4, 5, 8, 2, 3]   
        -> តម្រៀប arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
        -> បញ្ច្រាស arr -> [8, 5, 4, 3, 2, 2, 1, 1]
    return [""ប្រាំបួន"", ""ប្រាំ"", ""បួន"", ""បី"", ""ពីរ"", ""ពីរ"", ""មួយ"", ""មួយ""]

    ប្រសិនបើអារេគឺទទេ, ត្រលប់មកវិញជាអារេទទេ:
    arr = []
    return []

    ប្រសិនបើអារេមានលេខចម្លែកណាមួយ គ្មានការយកចិត្តទុកដាក់:
    arr = [1, -1 , 55] 
        -> តម្រៀប arr -> [-1, 1, 55]
        -> បញ្ច្រាស arr -> [55, 1, -1]
    return = ['មួយ']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" Here is the translation of the given sentence into Khmer:

អនុវត្តមុខងារ f ដែលទទួល n ជាអាខារ៉ាម៉ង់ ហើយបង្វិលត្រឡប់មកវិញនូវបញ្ជីដែលមានទំហំ n ដូច្នេះតម្លៃនៃធាតុខាងក្នុងនៅទីតាំង i គឺជាមូលដ្ឋាននៃ i ប្រសិនបើ i គឺជាលេខគូ ឬការបូករួមគ្នានៃលេខពី 1 ដល់ i បើមិនដូច្នោះទេ។
    i ចាប់ផ្ដើមពី 1។
    មូលដ្ឋាននៃ i គឺជាផលគុណនៃលេខពី 1 ដល់ i។
    ឧទាហរណ៍:
    f == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    ដោយផ្តល់លេខគត់វិជ្ជមាន n ឲ្យ, វិលត្រឡប់តាមទម្រង់ tuple ដែលមានចំនួនលេខគត់ប្រក្រតីគូ និងសេស ដែលស្ថិតក្នុងលំដាប់ រួមបញ្ចូល។

ឧទាហរណ៍1:

    Input: 3
    Output:
    ពន្យល់:
    លេខគត់ប្រក្រតីគឺ 1, 2, 3. មួយក្នុងចំណោមពួកវាគឺគូ, ហើយពីរនាក់ក្នុងចំណោមពួកវាគឺសេស។

ឧទាហរណ៍2:

    Input: 12
    Output:
    ពន្យល់:
    លេខគត់ប្រក្រតីគឺ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. បួនក្នុងចំណោមពួកវាគឺគូ, ហើយ 6 នាក់ក្នុងចំណោមពួកវាគឺសេស។

ចំណាំ:
    1. 1 <= n <= 10^3
    2. ទម្រង់ tuple ដែលវិលត្រឡប់មានចំនួននៃលេខគត់ប្រក្រតីគូ និងសេសតាមលំដាប់។
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    Here is the translation of the provided sentence into Khmer:

សរសេរ​មុខងារ count_nums ដែល​ទទួល​យក​អារេនៃ​លេខ​គត់ និង​ត្រឡប់
    ចំនួន​ធាតុ​ដែល​មាន​ផលបូក​សរុប​នៃ​ខ្ទង់​ចំនួន > 0។
    ប្រសិនបើ​លេខ​មួយ​មាន​លេខ​អវិជ្ជមាន នោះ​ខ្ទង់​លេខ​ដំបូង​របស់​វា​នឹង​មាន​សញ្ញា​អវិជ្ជមាន:
    ឧទាហរណ៍ -123 មាន​ខ្ទង់​លេខ​ដែល​មាន​សញ្ញា -1, 2, និង 3។
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""យើងមានអារម្មណ៍ 'arr' នៃចំនួនគត់ចំនួន N arr[1], arr[2], ..., arr[N]។ 
ចំនួននៅក្នុងអារRayនឹងត្រូវបានរៀបចំដោយចៃដន្យ។ ផ្នែករបស់អ្នកគឺត្រូវកំណត់ថា 
វាអាចធ្វើទៅបានក្នុងការទទួលបានអារម្មណ៍ដែលបានតម្រៀបតាមលំដាប់មិនថយចុះ 
ដោយការប្រតិបត្តិការដូចតទៅនេះលើអារម្មណ៍ដែលបានផ្តល់៖
អ្នកត្រូវបានអនុញ្ញាតឱ្យធ្វើការប្តូរទិសតាមទិសអាក្រក់ចំនួនពេលណាក៏ដោយ។

ការប្តូរទិសតាមទិសមួយមានន័យថាធ្វើការប្តូរទិសតាមទិសមួយដោយចាប់ផ្តើមពី
ចំណុចចុងក្រោយនៃអារម្មណ៍មកកាន់ចំណុចដំបូងនៃអារម្មណ៍។ ចំនួនចុងក្រោយនៃអារម្មណ៍នឹងត្រូវបាន
ផ្លាស់ប្តូរទិសទៅទីតាំងចាប់ផ្តើមនៃអារម្មណ៍គឺ 0th index។

បើវាអាចរកឃើញអារម្មណ៍តម្រៀបដោយធ្វើប្រតិបត្តិការខាងលើនោះត្រឡប់មក True បើមិនដូច្នោះទេត្រឡប់មក False។
បើអារម្មណ៍ដែលបានផ្តល់គឺទទេនោះត្រឡប់មក True។

ចំណាំ៖ បញ្ជីដែលបានផ្តល់គឺមានធានាថាមានធាតុដែលគ្មានការដូចគ្នា។

ឧទាហរណ៍៖

move_one_ball==>True
ការពន្យល់៖ ដោយការធ្វើប្រតិបត្តិការប្តូរទិសតាមទិសពីរដង អារម្មណ៍តម្រៀបមិនថយចុះអាច
               ត្រូវបានសម្រេចសម្រាប់អារម្មណ៍ដែលបានផ្តល់។
move_one_ball==>False
ការពន្យល់៖ វាមិនអាចទទួលបានអារម្មណ៍តម្រៀបមិនថយចុះសម្រាប់អារម្មណ៍ដែលបានផ្តល់
                ដោយធ្វើប្រតិបត្តិការទិសតាមទិសចំនួនណាមួយ។
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""ក្នុងបញ្ហានេះ, អ្នកនឹងអនុវត្តមុខងារមួយដែលទទួលបានបញ្ជីពីរ នៃលេខ,
ហើយកំណត់ថាតើអាចធ្វើការផ្លាស់ប្តូរតំលៃទាំងពីរបញ្ជីនេះដើម្បី
ធ្វើឱ្យ lst1 ក្លាយជាបញ្ជីនៃលេខគូទាំងអស់បានដែរឬទេ។
គ្មានដែនកំណត់ចំនួនធាតុដែលអាចផ្លាស់ប្តូររវាង lst1 និង lst2។
បើអាចផ្លាស់ប្តូរតំលៃរវាង lst1 និង lst2 ដើម្បីធ្វើឱ្យ
ធាតុទាំងអស់នៃ lst1 ក្លាយជាលេខគូ, ត្រឡប់ ""បាទ/ចាស""។
បើមិនអាចទេ, ត្រឡប់ ""ទេ""។
ឧទាហរណ៍:
exchange => ""បាទ/ចាស""
exchange => ""ទេ""
គេសន្មតថាបញ្ជីបញ្ចូលទាំងអស់នឹងមិនទទេ។
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""អត្ថបទដូចខាងក្រោមត្រូវបានបកប្រែទៅជាភាសាខ្មែរ៖

ដោយផ្តល់អក្សរមួយដែលតំណាងឱ្យអក្សរតូចដែលបំបែកដោយចន្លោះវែងៗ ត្រឡប់មកវិញនូវវចនានុក្រមនៃអក្សរដែលមានការបន្តរំលងច្រើនបំផុត និងមានចំនួនដែលត្រូវគ្នា។ ប្រសិនបើមានអក្សរច្រើនដែលមានចំនួនស្មើគ្នា ត្រឡប់នូវទាំងអស់។

ឧទាហរណ៍៖
histogram == {'a': 1, 'b': 1, 'c': 1}
histogram == {'a': 2, 'b': 2}
histogram == {'a': 2, 'b': 2}
histogram == {'b': 4}
histogram == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""Here's the translation of the given sentence into Khmer:

```
អាទិត្យ
    យើងមានសរសេរ s និង c អ្នកត្រូវលុបតួអក្សរទាំងអស់ក្នុង s ដែលស្មើនឹងតួអក្សរណាមួយក្នុង c
    បន្ទាប់មកពិនិត្យមើលថាសរសេរបន្ទាប់ដែលបានលុបម្តងនេះមានលក្ខណៈពាក្យក្រឡាផ្លុំឬអត់។
    ពាក្យក្រឡាផ្លុំគឺពាក្យដែលអាចអានពីខាងក្រោយទៅមុខបានដូចគ្នានឹងអានពីមុខទៅក្រោយ។
    អ្នកគួរតែត្រឡប់ត្រឡប់មកជាគូរដែលមានសរសេរបន្ទាប់និង True/False សម្រាប់ការពិនិត្យ។
    ឧទាហរណ៍
    សម្រាប់ s = ""abcde"", c = ""ae"", លទ្ធផលគួរតែជា
    សម្រាប់ s = ""abcdef"", c = ""b""  លទ្ធផលគួរតែជា
    សម្រាប់ s = ""abcdedcba"", c = ""ab"", លទ្ធផលគួរតែជា
```
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""អោយបញ្ជីនៃអក្សរដែលមានតែខ្ទង់លេខប៉ុណ្ណោះ ដើម្បីត្រឡប់ទៅបញ្ជីមួយ។
    ធាតុ i នៃលទ្ធផលគួរតែជា ""ចំនួនធាតុសេសសន្លឹកនៅក្នុងខ្សែអក្សរ i 
    នៃការបញ្ចូល។"" ដែល i ទាំងអស់គួរតែត្រូវបានជំនួសដោយចំនួន 
    ខ្ទង់លេខសេសនៅក្នុងខ្សែអក្សរ i នៃការបញ្ចូល។

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    ភាសាខ្មែរ:

ទូទៅជាអារម្មណ៍ខ្ញុំ, អ្នកបានបញ្ជាក់ថាអ្នកចង់បានការបកប្រែឃ្លាទាំងមូលទៅជាភាសាខ្មែរ។ នេះជាការបកប្រែរបស់ខ្ញុំ:

អោយអារេមួយដែលមានលេខគត់ nums, សូមរកផលបូកបន្ថយតិចបំផុតនៃស៊ុមអារេមិនទទេណាមួយនៃ nums។
ឧទាហរណ៍
minSubArraySum == 1
minSubArraySum == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    អ្នកត្រូវបានផ្ដល់ជូននូវបណ្តុំក្រឡាចត្រង្គរបស់អណ្តូង។ ជួរដេកនីមួយៗតំណាងឱ្យអណ្តូងមួយ
    ហើយលេខ 1 នីមួយៗនៅក្នុងជួរដេកតំណាងឱ្យអង្គភាពទឹកមួយ។
    អណ្តូងនីមួយៗមានធុងដែលអាចប្រើសម្រាប់ដកទឹកចេញពីវា,
    ហើយធុងទាំងអស់មានសមត្ថភាពដូចគ្នា។
    ភារកិច្ចរបស់អ្នកគឺប្រើធុងដើម្បីដកទឹកចេញពីអណ្តូងទាំងនោះ។
    លទ្ធផលចេញជាចំនួនដងដែលអ្នកត្រូវបញ្ចូលធុង។

    ឧទាហរណ៍1:
        បញ្ចូល: 
            ក្រឡា : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            សមត្ថភាពធុង : 1
        លទ្ធផល: 6

    ឧទាហរណ៍2:
        បញ្ចូល: 
            ក្រឡា : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            សមត្ថភាពធុង : 2
        លទ្ធផល: 5
    
    ឧទាហរណ៍3:
        បញ្ចូល: 
            ក្រឡា : [[0,0,0], [0,0,0]]
            សមត្ថភាពធុង : 5
        លទ្ធផល: 0

    ការកំណត់:
        * អណ្តូងទាំងអស់មានប្រវែងដូចគ្នា
        * 1 <= ប្រវែង grid <= 10^2
        * 1 <= ប្រវែង grid[:,1] <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= សមត្ថភាព <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    ក្នុង Kata នេះ អ្នកត្រូវត្រៀមតម្រៀបអារេនៃចំនួនគត់ដែលមិនអវិជ្ជមាន ដោយផ្អែកលើចំនួនមួយក្នុងតំណាងគោលពីររបស់ពួកវានៅក្នុងលំដាប់ឡើង។ សម្រាប់ចំនួនមួយដែលស្រដៀងគ្នា ត្រូវត្រៀមតម្រៀបដោយផ្អែកលើតម្លៃទសភាគ។ 

វាត្រូវត្រូវបានអនុវត្តដូច្នេះ៖
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""ដោយផ្ដល់ពាក្យសម្ងាត់ s និងចំនួនធម្មជាតិ n អ្នកត្រូវបានចាត់តាំងឱ្យអនុវត្តមុខងារមួយដែលត្រឡប់ត្រឡប់មកជាបញ្ជីនៃពាក្យទាំងអស់ពីពាក្យសម្ងាត់ s ដែលមានតែ n រឺសព្ទ, តាមលំដាប់ពាក្យទាំងនោះបង្ហាញក្នុងពាក្យសម្ងាត់ s។ ប្រសិនបើពាក្យសម្ងាត់ s ទទេ មុខងារគួរតែត្រឡប់មកជាបញ្ជីទទេ។
ចំណាំ៖ អ្នកអាចសន្មត់ថាពាក្យសម្ងាត់បញ្ចូលមានតែអក្សរ និងចន្លោះប៉ុណ្ណោះ។
ឧទាហរណ៍:
select_words ==> [""little""]
select_words ==> [""Mary"", ""lamb""]
select_words ==> []
select_words ==> [""world""]
select_words ==> [""Uncle""]
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""អ្នកត្រូវបានផ្តល់ពាក្យមួយ។ ភារកិច្ចរបស់អ្នកគឺរកស្រាវជំរុញស្រៈដែលនៅចន្លោះព្យញ្ជនៈពីរពីផ្នែកខាងស្តាំនៃពាក្យ។

    ស្រៈនៅដើមនិងចុងមិនត្រូវបានគិត។ បញ្ជូនត្រឡប់លេខក្នុងសំណុំទទេប្រសិនបើអ្នកមិនបានរកឃើញស្រៈណាមួយដែលបានឆ្លើយតបទៅនឹងលក្ខខណ្ឌខាងលើ។

    អ្នកអាចសន្មត់ថាស្រឡាញ់ដែលបានផ្តល់នោះមានតែអក្សរភាសាអង់គ្លេសតែប៉ុណ្ណោះ។

    ឧទាហរណ៍:
    get_closest_vowel ==> ""u""
    get_closest_vowel ==> ""U""
    get_closest_vowel ==> """"
    get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    នៅក្នុងខ្មែរ ប្រែប្រយោគនេះដូចខាងក្រោម៖

ដោយទទួលបានអារេ arr ដែលមានលេខគត់ និងអាំងតែឌ័រ k ដែលជាចំនួនវិជ្ជមាន សូមបញ្ជូនបញ្ជីតម្រៀបដែលមានប្រវែង k ដែលមានលេខធំបំផុត k នៅក្នុង arr ។

ឧទាហរណ៍1៖

    បញ្ចូល៖ arr = [-3, -4, 5], k = 3
    លទ្ធផល៖ [-4, -3, 5]

ឧទាហរណ៍2៖

    បញ្ចូល៖ arr = [4, -4, 4], k = 2
    លទ្ធផល៖ [4, 4]

ឧទាហរណ៍3៖

    បញ្ចូល៖ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
    លទ្ធផល៖ [2]

ចំណាំ៖
    1. ប្រវែងនៃអារេនឹងមានចន្លោះពី [1, 1000]។
    2. ធាតុក្នុងអារេនឹងមានចន្លោះពី [-1000, 1000]។
    3. 0 <= k <= len
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""ដោយផ្តល់នូវបញ្ជីមិនទទេនៃលេខគត់ សូមបង្រួមចំនួនបូកនៃធាតុគោលដែលស្ថិតនៅតំណែងសូម្បី។

    ឧទាហរណ៍
    solution ==> 12
    solution ==> 9
    solution ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    អោយអារេមិនទទេរបស់ចំនួនគត់ arr និងចំនួនគត់ k, សូមត្រឡប់តម្លៃផ្ដល់សរុបនៃធាតុដែលមានចំនួនខ្ទង់ច្រើនបំផុតពីរខ្ទង់ពីធាតុដំបូង k នៃ arr។

ឧទាហរណ៍:

    បញ្ចូល: arr = [111,21,3,4000,5,6,7,8,9], k = 4
    លទ្ធផល: 24 # ផ្ដល់សរុបនៃ 21 + 3

លក្ខខណ្ឌ:
    1. 1 <= len <= 100
    2. 1 <= k <= len
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.

Translate the sentence into Khmer:

ដោយយក n ជាចំនួនគត់វិជ្ជមាន មកបញ្ចូលក្នុងបញ្ជីដែលត្រូវបានតម្រៀបហើយមានតែចំនួនសេសក្នុងលំដាប់ Collatz។

    សំណួររបស់ Collatz គឺជាសំណួរមួយនៅក្នុងគណិតវិទ្យាដែលពាក់ព័ន្ធនឹងលំដាប់មួយដែលបានកំណត់
    ដូចខាងក្រោម៖ ចាប់ផ្តើមដោយចំនួនគត់វិជ្ជមានណាមួយ n។ បន្ទាប់មកលំដាប់នីមួយៗត្រូវបានទាញយកពី
    លំដាប់មុនដូចខាងក្រោម៖ ប្រសិនបើលំដាប់មុនជាចំនួនគូ លំដាប់បន្ទាប់គឺជាភាគពាក់កណ្តាលនៃ
    លំដាប់មុន។ ប្រសិនបើលំដាប់មុនជាចំនួនសេស លំដាប់បន្ទាប់គឺជាចំនួន 3 ដងនៃលំដាប់មុនបូកនឹង 1។
    សំណួរគឺថាមិនមានទំហំ n ណាមួយដែលលំដាប់នោះនឹងឈានដល់ 1 នៅជានិច្ច។

    សំគាល់:
        1. Collatz គឺ [1]។
        2. បញ្ជីដែលត្រូវបានត្រឡប់វិញត្រូវតម្រៀបតាមលំដាប់កើនឡើង។

    ឧទាហរណ៍៖
    get_odd_collatz ត្រឡប់ [1, 5] # លំដាប់ Collatz សម្រាប់ 5 គឺ [5, 16, 8, 4, 2, 1] ដូច្នេះចំនួនសេសគឺមានតែ 1 និង 5។
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""អ្នកត្រូវតែសរសេរមុខងារមួយដែលផ្ទៀងផ្ទាត់ខ្សែអក្សរដេលកាលបរិច្ឆេទ 
    ហើយត្រឡប់តម្លៃ True ប្រសិនបើកាលបរិច្ឆេទត្រឹមត្រូវ មិនដូច្នោះទេត្រឡប់តម្លៃ False។
    កាលបរិច្ឆេទត្រឹមត្រូវប្រសិនបើបំពេញតាមបំណាច់ដូចខាងក្រោម៖
    ១. ខ្សែអក្សរនៃកាលបរិច្ឆេទមិនទទេ។
    ២. ចំនួនថ្ងៃមិនតិចជាង ១ ឬច្រើនជាង ៣១ ថ្ងៃសម្រាប់ខែ ១, ៣, ៥, ៧, ៨, ១០, ១២។ ហើយចំនួនថ្ងៃមិនតិចជាង ១ ឬច្រើនជាង ៣០ ថ្ងៃសម្រាប់ខែ ៤, ៦, ៩, ១១។ ហើយចំនួនថ្ងៃមិនតិចជាង ១ ឬច្រើនជាង ២៩ សម្រាប់ខែ ២។
    ៣. ខែងមិនតិចជាង ១ ឬច្រើនជាង ១២។
    ៤. កាលបរិច្ឆេទគួរតែមានទ្រង់ទ្រាយ៖ mm-dd-yyyy

    ឧទាហរណ៍៖
    valid_date => True

    valid_date => False

    valid_date => False

    valid_date => True

    valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""អ្នកត្រូវបានផ្តល់ឱ្យនូវចន្លោះពីរ
    ដែលចន្លោះនីមួយៗគឺជាគូរ នៃចំនួនគត់។ ឧទាហរណ៍, ចន្លោះ = =។
    ចន្លោះដែលបានផ្តល់គឺជាចន្លោះបិទដែលមានន័យថាចន្លោះ
    រួមបញ្ចូលទាំងចាប់ផ្តើមនិងចប់។
    សម្រាប់ចន្លោះនីមួយៗដែលបានផ្តល់។ មានការសន្មត់ថាការចាប់ផ្តើមរបស់វាតិច ឬស្មើនឹងចប់។
    ភារកិច្ចរបស់អ្នកគឺកំណត់ថាអង្កត់ផ្ចិតនៃចន្លោះពីរនោះជាចំនួនប៉ុណ្ណានោះគឺជាចំនួនបឋមឬអត់។
    ឧទាហរណ៍, ការប៉ះទង្គិចនៃចន្លោះ, គឺ
    ដែលបណ្តោយរបស់វាគឺ ១, ដែលមិនមែនជាចំនួនបឋម។
    ប្រសិនបើបណ្តោយនៃការប៉ះទង្គិចគឺជាចំនួនបឋម, ត្រឡប់មកវិញ ""YES"",
    មិនដូច្នេះទេ ត្រឡប់មកវិញ ""NO""។
    ប្រសិនបើចន្លោះពីរមិនប៉ះទង្គិច ត្រឡប់មកវិញ ""NO""។


    [គំរូបញ្ចូល/ទិន្នផល]:
    intersection,) ==> ""NO""
    intersection,) ==> ""NO""
    intersection,) ==> ""YES""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    Here is the translation of the given sentence into Khmer:

អ្នកត្រូវបានផ្តល់អារេ arr ដែលជាចំនួនគត់ហើយអ្នកត្រូវត្រលប់
    ផលបូកនៃកម្រិតធំជាងគេនៃចំនួនគត់គុណនឹងផលគុណនៃសញ្ញាទាំងអស់
    នៃលេខនីមួយៗក្នុងអារេ ដែលត្រូវបានតំណាងដោយ 1, -1 ឬ 0។
    សំគាល់៖ ត្រលប់ None សម្រាប់អារេលឿន។

    ឧទាហរណ៍:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    នេះជាការបកប្រែទៅជាភាសាខ្មែរ៖

```kh
អោយមានក្រឡាចត្រង្គមួយ មាន N ជួរដេក និង N ជួរឈរ និងចំនួនគត់វិជ្ជមាន k 
    រាល់ក្រឡាចត្រង្គនៃក្រឡាចត្រង្គនេះមានតម្លៃមួយ។ ចំនួនគត់រាល់មួយក្នុងជួរឈរ [1, N * N]
    ចូលបញ្ចូលដោយក្តីថ្លៃនៅលើក្រឡាចត្រង្គជាលើកទីមួយ។

    អ្នកត្រូវចាំបាច់រកមើលផ្លូវធម្មតានៃប្រវែង k ក្នុងក្រឡាចត្រង្គ។ អ្នកអាចចាប់ផ្តើមពីក្រឡាចត្រង្គណាមួយគ្មានកំណត់
    ហើយរាល់ជំហានអ្នកអាចទៅក្រឡាចត្រង្គជិតៗណាមួយ 
    និយាយដោយសារពីអ្នកអាចទៅក្រឡាចត្រង្គដែលចែកគែមជាមួយអ្នកកំពុងនៅ។

    សូមចំណាំថាផ្លូវធម្មតានៃប្រវែង k មានន័យថាគួរតែចូលទៅកាន់ក្រឡាចត្រង្គជាក់លាក់ k។
    អ្នកមិនអាចចេញពីក្រឡាចត្រង្គបានទេ។
    ផ្លូវ A ត្រូវបានចាត់ថាតិចជាងផ្លូវ B ប្រសិនបើ
    បន្ទាប់ពីធ្វើបញ្ជីតាមលំដាប់នៃតម្លៃនៅលើក្រឡាចត្រង្គដែល A និង B ឆ្លងកាត់ 
    lst_A តិចជាង lst_B ក្នុងលំដាប់បញ្ចូលសិល្បៈ ក្នុងន័យថា មានសន្ទស្សន៍ត្រឹមត្រូវ i
    ដែល lst_A[i] < lst_B[i] ហើយ សម្រាប់ j យើងមាន lst_A[j] = lst_B[j]។
    វាត្រូវបានធានាថាចម្លើយមានតែមួយគត់។
    សូមបង្តើតបញ្ជីតាមលំដាប់នៃតម្លៃនៅលើក្រឡាចត្រង្គដែលផ្លូវតិចបំផុតឆ្លងកាត់។

    ឧទាហរណ៍:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
```
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""គ្រប់គ្នាសុទ្ធតែស្គាល់លំដាប់ Fibonacci ដែលត្រូវបានសិក្សាដោយជ្រៅជ្រះដោយអ្នកគណិតវិទ្យាក្នុងសតវត្សរ៍ពីរចុងក្រោយនេះ។ ទោះយ៉ាងណាក៏ដោយ អ្វីដែលមនុស្សមិនស្គាល់នោះគឺ លំដាប់ Tribonacci ។ លំដាប់ Tribonacci ត្រូវបានកំណត់ដោយការរីកគ្នា៖
tri = 3
tri = 1 + n / 2, ប្រសិនបើ n ជាលេខគូ។
tri = tri + tri + tri, ប្រសិនបើ n ជាលេខសេស។
ឧទាហរណ៍៖
tri = 1 + = 2
tri = 3
tri = tri + tri + tri
       = 2 + 3 + 3 = 8
អ្នកត្រូវបានផ្តល់ជាលេខគត់មិនអវិជ្ជមាន n មួយ អ្នកត្រូវត្រឡប់មកជាបញ្ជីនៃចំនួនដំបូង n + 1 នៃ លំដាប់ Tribonacci ។
ឧទាហរណ៍៖
tri = [1, 3, 2, 8]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""ជូនពរជាមួយអាំងទ័រដែលជាចំនួនគត់វិជ្ជមាន n សូមបង្រួញគុណនៃខ្ទង់សេស។
    ត្រឡប់ទៅ 0 ប្រសិនបើគ្រប់ខ្ទង់គឺជាដែលស្មើ។
    ឧទាហរណ៍៖
    digits == 1
    digits == 0
    digits == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""អ្នកត្រូវបានផ្តល់ឱ្យនូវបញ្ជីនៃលេខមួយចំនួន។
    អ្នកត្រូវត្រឡប់មកវិញនូវផលបូកនៃការបង្វិលលេខក្នុងបញ្ជីដែលបានផ្តល់ឱ្យ,
    បង្វិលគ្រប់ធាតុក្នុងបញ្ជីទៅលេខគត់ខ្ពស់ជាមុនសិន។
    ឧទាហរណ៍:
    សម្រាប់ lst = [1,2,3] លទ្ធផលគួរតែជា 14
    សម្រាប់ lst = [1,4,9] លទ្ធផលគួរតែជា 98
    សម្រាប់ lst = [1,3,5,7] លទ្ធផលគួរតែជា 84
    សម្រាប់ lst = [1.4,4.2,0] លទ្ធផលគួរតែជា 29
    សម្រាប់ lst = [-2.4,1,1] លទ្ធផលគួរតែជា 6
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""Here is the translation of the given sentence into Khmer:

សរសេរការងារមួយដែលត្រឡប់មកវិញនូវសន្ទស្សន៍ដ៏ធំបំផុតនៃធាតុមួយដែល
    មិនធំជាងឬស្មើនឹងធាតុដែលនៅបន្ទាប់ទៀត។ ប្រសិនបើមិនមានធាតុដូច
    នោះទេ បន្ទាប់មកត្រឡប់មកវិញនូវ -1។ អារម្មណ៍ដែលបានផ្តល់មិននឹងមាន
    តម្លៃស្ទួនទេ។

    ឧទាហរណ៍:
    can_arrange = 3
    can_arrange = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    បង្កើត​មុខងារ​មួយ​ដែល​ទទួល​យក​លេខ​គត់ លេខ​ទសភាគ ឬ​អក្សរ​សម្រាប់​តំណាង​ឲ្យ​លេខ​ពិត ហើយ​ត្រឡប់​មក​វា​តម្លៃ​ដែល​ធំ​ជាង​គេ​ក្នុង​ប្រភេទ​អថេរ​ដែល​បាន​ផ្ដល់​ឲ្យ។ ត្រឡប់​តម្លៃ None ប្រសិនបើ​តម្លៃ​ទាំងពីរ​ស្មើ​គ្នា។
ចំណាំ៖ ប្រសិនបើ​លេខ​ពិត​ត្រូវបាន​តំណាង​ដោយ​ខ្សែអក្សរ ចំណុច​ទសភាគ​អាចជា . ឬ , ។

compare_one â -> 2.5
compare_one â -> ""2,3""
compare_one â -> ""6""
compare_one â -> None
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""វាយតម្លៃថាតើលេខ n ដែលបានផ្តល់អាចត្រូវបានសរសេរជាផលបូករបស់ចំនួនគូវិជ្ជមានចំនួន ៤ ឬអត់
    ឧទាហរណ៍
    is_equal_to_sum_even == មិនត្រឹមត្រូវ
    is_equal_to_sum_even == មិនត្រឹមត្រូវ
    is_equal_to_sum_even == ត្រឹមត្រូវ
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""ហេតុផលប្រេស៊ីលត្រូវបានកំណត់ដូចជា៖
    ហេតុផលប្រេស៊ីល = n! *! *! * ... * 1!
    ដែល n > 0

    ឧទាហរណ៍:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    ឲ្យអត្ថបទមួយ, ជំនួសគ្រប់ចន្លោះក្នុងវាជាមួយសញ្ញាunderscore,
    ហើយប្រសិនបើអត្ថបទមានចន្លោះលើសពី 2 ខ្ទង់ជាប់គ្នា,
    នោះជំនួសចន្លោះជាប់គ្នាទាំងអស់ជាមួយសញ្ញា -

    fix_spaces == ""Example""
    fix_spaces == ""Example_1""
    fix_spaces == ""_Example_2""
    fix_spaces == ""_Example-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""បង្កើតមុខងារមួយដែលទទួលយកខ្សែអក្សរមួយដែលតំណាងឱ្យឈ្មោះឯកសារ ហើយត្រឡប់មកវិញ 'Yes' ប្រសិនបើឈ្មោះឯកសារនោះមានសុពលភាព ហើយត្រឡប់មកវិញ 'No' បើមិនដូច្នោះទេ។
ឈ្មោះឯកសារមានសុពលភាព ប្រសិនបើ និងមានតែបើតែបំពេញលក្ខខណ្ឌទាំងអស់ដូចខាងក្រោម៖
- មិនត្រូវមានខ្ទង់លេខ ច្រើនជាងបីនៅក្នុងឈ្មោះឯកសារ។
- ឈ្មោះឯកសារត្រូវមានតែចំណុច '.' មួយតែប៉ុណ្ណោះ។
- ខ្សែអក្សរមុនចំណុចមិនត្រូវទទេ ហើយវាត្រូវចាប់ផ្តើមដោយអក្សរពីអក្សរឡាតាំង។
- ខ្សែអក្សរបន្ទាប់ពីចំណុចគួរតែជាខ្សែអក្សរមួយក្នុងចំណោមគេ [‘txt’, 'exe', 'dll']

ឧទាហរណ៍៖
file_name_check # => 'Yes'
file_name_check # => 'No'
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.

Examples:
For lst = [1,2,3] the output should be 6
For lst = []  the output should be 0
For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    អ្នកត្រូវបានផ្តល់ឱ្យនូវខ្សែអក្សរមួយដែលតំណាងឱ្យប្រយោគមួយ,
    ប្រយោគនេះមានពាក្យមួយចំនួនដែលបំបែកដោយចន្លោះ,
    ហើយអ្នកត្រូវត្រឡប់ខ្សែអក្សរមួយដែលមានពាក្យពីប្រយោគដើម,
    ដែលប្រវែងរបស់ពួកវាជាលេខបឋម,
    លំដាប់នៃពាក្យនៅក្នុងខ្សែអក្សរថ្មីគួរតែដូចគ្នានឹងខ្សែអក្សរដើម។

    ឧទាហរណ៍1:
        ទិន្នន័យបញ្ចូល: sentence = ""This is a test""
        លទ្ធផល: ""is""

    ឧទាហរណ៍2:
        ទិន្នន័យបញ្ចូល: sentence = ""lets go for swimming""
        លទ្ធផល: ""go for""

    លក្ខខណ្ឌ:
        * 1 <= len <= 100
        * ប្រយោគរួមមានតែអក្សរតែប៉ុណ្ណោះ
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""Here is the translation of your sentence into Khmer:

```
ភារកិច្ចរបស់អ្នកគឺអនុវត្តមុខងារមួយដែលនឹងធ្វើឱ្យកន្សោម
    x * n ងាយស្រួល។ មុខងារនេះនឹងប្រតិកម្ម True ប្រសិនបើ x * n បញ្ជូនទៅ whole number និង False
    ប្រសិនបើប្រតិកម្មផ្សេងពីនេះ។ ទាំង x និង n គឺជាតម្លៃស្ត្រីងនៃប្រភាគ ហើយមានទម្រង់ដូចខាងក្រោម
    <លេខតួ>/<ឧបាទ> ដែលទាំងលេខតួ និងឧបាទ គឺជាលេខពេញវិជ្ជមាន។

    អ្នកអាចសន្មត់ថា x និង n ជាប្រភាគត្រឹមត្រូវ និងមិនមានសូន្យជាឧបាទ។

    simplify = True
    simplify = False
    simplify = False
```
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    Here is the translation of the given sentence into Khmer:

សរសេរមុខងារមួយដែលតម្រៀបបញ្ជីលេខគត់ដែលបានផ្តល់ឱ្យ
    ឲ្យមានលំដាប់ឡើងតាមលំដាប់លេខសរុបនៃខ្ទង់របស់វា។
    ចំណាំ៖ ប្រសិនបើមានធាតុច្រើនដែលមានលេខសរុបនៃខ្ទង់ដូចគ្នា,
    តម្រៀបពួកវាដោយផ្អែកលើលំដាប់តាមលំដាប់នៅក្នុងបញ្ជីដើម។

    ឧទាហរណ៍:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""សរសេរមុខងារមួយដែលទទួលយកអារេមួយនៃលេខជាអិនផុត និងត្រឡប់តួអក្សរដែលមានក្នុងអារេដែលធំជាង ១០ ហើយទាំងលេខដំបូងនិងលេខចុងក្រោយគឺគួរតែជាលេខសេស។
ឧទាហរណ៍:
specialFilter => 1 
specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    អ្នកត្រូវបានផ្ដល់លេខគត់វិជ្ជមាន n។ អ្នកត្រូវតែបង្កើតអារេលេខគត់ a ដែលមានប្រវែង n។
        សម្រាប់ i, តម្លៃនៃ a[i] = i * i - i + 1។
        ត្រឡប់ចំនួនត្រីភាគ នៃ a ដែលមាន i < j < k, 
    ហើយ a[i] + a[j] + a[k] ជាអនុគមន៍នៃ 3។

    ឧទាហរណ៍:
        ទិន្នន័យបញ្ចូល: n = 5
        លទ្ធផល: 1
        ការពន្យល់: 
        a = [1, 3, 7, 13, 21]
        ត្រីភាគតែមួយគត់ដែលត្រឹមត្រូវគឺ។
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""Here is the translation of the provided sentence into Khmer:

សរសេរ​មុខងារ​មួយ​ដែល​ទទួលយក​បញ្ជី​ខ្សែអក្សរ​ជា​ប៉ារ៉ាម៉ែត្រ មុខងារ​នោះ​នឹង​លុប​ខ្សែអក្សរ​ដែលមាន​ប្រវែង​គូរ​ពី​បញ្ជី​នោះ ហើយ​នឹង​ត្រឡប់បញ្ជី​ដែល​បានរៀបចំ​ឡើងវិញ។ បញ្ជី​នេះ​តែងតែ​ជា​បញ្ជី​ខ្សែអក្សរ ហើយ​មិនមែន​ជា​អារេ​លេខ​ទេ ហើយ​អាច​មាន​ធាតុ​ដែល​ធ្វើចម្លង​គ្នា។ លំដាប់​នៃ​បញ្ជី​គួរតែ​ឡើងលំដាប់​ដោយ​ប្រវែង​នៃ​ពាក្យ​នីមួយៗ ហើយ​អ្នក​គួរតែត្រឡប់​បញ្ជី​ដែល​បានរៀបចំ​តាម​ច្បាប់​នោះ។ ប្រសិនបើ​ពាក្យ​ពីរ​មាន​ប្រវែង​ដូចគ្នា គួរតែ​រៀបចំ​តាម​លំដាប់​អក្សរក្រម។ មុខងារនេះ​គួរតែ​ត្រឡប់​បញ្ជី​ខ្សែអក្សរ​ដែល​បានរៀបចំ។ អ្នក​អាច​សន្មត់ថា​ពាក្យ​ទាំងអស់​នឹង​មាន​ប្រវែង​ដូចគ្នា។
ឧទាហរណ៍៖
assert list_sort => [""aa""]
assert list_sort => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""កម្មវិធីធម្មតាមួយដែលគួរតែបញ្ជូនតម្លៃនៃ x ប្រសិនបើ n ជាលេខបឋម ហើយគួរតែបញ្ជូនតម្លៃនៃ y ប្រសិនបើ n មិនមែនជាលេខបឋម។

ឧទាហរណ៍៖
សម្រាប់ x_or_y == 34
សម្រាប់ x_or_y == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""ខ្ញុំគិតថាយើងទាំងអស់គ្នាចាំអារម្មណ៍នោះបាន នៅពេលដែលលទ្ធផលនៃព្រឹត្តិការណ៍ដែលបានរងចាំយូរត្រូវបានដឹងច្បាស់។ អារម្មណ៍និងគំនិតដែលអ្នកមាននៅពេលនោះពិតជាអាចត្រូវបានកត់ត្រា និងប្រៀបធៀប។ ភារកិច្ចរបស់អ្នកគឺកំណត់ថាមនុស្សម្នាក់ប៉ាន់ស្មានលទ្ធផលនៃការប្រកួតមួយចំនួនត្រឹមត្រូវឬអត់។ អ្នកត្រូវបានផ្តល់ឱ្យមួយអារេនៃពិន្ទុនិងការប៉ាន់ស្មានដែលមានប្រវែងស្មើគ្នា ដែលសន្ទស្សន៍នីមួយៗបង្ហាញពីការប្រកួតមួយ។ ត្រឡប់មកវិញជាអារេដែលមានប្រវែងដូចគ្នាដែលបង្ហាញថាវិញនៃការប៉ាន់ស្មាននីមួយៗបានខុសប៉ុណ្ណា។ ប្រសិនបើពួកគេបានប៉ាន់ស្មានត្រឹមត្រូវ តម្លៃគឺ 0 ហើយប្រសិនបើមិនត្រឹមត្រូវទេ តម្លៃគឺជាការប្រែប្រួលដាច់ខាតរវាងការប៉ាន់ស្មាននិងពិន្ទុ។

ឧទាហរណ៍៖

compare -> [0,0,0,0,3,3]
compare -> [4,4,1,0,0,6]
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""អ្នកនឹងត្រូវបានផ្តល់ឱ្យនូវឈ្មោះនៃថ្នាក់មួយ និងបញ្ជីនៃផ្នែកបន្ថែម។
    ផ្នែកបន្ថែមត្រូវបានប្រើដើម្បីផ្ទុកថ្នាក់បន្ថែមទៅក្នុងថ្នាក់នោះ។ 
    កម្លាំងនៃផ្នែកបន្ថែមមានដូច្នេះ៖ ឲ្យ CAP ជាចំនួននៃអក្សរធំក្នុងឈ្មោះផ្នែកបន្ថែម និងឲ្យ SM ជាចំនួននៃអក្សរតូចក្នុងឈ្មោះផ្នែកបន្ថែមៈ កម្លាំងត្រូវបានផ្ដល់ដោយប្រភាគ CAP - SM។
    អ្នកគួររកផ្នែកបន្ថែមដែលមានកម្លាំងខ្លាំងបំផុត និងប្រគល់ជាសូត្រដោយមានទ្រង់ទ្រាយ៖ ClassName.StrongestExtensionName។
    ប្រសិនបើមានផ្នែកបន្ថែមពីរ ឬច្រើនដែលមានកម្លាំងដូចគ្នា អ្នកគួរជ្រើសរើសផ្នែកបន្ថែមដែលមាននៅដំបូងគេក្នុងបញ្ជី។
    ឧទាហរណ៍ ប្រសិនបើអ្នកត្រូវបានផ្តល់ ""Slices"" ជាថ្នាក់ និងបញ្ជីនៃផ្នែកបន្ថែម៖ ['SErviNGSliCes', 'Cheese', 'StuFfed'] នោះអ្នកគួរត្រលប់ 'Slices.SErviNGSliCes' ព្រោះ 'SErviNGSliCes' ជាផ្នែកបន្ថែមដែលមានកម្លាំងខ្លាំងបំផុត។
    ឧទាហរណ៍៖ 
    សម្រាប់ Strongest_Extension == 'my_class.AA'
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""អ្នកត្រូវបានផ្តល់ពាក្យ ២។ អ្នកត្រូវត្រឡប់តម្លៃ True ប្រសិនបើពាក្យទីពីរ ឬការបង្វិលណាមួយរបស់វា ជាដេកក្នុងពាក្យទីមួយ។
    cycpattern_check => ខុស
    cycpattern_check => មែន
    cycpattern_check => ខុស
    cycpattern_check => មែន
    cycpattern_check => ខុស
    cycpattern_check => មែន

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""នៅពេលបានឲ្យចំនួនគត់។ ត្រលប់តupleមួយដែលមានចំនួនខ្ទង់គូ និងខ្ទង់សេសតាមលំដាប់។

     ឧទាហរណ៍:
        even_odd_count ==>
        even_odd_count ==>
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    នៅពេលផ្តល់លេខគត់វិជ្ជមានមួយ សូមទទួលបានលេខរ៉ូមនីរបស់វាជាខ្សែអក្សរ 
    ហើយត្រឡប់វាវិញជាអក្សរតូច។
    ការកំណត់៖ ១ <= លេខ <= ១០០០

    ឧទាហរណ៍:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""Here is the translation of the given sentence into Khmer:

```
សរសេរមុខងារមួយដែលទទួលបញ្ជីនៃសរសេរ។
    បញ្ជីមានពាក្យផ្សេងៗគ្នា។ ត្រឡប់ទៅកាន់ពាក្យដែលមានចំនួនតួអក្សរដែលមិនធ្វើស្ទួនគ្នាអតិបរមា។ ប្រសិនបើសរសេរមានចំនួនតួអក្សរដែលមិនធ្វើស្ទួនគ្នាអតិបរមាច្រើនលើសលប់ ត្រឡប់ទៅកាន់ពាក្យដែលមកជាមុននៅលំដាប់តាមលំដាប់អក្សរទាំងអស់។

find_max == ""string""
find_max == ""enam""
find_max == ""aaaaaaa""
```
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    អ្នកគឺជាគ្រមុបដែលឃ្លាន ហើយអ្នកបានញ៉ាំការបារាំងចំនួនមួយរួចរាល់ហើយ។ តែឥឡូវនេះអ្នកត្រូវញ៉ាំការបារាំងច្រើនទៀត ដើម្បីបញ្ចប់អាហាររបស់ថ្ងៃនេះ។ អ្នកគួរតែត្រលប់មកជារង្វាន់នៃអារេ [ ចំនួនសរុបនៃការបារាំងដែលបានញ៉ាំបន្ទាប់ពីអាហាររបស់អ្នក,
                                    ចំនួនការបារាំងដែលនៅសល់បន្ទាប់ពីអាហាររបស់អ្នក ]
    ប្រសិនបើមានការបារាំងនៅសល់មិនគ្រប់គ្រាន់ អ្នកនឹងញ៉ាំការបារាំងទាំងអស់ដែលនៅសល់ ប៉ុន្តែអ្នកនៅតែឃ្លាន។

    ឧទាហរណ៍:
    * eat -> [11, 4]
    * eat -> [12, 1]
    * eat -> [11, 0]
    * eat -> [7, 0]

    អថេរ:
    @number : គណនេយ្យ
        ចំនួននៃការបារាំងដែលអ្នកបានញ៉ាំ។
    @need : គណនេយ្យ
        ចំនួននៃការបារាំងដែលអ្នកត្រូវញ៉ាំ។
    @remaining : គណនេយ្យ
        ចំនួននៃការបារាំងដែលនៅសល់នៅក្នុងស្តុក
    
    ការដាក់កំហិត:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    សូមរីករាយ :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    ឲ្យមានបញ្ជីពីរគឺបញ្ជីប្រតិបត្តិការ និងបញ្ជីឧបករណ៍។ បញ្ជីទីមួយមានប្រតិបត្តិការឬសមីការអាល់ហ្សេប្រាទូទៅ ហើយបញ្ជីទីពីរគឺជាបញ្ជីពេញលេ។ ប្រើប្រាស់បញ្ជីទាំងពីរដែលបានឲ្យនេះដើម្បីបង្កើតសមីការអាល់ហ្សេប្រានិងបង្វិលការវាយតម្លៃនៃសមីការនេះវិញ។

ប្រតិបត្តិការអាល់ហ្សេប្រាទូទៅ:
បូក 
ដក 
គុណ 
ចែកជាផ្នែក 
កំលាំង 

ឧទាហរណ៍:
operator['+', '*', '-']
array = [2, 3, 4, 5]
result = 2 + 3 * 4 - 5
=> result = 9

ចំណាំ:
ប្រវែងនៃបញ្ជីប្រតិបត្តិការត្រូវបានស្មើនឹងប្រវែងនៃបញ្ជីឧបករណ៍បន្ថែមមួយ។
ឧបករណ៍ជាបញ្ជីនៃចំនួនគត់ដែលមិនអវិជ្ជមាន។
បញ្ជីប្រតិបត្តិការមានយ៉ាងហោចណាស់មួយប្រតិបត្តិការ ហើយបញ្ជីឧបករណ៍មានយ៉ាងហោចណាស់ពីរឧបករណ៍។

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""អ្នកត្រូវបានផ្តល់ឲ្យនូវខ្សែអក្សរមួយ s។
    ប្រសិនបើ s[i] គឺជាអក្សរ ត្រូវប្តូរករណីរបស់វាជាករណីពីក្រោមទៅលើ ឬពីលើទៅក្រោម,
    ម្យ៉ាងវិញទៀតទុកវាឲ្យដូចដើម។
    ប្រសិនបើខ្សែអក្សរនោះគ្មានអក្សរទេ ត្រូវបញ្ច្រាស់ខ្សែអក្សរនោះវិញ។
    មុខងារនេះត្រូវបញ្ជូនត្រឡប់នូវខ្សែអក្សរដែលបានផ្តល់លទ្ធផល។
    ឧទាហរណ៍
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    ឱ្យអក្សរដូចខ្សែ 'text', បង្វិលត្រឡប់ខ្សែសមមូលនៃ md5 របស់វា។
    ប្រសិនបើ 'text' គឺជាខ្សែអក្សរទទេ, បង្វិលត្រឡប់ None។

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    ដោយមានចំនួនគត់វិជ្ជមានពីរគឺ a និង b បង្ហាញលេខគូរនៅចន្លោះ a និង b ក្នុងលំដាប់កើនឡើង។ 

ឧទាហរណ៍៖
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
