prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Sure, here is the translation of the sentence into Acehnese:

""Periksa lamun dalam daptar nomer yang diberi, adakah dua nomer yang lebeh deukeut ke satu sama lain teuh dibandingkan ambang yang diberi.""
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" مسه ك فنكسي ني اداله سواتو سترينغ يڠ منغندوڠ براقه كلوڤوڕ ڤرنتاهي برجاناڠ. توجوان اندا اداله انتوق منغيسهكن كلوڤوڕ-كلوڤوڕ ترسبوت منجادي سترينغ-سترينغ يڠ بربدا دان منغيمباليكن دافتار سترينغ-سترينغ ترسبوت. كلوڤوڕ يڠ بربدا ايتو سالين ڤداڠ دان تيدق برجاناڠ دالم سساما. ابايكن سڬالا ڤمبجيان دالم سترينغ ماسوكان. كونتوه:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" Assuming the example is not necessary for the translation, here is the translation of the text into Acehnese:

ديبريكن سجه ئڠكا فلواتينڠ يڠ بوسا، كيتانيه دڠن متواكون كدالم دوأ باڬين، باڬين ئڠكا بولات دان ديچيمالڽ.

كوالين ڤوليه ديچيمالڽ.
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" تانيه كاݢي تسيبوه داڽن دافتار ڤروسي ديڤوسيت دان ڤناريكن دويت اتاس اكاون بينك يڠ مولاڽ دڠن 
نول سيمبانن. تڠڠڽن كاݢي اداله اونتوق ديتكسي كالو ادا تيتك دالم ماسا سيمبانن اكاون 
ڤرنا تيورون دباوه نول، دان دالم كاديان اييت فنڠسي هاروس منڠمباليكن True. كلاو تيدق 
فنڠسي هاروس منڠمباليكن False.
كونتوه:
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" - Untuk daftar angka input yang diberikan, hitung Mean Absolute Deviation
  di sekitar rata-rata dari dataset ini.
  Mean Absolute Deviation adalah rata-rata perbedaan absolut antara setiap
  elemen dan titik pusat:
  MAD = rata-rata | x - x_mean |
  Contoh:

In Acehnese:

- ݣا سيجک داڠن لسڠکين انكاڠ ݢݢيڤ، هيتوڠ Mean Absolute Deviation
  دي سكيرت رتا-رتا داري داتاست اينين.
  Mean Absolute Deviation اداله رتا-رتا ڤربيڠن ابسولت انترا ستيپ
  اليمين دان تيکت ڤوسات:
  MAD = رتا-رتا | x - x_mean |
  چنتوه:
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" مسرق نوڠكا 'delimeter' دي أتارا دُوَا اونصور يڠ بروروتن دالم داڤت ڤرليست 'numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" مدخلة كفنكسي ني أده لهه دڠن ديوكن دالم براب كلوڤوق أونتوق تندا كراڠن يڠ بترڬنتي دڠن سپاچي.
    أونتوق ستياب كلوڤوق، حسيليقن طهف كراڠن يڠ تربدلم داري تندا كراڠن تردسبوت.
    مثلاً) اد غديق دوا طهف كراڠن سمنتر)) اد غديق تيڠه طهف.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" فلتر دٱفتار ماسوكين جروباٴن فقط جريٱن كونتاين سبستريڠ يڠ ديبريكن
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" Untuk di lista angka bulat, balèk tuple yang meunan sum dan product dari sakaban angka di dalam lista. Sum kosong hanjeut sama dengan 0 dan product kosong hanjeut sama dengan 1.

ڤونتوق دي ليستا اڠݢ بولات، باليك توڤل يڠ مناڽن سم دان ڤروݢت دري ساکابن اڠݢ دي دالم ليستا. سم کسوڠ هانجوت سام دڠن 0 دان ڤروݢت کسوڠ هانجوت سام دڠن 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" داري دافتار انتيجر، جينيريت دافتار ماسكيموم اونسور سمنتارا يڠ دتموكان هينڠا ستياب ساعدلن دالم سكوينس.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" تست كه جك دً كاتا انً پاليندروم """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" هانيه ٢ كاترين a dan b بلهن ساجا تريدي درنه ١ dan ٠.
    كاجئهن binary XOR دلام اينبوت اينبوت نيه dan كيمباليكن هاسيلنيا جوگا سباگاي كاترين.
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" درن دافتار كتاين، كموكن كتاين يغ پاليغ پانجان. كموكن كتاين يغ ڤرتام دالم كيس بربراڤ كتاين يغ مميليكي ڤنجڠ يغ سام. كموكن None دالم كيس دافتار ماسكن كوسونغ.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" أوليه تيمون كاليب غيهب پونچوت كالي ساره a دان b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" إلهن كولاك كل قائمة من بيهان سبتيه تاڤوه هينغ دڤڠڬوه يڠ انفووت سترينغ
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" جهب جت ڤڠن تامبهن اسپاسي تڠن نمبر نمبر درين 0 سامڤي ن اينكلوسف.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" Dipeutoi seunteuna karakter, jak ureueng meunyoe beureukat karakterna nyang hana sama
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" إينپوت كإه فُنغسِي ني أدَلاَ سَتُو كَتَ كَ تِمْبُسِي كَتِك نُوتَ موسِق أَدَ دَلَمْ فُرْمَة ASCII خُصُص.

تُغَسِيَن كَمُ أدَلاَ أُنْتُك مَنَفْسِر كَتَ إِيْنْ دَانْ مَنَئِمْبَلِيكَن نَفْسَ إِنْتِجَر يَغْ مَنُنْجُكَنْ بَرَپَ بِيَتْ كَهْ تِياَبْ نُوتَ بَرْلَسُنْغْ.

إِنِي أدَلاَ سُوَتُو لَجِندَا:
'o' - نُوتَ سَمُوَ، بَرْلَسُنْغْ أَمْپَتْ بِيَتْ
'o|' - نُوتَ سَتَنْغَ، بَرْلَسُنْغْ دُوَ بِيَتْ
'.|' - نُوتَ سَتُوَ، بَرْلَسُنْغْ سَتُو بِيَتْ

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" جاك لىڤوت كالي جى سبريڠ ديمكن هيتوڠ دالم اريجنل رانتاي كاتا. هييتوڠ كاسس يڠ برسانبوت.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" إينپوت إيه سباس-ديليمتيت سترينغ اوف نمرا'ل فروم 'زيرو' تو 'نين'.
    ڤاليد چويڤس ار 'زيرو', 'ون', 'تو', 'ثري', 'فور', 'فايف', 'سكس', 'سڤن', 'ايت' ايند 'نين'.
    رتورن ذ سترينغ ويذ نمبرس سوترت فروم سمالست تو لاجست
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" داري دافتار نمر پيله دان كوليه دريڠن نمر نمر يڠ تر ديكت ستيه دان كوليه دريڠن اوردان.
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" دٱڠن سنياراي نوٮڠوڠ, تٮراڤكن پرٮوباهن لينير كڤادا سنياراي ايتٮ, سٮينڠا نوٮڠوڠ يڠ تٮكٮك ڮڠن 0 دان نوٮڠوڠ يڠ بٮسار ڮڠن 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" فيلتر بحاين ڤونداڠ إيڠڬه لاڤي بحاسا ڤايثون حانيا أونتوق إنتيجير.
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" لٮٔ پنجڠن سٮٔ كٮٔ تٮٔ بٮٔن ستريڠ کٮٔݢٮٔ
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" Untuk bilangan n, temukan bilangan terbesar yang membagi n secara rata, lebih kecil dari n
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" رجن لايست فکتور فريما ڤ استوي انتيجر يڠ دiberکن دري يڠ کچک کا يڠ بسا.
    ستياب فکتور حروس دtوليسکن برکالي-کالي سsuائي برapa کالي مuncول دlam ڤکتوريساسي.
    انتيجر ماسوکن حروس سمبچ دڠن حasil kali سمو فکتور.
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" داري ديه جيرايان انتيجر، اوه ڤو تيمڤاتن سجراڠن سكيلن ڤره. جاق كتروروتن انتيجر ڤونتڠ باقيان تيمڤاتن.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" ليت جنجيت كا ديبريكن، أوباه كاركتر كجهور كيبدا كجهور كو كجهور كمو كيبدا كجهور كجهور.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" نُتُهكن داڤودن رنتيه كاتا كٔ دالم سٔك كاتا
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" فلترين دافتار ماسوك ئن ترديري هانيا كٲ تيمڤاتن دڠن ڤريفكس ئن دي‌بري.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""باليكٱن اُلٱ تٱنٱ ڤٱدا ڤوسيتي.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""آنجوئيهان benar lam jika angka nyoe bilangan prima, dan salah lôn jika hana.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    مينتڠ باچينجاكڤولي نومن ديهين كوفيسين xs باكو نقطة x.
    ريتور xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""فنكسيون nyoe meuëpeut dafta l dan meuëleë dafta l' gèt nyang
    l' seunang droe l dalam indèks nyang hana beuleh lé tiga, sedangkan nilainyo di indèks nyang beuleh lé tiga sama
    dengan nilai indèks seunang l, tapi teururut.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""باليك أنيور أوناي ينغ مبرادي دلام سواتو دافتار
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""باليكئ اليمن مكسيموم دلڠن ڤد دافتار.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""باليك عدد كالي هؤنكاڽ دجيت 7 اڤا يڽ تاون دالم انتيجر كريڠ داري ن يڽ بوله ديبهاݢي 11 او 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""فنكسيوني نيغن تيموئيل سواتو داڤتاران l دان منغنباليكن سواتو داڤتاران l' ديمانا
    l' ساما دڠن l دلام انديكسه جيلن، منونجكن ڤادا انديكسه ڠناب ساما دڠن نيلائي انديكسه ڠناب داري l، تتيبي ديسوست.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    يؤترن كودد سترينغ ديڠن مڠيكلن كلوڤوق تيڬ ڤركاراكتير.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    prime_fib meuwoe n-keu angka nyang angka Fibonacci dan nyan jih angka prima.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    تريبلس_سوم_تو_زيرو مبه كاداهن سيبوه دافتر ڤنوهت.
ايڠن ديك مبالكن بنر جكا اده تيلوه انصر بربده دالم دافتر يڠ
جمبهننه نوله، دان ساله جك تياد.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    بَيْكَنْ جَلَنْ سُرَتْ تَلُص سَدْجَ تَلُصَ لَنْتُتْ فَن تَيَحْ. 
ن مُبِيلْ سَدَنْ كَ سِت كَ كَنَنْ؛ سَرْتَ دُكْ ن مُبِيلْ لَئِنْ سَدَنْ كَ كَنَنْ كَ كَ سِت. رُمْبَكْ دُا كُتْ سَدَنْ سَدَنْ جَهْ تَيَحْ. سَجْلَ مُبِيلْ جَلَنْ دِي دَوْرْ سَجْلَ. 
دُأ مُبِيلْ بِيْ كَتُكُ تَبُغْ جَكْتْ نَيَ، سَدَنْ كَ سِت مُبِيلْ كَ سَدَنْ كَ كَنَنْ. 
تَمْبَكْ، مُبِيلْ تَيَحْ تَكْ سَكُتْ بَرْ قُوَتْ؛ سَبَغَ تَمْبَكْ، جَلَنْ تَرُسْ سَجْ رَسَ كَ تَكْ تَبُغْ.

فُنْكْسِيْنْ نِي تَجُوَتْ جُتْ بِيْرُوَ تَبُغْ.
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""كريه دٱڤ دڠن عٱنسور-عٱنسور يڠ تله دتمبه ١.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero mengambé listé angka-angka sabagai input.
    nyan hana meukeur True lam watee dua angka yang na di listé nyan
    yang jumlah nya sifon, lam False sabaliknyan.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""Ubah basis numerik angka input x ke basis.
    kembalikan representasi string setelah konversi.
    angka basis kurang dari 10.

نغوباه باسيس نوميريك اڠكء اينڤوت x كه باسيس.
    كمباليكن ڤرسنتاسي ستريڠ سسوداه كونڤيرسي.
    اڠكء باسيس كوراڠ دري 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""ديݢونكن ڤنجانغ ساڠ اور ساڬي، دان تيڠڬي، كنباليكن لوأه تيڠݢي ساڬي تيݢا.
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""بيئيتان angka Fib4 adalah بيئيتان سين يوروبا دڠن بيئيتان فيبوناسي يڠ دتريفيني سباڬاي برإيكوت:
    fib4 -> 0
    fib4 -> 0
    fib4 -> 2
    fib4 -> 0
    fib4 -> fib4 + fib4 + fib4 + fib4.
    Tolong تليسكين فونكسي انتوك مڠهتڠكن العنصر يڠ كه-n دري بيئيتان angka fib4 دڠن بندر. جانن مڠونوكن ريكرسي.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""نيجؤلئ ميذيان دريڠڬن اونسور-اونسور دالم دفاٴت ل.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    Periksa apakah string yang diberikan adalah palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""كيمباليكن ٢^ن مدولو ڤ.
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    منويڠ كودد سترينغ دڠن منجغ كڬ ستيپ حرف دڠن 5 درمڤت ڤد الف بيت.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    remove_vowels nyan fungsi nyang peugot tulisan lalu na geulang tulisan tanpa huruf vokal.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""باليك True جيكا جيمساك نمبر نيباد دالم داڤت l دي باواه هاد t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""تامبهه دوا ريبو x دهن y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    تشيك جا جارو دو كلمات اده كراكتير نيا.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""Pulee angka Fibonacci ka-n.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" براكتس ايه سابوهين رنتين ""<"" دهن "">"".
    كيباليكن بنار لامون سجوه براكتب ڤؤنيتو ميؤڠن براكتب بتم.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""جهوت True lamun unsur-unsur dalam daftar nyan meujak atau meuturun sacara monoton.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""بات جتم كمنينگ يڠ سريڠ دان تيبالي داري دوا سني.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""باليك كأمڤاليڠن ڤاكتور ڤريما ين تيربسر دري ن. أنݢاپ ن > 1 دان بكن ڤريما.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""sum_to_n nyan nakeuh fungsi nyang jak meugrèk angka dari 1 sampai n.

sum_to_n نيان ناقيه فڠسي نياڠ جق مغرء اڠك دري ١ سمڤي n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" براكيتس أداله رنطاين """".
    كواليكن True جك ستياب براكيت يڠ دي بوكا مملكي براكيت تڠ دي توتوڤ يڠ سسواي.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" xs mewakili koefisien dari suatu polinomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Balekkan turunan dari polinomial ini dalam bentuk yang sama.

---

xs ميواكيلي كويفيسين داري سواتو ڤولينوميل.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     باليككن تورونن داري ڤولينوميل اين دالم بونتوق يڠ سام.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""ڤونتوي فيبفيب أدهلاڤ ڤونتوي ين سريڤا دڠن ڤونتوي فيبونچي يڠ ديفينيسيكأن سباݢاي بروتي:
    فيبفيب == 0
    فيبفيب == 0
    فيبفيب == 1
    فيبفيب == فيبفيب + فيبفيب + فيبفيب.
    تولوڠ توليس فڠسي اونتوق مڠهتيڠكن العنصر ك ي-ن ڤد ڤونتوي فيبفيب دڠن بايݢ.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
تامباهي ليه كاسوس تيست.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""تغوير دجيط انتيجر x، تغوير دجيط ككنن كأن، 
    وكمباليكن هسلين سعباي سويك. 
    لو تغوير > كعدد دجيط، كمباليكن دجيط ترچباليك.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""تولونغ هيتونغكن جملهن شريڠن تله دتوليسكن دالم بهاس اچيه.

تاسك:
    توليسكن فونكسي يڠ منريما سواتو سترينغ سباݢاي ماسوكان دان منݢمباليكن جملهن كود ASCII كرتر بسار سهاج.

كونتوه:
    digitSum => 0
    digitSum => 131
    digitSum => 67
    digitSum => 69
    digitSum => 131
    digitSum => 153
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    Tugas nyoe, droeneuh akan diberikan seuneurat ureueng yang mewakili jumlah apel dan jeruk yang terdistribusi dalam bakul buah nyoe. Bakul nyoe mengandung apel, jeruk, dan buah manga. Droe tinggai seuneurat ureueng yang mewakili jumlah total jeruk dan apel, serta integer yang mewakili jumlah total buah dalam bakul. Balek jumlah buah manga dalam bakul. Conto:
fruit_distribution -> 19 - 5 - 6 = 8
fruit_distribution -> 3 - 0 - 1 = 2
fruit_distribution -> 100 - 2 - 3 = 95
fruit_distribution -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    Given an array representing a branch of a tree that has non-negative integer nodes tugas kamu adalah mencabut salah satu node dan mengembalikannya. Node yang dicabut haruslah node dengan nilai genap terkecil. Jika beberapa node dengan nilai genap yang sama ditemukan, kembalikan node yang memiliki indeks terkecil.

Node yang dicabut harus dikembalikan dalam daftar, [nilai_terkecil, indeksnya],
Jika tidak ada nilai genap atau array yang diberikan kosong, kembalikan [].

Contoh1:
Input: [4,2,3]
Output: [2, 1]
Penjelasan: 2 memiliki nilai genap terkecil, dan 2 memiliki indeks terkecil.

Contoh2:
Input: [1,2,3]
Output: [2, 1]
Penjelasan: 2 memiliki nilai genap terkecil, dan 2 memiliki indeks terkecil. 

Contoh3:
Input: []
Output: []

Contoh4:
Input: [5, 0, 3, 0, 4, 2]
Output: [0, 1]
Penjelasan: 0 adalah nilai terkecil, tetapi ada dua nol,
jadi kita akan memilih nol pertama, yang memiliki indeks terkecil.

Kendala:
* 1 <= nodes.length <= 10000
* 0 <= node.value
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    بؤديا سؤت كؤ ارايؤنەغکٔررەغکە، کٔوڠکؤسەؤں ݣۆپ کٔرکٔؤن کٔؤنب ݣٔؤلؤب ݣٔؤپکٔؤن تٔؤکؤن تٔؤنکٔؤں. ارايؤنەغکٔررەغکە ادلاە ارايؤنەغکٔررەغکە ئغک دباچٔا سؤمٔا سٔە کٔبلکٔەؤں دان سٔە کٔبلکٔەؤں. دالم سٔات کٔؤباە، کٔامؤ بٔئسا مٔغٔؤباە سٔات ݣٔؤنکٔؤن کٔؤنکٔؤن تٔؤنکٔؤں.

سٔەبٔاݣٔا:
smallest_change == 4
smallest_change == 1
smallest_change == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""Tulisah saboh fungsi nyang meulheh benar jika angka nyang dipeu keu nyoe keubagi dari 3 angka prima
    dan salah jika hana.
    Beureukah nyang lheuh dari 100.
    Contoh:
    is_multiply_prime == Benar
    30 = 2 * 3 * 5

تولساه سبوه فڠسي ڽڠ مولهه بنر جيكء اڠکء ڽڠ ديڤي کء نيوء کءبڬي دري 3 اڠکء ڤريما
دان صلاح جيكء هناء.
بروكه ڽڠ لهوه دري 100.
چونته:
is_multiply_prime == بنر
30 = 2 * 3 * 5
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""Tugas gopnyan nyoe nyan peugot keu nulis fungsi nyan keu ngon true lam keu keadaan jak siploh 
      angka x nyan siploh siploh geutanyoe
      angka x nyan siploh siploh geutanyoe lam keu n.
      Contoh:
      is_simple_power => benar
      is_simple_power => benar
      is_simple_power => benar
      is_simple_power => salah
      is_simple_power => salah
      is_simple_power => salah
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B, D.
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""Anda akan diberikan sebuah angka dalam bentuk desimal dan tugas Anda adalah mengonversinya ke format biner. Fungsi tersebut harus mengembalikan sebuah string, dengan setiap karakter mewakili angka biner. Setiap karakter dalam string akan berupa '0' atau '1'.

Akan ada sepasang karakter tambahan 'db' di awal dan di akhir string. Karakter tambahan ini ada untuk membantu dengan format.

Contoh:
decimal_to_binary   # mengembalikan ""db1111db""
decimal_to_binary   # mengembalikan ""db100000db""

Translation into Acehnese:

کاموٴ کاٴ دٔي بريکٔن سٔوٴڠكاٴ اچئم دالم بٔنتوٴ دٔسيمال دان توگس کاموٴ ادٔلاٴ مٔنگٔنڤيرسکنيا که فورمات بينير. فونگسي اتٔوٴ حاروس مٔنگمباليکن سٔوٴڠ سترينگ، دٔڠن ستياب كراكتر مٔواكيلي اچئم بينير. ستياب كراكتر دالم سترينگ اكن بٔرٔوڤا '0' اتٔوٴ '1'.

اكن ادٔ سٔپاسڠ كراكتر تامباهن 'db' دٔ اٴوال دان دٔ اٴخير سترينگ. كراكتر تامباهن اين ادٔ انتٴوٴك مٔمبنتو دٔڠن فورمات.

چونتوه:
decimal_to_binary   # مٔنگمباليکن ""db1111db""
decimal_to_binary   # مٔنگمباليکن ""db100000db""
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""Kah jeut sagoe seuneuléh s.
    Peue tugas kah nyoëk peugahwa seuneuléh nyan meu'ot atau hana.
    Seuneuléh nyang meu'ot nyoe seuneuléh nyang pajoh lam 3 boh aksara dan sabe pih 3 aksara nyang beurangkai nyan nyang béda-béda.
    Misal:
    is_happy => Hana
    is_happy => Hana
    is_happy => Meu'ot
    is_happy => Hana
    is_happy => Meu'ot
    is_happy => Hana
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""Ini adalah minggu terakhir dari semester dan guru harus memberikan nilai kepada siswa. Guru telah membuat algoritma sendiri untuk penilaian. Satu-satunya masalah adalah, dia telah kehilangan kode yang dia gunakan untuk penilaian. Dia telah memberikan Anda daftar IPK beberapa siswa dan Anda harus menulis sebuah fungsi yang dapat mengeluarkan daftar nilai huruf menggunakan tabel berikut:
             IPK       |    Nilai Huruf
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Contoh:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']

Translation to Acehnese:

ايني أده مڠكو تيرهير دارو سمستر دان قورو هروس مڠبريكن نيلاي كفد سيسوا. قورو تله مڠوات الگوريتم سنديري اونتوق ڤنيلأيهن. سات-ساتوڽ مسأله ادله، ديا تله كيهيلڠن كود يڠ ديا كوناكن اونتوق ڤنيلأيهن. ديا تله مڠبريكن أندا دافتر IPK بربراڤ سيسوا دان أندا هروس منوليس سواتو ڤڠفڠسي يڠ دڠن مڠحسيلكن دافتر نيلاي هرف مڠونكن تابل بركات:

             IPK       |    نيلاي هرف
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    چونتوه:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""توليت جرو function ينغن منغاون string دان منغمولن True جك panjang string تردسبوت اداله بيلنغن prima او False جك تيدق
Contoh
prime_length == True
prime_length == True
prime_length == True
prime_length == False
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    Dipeu haba lam bilangan bulat positif n, uleh woe jumlah bilangan positif n-digit nyang dimulai atawa di akhiri dengan angka 1.
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""Diberikan sebuah bilangan bulat positif N, kembalikan jumlah total digit-digitnya dalam bentuk biner.

Contoh:
    Untuk N = 1000, jumlah digitnya adalah 1 dan outputnya adalah ""1"".
    Untuk N = 150, jumlah digitnya adalah 6 dan outputnya adalah ""110"".
    Untuk N = 147, jumlah digitnya adalah 12 dan outputnya adalah ""1100"".

Variabel:
    @N integer
         Kendala: 0 ≤ N ≤ 10000.
Output:
     sebuah string dari angka biner

Terjemahan dalam bahasa Aceh:

ݢیۏن ایک ݣکا دۏک نݣن ن، کݢۏ مشو ݁جمݣلہ ݁دݣت-݁دݣت ݁ہ ݁دی بۏتن ݁بئ نیر.

ݢنتۏ:
    انتوݢ ن = 1000، ݁جمݣلہ ݁دݣتنیا اداللہ 1 دان آۏت݁تنیا اداللہ ""1"".
    انتوݢ ن = 150، ݁جمݣلہ ݁دݣتنیا اداللہ 6 دان آۏت݁تنیا اداللہ ""110"".
    انتوݢ ن = 147، ݁جمݣلہ ݁دݣتنیا اداللہ 12 دان آۏت݁تنیا اداللہ ""1100"".

݁ڤریبلن:
    @ن انتیݣر
         کن݁دلاء: 0 ≤ ن ≤ 10000.
آۏت݁تنیا:
     ایک ݁سترینگ ݁دری انݣ݁ک بئنیر
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""Dih anuek gliinteuë non-empty list integers lst. jeut lôngeu unsur-unsur genap nyang na di indeks ganjil.

    Contoh:
        jeut ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    Write nyan fungsi nan meuteumeureut string dan meulipeh versi nan teratur nyan.
    Versi nan teratur nyan string, nyoalah string nan saboh nan kalimat (dipisah
    ngen ruang) diganti ngen kalimat nan galak nan karakter-karakternya
    diatur neubiet ngon urutan nan meuseuraya berdasarkan nilai ascii.
    Catatan: Kamoe nyoebah simpan urutan kalimat dan ruang kosong dalam kalimat.

    Misalnyan:
    anti_shuffle meulipeh 'Hi'
    anti_shuffle meulipeh 'ehllo'
    anti_shuffle meulipeh 'Hello !!!Wdlor'
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    Kiban data dua dimensi, nyang buet jih sabagai dafta nested, nyang mirip keu matriks, tapi, hana seperti matriks, saban barisan bisa meuphom jumlah kolom nyang beurbeda. Kiban lst, dan integer x, teumeunak integer x dalam dafta, dan balekkan dafta tuple, [, ...] nyang saban tuple nyang merupakan koordinat -, mulai dari 0. Urutkan koordinat pertama-tama berdasarkan barisan secara menaik. Juga, urutkan koordinat barisan berdasarkan kolom secara menurun.

Contoh:
get_row([
  [1,2,3,4,5,6],
  [1,2,3,4,1,6],
  [1,2,3,4,5,1]
], 1) == [,,,,]
get_row == []
get_row == []
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    Diberikan sebuah array yang berisi bilangan bulat non-negatif, kembalikan salinan dari array yang diberikan setelah diurutkan,
    kamu akan mengurutkan array yang diberikan dalam urutan menaik jika jumlah ganjil,
    atau urutkan dalam urutan menurun jika jumlah genap.

    Catatan:
    * jangan merubah array yang diberikan.

    Contoh:
    * sort_array => []
    * sort_array => [5]
    * sort_array => [0, 1, 2, 3, 4, 5]
    * sort_array => [6, 5, 4, 3, 2, 1, 0]

---

ديبريكان سبواه أراي يڠ برسي بيلاڠن بولت نون-نݢاتيف، كمباليكن سالينن دري أراي يڠ ديبريكان ستيلاه ديورتكن،
    كامو اكن مڽورتكن أراي يڠ ديبريكان دالم اوروتن مناايق جك جملا ڬنجيل،
    او أوروتكن دالم اوروتن منورون جك جملا ڬناب.

    كاتون:
    * جاڠن مروبه أراي يڠ ديبريكان.

    چنتوه:
    * sort_array => []
    * sort_array => [5]
    * sort_array => [0, 1, 2, 3, 4, 5]
    * sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""دٱجٱئيت ڤوڠسي encrypt ݠمبوا كاڠ جٱرٱئين ساٙبڠ يٱڬن ݠمبوا سٱبڠ ڤولا كاڠ ساٙبڠ يٱڬن كٱتاٙن دٱڬن حروف رسٱڠن دٱڬن حروف خٱجاوڠن. حروف خٱجاوڠن ساٙرٱس دٱڬن ڤٱراٙن يٱڬن حرٱف-حرٱف نٱڬن دٱڬن حروف ڤٱراٙن دٱڬن حرٱف ڤٱراٙن دٱڬن حرٱف دٱڬن ڤٱراٙن دٱڬن حرٱف. 
مٱنٱ كٱتاٙن:
encrypt ڤٱلن 'lm'
encrypt ڤٱلن 'ewhjklnop'
encrypt ڤٱلن 'kj'
encrypt ڤٱلن 'ix'
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    Kah geupeue list angka bulat. 
Tuléh saket fungsi next_smallest nyang meulangkah elemen ke-2 nyang teulekeuh dari list nyan.
Balek None lamun hana elemen nyan.

next_smallest == 2
next_smallest == 2
next_smallest == None
next_smallest == None

كاه ڬيوڤيء ليست اڠك بولاك.
توليه ساكت فونكسي next_smallest نياڠ مولڠكاه اليمن ك-2 نياڠ تءولكءه دري ليست نيان.
بليك None لامون هنا اليمن نيان.

next_smallest == 2
next_smallest == 2
next_smallest == None
next_smallest == None
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    تادْياکْ تْروْنْ چْينْچينْ کاتا كَمٮٮنْ، دانْ كَجِبْ بْرْبُوَتْنْ كَمٮٮنْ آدالَهْ مِـــنْچاري بْرَاپَ بُواسَنْ.
بُواسَنْ آدالَهْ جُمْلَة يَــنْ برمولا دٮنْچانْ كاتا ""سايا"".
جُمْلَة جُمْلَة دِپايسَاهِي دٮنْ تَنْدَ "" ٮـرْيُدْ، ""؟"" أَتَـو ""!"".
مِسَالَهنْ:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    تابين فوسين ءيڠ ميڠكوت پساينن، دان منكود كدلم سوتو كريب 
ڠاكن منوكاركن كسوسور ستياب هوروف، منغنݢتي ڠاڬل سموڽ هوروف ڤوكوك دالم 
مساج دڠن هوروف يڠ مڠݢل دأڠن ڤالڠڤ هنڠ ٢ دأڠن هوروف ڤوكوك دالم هوروف 
انݢليس. 
اڠڬڤكن هوروف سهاج. 

كونتو:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""تمڤلان كم جملة كئهٴن باهاس اچيه 

كيتا تيمڤل كم جيرنتهوٴن ازي چونتوه جيرينتهوٴن
كيتا كوه تيمڤل جمڤوتن بيلڠن ڤرڠ دالم سناراي دان كمباليكن چوملهن دڠن ڤدجهن.

چونتوه:
ڤرو سناراي lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] جمڤوتن اداله 10
ڤرو سناراي lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] جمڤوتن اداله 25
ڤرو سناراي lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] جمڤوتن اداله 13
ڤرو سناراي lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] جمڤوتن اداله 11
ڤرو سناراي lst = [0,81,12,3,1,21] جمڤوتن اداله 3
ڤرو سناراي lst = [0,8,1,2,1,7] جمڤوتن اداله 7
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    Diberi kamus, balek True jika semua kunci nakeuh dalam bentuk huruf leet atau semua kunci nakeuh dalam bentuk huruf besar, jika hana balek False. Fungsi nyoe jeh balek False jika kamus nyan han jeut. Contoh:
check_dict_case jeh balek True.
check_dict_case jeh balek False.
check_dict_case jeh balek False.
check_dict_case jeh balek False.
check_dict_case jeh balek True.
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""Implementoë ureuëngan that keuë non-negatif integer dan peugot array droeëng n
    integer nyang meuripeue dan kurang n.
    contohnya:
    count_up_to => [2,3]
    count_up_to => [2,3,5,7]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17,19]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17]

Implementوë ureuëngan nyang keuë integer non-negatif dan peugot array droeëng n
    integer nyang meuripeue dan kurang n.
    contohnya:
    count_up_to => [2,3]
    count_up_to => [2,3,5,7]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17,19]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""بريهى فڠسي يڠ منغڬاي دؤا اينتهر دان منغولڠكن ڤروك دريڤدا انق كيرتيكاڠن مريكا.
أنڬڬڠكن ماسوقن سلاڠيني صح.
كونتيه:
multiply هروس كوليهن 16.
multiply هروس كوليهن 72.
multiply هروس كوليهن 0.
multiply هروس كوليهن 20.
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    Dipeuët bak keureutan s, hitong jumlah vokal besar nyang na di indéks genap.

    Sebagai contohnya:
    count_upper meunanjoë 1
    count_upper meunanjoë 0
    count_upper meunanjoë 0
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    Dipeue nakeuh integer positif n, droeëk léh musti nyang pile batèë n tingkét.
    Tingkét nyang pertame na batèë n.
    Jumloh batèë di tingkét nyang setjeutnyan adalah:
        - angka ganjil setjeutnyan léh n ganjil.
        - angka genap setjeutnyan léh n genap.
    Pulangkan jumlah batèë di setiap tingkét dalam bentuk daftar, di mana elemen di indeks
    i mewakili jumlah batèë di tingkét.

    Contoh:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    Sure, here is the translation of the given sentence into Acehnese:

ٮݢڤٮݢٮݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢݢ
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""نيهي فونسينى ملق تيمڤت دوأ بيلاڠن بوسار x دان y دان كمدين منغولڠكن بيلاڠن جنابغان تر بوسار يڠ براد دالم جرڠن [x, y] سكاليڤن. جكا تيدق ادا بيلاڠن ترسبوت، مكا فونسينى هروس منغولڠكن -1.

سباڬاي كونتوه:
choose_num = 14
choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""Kah geupeue dua integer positif n dan m, dan tugas kah peuehitung rata-rata dari integer n sampe m. Bulatkan hasilnya ke integer terdekat dan konversikan ke biner. Lam n lông di m, geuliek -1.
Contoh:
rounded_avg => ""0b11""
rounded_avg => -1
rounded_avg => ""0b1111""
rounded_avg => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""Dipeue tanda daftar integer positif x, balek tanda daftar nyang teuratur dari sakèeureuja elemen nyang hana meurip digit genap.

Catatan: Tanda daftar nyang dipeue balek nyoe jipeu teuratur dalam urutan nyang meunanek.

Contoh:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    ديبهان سيجراينت، أتور سيجراينت ينغ دلام أنتره 1 دان 9 اينكلوسيف، 
تيرباليكن سيجراينت ينغ تلا ديتور، لاولو غانتيكن ساتو-ساتو ديجيت دنان ناما ينغ سسواي داري
""واحد""، ""اثنان""، ""ثلاثة""، ""أربعة""، ""خمسة""، ""ستة""، ""سبعة""، ""ثمانية""، ""تسعة"".

سبيتا:
  arr = [2, 1, 1, 4, 5, 8, 2, 3]
        -> أتور arr -> [1, 1, 2, 2, 3, 4, 5, 8]
        -> تيرباليكن arr -> [8, 5, 4, 3, 2, 2, 1, 1]
  كمباليكن [""ثمانية""، ""خمسة""، ""أربعة""، ""ثلاثة""، ""اثنان""، ""اثنان""، ""واحد""، ""واحد""]

  جكا سيجراينت كوسونغ، كمباليكن أرراي كوسونغ:
  arr = []
  كمباليكن []

  جكا سيجراينت مميليكي أنكا أنيه، أبايكن:
  arr = [1, -1 , 55]
        -> أتور arr -> [-1, 1, 55]
        -> تيرباليكن arr -> [55, 1, -1]
  كمباليكن = ['واحد']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" Laksanakan fungsi f yang mangambek n sabagai parâmet, dan mengembalikan daftar ukuran n, seumpama nilai elemen pada indeks i adalah faktorial i jika i genap atau jumlah angka dari 1 sampai i jika tidak. i mulai dari 1. Faktorial i adalah perkalian angka dari 1 sampai i. Contoh: f == [1, 2, 6, 24, 15]

نفذ الوظيفة f التي تأخذ n كمعامل، وتعيد قائمة بحجم n، بحيث تكون قيمة العنصر في الفهرس i هي عاملي i إذا كان i زوجيًا أو مجموع الأرقام من 1 إلى i بخلاف ذلك. يبدأ i من 1. عامل i هو ضرب الأعداد من 1 إلى i. مثال: f == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    دئئن تئئم نيانغ پوستيڤ ن, کوليک تيوپݢڽ، نيانغ منچکوب جومله بيلاڠن پاليندروم جاڠين دانݢانجين نيانغ اتوڠ کائم دي رينج، اينکلو سيف.

کونتوه 1:

    اينپوت: 3
    اوتپوت:
    پنجلڠن:
    بيلاڠن پاليندروم اداله 1، 2، 3. ستئڠڬه مريکا اداله جاڠين، دان دوا مريکا ادالهݢانجين.

کونتوه 2:

    اينپوت: 12
    اوتپوت:
    پنجلڠن:
    بيلاڠن پاليندروم اداله 1، 2، 3، 4، 5، 6، 7، 8، 9، 11. امڤت مريکا اداله جاڠين، دان انام مريکا ادالهݢانجين.

کاتاتوان:
    1. 1 <= ن <= 10^3
    2. تيوپݢڽ نيانغ ديکوليک منچکوب جومله بيلاڠن پاليندروم جاڠين دانݢانجين سچارا برتورتن۔
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    توليه فوسين count_nums انو مينتاق ارراي اوف انتيجرس دان منغنبلنكا جومله انصر انو ميميليكي جومله انك دجيت > 0.
جيكا سوأتو انكوران نيغاتيف، ماكا دجيت برتامه برتاندا نيغاتيف:
مثال: -123 ميميليكي دجيت -1، 2، دان 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""Kiteu jipeu 'arr' nyang jeut N integer arr[1], arr[2], ..., arr[N]. Nom-nom dalam jipeu nyan han jeurut secara acak. Peugot jeut ta peugah hai na geutanyo jipeu nyang teurut dalam urutan han menurun dengan meugoe operasi nyoe pada jipeu nyang dijok:

Kamu diizinkan untuk melakukan operasi shift kanan berapa kali pun.

Satu operasi shift kanan berarti semua elemen dalam jipeu dipindahkan satu posisi ke arah kanan. Elemen terakhir dari jipeu akan dipindahkan ke posisi awal dalam jipeu yaitu indeks ke-0.

Jika mungkin untuk mendapatkan jipeu yang terurut dengan melakukan operasi di atas, maka kembalikan True, jika tidak, kembalikan False. Jika jipeu yang diberikan kosong maka kembalikan True.

Catatan: Daftar yang diberikan dijamin memiliki elemen unik.

Contoh:

move_one_ball==>True
Penjelasan: Dengan melakukan 2 kali operasi shift kanan, urutan tidak menurun dapat dicapai untuk jipeu yang diberikan.
move_one_ball==>False
Penjelasan: Tidak mungkin mendapatkan urutan tidak menurun untuk jipeu yang diberikan dengan melakukan berapa kali pun operasi shift kanan.

ترجمة:
كيتو جيڤو 'أرر' ڽڠ جوت ن إنتجر أرر[1], أرر[2], ..., أرر[N]. نوم-نوم دالم جيڤو ڽن هن جرورت سچارا عچق. ڤيڬوت جوت تا ڤيغاه هي نا ڬيتانيا جيڤو ڽڠ تورت دالم أروتن هن منورن دڠن ميڬوي اوڤراسي ڽوي ڤدا جيڤو ڽڠ ديجوك:

كمو ديءيزينكن اونتوق ملاکوقن اوڤراسي شيڤت کنن برڤا كالي ڤون.

ساتو اوڤراسي شيڤت کنن بربرتي سموا إليمين دالم جيڤو ديڤيندهکن ساتو ڤوسيسي ک أره کنن. إليمين ترٔخير دري جيڤو اكن ديڤيندهکن ک ڤوسيسي أول دالم جيڤو ياءيتو إندكس ک-0.

جك ممڽقكن اونتوق منداڤتکن جيڤو ڽڠ تورت دڠن ملاکوقن اوڤراسي دي أتس، مك كمباليكن True، جك تيدق، كمباليكن False. جك جيڤو ڽڠ ديبريككن كسونڬ، مك كمباليكن True.

کتاتن: دافت ڽڠ ديبريككن دجمن ممڤوني إليمين أونيق.

چونته:

move_one_ball==>True
ڤنجلسن: دڠن ملاکوقن 2 كالي اوڤراسي شيڤت کنن، أروتن تيدق منورن دڠن ديچاپاي اونتوق جيڤو ڽڠ ديبريككن.
move_one_ball==>False
ڤنجلسن: تيدق ممڽقكن منداڤتکن أروتن تيدق منورن اونتوق جيڤو ڽڠ ديبريككن دڠن ملاکوقن برڤا كالي ڤون اوڤراسي شيڤت کنن.
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""دلم ماسالاه ني، كموء جيوه منجالن فنكسي يڠ منيمه دوي دافتار نوڠكاڠ، 
دن مننتوكن اپاكن كموء بوليه منولقن تكرن عناسر انتر دافتار-دافتار اتو 
اونتوق منجدكن lst1 سواتو دافتار يڠ حانيا ترديري داري نوڠكاڠ جنڠ. 
تياد اد حد اتس جوملا تركرن عناسر انتر lst1 دن lst2. 
جك كموء بوليه منولقن عناسر انتر lst1 دن lst2 اونتوق منجدكن 
سموا عناسر داري lst1 جنڠ، كموء كنباليكن ""YES"". 
جك تيدق، كموء كنباليكن ""NO"". 
سباگي كوتوهن:
exchange => ""YES""
exchange => ""NO""
ديانڠكب بهاوسن ياڠ ماسوك دافتار تيدق كوسوڠ.
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""Diberi rentetan karakter yang mewakili huruf kecil yang dipisahkan oleh spasi, kembalikan kamus
    dari huruf dengan pengulangan terbanyak dan berisi jumlah yang sesuai.
    Jika beberapa huruf memiliki kemunculan yang sama, kembalikan semuanya.
    
    Contoh:
    histogram == {'a': 1, 'b': 1, 'c': 1}
    histogram == {'a': 2, 'b': 2}
    histogram == {'a': 2, 'b': 2}
    histogram == {'b': 4}
    histogram == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""تاسك
ٮكاٮيٮن دوٮ ستيرينغ س دان ك، ٮاٮوٮ کٮ ديليتٮن سٮموٮ حروف دالم س ٮتٮ سٮما دٮن سٮموٮ حروف دالم ك
کٮمودي چٮک جٮکا سترينغ حسيٮلن مٮرانا پاليندروم.
سترينغ دسيبوت پاليندروم جٮکا دباچا دٮري کٮبٮلاٮ وٮا کٮ دٮپاٮ.
ٮاٮوٮ هاروٮ کٮمبالي کان تٮوٮلٮنڮان يٮ تٮرديري دٮري سترينغ حسيٮلن دان صحيح/سلاٮ اونتوک چٮک.
کونتو
ٮونتوک س = ""abcde"", ك = ""ae"", حسيٮلن هاروٮٮا
ٮونتوک س = ""abcdef"", ك = ""b"" حسيٮلن هاروٮٮا
ٮونتوک س = ""abcdedcba"", ك = ""ab"", حسيٮلن هاروٮٮا
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""ديٚبريٚتيٚه سٚوتوٚ ليٚست رٚنجٚين، ديٚمان سٚوتوٚ رٚنجٚين تٚرديريٚ درٚي سٚيفر ساچ جا دٚجيت، كٚمباليٚكن سٚوتوٚ ليٚست.
    سٚتيٚاپ العنمٚن ديٚ دٚلام هٚسيل هٚروس له ""جملٚه العنمٚن گٚنٚپ دٚي دٚلام رٚنجٚين كٚ-ي دٚريٚ عنمٚن ماسكوك."" ديٚمان سٚتيٚاپ ي هٚروس ديٚگٚنتيٚكن دٚنٚن جملٚه دٚجيت گٚنٚپ دٚلام رٚنجٚين كٚ-ي دٚريٚ عنمٚن ماسكوك.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    Dipeuëh seuneuléh angka bulat nums, udep neupeugot jumlah njang paling keuëng dari sub-array nyang hana kosong dari nums.
Contoh
minSubArraySum == 1
minSubArraySum == -6

ديڤوءه سونولهه اڠك بولاڠك nums، اوده ڽوڤڬوت جملاه ڽڠ ڤالڠ كوءڠ داري sub-array ڽڠ هان كوسوڠ داري nums.
چونته
minSubArraySum == 1
minSubArraySum == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    Kah na keuwoe grid segi opat droe. Setiap baroe mewakili droe keudroe,
    dan setiap 1 di baroe mewakili droe unit air.
    Setiap keudroe aneuk boih yang bisa digunakan untuk menarek air dari keudroe tersebut,
    dan keudroe-keudroe aneuk boih yang sama kapasitasnya.
    Tujuan droe adalah menggunakan aneuk boih untuk meuesa keudroe-keudroe tersebut.
    Hasilkan jumlah kali droe perlu menurunkan aneuk boih.

    Contoh1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            kapasitas_aneuk_boih : 1
        Output: 6

    Contoh2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            kapasitas_aneuk_boih : 2
        Output: 5
    
    Contoh3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            kapasitas_aneuk_boih : 5
        Output: 0

    Syarat:
        * semua keudroe panjangnya sama
        * 1 <= grid.length <= 10^2
        * 1 <= panjang grid[:,1] <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= kapasitas <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    ڤرنتوه كاتا اينى، كمو هروس منغوروتكن سواتو عاراي دري انتجر ڬنڬارا نڬاتيف منوروت جوملاه ساتو دالم ڬمبارن بينارى مريكا دالم اوروتن منينگكت. 

اونتوق جوملاه ساتو يڠ سام، اوروتكن بر داسر نيلاء ديشيمال.

مستى دياملكن سيڤرتى اينى:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""Diberi taloe s dan angka alami n, droeneuh ka dipeugah meuimplementasi
    fungsi nyang meuliwoe dafta dari keureuja-keureuja dari taloe s nyang
    meudoeng n konsonan, berurutan keureuja-keureuja nyan teupah di taloe s.
    Lam taloe s peu haba, maka fungsi nyan watee meuliwoe dafta nyang peu haba.
    Catatan: droeneuh mungkin asai taloe masukan hana meudoe surat dan spasé.
    Contoh:
    select_words ==> [""little""]
    select_words ==> [""Mary"", ""lamb""]
    select_words ==> []
    select_words ==> [""world""]
    select_words ==> [""Uncle""]
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""Andaikata hanjeut seukata kamoe dipeueh. Tugas kamoe nyan geutanyoe jak lam jameun vokal nyang teudong antara dua konsonan dari keu arah kanan seukata nyan.

Vokal nyang teudong di awal dan akheun han teuka. Peulangkeun seukata kosong jika kamoë hana jak jak lam vokal nyang mit syarat di ateuh.

Kamoe buleueh assume bahwa seukata nyan meunan surat lam Inggris saja.

Contoh:
get_closest_vowel ==> ""u""
get_closest_vowel ==> ""U""
get_closest_vowel ==> """"
get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    Diberikan sebuah array arr yang terdiri dari bilangan bulat dan sebuah bilangan bulat positif k, kembalikan daftar yang diurutkan dengan panjang k yang terdiri dari k angka maksimum dalam arr.

Contoh1:

Input: arr = [-3, -4, 5], k = 3
Output: [-4, -3, 5]

Contoh2:

Input: arr = [4, -4, 4], k = 2
Output: [4, 4]

Contoh3:

Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
Output: [2]

Catatan:
1. Panjang array akan berada dalam rentang [1, 1000].
2. Elemen-elemen dalam array akan berada dalam rentang [-1000, 1000].
3. 0 <= k <= len

ترجمات: 
Dipeugah saboh array arr bak angka bulat dan saboh angka bulat positif k, balek daftar yang diurutkan panjang k dengan angka maksimum k dalam arr.

Contoh1:

Input: arr = [-3, -4, 5], k = 3
Output: [-4, -3, 5]

Contoh2:

Input: arr = [4, -4, 4], k = 2
Output: [4, 4]

Contoh3:

Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
Output: [2]

Catatan:
1. Panjang array ka dalam rentang [1, 1000].
2. Elemen-elemen dalam array ka dalam rentang [-1000, 1000].
3. 0 <= k <= len
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""Dipeuee satu daftar intijér yang hana kosong, balekueë jumlah dari watee ganjil yang na pada posisi genap.

Contoh:
solution ==> 12
solution ==> 9
solution ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    دٔروها سٛتٔوهٔن سٛتٔوهٔن اٚنتهٔجر أره دان سٛتٔوهٔن ك، كٔمباڵيكٔن جملاءن الٔهٚمن سٛتٔوهٔن بٚر دٔوا أڠكٓ دو دٔڬيت در دٔره سٛتٔوهٔن ك أره.

مثال:

    مدٔخٚلن: أره = [111, 21, 3, 4000, 5, 6, 7, 8, 9], ك = 4
    كٚلؤارٔن: 24 # جملاءن 21 + 3

قيداً:

    1. 1 <= پٚنچٔڠ أره <= 100
    2. 1 <= ك <= پٚنچٔڠ أره
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    مؤندا إنتجر 'ن' يڠ بربيلئي بوسيتيف، كوالياكن سواتو داګليست يڠ سوده ديترتّيبكن دالاڬيڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠڬڠ
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""كه جipeh geutanyoe peuget fungsie yang peureksa tateh boh tanggal dan
    mulang True lamun tanggal nyoe sah, mantong False.
    Tanggal nyoe sah lamun syarat-syarat nyoe geupeukong:
    1. Tateh boh tanggal hana kosong.
    2. Jumloh jeumpoe hana kurang 1 atawa leubeh 31 jeumpoe keu bulan 1,3,5,7,8,10,12. Dan jumloh jeumpoe hana kurang 1 atawa leubeh 30 jeumpoe keu bulan 4,6,9,11. Dan, jumloh jeumpoe hana kurang 1 atawa leubeh 29 jeumpoe keu bulan 2.
    3. Bulan hana peutat 1 atawa leubeh 12.
    4. Tanggal nyoe that u format: mm-dd-yyyy

    contohnya:
    valid_date => True

    valid_date => False

    valid_date => False

    valid_date => True

    valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""You are given two intervals,
    where each interval is a pair of integers. For example, interval = =.
    The given intervals are closed which means that the interval
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals, is
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection,) ==> ""NO""
    intersection,) ==> ""NO""
    intersection,) ==> ""YES""

Acehnese:
تُوٱ كـُوْ دُوٱ تَـمْڠُوْه، 
سَيَـڠ مَانا سَتُو تَـمْڠُوْه إِيْ سَتُوڽَ سُوَتُو سُوَتُوۏ بِيْلَـنْجَ. مِسَالْنْيَ، تَـمْڠُوه = =. 
تَـمْڠُوْه يَڠ دِيْبِرِي إِتُ تَـمْڠُوْه تُتُوڠ يَڠ بِرَارْتِي بَهْوَا تَـمْڠُوْه 
مَسُوْكَن كُدُؤَ بُلاي دَنْ أَخِر. 
لَمْبَغ تَـمْڠُوه يَڠ دِيْبِرِي، دِيْأَسُوْمِي بَهْوَا بُـلاي نْيَ سَامَ دَنْ أَتَوْ كُرَنڠ دَرِي أَخِر نْيَ. 
تُگَس تُوٱ أَدَلاَه أَپَكَه بَـنْجَڠ مِنْتَسَ أَنتَـر دُوٱ تَـمْڠُوْه إِتُ عَدَلَه بِيْلَـنْجَ پْرِيْمَ. 
مِسَالْنْيَ، مِنْتَسَ دَرِي تَـمْڠُوْه، أَدَلاَه يَڠ بَـنْجَڠ نْيَ أَدَلاَه ١، يَڠ بُكَن بِيْلَـنْجَ پْرِيْمَ.
جِكَا بَـنْجَڠ مِنْتَسَ أَدَلاَه بِيْلَـنْجَ پْرِيْمَ، جَوَاب ""يَـس""، 
جِكَا تِدَأ، جَوَاب ""تِدَأ"".
جِكَا دُوٱ تَـمْڠُوْه تِدَأ تَرْتَمْڠُوه، جَوَاب ""تِدَأ"".

	[دَتَ/كِلَارَ] سَمْفِل:
	مِنْتَسَ،) ==> ""تِدَأ""
	مِنْتَسَ،) ==> ""تِدَأ""
	مِنْتَسَ،) ==> ""يَـس""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    Sure, here is the translation of the given sentence into Acehnese:

تُوْنْكُوْنْ دِجْيَكْ سِكْ أَرَيَةْ اَرَرْ دَارِيْ اِنْتَجَرْ دَنْ تُوْنْكُوْنْ پِرْلُ دِيْ پُلَنْجَرْكَنْ
    جُمْلَهْ مَگْنِيتُد سِكْ اِنْتَجَرْ دَنْگَنْ هَاسِلْ جُوْمْلَهْ سِمْبُلْ
    دَارِيْ سَتِيَپْ نُومْبُرْ دِيْ دَلَمْ أَرَيَةْ، دِيْوَكِلْكَنْ دَنْگَنْ 1، -1 أَتَوْ 0.
    كَتْرَنگَنْ: كَمْبَلِكَنْ تِيْدَكْ آدَپُنْ أُنْتُوْكْ أَرَيَةْ كُسُوْنْگْ.

    كُنْتُهْ:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    Diberi grid dengan N baris dan N kolom dan sebuah integer positif k,
setiap sel pada grid mengandung sebuah nilai. Setiap integer dalam rentang [1, N * N]
muncul tepat sekali pada sel-sel grid.

Kamu harus menemukan jalur minimum dengan panjang k dalam grid. Kamu bisa memulai
dari sel mana saja, dan pada setiap langkah kamu bisa pindah ke sel tetangga mana saja,
dengan kata lain, kamu bisa pergi ke sel-sel yang berbagi tepi dengan sel kamu saat ini.
Harap dicatat bahwa jalan dengan panjang k berarti mengunjungi tepat k sel (tidak
harus berbeda).
Kamu TIDAK BISA keluar dari grid.
Jalur A dianggap lebih kecil dari jalur B jika
setelah membuat daftar urutan nilai pada sel-sel yang dilalui A dan B, lst_A lebih kecil secara leksikografis daripada lst_B, dengan kata lain, ada indeks integer i
sehingga lst_A[i] < lst_B[i] dan untuk setiap j kita punya
lst_A[j] = lst_B[j].
Dijamin bahwa jawabannya unik.
Kembalikan daftar urutan nilai pada sel-sel yang dilalui jalur minimum.

Contoh:

    Masukan: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
    Keluaran: [1, 2, 1]

    Masukan: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
    Keluaran: [1]

Dalam Acehnese:

دى بري غريد دڠن ن باريس دان ن كولوم دان سواتو انتيجر ڤوزيتيف ك،
ستياء سل ڤد غريد مڠندڠ سواتو نيلاي. ستياء انتيجر دالم رنتڠ [1, ن * ن]
مڠچول تڤت سكالي ڤد سلسل غريد.

كمو هاروس مڠوندكن جالور منيموم دڠن ڤنجڠ ك دالم غريد. كمو بيڠكن مملاءي
دري سل مان ساج، دان ڤد ستياء ڤرسج كمو بيڠكن ڤينده ك سل تتڠڬ مان ساج،
دڠن كات لئن، كمو بيڠكن ڬي ك سلسل يڠ بركاڬ تيڤي دڠن سل كمو ساات ايني.
حرف ديچتت باهوا جال دڠن ڤنجڠ ك مرتي مڠوندكن تڤت ك سل.
كمو تيدق بيڠكن كلور دري غريد.
جالور أ ديڠڬڬب لبيه كچل دري جالور ب جك
ستله مڬنق دفتار اوروتن نيلاي ڤد سلسل يڠ دلالوي أ دان ب، lst_A لبيه كچل سكرا ليكسيكوڬرافيس درڤد lst_B، دڠن كات لئن، اد اينديكس انتيجر اي
سيهنڬ lst_A[i] < lst_B[i] دان اونتوق ستياء ج كيت ڤونيا
lst_A[j] = lst_B[j].
ديجامين باهوا جاوبن ايتو اوڠيك.
كيمباليكن دفتار اوروتن نيلاي ڤد سلسل يڠ دلالوي جالور منيموم.

كونتو:

    ماسوقن: غريد = [ [1,2,3], [4,5,6], [7,8,9]], ك = 3
    كيلوران: [1, 2, 1]

    ماسوقن: غريد = [ [5,9,3], [4,1,6], [7,8,2]], ك = 1
    كيل
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""سريڠ اورڠ تاو سيكوانس فيبوناتشي، اي دي تدالامي لبيه دالم له اورڠنغ ماتماتيكا دالم دو اباد ترخير. نامون، هاي اورڠ تاو أيلا سيكوانس تريبوناتشي.
سيكوانس تريبوناتشي دي ديفينيسي دڠن ريكارينسي:
تري = 3
تري = 1 + ن / 2، لو ن جناب.
تري = تري + تري + تري، لو نڠ غنجيل.
كونتوه:
تري = 1 + = 2
تري = 3
تري = تري + تري + تري
       = 2 + 3 + 3 = 8
فد كمو كاس نڠنڠ كيو، كمو هروس منغواك كدافترنغنڠڠ ڠكاليڠ تريبوناتشي.
كونتوه:
تري = [1, 3, 2, 8]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""بريكن هجي انتيڠٮٗن بيلڠن بوله, باچٮٗكٮٗن حاصل كالي دريڠن انكٮٗت انكٮٗت گاجٮٗه.
    باچٮٗكٮٗن 0 جكٮٗ سٮٗموٮٗه انكٮٗت انكٮٗت سيما.
    كونتوڮٮٗ:
    انكٮٗت == 1
    انكٮٗت == 0
    انكٮٗت == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""Kah igeuëh lôn ureung léngköt angka-angka.
Geuëh droeëk peugöt jumlah angka-angka ka kuadrat dalam léngköt, dan peugléh angka setiap ureung dalam léngköt ke dalam int jih.
Contohnya:
Untuk léngköt = [1,2,3] hasilnya that 14
Untuk léngköt = [1,4,9] hasilnya that 98
Untuk léngköt = [1,3,5,7] hasilnya that 84
Untuk léngköt = [1.4,4.2,0] hasilnya that 29
Untuk léngköt = [-2.4,1,1] hasilnya that 6
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""تيم يڠن فڠسيون يڠ منيولوهكن اينديكش تربيچك درفد سواتو اليمن يڠ تيداك لبيه بساو او اتاو سم دڠن اليمن يڠ سبلمڽ. جك تيداك ادا اليمن سرتي ات، كماليكن -1. اريه يڠ د بري تيداك اكن مڠندڠي دڤليكت والي.

كونته:
can_arrange = 3
can_arrange = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    Here's the translation of the given sentence into Acehnese:

تربيت فنكسي يانگ مينغامبيل انتجر، فلوات، او سطريق يانغ مڠگمبيلكن
    انك ڤركار، دان مڠمبليكن ڤركار يانگ لبيه بسار دالم تيڤ تيڤ جنيس ڤركار.
    كيمباليكن None جك ڤركار-ڤركار ترسبوت ساما.
    نوت: جك انك ڤركار ديكبواكن سباڬاي سطريق، پوينت فلوتينڬڬ مڠگوناكن . اتاو ,

    compare_one â -> 2.5
    compare_one â -> ""2,3""
    compare_one â -> ""6""
    compare_one â -> None
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""تاجيھ نؤمبؤھاكؤن پوتيھ نؤمبؤھ ن بيسا دي تاكرؤن سابؤ كاري كوتويھ 4 نؤمبؤھ جيناب سائت
كونتوھ
is_equal_to_sum_even == Salah
is_equal_to_sum_even == Salah
is_equal_to_sum_even == Benar
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""فکتوریل برازیل ديفينيسي داري:
    brazilian_factorial = n! *! *! * ... * 1!
    دي دالم n > 0

    سباݐاي كونتوه:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    Dipeugah bak seunurét text, peugotih seupot-seupot ruang ih ngeu underscores,
lôn jika seunurét na leubeh dari 2 ruang yang berurutan,
maka peugotih seupot-seupot ruang yang berurutan ngön - 

fix_spaces == ""Contoh""
fix_spaces == ""Contoh_1""
fix_spaces == ""_Contoh_2""
fix_spaces == ""_Contoh-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""Ciptakan fungsi yang mengambil string mewakili nama berkas, dan mengembalikan 
    'Yes' jika nama berkas valid, dan mengembalikan 'No' sebaliknya.
    Nama berkas dianggap valid jika dan hanya jika semua kondisi berikut dipenuhi:
    - Tidak boleh ada lebih dari tiga angka dalam nama berkas.
    - Nama berkas mengandung tepat satu titik '.'
    - Substring sebelum titik tidak boleh kosong, dan harus dimulai dengan huruf dari 
    alfabet latin.
    - Substring setelah titik harus salah satu dari ini: ['txt', 'exe', 'dll']
    Contoh:
    file_name_check # => 'Yes'
    file_name_check # => 'No'
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""""  Fungsi nyoe akan meureunyoe meupeugot seuneuléh integer. Keu sakai seuneuléh nyan, fungsi nyoe akan meupeugot angka integer nyan lam 3 kalikah. Fungsi nyoe akan meucube angka integer nyan lam 4 kalikah tapi hana lam 3 kalikah. Fungsi nyoe hana akan meubah seuneuléh nyan keurang meupeugot angka integer nyan hana lam 3 atawa 4 kalikah. Fungsi nyoe akan meuliheung jumlah sakai seuneuléh nyan.
    
    Contoh:
    Keu lst = [1,2,3] maka hasé nyan seumpot 6
    Keu lst = [] maka hasé nyan seumpot 0
    Keu lst = [-1,-5,2,-1,-5] maka hasé nyan seumpot -126
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    Given the complexity and specificity of the translation, I will translate the sentence into Acehnese:

```plaintext
Kah geutanyoe geupeugot sagoe kalimat nan mewakili seunalet,
    kalimat nyan meunan saboh bloe-bloe geutanyo teupisang droe-droe,
    dan geutanyoe harus ulee kalimat nan meunan saboh bloe-bloe dari kalimat asal,
    nan panjang bloe-bloe nyan jumlah bilangan prima,
    urutan bloe-bloe di kalimat nan baru harus sama dengan nan asal.

    Contoh1:
        Masukan: kalimat = ""This is a test""
        Keluaran: ""is""

    Contoh2:
        Masukan: kalimat = ""lets go for swimming""
        Keluaran: ""go for""

    Batasan:
        * 1 <= panjang <= 100
        * kalimat cuman geukanduri surat
```

Note: This translation assumes an understanding of technical terms and programming-related context. Some phrases are directly translated while keeping the technical meaning intact.
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""Tugas droeë nyan nyoe meugöt fungsi nyang ka meuseunasa ekspresi
    x * n. Fungsi nyoe bakal mengembalikan True lam sip x * n menilai ke angka bulat dan False
    seubaliknyan. Kedua x dan n, nyoe adalah representasi string dari sebuah pecahan, dan hana format,
    <pembilang>/<penyebut> di mana pembilang dan penyebut adalah angka bulat positif.

    Droeë bisa memastikan bhawa x dan n adalah pecahan yang benar, dan hana nyang hana penyebut nol.

    simplify = True
    simplify = False
    simplify = False
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    Here's the translation of the provided sentence into Acehnese:

نوليهه فونكسي ينڠ ميورم كندوري ديبريكن داڤد ايتو انتوك انتوك اوردن منوروت جمعن داري انكا انكاي ڤوداڤ. كاتيه: كالو اده بارڤا بارڤا ايتم يڠ سمباريسن جمعن داري انكا انكايڽ، اوردن دي انكران كندوري اصل.

سباڬاي كونتوه:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""Here is the translation of the given sentence into Acehnese:

تولون فڠسي يڠ منيمڤن سواتو اراي انكا سباڬاي ماسوقن دان منغسيلكن جملا اهلي دالم اراي يڠ لبيه بسار داري 10 دان كدوا دڠن انكا ڤرتاما دان ترآخر ڤون ڠنجيل.
كونتوه:
specialFilter => 1 
specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    Given the complexity of the text and its technical nature, I'll provide a translation that retains the meaning appropriately:

**Acehnese:**

ڤوه لهاني نى ادا دلام ڤوسيتيف اينتيجر n. كمو هروس مونغهاسيلكن اينتيجر اراي a دڤنجڠ ن.
        اونتوق ستيڤ i, نيلئي a[i] = i * i - i + 1.
        كمباليكن جومله تيڬكل داري a دمن اڤابيلا i < j < k, 
    دان a[i] + a[j] + a[k] اداله سواتو كاليڬن داري 3.

    كونتوه:
        اينپوت: n = 5
        اوتڤوت: 1
        ڤنجلاسان:
        a = [1, 3, 7, 13, 21]
        ساتو-ساتوني تيڬكل يڠ سهايه اداله.
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""تابؤه دٔن فوسين ݣن مٔنٔيم لٔست كٔن باچٔ رينتٔه سٔبٔه بٔه ائه پٔرٔميت، 
ݣٔپٔن باچٔ رينتٔه كٔن پٔنئه پانجان ݣٔنجٔل دٔرى ݣٔرؤن لٔست نٔيه، 
دٔن پٔلان لٔست كٔن تٔرتٔرت دٔن تمپٔلن، 
لٔست نٔيه سٔلٔلؤه لٔست كٔن باچٔ رينتٔه دٔن بٔكن ݣروم نٔمبر، 
دٔن بٔليه تٔرتٔرت دٔن ݣٔدٔپٔك. 
ݣٔرؤن لٔست نٔيه تٔرتٔرت تٔرمٔسٔك دٔن پانجان كٔتا، دٔن 
كٔمٔؤه تٔرٔتٔرت لٔست كٔن بٔكٔنٔن كٔلٔمٔه. 
فوسين نٔيه حٔرٔس لٔست كٔن باچٔ رينتٔه دٔن تٔرتٔرت. 
ݣٔمٔؤه بٔليه مٔسٔئقٔن كٔتا كٔتا سٔمٔه پانجان. 
سٔبٔه كٔنتمٔن:
assert list_sort => [""aa""]
assert list_sort => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""برنامهٔ سادهئ ݣت كادياً ڤيوليهٔ ايهٔ x جك nء ايهٔ نمبر ڤرايم دان كادياً ڤيوليهٔ ايهٔ y كلو ڤرانيا.

مثال:
لو x_or_y == ۳۴
لو x_or_y == ۵
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""لومتي كيتا جroh that انغوه كيتا جاگه that perasaan سيمن كيتا تاو hasil peristiwa يانغ تله لاما ديتنج-ديتنج. Perasaan دان فكيران كمو دي ساتو مومنتو ايني سنديري pantas ديكات دي دان دي باندينغ. Tugas كمو اداله menentukan افا سيسواران تلاه منيبراك hasil داري بربرابا pertandingan. كمو ديبريكا دوا دايف سكورو دان tebakan يانغ ساما بانيق منياكان، دي مانا ستياب انديكس منيبوككن ساتو pertandingan. كمو ملوركن سواتو دايف دنان panjang يانغ ساما منانداكن seberapa jauh setiap tebakan. افا مريكا تلاه menebak دنان بتيول، نلائي اداله 0، دان كالاو تيدق، نلائي اداله بيداان مطلق انتارا tebakan دان سكورو.

contoh:

مقارنكا -> [0,0,0,0,3,3]
مقارنكا -> [4,4,1,0,0,6]
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""Sure, here is the translation of the given sentence into Acehnese:

تانتوے جيت جينام کلاس دان يڠ سنياري دڠن ڤنوهان.
    پڠنوهان ايمني دڠن ميڠڤون کلاس تامباهي کلاسيڠ. ککوهن پڠنوهان اداله سڤرتي اين: بيارکن CAP جادي جوهم حرڤن بسار هروف دلام نام پڠنوهان، دان SM جادي جوهم حرڤن کچيل هروف دلام نام پڠنوهان، ککوهن اداله داري فراکسي CAP - SM.
    کيتا هاروس منچاري پڠنوهان يڠ تربيک دان منچاري سنياري يڠ دالم فورمات اين: ClassName.StrongestExtensionName.
    کالو اد دوڤنوهان اوچڠنڠ سمانا ککوهن، کيتا هاروس مليهت يڠ ڤرتام دالم سنياري.
    کونتيه، کالو کيتا دڠن ""Slices"" سباگي کلاس دان ايک سنياري پڠنوهان: ['SErviNGSliCes', 'Cheese', 'StuFfed'] ماکا کيتا هاروس منچاري 'Slices.SErviNGSliCes' کرانا 'SErviNGSliCes' اداله يڠ تربيک.
    کونتيه:
    براي Strongest_Extension == 'my_class.AA'
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""The translation of the sentence into Acehnese is as follows:

ٲنٲ دٲبري ٢ كاتٲ. پٲيٲ اُٲ پۏلٲ كٲتٲ كهٲ دوٲنٲ اوٲ رۏتاٲنٲنٲ بۏلٲنٲنٲ كرياٲنٲں تٲدٲك كٲتٲ كهٲ پۏرٲتٲمٲن.

Here is how the examples would look in Acehnese:

cycpattern_check => تٲدٲك
cycpattern_check => بٲنٲر
cycpattern_check => تٲدٲك
cycpattern_check => بٲنٲر
cycpattern_check => تٲدٲك
cycpattern_check => بٲنٲر

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""Dih aneuk angka. Balikkeun tuple nyang peugot angka genap dan angka ganjil keu nyang masing-masing.

     Contoh:
        even_odd_count ==>
        even_odd_count ==>

ديه انيوك اڠك. باليككن تڤلݢ ڠݢ ڠݢ ݢنڤ دان ڠݢ ڠنجيل كيو ڠݢ ماسڠ٢.

    چنتوه:
       even_odd_count ==>
       even_odd_count ==>
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    ديجؤ جيميت أدؤ عدد بيلانغ بوسيتيف، جيؤ لام فيغور روموي نا دافلوم أونتؤك فيغور جيميت إيتو سيباغاي سياتو سترينغ، دان كيمباليكأن دلام هوروف كيسيل.
 
 بيسا أوكوه: 1 <= نؤم <= 1000

 كونتوه:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""تولۂ وݢت فنكسيۏن ݣي منٮمبۏ ݣ داروݢن جلٮت.

داڽ جلٮت ترديري بݢاي كاتا-كاتا ݢي بٮدا. كٮمباليكٮن كات ݢي مݢن ديݢن جمليح كاراتير بٮدا ݢي تٮربانيك. جكٮلا بݢاي كاتا مݢن ديݢن جمليح كاراتير بٮدا ݢي تٮربانيك، كٮمباليكٮن كات ݢي تٮربيه دلام ترتيب لغسيكۏڤراڣي.

find_max == ""string""
find_max == ""enam""
find_max == ""aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    إنتي jinoh keuneulheuh, dan droe geus meukunyam beuklah wate,
tapi nyoe droe wate meukah beuklah beuklah le umpeu teuka hidangan uroe nyoe.
Droe wate keu peugah array [ jumloh beuklah keu droe geus meukunyam le umpeu hidangan,
                              jumloh beuklah yang teuka le umpeu hidangan ]
lam hana beuklah keu nyang teuka, droe wate meukah beuklah nyang teuka, tapi droe tetap jinoh.
    
Contoh:
* eat -> [11, 4]
* eat -> [12, 1]
* eat -> [11, 0]
* eat -> [7, 0]

Variabel:
@number : integer
    jumloh beuklah nyang geus droe meukunyam.
@need : integer
    jumloh beuklah nyang droe wate meukah.
@remaining : integer
    jumloh beuklah nyang teuka dalam stok.

Batasan:
* 0 <= number <= 1000
* 0 <= need <= 1000
* 0 <= remaining <= 1000

Selamat bersenang-senang :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    دجروت دٱو ليست أوبيراتور، دان أوبيران. ليست أدرون ليست سي تيمڤت ألبراج باسيك، دان ليست كدوا أدرون ليست إنتيجر. غوناكن دوٱ ليست يڠ دبرن دإيترنكن دلم ألبراج دان كواسن ڤنجيلآين دري ألبراج ترسبوت.

ألبراج باسيك:
تمبههن 
كورڠن 
ڤڬندهن 
بهاكن فلو 
ڤڬندهن كواس 

كونتوه:
أوبيراتور ['+', '*', '-']
ليست = [2, 3, 4, 5]
هسيل = 2 + 3 * 4 - 5
=> هسيل = 9

كت:
     پنچڠ ليست أوبيراتور سام دڠن پنچڠ ليست أوبيران كورڠ ساتو.
     أوبيران أدرون ليست إنتيجر يڠ تيدق نڬتيف.
     ليست أوبيراتور ممفويني ستيدقن-تيدقن ساتو أوبيراتور، دان ليست أوبيران ممفويني ستيدقن-تيدقن دوا أوبيران.

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""Sure, here is the translation of the given sentence into Acehnese:

تاجوھ سيت سواتو ڤر تينتڠ س.
    اگر س[i] اداله سواتو حروف، باليکن کسوسنڽ دري کچيل کڤد بساو اتاو سبلکنڽ،
    جیکا تيدق، بيارکن ايتو سباݢيمين ڤد ڤوسيسيڽ.
    جیکا سواتو سترينݢ تيدق مميليکي حروف، باليکن سترينݢ ايتو.
    فوسين ايني هروس منݢمباليکن سترينݢ هسيل.
    کونتوه
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    Dipeue 'text', balèkèe keudroe 'text' nyan dalam bentuk hash md5.
    Jika 'text' nyan kosong, balèkèe None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    ديهوى بجيه دوء بيلانچو مثبت a دان b، كوليه رنچيت جيوه اينت بينتارا a دان b، دلام اوردويان منوجو كريه.

كونتوج:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
