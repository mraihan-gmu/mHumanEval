[
    {
        "prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Sanlar sanawynda ha\u00fdsydyr bir iki san berlen boslukdan has \u00fdakynmyka barla\u0148.\n    Mysal:\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "canonical_solution":"for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Bu funksi\u00fda girizil\u00fd\u00e4n maglumat, biri-birini\u0148 i\u00e7inde \u00fderle\u015fdirilen birn\u00e4\u00e7e toparda s\u00fc\u00fd\u015f\u00fd\u00e4n s\u00f6zlemlerden ybarat. Sizi\u0148 maksady\u0148yz, \u015fol toparlary a\u00fdratyn s\u00f6zlemlere b\u00f6l\u00fcp, olary\u0148 sanawyny yzyna ga\u00fdtarmakdyr. A\u00fdry-a\u00fdry toparlar de\u0148agramly we biri-birini\u0148 i\u00e7inde \u00fderle\u015fdirilme\u00fd\u00e4r. Girizilen s\u00f6zlemde bo\u015fluklary \u00e4sgermezlik edi\u0148. Mysal:\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"
    },
    {
        "prompt":"\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Berilen o\u0148yn \u00fd\u00fczen nokatly san, integer b\u00f6legine we onluk b\u00f6legine b\u00f6l\u00fcnip bilner.\n\nSanany\u0148 onluk b\u00f6legini ga\u00fdtar.\nMysal:\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "canonical_solution":"    return number % 1.0\n",
        "test":"def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Size noldan balans bilen ba\u015flan\u00fdan bank hasabyna go\u00fdum we \u00e7ykary\u015f amallaryny\u0148 sanawy beril\u00fd\u00e4r. Sizi\u0148 wezip\u00e4\u0148iz hasaby\u0148 balansyny\u0148 ha\u00fdsydyr bir pursatynda noldan a\u015fak d\u00fc\u015f\u00fcp-d\u00fc\u015fme\u00fd\u00e4ndigini anyklamak, we \u015fol pursatda funksi\u00fdany\u0148 True ga\u00fdtarmagydyr. Ba\u015fga \u00fdagda\u00fdlarda bolsa False ga\u00fdtarar.\nMysal:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Berilen sanlar sanawyny\u0148 orta\u00e7a absol\u00fdut sapmasyny\n    bu maglumat toplumyny\u0148 orta\u00e7a t\u00f6wereginde hasapla\u0148.\n    Orta\u00e7a Absol\u00fdut Sapma her bir elementi\u0148 we merkezi nokady\u0148 arasyndaky orta\u00e7a absol\u00fdut tapawutdyr:\n    OAS = orta\u00e7a | x - x_orta |\n    Mysal:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n",
        "test":"def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Giri\u015f sanawyny\u0148 `numbers` her bir iki yzygiderli elementini\u0148 arasynda 'delimiter' san belgisini go\u00fdu\u0148.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Bu funksi\u00fda \u00fc\u00e7in girizi\u0148 bir setir bolup, bo\u015fluklar bilen b\u00f6l\u00fcnen i\u00e7-i\u00e7e \u00fderle\u015fen a\u00fdlawlary\u0148 k\u00f6p toparlaryny g\u00f6rkez\u00fd\u00e4r.\n    Her topar \u00fc\u00e7in a\u00fdlawlary\u0148 i\u0148 \u00e7u\u0148 gatlagyny \u00e7ykary\u0148.\n    Mysal \u00fc\u00e7in,) i\u0148 k\u00f6p iki gatlagy\u0148 \u00fderle\u015fi\u015fini g\u00f6rkez\u00fd\u00e4r,)) bolsa \u00fc\u00e7 gatlagy\u0148 \u00fderle\u015fi\u015fini g\u00f6rkez\u00fd\u00e4r.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "canonical_solution":"    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Girdilen setirleri\u0148 sanawyny di\u0148e berlen setiri \u00f6z i\u00e7ine al\u00fdan setirler \u00fc\u00e7in s\u00fcz\u00fc\u0148.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if substring in x]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Berilen sanlary\u0148 sanawyna g\u00f6r\u00e4, sanawdaky \u00e4hli sanlary\u0148 jemi we hasylyndan ybarat bolan bir tuple ga\u00fdtar. \n    Bo\u015f jem 0-a de\u0148 bolmaly we bo\u015f hasyl 1-e de\u0148 bolmaly.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "canonical_solution":"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test":"def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" Berilen sanlar sanawyndan, yzygiderli maksimum elementini\u0148 sanawyny \u015fu wagta \u00e7enli tapyl\u00fdan sanawda d\u00fcz\u00fc\u0148.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Berilen setiri\u0148 palindromdygyny barla \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "canonical_solution":"    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Giri\u015f iki sany a we b setirlerinden ybarat bolup, di\u0148e 1 we 0-lardan dur\u00fdar.\n    Bu giri\u015flerde binar XOR \u00fderine \u00fdetir we netij\u00e4ni hem setir h\u00f6km\u00fcnde ga\u00fdtary\u0148.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "canonical_solution":"    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test":"def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n"
    },
    {
        "prompt":"from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Setirleri\u0148 sanawyndan i\u0148 uzynyny ga\u00fdtar. Eger bir uzynlykda birn\u00e4\u00e7e setir bar bolsa, olardan ilkinjisini\u0148 ga\u00fdtarylmagyny \u00fcpj\u00fcn et. Eger sanaw bo\u015f bolsa, hi\u00e7 zat ga\u00fdtarma.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "canonical_solution":"    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test":"def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n"
    },
    {
        "prompt":"\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Iki sany a we b sanlaryny\u0148 i\u0148 uly umumy b\u00f6l\u00fcjisini ga\u00fdtar.\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    while b:\n        a, b = b, a % b\n    return a\n",
        "test":"def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Giri\u015f setirini\u0148 i\u0148 gysgasyndan i\u0148 uzynyna \u00e7enli \u00e4hli prefiksleri\u0148 sanawyny yzyna ga\u00fdtary\u0148.\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n"
    },
    {
        "prompt":"\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Nol dan ba\u015flap n \u00e7enli sanlary bo\u015fluk bilen a\u00fdyran setir g\u00f6rn\u00fc\u015finde yzyna ga\u00fdtary\u0148.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test":"def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "prompt":"\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Berlen setird\u00e4ki a\u00fdratyn n\u00e4\u00e7e d\u00fcrli harplary\u0148 bardygyny anykla\u0148\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "canonical_solution":"    return len(set(string.lower()))\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Bu funksi\u00fda \u00fc\u00e7in giri\u015f, \u00fd\u00f6rite ASCII formatda saz notlaryny g\u00f6rkez\u00fd\u00e4n bir setir. \n    Sizi\u0148 wezip\u00e4\u0148iz, bu setiri \u00e7\u00f6zmek we her bir notany\u0148 n\u00e4\u00e7e urgyny\u0148 dowam ed\u00fd\u00e4ndigine la\u00fdyk gel\u00fd\u00e4n sanlary\u0148 sanawyny ga\u00fdtarmak.\n\n    Ine, bir d\u00fc\u015f\u00fcndiri\u015f:\n    'o' - doly nota, d\u00f6rt urgy dowam ed\u00fd\u00e4r\n    'o|' - \u00fdarym nota, iki urgy dowam ed\u00fd\u00e4r\n    '.|' - \u00e7\u00e4r\u00fdek nota, bir urgy dowam ed\u00fd\u00e4r\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n"
    },
    {
        "prompt":"\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Berlen substringi\u0148 ba\u015flangy\u00e7 hatar i\u00e7ind\u00e4ki sanyny tapy\u0148. \u00d6rt\u00fc\u015f\u00fd\u00e4n \u00fdagda\u00fdlary hem hasaba aly\u0148.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "canonical_solution":"    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test":"def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Girdi 'nol'dan 'dokuz'a \u00e7enli sanlardan dur\u00fdan bo\u015fluk bilen b\u00f6l\u00fcnen setir. \n    Dogry sa\u00fdlawlar 'nol', 'bir', 'iki', '\u00fc\u00e7', 'd\u00f6rt', 'b\u00e4\u015f', 'alty', '\u00fdedi', 'sekiz' we 'dokuz'.\n    Sanlary ki\u00e7iden ululyga g\u00f6r\u00e4 d\u00fcz\u00fclen g\u00f6rn\u00fc\u015fde ga\u00fdtar.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "canonical_solution":"    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Berilen sanlar sanawyndan biri-birine i\u0148 \u00fdakyn iki sanyny sa\u00fdla\u0148 we olary tertipde yzyna ga\u00fdtary\u0148.\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Berlen sanlar sanawyna \u015fe\u00fdle bir \u00e7yzykly \u00f6wr\u00fcli\u015figi ulany\u0148,\n    \u015fe\u00fdlelikde i\u0148 ki\u00e7i san 0 bolar we i\u0148 uly san 1 bolar.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n",
        "test":"def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"
    },
    {
        "prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Berilen sanawdan di\u0148e integer bolan Python gymmatlyklaryny s\u00fczmek.\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in values if isinstance(x, int)]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"
    },
    {
        "prompt":"\n\ndef strlen(string: str) -> int:\n    \"\"\" Berlen setiri\u0148 uzynlygyny ga\u00fdtary\u0148\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "canonical_solution":"    return len(string)\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n"
    },
    {
        "prompt":"\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" Berilen n sany \u00fc\u00e7in, n-i de\u0148 derejede b\u00f6l\u00fd\u00e4n, n-den ki\u00e7i i\u0148 uly sany tap.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test":"def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Berlen integeri\u0148 ki\u00e7isinden ulusyna \u00e7enli tertipde esasy faktorlaryny\u0148 sanawyny yzyna beri\u0148.\n    Her bir faktor faktorizasi\u00fdada n\u00e4\u00e7e gezek pe\u00fdda bolsa, \u015fon\u00e7a gezek g\u00f6rkezilmelidir.\n    Girizilen san \u00e4hli faktorlary\u0148 k\u00f6peldilmegi bilen de\u0148 bolmalydyr.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n \/\/= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test":"def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Sanlary\u0148 sanawyndan bir gezekden k\u00f6p ga\u00fdtalan\u00fdan \u00e4hli elementleri a\u00fdyry\u0148.\n    Galan elementleri\u0148 tertibini giri\u015fd\u00e4ki \u00fdaly sakla\u0148.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n"
    },
    {
        "prompt":"\n\ndef flip_case(string: str) -> str:\n    \"\"\" Berlen setir \u00fc\u00e7in, ki\u00e7i harp karakterlerini uly harp karakterlerine we uly harp karakterlerini ki\u00e7i harp karakterlerine \u00f6w\u00fcr.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "canonical_solution":"    return string.swapcase()\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Setirleri\u0148 sanawyny bir setire birle\u015fdiri\u0148\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "canonical_solution":"    return ''.join(strings)\n",
        "test":"def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Giri\u015f setirlerini\u0148 sanawyny di\u0148e berlen prefiks bilen ba\u015flan\u00fdanlar \u00fc\u00e7in s\u00fcz\u00fc\u0148.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"
    },
    {
        "prompt":"\n\ndef get_positive(l: list):\n    \"\"\"Sanawda di\u0148e o\u0148yn sanlary yzyna ga\u00fdtary\u0148.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "canonical_solution":"    return [e for e in l if e > 0]\n",
        "test":"def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n"
    },
    {
        "prompt":"\n\ndef is_prime(n):\n    \"\"\"Bir sany\u0148 sadadygyny barlap, eger sadady bolsa, \"hakykat\", bolmasa \"\u00fdal\u0148y\u015f\" ga\u00fddyp beri\u0148.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "canonical_solution":"    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n"
    },
    {
        "prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Polinom koeffisientlerini xs-de we nokadyny x-de bahalandyr\u00fdar.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... + xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test":"def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"
    },
    {
        "prompt":"\n\ndef sort_third(l: list):\n    \"\"\"Bu funksi\u00fda sanaw l al\u00fdar we sanaw l' ber\u00fd\u00e4r, \u015fe\u00fdlelikde\n    l' \u00fc\u00e7e b\u00f6l\u00fcnme\u00fd\u00e4n indekslerde l bilen de\u0148dir, emma \u00fc\u00e7e b\u00f6l\u00fcnen indekslerd\u00e4ki gymmatlyklary l' -i\u0148 degi\u015fli indekslerind\u00e4ki gymmatlyklaryna de\u0148dir, \u00fd\u00f6ne tertiplidir.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "canonical_solution":"    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n"
    },
    {
        "prompt":"\n\ndef unique(l: list):\n    \"\"\"Sanawda tertiplenen \u00f6zbolu\u015fly elementleri yzyna ga\u00fdtary\u0148\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(list(set(l)))\n",
        "test":"def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n"
    },
    {
        "prompt":"\n\ndef max_element(l: list):\n    \"\"\"Sanawdaky i\u0148 uly elementi yzyna ga\u00fdtary\u0148.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"
    },
    {
        "prompt":"\n\ndef fizz_buzz(n: int):\n    \"\"\"San 11 \u00fda-da 13-e b\u00f6l\u00fcn\u00fd\u00e4n we n-den ki\u00e7i bolan sanlary\u0148 i\u00e7inde 7 sanjagyny\u0148 n\u00e4\u00e7e gezek du\u015f gel\u00fd\u00e4ndigini ga\u00fdtary\u0148.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test":"def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"
    },
    {
        "prompt":"\n\ndef sort_even(l: list):\n    \"\"\"Bu funksi\u00fda l sanawyny alyp, l' sanawyny yzyna ga\u00fdtar\u00fdar. \u015ee\u00fdlelikde,\n    l' sanawyny\u0148 gyzykly indeksleri l sanawyna me\u0148ze\u015f bol\u00fdar, \u00fd\u00f6ne onu\u0148 hatda indekslerind\u00e4ki gymmatlyklary\n    l sanawyny\u0148 hatda indekslerind\u00e4ki gymmatlyklara de\u0148 bol\u00fdar, \u00fd\u00f6ne tertiplen\u00fd\u00e4r.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "canonical_solution":"    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n"
    },
    {
        "prompt":"\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    \u015friftlen\u00fd\u00e4n setiri \u00fc\u00e7 harply toparlary\u0148 a\u00fdlawy arkaly yzyna ber\u00fd\u00e4r.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"
    },
    {
        "prompt":"\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib n-nji sanyny yzyna ga\u00fdtar\u00fdar, ol Fibonacci sanydyr we \u015fol bir wagty\u0148 \u00f6z\u00fcnde sadadyr.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "canonical_solution":"    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test":"def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n"
    },
    {
        "prompt":"\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero sanlary\u0148 sanawyny giri\u015f h\u00f6km\u00fcnde al\u00fdar.\n    eger sanawda nola de\u0148 bolan \u00fc\u00e7 d\u00fcrli element bar bolsa, ol True yzyna dolan\u00fdar,\n    bolmasa False yzyna dolan\u00fdar.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n"
    },
    {
        "prompt":"\n\ndef car_race_collision(n: int):\n    \"\"\"\n    T\u00e4sawur edi\u0148, bir \u00fdol bar, ol g\u00f6ni we \u00e7\u00e4ksiz uzyn \u00e7yzyk. \nn sany ulaglar \u00e7epden saga gid\u00fd\u00e4r; \u015fol bir wagtda ba\u015fga bir n ulaglar \nsagdan \u00e7epe gid\u00fd\u00e4r. Ulag toparlary biri-birinden gaty uzak aralykdan ba\u015fla\u00fdar. \nHemmesi bir tizlikde hereket ed\u00fd\u00e4r. Bir ulag \u00e7epden saga bar\u00fdan ulagy\u0148 \nsagdan \u00e7epe bar\u00fdan ulag bilen \u00e7aky\u015fan wagty \u00e7aky\u015fma bol\u00fdar di\u00fdil\u00fd\u00e4r. \nEmma, ulaglar \u00e7\u00e4ksiz derejede \u00e7ydamly we g\u00fc\u00fd\u00e7li; netijede, \u00e7aky\u015fan \u00fdaly etm\u00e4n \n\u00f6z ugrunda hereketlerini dowam etdir\u00fd\u00e4rler. \n\nBu funksi\u00fda \u015fe\u00fdle \u00e7aky\u015fmalary\u0148 sanyny \u00e7ykar\u00fdar.\n    \"\"\"\n",
        "canonical_solution":"    return n**2\n",
        "test":"def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"
    },
    {
        "prompt":"\n\ndef incr_list(l: list):\n    \"\"\"Sanawy\u0148 elementlerini 1 artdyryp yzyna ga\u00fdtary\u0148.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "canonical_solution":"    return [(e + 1) for e in l]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n"
    },
    {
        "prompt":"\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero sanlary\u0148 sanawyny giri\u015f h\u00f6km\u00fcnde kabul ed\u00fd\u00e4r.\n    sanawda jemi nola de\u0148 bolan iki a\u00fdratyn element bar bolsa, True ber\u00fd\u00e4r,\n    bolmasa False ber\u00fd\u00e4r.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n"
    },
    {
        "prompt":"\n\ndef change_base(x: int, base: int):\n    \"\"\"Giri\u015f sanyny\u0148 x esasyny \u00fc\u00fdtgedi\u0148.\n    \u00f6w\u00fcrmeden so\u0148ky setir g\u00f6rn\u00fc\u015fini yzyna ga\u00fdtar.\n    esas sanlary 10-dan ki\u00e7i.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "canonical_solution":"    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x \/\/= base\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n"
    },
    {
        "prompt":"\n\ndef triangle_area(a, h):\n    \"\"\"Berlen tarapy\u0148 uzynlygy we be\u00fdikligi bo\u00fdun\u00e7a \u00fc\u00e7bur\u00e7lugy\u0148 me\u00fddanyny hasapla\u0148.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "canonical_solution":"    return a * h \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"
    },
    {
        "prompt":"\n\ndef fib4(n: int):\n    \"\"\"Fib4 sanlar yzygiderligi, Fibbonacci yzygiderligi bilen me\u0148ze\u015f yzygiderlik bolup, a\u015fakdaky \u00fdaly kesgitlen\u00fd\u00e4r:\n    fib4 -> 0\n    fib4 -> 0\n    fib4 -> 2\n    fib4 -> 0\n    fib4 -> fib4 + fib4 + fib4 + fib4.\n    Fib4 sanlar yzygiderligini\u0148 n-nji elementini netijeli hasaplamak \u00fc\u00e7in bir funksi\u00fda \u00fdazy\u0148. Rekursi\u00fdany ulanmaly d\u00e4l.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "canonical_solution":"    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test":"def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n"
    },
    {
        "prompt":"\n\ndef median(l: list):\n    \"\"\"Sanawy\u0148 l elementlerini\u0148 medianasyny ga\u00fdtar.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "canonical_solution":"    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) \/\/ 2]\n    else:\n        return (l[len(l) \/\/ 2 - 1] + l[len(l) \/\/ 2]) \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Berilen setiri\u0148 palindromdygyny barla\u00fdar\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n"
    },
    {
        "prompt":"\n\ndef modp(n: int, p: int):\n    \"\"\"2^n moduly p-ni ga\u00fdtar.\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "canonical_solution":"    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n"
    },
    {
        "prompt":"\n\ndef encode_shift(s: str):\n    \"\"\"\n    Her bir harpy alfabada 5 harp s\u00fc\u00fd\u015f\u00fcrmek bilen kodlanan setiri yzyna ber\u00fd\u00e4r.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n"
    },
    {
        "prompt":"\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels setir kabul edip, ony \u00e7ekimliler bolmadyk setire \u00f6w\u00fcr\u00fd\u00e4n funksi\u00fdadyr.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"
    },
    {
        "prompt":"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Eger sanlary\u0148 hemmesi l sanawynda t \u00e7\u00e4kden a\u015fak bolsa, Dogry ga\u00fdtary\u0148.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"
    },
    {
        "prompt":"\n\ndef add(x: int, y: int):\n    \"\"\"Iki sany x we y sanlaryny go\u015fu\u0148\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "canonical_solution":"    return x + y\n",
        "test":"def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n"
    },
    {
        "prompt":"\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Iki s\u00f6zde birme\u0148ze\u015f harp bar-\u00fdoklugyny barla.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "canonical_solution":"    return set(s0) == set(s1)\n",
        "test":"def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n"
    },
    {
        "prompt":"\n\ndef fib(n: int):\n    \"\"\"n-nji Fibonacci sanini ga\u00fdtary\u0148.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test":"def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" Bu j\u00fcmle Turkmen diline \u015fe\u00fdle terjime edil\u00fd\u00e4r:\n\n\"Derejeler \"<\" we \">\" ny\u015fanlaryny\u0148 birle\u015fmesidir. \n    Her a\u00e7ylan derejeni\u0148 degi\u015fli \u00fdapyl\u00fdan derejesi bar bolsa, True ga\u00fdtar.\"\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n"
    },
    {
        "prompt":"\n\ndef monotonic(l: list):\n    \"\"\"Sanawy\u0148 elementleri monoton \u015fekilde art\u00fdan \u00fda-da azalan bolsa, True ga\u00fdtary\u0148.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"
    },
    {
        "prompt":"\n\ndef common(l1: list, l2: list):\n    \"\"\"Iki sanawy\u0148 arasyndaky umumy elementleri\u0148 t\u00e4sin we tertiplenen g\u00f6rn\u00fc\u015fini ga\u00fdtary\u0148.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "canonical_solution":"    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test":"def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n"
    },
    {
        "prompt":"\n\ndef largest_prime_factor(n: int):\n    \"\"\"n-i\u0148 i\u0148 uly b\u00f6l\u00fcjisini yzyna ga\u00fdtary\u0148. n > 1 we asyl san d\u00e4ldigini \u00e7akla\u0148.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test":"def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"
    },
    {
        "prompt":"\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n, 1-den n-e \u00e7enli sanlary jemle\u00fd\u00e4n funksi\u00fdadyr.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "canonical_solution":"    return sum(range(n + 1))\n",
        "test":"def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" Munu\u0148 terjimesi:\n\n\"Derejeler \"\" ny\u015fanlaryny\u0148 setiridir.\n    Her bir a\u00e7yly\u015f derejeleri\u0148 gabat gel\u00fd\u00e4n \u00fdapyl\u00fdan derejeleri bar bolsa, Dogry ga\u00fdtar.\"\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n"
    },
    {
        "prompt":"\n\ndef derivative(xs: list):\n    \"\"\" xs polinomy\u0148 koeffisi\u00fdentlerini g\u00f6rkez\u00fd\u00e4r.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Bu polinomy\u0148 t\u00fcrevini \u015fol bir g\u00f6rn\u00fc\u015fde ga\u00fdtar.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "canonical_solution":"    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n"
    },
    {
        "prompt":"\n\ndef fibfib(n: int):\n    \"\"\"FibFib sanlar yzgydy, Fibbonacci yzgydyna me\u0148ze\u015f yzgyd bolup, a\u015fakdaky \u00fdaly kesgitlen\u00fd\u00e4r:\n    fibfib == 0\n    fibfib == 0\n    fibfib == 1\n    fibfib == fibfib + fibfib + fibfib.\n    FibFib sanlar yzgydyny\u0148 n-nji elementini netijeli hasaplamak \u00fc\u00e7in, ha\u00fdy\u015f ed\u00fd\u00e4rin bir funksi\u00fda \u00fdazyp beri\u0148.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"
    },
    {
        "prompt":"\nFIX = \"\"\"\nHasaba alma synaglaryny\u0148 sanyny k\u00f6peldi\u0148.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef circular_shift(x, shift):\n    \"\"\"San integerini\u0148 sanlaryny a\u00fdlawly s\u00fc\u00fd\u015f\u00fcrip, sanlary sag tarapa s\u00fc\u00fd\u015f\u00fcri\u0148 we netijesini setir g\u00f6rn\u00fc\u015finde ga\u00fdtarany\u0148.\n    Eger s\u00fc\u00fd\u015f\u00fcrme sanlary\u0148 sanyndan k\u00f6p bolsa, sanlary tersine \u00f6w\u00fcr\u00fc\u0148.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef digitSum(s):\n    \"\"\"Setiri\u0148izi t\u00fcrkmen diline terjime ed\u00fd\u00e4rin:\n\n```\nWazypa:\n    Gir\u00fd\u00e4n parametr h\u00f6km\u00fcnde setir al\u00fdan we di\u0148e ba\u015f harplary\u0148 ASCII kodlaryny\u0148 jemini ga\u00fdtar\u00fdan funksi\u00fda \u00fdazmaly.\n\n    Mysallar:\n        digitSum => 0\n        digitSum => 131\n        digitSum => 67\n        digitSum => 69\n        digitSum => 131\n        digitSum => 153\n```\n    \"\"\"\n",
        "canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef fruit_distribution(s,n):\n    \"\"\"\n    Bu wezipede, miweli sebetde pa\u00fdlanan alma we apelsinleri\u0148 sanyny g\u00f6rkez\u00fd\u00e4n bir setir beriler. Bu sebetde alma, apelsin we mango miweleri bar. Alma we apelsinleri\u0148 umumy sanyny g\u00f6rkez\u00fd\u00e4n setir we sebetd\u00e4ki miweleri\u0148 umumy sanyny g\u00f6rkez\u00fd\u00e4n bir san beril\u00fd\u00e4r. Sebetd\u00e4ki mango miwelerini\u0148 sanyny tapy\u0148.\nMysal \u00fc\u00e7in:\nfruit_distribution -> 19 - 5 - 6 = 8\nfruit_distribution -> 3 - 0 - 1 = 2\nfruit_distribution -> 100 - 2 - 3 = 95\nfruit_distribution -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "canonical_solution":"    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n"
    },
    {
        "prompt":"\ndef pluck(arr):\n    \"\"\"\n    \"Aga\u00e7 \u015fahalaryny\u0148 biri bolup dur\u00fdan we non-negatiw sanly d\u00fcw\u00fcnleri \u00f6z i\u00e7ine al\u00fdan bir massiw berlen \u00fdagda\u00fdynda, sizi\u0148 wezip\u00e4\u0148iz d\u00fcw\u00fcnleri\u0148 birini sa\u00fdlamak we ony yzyna ga\u00fdtarmakdyr. Sa\u00fdlanan d\u00fcw\u00fcn i\u0148 ki\u00e7i j\u00fcb\u00fct bahaly d\u00fcw\u00fcn bolmalydyr. Eger-de birn\u00e4\u00e7e d\u00fcw\u00fcn i\u0148 ki\u00e7i j\u00fcb\u00fct bahany bolsa, i\u0148 ki\u00e7i indeksli d\u00fcw\u00fcni yzyna ga\u00fdtary\u0148.\n\nSa\u00fdlanan d\u00fcw\u00fcn sanaw h\u00f6km\u00fcnde yzyna ga\u00fdtarylmaly, [i\u0148 ki\u00e7i baha, onu\u0148 indeksi]. Eger j\u00fcb\u00fct baha \u00fdok bolsa \u00fda-da berlen massiw bo\u015f bolsa, [] ga\u00fdtary\u0148.\n\nMysal1:\n    Girizme: [4,2,3]\n    \u00c7yky\u015f: [2, 1]\n    D\u00fc\u015f\u00fcndiri\u015f: 2 i\u0148 ki\u00e7i j\u00fcb\u00fct bahadyr we 2 i\u0148 ki\u00e7i indeksdedir.\n\nMysal2:\n    Girizme: [1,2,3]\n    \u00c7yky\u015f: [2, 1]\n    D\u00fc\u015f\u00fcndiri\u015f: 2 i\u0148 ki\u00e7i j\u00fcb\u00fct bahadyr we 2 i\u0148 ki\u00e7i indeksdedir.\n\nMysal3:\n    Girizme: []\n    \u00c7yky\u015f: []\n\nMysal4:\n    Girizme: [5, 0, 3, 0, 4, 2]\n    \u00c7yky\u015f: [0, 1]\n    D\u00fc\u015f\u00fcndiri\u015f: 0 i\u0148 ki\u00e7i bahadyr, \u00fd\u00f6ne iki sany nol bar, \n                 \u015fonu\u0148 \u00fc\u00e7in biz ilkinji noly sa\u00fdla\u00fdarys, ol i\u0148 ki\u00e7i indeksdedir.\n\n\u00c7\u00e4klendirmeler:\n    * 1 <= d\u00fcw\u00fcnleri\u0148 uzynlygy <= 10000\n    * 0 <= d\u00fcw\u00fcn bahasy\"\n    \"\"\"\n",
        "canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"
    },
    {
        "prompt":"\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "canonical_solution":"    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "canonical_solution":"    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)\/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n"
    },
    {
        "prompt":"\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u00e2 -> False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u00e2 -> False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u00e2 -> True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u00e2 -> True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "canonical_solution":"    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n"
    },
    {
        "prompt":"\ndef smallest_change(arr):\n    \"\"\"\n    Berilen `arr` sanlar massiwinden, massiwi palindrom massiwine \u00f6w\u00fcrmek \u00fc\u00e7in \u00fc\u00fdtgetmeli elementleri\u0148 i\u0148 azyndan sanyny tapy\u0148. Palindrom massiw - yzlygyna we yzyna okalanda birme\u0148ze\u015f massiwdir. Bir \u00fc\u00fdtgetmede, siz bir elementi ha\u00fdsydyr bir ba\u015fga element bilen \u00fc\u00fdtgedip bilersi\u0148iz.\n\nMysal \u00fc\u00e7in:\nsmallest_change == 4\nsmallest_change == 1\nsmallest_change == 0\n    \"\"\"\n",
        "canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"
    },
    {
        "prompt":"\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u00e2 -> []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u00e2 -> ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u00e2 -> ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u00e2 -> ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u00e2 -> ['4']\n    '''\n",
        "canonical_solution":"    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n"
    },
    {
        "prompt":"\ndef is_multiply_prime(a):\n    \"\"\"San berlen san 3 sany sade sanlary\u0148 k\u00f6peldilmesi bolsa, dogry jogap ber\u00fd\u00e4n we ba\u015fgarak bolsa \u00fdal\u0148y\u015f jogap ber\u00fd\u00e4n funksi\u00fda \u00fdaz. 100-den ki\u00e7i bolandygyny bil\u00fd\u00e4ris.\nMysal:\nis_multiply_prime == Dogry\n30 = 2 * 3 * 5\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"
    },
    {
        "prompt":"\ndef is_simple_power(x, n):\n    \"\"\"Sizi\u0148 g\u00f6rewi\u0148iz, x sanyny\u0148 n-i\u0148 \u00fd\u00f6neke\u00fd g\u00fc\u00fdji bolanda true, be\u00fdleki \u00fdagda\u00fdlarda bolsa false g\u00f6rkezijisini ga\u00fdtar\u00fdan funksi\u00fda \u00fdazmakdyr.\n    x di\u0148e n-i\u0148 \u00fd\u00f6neke\u00fd g\u00fc\u00fdji bolsa, n**int=x bol\u00fdar\n    Mysal \u00fc\u00e7in:\n    is_simple_power => true\n    is_simple_power => true\n    is_simple_power => true\n    is_simple_power => false\n    is_simple_power => false\n    is_simple_power => false\n    \"\"\"\n",
        "canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "canonical_solution":"    a = abs(a)\n    return int(round(a ** (1. \/ 3))) ** 3 == a\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n"
    },
    {
        "prompt":"\ndef hex_key(num):\n    \"\"\"Size\u0148 wezip\u00e4\u0148iz, giri\u015f h\u00f6km\u00fcnde onaltylyk san al\u00fdan we ondan onalt\u00fdlyk sanlary\u0148 n\u00e4\u00e7esini\u0148 sadadygyny sanap bil\u00fd\u00e4n funksi\u00fda \u00fdazmakdyr. Onaltylyk sanlar \u015fulardyr: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Sada sanlar \u015fulardyr: 2, 3, 5, 7, 11, 13, 17,...\n\u015eonu\u0148 \u00fc\u00e7in a\u015fakdaky sanlary\u0148 sanyny kesgitlemeli: 2, 3, 5, 7, B, D.\nBellik: Giri\u015fi\u0148 hemi\u015fe dogry \u00fda-da bo\u015f setir boljakdygyny, we A, B, C, D, E, F ny\u015fanlaryny\u0148 hemi\u015fe uly harp bolup geljekdigini \u00e7aklap bilersi\u0148iz.\nMysallar:\nnum = \"AB\" \u00fc\u00e7in \u00e7ykdajy 1 bolmaly.\nnum = \"1077E\" \u00fc\u00e7in \u00e7ykdajy 2 bolmaly.\nnum = \"ABED1A33\" \u00fc\u00e7in \u00e7ykdajy 4 bolmaly.\nnum = \"123456789ABCDEF0\" \u00fc\u00e7in \u00e7ykdajy 6 bolmaly.\nnum = \"2020\" \u00fc\u00e7in \u00e7ykdajy 2 bolmaly.\n    \"\"\"\n",
        "canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"
    },
    {
        "prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"Size decimal g\u00f6rn\u00fc\u015finde beriler we sizi\u0148 wezip\u00e4\u0148iz ony ikilik formata \u00f6w\u00fcrmekdir. Funksi\u00fda her bir ny\u015fan ikilik san ta\u00fddan g\u00f6rkezilen setir d\u00f6nderip bermelidir. Setird\u00e4ki her bir ny\u015fan '0' \u00fda-da '1' bolar.\n\nSetiri\u0148 ba\u015fynda we ahyrynda go\u015fma\u00e7a 'db' ny\u015fanlary bolar. Bu go\u015fma\u00e7a ny\u015fanlar format \u00fc\u00e7in k\u00f6mek ed\u00fd\u00e4r.\n\nMysallar:\ndecimal_to_binary   # \"db1111db\" d\u00f6nderip ber\u00fd\u00e4r\ndecimal_to_binary   # \"db100000db\" d\u00f6nderip ber\u00fd\u00e4r\n    \"\"\"\n",
        "canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef is_happy(s):\n    \"\"\"Size \"s\" atly setir beril\u00fd\u00e4r.\nSizi\u0148 wezip\u00e4\u0148iz setiri\u0148 bagtlydygyny \u00fda-da d\u00e4ldigini barlamak.\nSetir, uzynlygy azyndan 3 we her 3 yzygiderli harp tapawutly bolsa, bagtly hasaplan\u00fdar.\nMysal \u00fc\u00e7in:\nis_happy => \u00ddal\u0148y\u015f\nis_happy => \u00ddal\u0148y\u015f\nis_happy => Dogry\nis_happy => \u00ddal\u0148y\u015f\nis_happy => Dogry\nis_happy => \u00ddal\u0148y\u015f\n    \"\"\"\n",
        "canonical_solution":"    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n"
    },
    {
        "prompt":"\ndef numerical_letter_grade(grades):\n    \"\"\"Bu semestri\u0148 so\u0148ky hepdesi we mugallym bahalary talyplara bermeli. Mugallym bahala\u015fdyrmak \u00fc\u00e7in \u00f6z algoritmini d\u00fcz\u00fcpdir. \u00ddekeje problema bar, ol bahala\u015fdyrmak \u00fc\u00e7in ulanan koduny \u00fditiripdir. Ol size k\u00e4bir talyplary\u0148 GPA sanawyny berdi we sizden a\u015fakdaky tablisadan pe\u00fddalanyp, harf bahalaryny g\u00f6rkez\u00fd\u00e4n sanawy \u00e7ykaryp bil\u00fd\u00e4n funksi\u00fda \u00fdazmagy\u0148yzy ha\u00fdy\u015f ed\u00fd\u00e4r:\n\n             GPA       |    Harf baha\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\nMysal:\ngrade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "canonical_solution":"\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef prime_length(string):\n    \"\"\"Setiri kabul ed\u00fd\u00e4n we setiri\u0148 uzynlygy sadadyr bolsa, True, \u015fol bir wagty\u0148 \u00f6z\u00fcnde bolsa False ga\u00fdtar\u00fdan funksi\u00fdany \u00fdazy\u0148.\nMysallar:\nprime_length == True\nprime_length == True\nprime_length == True\nprime_length == False\n    \"\"\"\n",
        "canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"
    },
    {
        "prompt":"\ndef starts_one_ends(n):\n    \"\"\"\n    Berilen o\u0148yn n integer, 1 bilen ba\u015fla\u00fdan \u00fda-da gutar\u00fdan n-den o\u0148yn integerleri\u0148 sanyny yzyna ga\u00fdtary\u0148.\n    \"\"\"\n",
        "canonical_solution":"    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(N):\n    \"\"\"Berilen pozitiw integer N \u00fc\u00e7in, onu\u0148 sanlaryny\u0148 jemi binarda berilmeli.\n\n    Mysal\n        N = 1000 \u00fc\u00e7in, sanlary\u0148 jemi 1 bol\u00fdar, netijesi \"1\" bolmaly.\n        N = 150 \u00fc\u00e7in, sanlary\u0148 jemi 6 bol\u00fdar, netijesi \"110\" bolmaly.\n        N = 147 \u00fc\u00e7in, sanlary\u0148 jemi 12 bol\u00fdar, netijesi \"1100\" bolmaly.\n\n    \u00dc\u00fdtge\u00fd\u00e4nler:\n        @N integer\n             \u00c7\u00e4klendirmeler: 0 \u2264 N \u2264 10000.\n    Netije:\n         binar san g\u00f6rn\u00fc\u015finde bir setir\n    \"\"\"\n",
        "canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"
    },
    {
        "prompt":"\ndef add(lst):\n    \"\"\"Bo\u015f bolmadyk sanlar sanawyny g\u00f6z \u00f6\u0148\u00fcnde tutu\u0148. Ters indekslerde duran j\u00fcb\u00fct sanlary go\u015fu\u0148.\n\n    Meselem:\n        go\u015f ==> 2 \n    \"\"\"\n",
        "canonical_solution":"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n"
    },
    {
        "prompt":"\ndef anti_shuffle(s):\n    \"\"\"\n    Funksi\u00fda \u00fdazyp, ol funksi\u00fda setiri kabul ed\u00fd\u00e4r we onu\u0148 tertiplenen g\u00f6rn\u00fc\u015fini yzyna ber\u00fd\u00e4r.\n    Setiri\u0148 tertiplenen g\u00f6rn\u00fc\u015fi, \u00e4hli s\u00f6zleri\u0148\n    t\u00e4ze s\u00f6z bilen \u00e7al\u015fyl\u00fdan setirdir, bu t\u00e4ze s\u00f6zde \u00e4hli harplar \n    ascii bahasyna g\u00f6r\u00e4 \u00fdokarlanma tertibinde \u00fderle\u015fdirilendir.\n    Bellik: Setird\u00e4ki s\u00f6zleri\u0148 we bo\u015fluklary\u0148 tertibini saklamaly.\n\n    Mysal \u00fc\u00e7in:\n    anti_shuffle 'Hi' ber\u00fd\u00e4r\n    anti_shuffle 'ehllo' ber\u00fd\u00e4r\n    anti_shuffle 'Hello !!!Wdlor' ber\u00fd\u00e4r\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef get_row(lst, x):\n    \"\"\"\n    Size 2 \u00f6l\u00e7egli maglumat beril\u00fd\u00e4r, i\u00e7-i\u00e7e sanawlar g\u00f6rn\u00fc\u015finde, matrislere me\u0148ze\u00fd\u00e4r, \u00fd\u00f6ne matrislerden tapawutlylykda, her setir d\u00fcrli s\u00fctun sanyna e\u00fde bolup biler. `lst` we `x` atly san beril\u00fd\u00e4r, sanawda `x` sanlaryny tapy\u0148 we koordinatlary\u0148 sanawyny ga\u00fdtar\u0148 [, ...], \u015fe\u00fdlelikde her bir koordinat bolup, 0-dan ba\u015fla\u00fdar. Koordinatlary ilki bilen setir bo\u00fdun\u00e7a artma tertibinde tertiple\u015fdiri\u0148. \u015ee\u00fdle hem, setiri\u0148 koordinatlaryny s\u00fctun bo\u00fdun\u00e7a kemelme tertibinde tertiple\u015fdiri\u0148.\n\nMysallar:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [,,,,]\nget_row == []\nget_row == []\n    \"\"\"\n",
        "canonical_solution":"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef sort_array(array):\n    \"\"\"\n    Berilen array-y\u0148 i\u00e7inde di\u0148e o\u0148yn sanlar bar, sortedilen array-y\u0148 nusgasyny yzyna beri\u0148,\n    eger-de jemi t\u00e4k bolsa, sortedilen array-y \u00fdokarly\u015f bo\u00fdun\u00e7a tertipl\u00e4\u0148,\n    \u00fda-da eger-de jemi de\u0148 bolsa, sortedilen array-y a\u015faklama tertipl\u00e4\u0148.\n\n    Belligi:\n    * berlen array-y \u00fc\u00fdtgetm\u00e4\u0148.\n\n    Mysallar:\n    * sort_array => []\n    * sort_array => [5]\n    * sort_array => [0, 1, 2, 3, 4, 5]\n    * sort_array => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
        "canonical_solution":"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef encrypt(s):\n    \"\"\"```plaintext\nBir setir kabul ed\u00fd\u00e4n we \u015frift alfabini\u0148 a\u00fdlanmagy bilen \u015fifrlenen setiri ga\u00fdtar\u00fdan \u015fifrle\u00fdji funksi\u00fda d\u00f6redi\u0148.\n    Alfabini\u0148 harplary iki gezek iki \u00fdere s\u00fc\u00fd\u015f\u00fcrilmek bilen a\u00fdlanmalydyr.\n    Mysal \u00fc\u00e7in:\n    encrypt 'lm' ga\u00fdtar\u00fdar\n    encrypt 'ewhjklnop' ga\u00fdtar\u00fdar\n    encrypt 'kj' ga\u00fdtar\u00fdar\n    encrypt 'ix' ga\u00fdtar\u00fdar\n```\n    \"\"\"\n",
        "canonical_solution":"    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef next_smallest(lst):\n    \"\"\"\n    Size tam sanly sanaw beril\u00fd\u00e4r.\n    Sanawy\u0148 i\u0148 ki\u00e7i 2-nji elementini yzyna ga\u00fdtar\u00fdan next_smallest atly funksi\u00fda \u00fdazmaly.\n    Eger \u015fe\u00fdle element \u00fdok bolsa, None yzyna ga\u00fdtarylmaly.\n    \n    next_smallest == 2\n    next_smallest == 2\n    next_smallest == None\n    next_smallest == None\n    \"\"\"\n",
        "canonical_solution":"    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_bored(S):\n    \"\"\"\n    Size s\u00f6zlerden ybarat setir berler, we sizi\u0148 wezip\u00e4\u0148iz \u00fdadawlyklary\u0148 sanyny hasaplamak. \u00ddadawlyk \"Men\" s\u00f6zi bilen ba\u015fla\u00fdan s\u00f6zlemi a\u0148lad\u00fdar. S\u00f6zlemler '.', '?' \u00fda-da '!' bilen a\u00fdrylar.\n\nMysal \u00fc\u00e7in:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "canonical_solution":"    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u00e2 -> True\n    \n    any_int(3, 2, 2) \u00e2 -> False\n\n    any_int(3, -2, 1) \u00e2 -> True\n    \n    any_int(3.6, -2.2, 2) \u00e2 -> False\n  \n\n    \n    '''\n",
        "canonical_solution":"    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef encode(message):\n    \"\"\"\n    Bir funksi\u00fda \u00fdazy\u0148, ol bir habary kabul ed\u00fd\u00e4r we ony \u015fe\u00fdle kodla\u00fdar:\n    \u00e4hli harplary\u0148 registrini \u00e7al\u015f\u00fdar, habardaky \u00e4hli \u00e7ekimlileri \n    i\u0148lis elipbi\u00fdinde \u015fol \u00e7ekimlini\u0148 2 \u00fder \u00f6\u0148\u00fcnd\u00e4ki harpy bilen \u00e7aly\u015f\u00fdar.\n    Di\u0148e harplar bolanyny \u00e7akla\u0148.\n\n    Mysallar:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\n\ndef skjkasdkd(lst):\n    \"\"\"Size sanlary\u0148 sanawyny ber\u00fd\u00e4rler.\n    Sen i\u0148 uly prosty sany tapmaly we onu\u0148 sanlaryny\u0148 jemi yzyna ga\u00fdtarmaly.\n\n    Mysallar:\n    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] \u00fc\u00e7in netije 10 bolmaly\n    lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] \u00fc\u00e7in netije 25 bolmaly\n    lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] \u00fc\u00e7in netije 13 bolmaly\n    lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] \u00fc\u00e7in netije 11 bolmaly\n    lst = [0,81,12,3,1,21] \u00fc\u00e7in netije 3 bolmaly\n    lst = [0,8,1,2,1,7] \u00fc\u00e7in netije 7 bolmaly\n    \"\"\"\n",
        "canonical_solution":"    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"
    },
    {
        "prompt":"\ndef check_dict_case(dict):\n    \"\"\"\n    Berilen s\u00f6zl\u00fckde, \u00e4hli a\u00e7arlary\u0148 ki\u00e7i harplarda \u00fda-da \u00e4hli a\u00e7arlary\u0148 ba\u015f harplarda bolmagyna g\u00f6r\u00e4 True \u00fda-da False \u00fdazy\u0148. Eger berilen s\u00f6zl\u00fck bo\u015f bolsa, funksi\u00fda False \u00fdazmaly.\nMysallar:\ncheck_dict_case True \u00fdazmaly.\ncheck_dict_case False \u00fdazmaly.\ncheck_dict_case False \u00fdazmaly.\ncheck_dict_case False \u00fdazmaly.\ncheck_dict_case True \u00fdazmaly.\n    \"\"\"\n",
        "canonical_solution":"    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"
    },
    {
        "prompt":"\ndef count_up_to(n):\n    \"\"\"Funksi\u00fdany \u00fderine \u00fdetiri\u0148, ol otrisatel d\u00e4l san kabul ed\u00fd\u00e4r we n-den ki\u00e7i bolan ilkinji n sanlary bolan praim sanlar massiwini yzyna ga\u00fdtarmalydyr.\nMysal \u00fc\u00e7in:\ncount_up_to => [2,3]\ncount_up_to => [2,3,5,7]\ncount_up_to => []\ncount_up_to => [2,3,5,7,11,13,17,19]\ncount_up_to => []\ncount_up_to => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "canonical_solution":"    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"
    },
    {
        "prompt":"\ndef multiply(a, b):\n    \"\"\"Funksi\u00fdany tamamla\u0148, ol iki sany san al\u00fdar we olary\u0148 birlik sanlaryny\u0148 \n    k\u00f6pelmesini yzyna ga\u00fdtar\u00fdar.\n    Girizil\u00fd\u00e4n maglumaty\u0148 hemi\u015fe dogrydygyny \u00e7akla\u0148.\n    Mysallar:\n    multiply 16 ga\u00fdtar\u00fdar.\n    multiply 72 ga\u00fdtar\u00fdar.\n    multiply 0 ga\u00fdtar\u00fdar.\n    multiply 20 ga\u00fdtar\u00fdar.\n    \"\"\"\n",
        "canonical_solution":"    return abs(a % 10) * abs(b % 10)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n"
    },
    {
        "prompt":"\ndef count_upper(s):\n    \"\"\"\n    Berlen s setiri \u00fc\u00e7in, de\u0148 belgilerde \u00fdogyn sesli harplary\u0148 sanyny sanap \u00e7yk.\n\n    Mysal \u00fc\u00e7in:\n    count_upper 1 sanyny yzyna ga\u00fdtar\u00fdar\n    count_upper 0 sanyny yzyna ga\u00fdtar\u00fdar\n    count_upper 0 sanyny yzyna ga\u00fdtar\u00fdar\n    \"\"\"\n",
        "canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For Exampleclosest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "canonical_solution":"    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n"
    },
    {
        "prompt":"\ndef make_a_pile(n):\n    \"\"\"\n    Pozitif n tam say\u0131 verildi\u011finde, n seviyeli ta\u015f y\u0131\u011f\u0131n\u0131 yapmal\u0131s\u0131n.\n    Birinci seviyede n ta\u015f var.\n    Bir sonraki seviyedeki ta\u015f say\u0131s\u0131:\n        - n tek say\u0131 ise, bir sonraki tek say\u0131d\u0131r.\n        - n \u00e7ift say\u0131 ise, bir sonraki \u00e7ift say\u0131d\u0131r.\n    Her seviyedeki ta\u015f say\u0131s\u0131n\u0131 bir listede d\u00f6nd\u00fcr. Listenin i indeksindeki eleman, seviyesindeki ta\u015f say\u0131s\u0131n\u0131 temsil eder.\n\n    Misallar:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    return [n + 2*i for i in range(n)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef words_string(s):\n    \"\"\"\n    Size verg\u00fcller \u00fda-da bo\u015fluklar bilen a\u00fdrylan s\u00f6zler setiri berler. Sizi\u0148 wezip\u00e4\u0148iz setiri s\u00f6zlere b\u00f6lmek we s\u00f6zleri\u0148 sanawyny yzyna ga\u00fdtarmak bolar.\n\nMysal \u00fc\u00e7in:\nwords_string == [\"Salam\", \"meni\u0148\", \"adym\", \"John\"]\nwords_string == [\"Bir\", \"iki\", \"\u00fc\u00e7\", \"d\u00f6rt\", \"b\u00e4\u015f\", \"alty\"]\n    \"\"\"\n",
        "canonical_solution":"    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n"
    },
    {
        "prompt":"\ndef choose_num(x, y):\n    \"\"\"Bu funksi\u00fda x we y atly iki o\u0148yn san al\u00fdar we [x, y] aralygynda i\u0148 uly j\u00fcb\u00fct san\u0131 yzy\u0148a ga\u00fdtar\u00fdar. Eger be\u00fdle san \u00fdok bolsa, funksi\u00fda -1 yzy\u0148a ga\u00fdtarmaly.\n\nMysal \u00fc\u00e7in:\nchoose_num = 14\nchoose_num = -1\n    \"\"\"\n",
        "canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"
    },
    {
        "prompt":"\ndef rounded_avg(n, m):\n    \"\"\"Size ikinji san n we m berildi, we sizi\u0148 wezipi\u0148iz n-den m-e \u00e7enli sanlary\u0148 ortalamasyny hasaplamakdyr. Jogaby i\u0148 \u00fdakyn san bilen tegelemek we ony iki sana \u00f6w\u00fcrmek. Eger n m-den uly bolsa, -1 ga\u00fdtar. Meselem:\n    rounded_avg => \"0b11\"\n    rounded_avg => -1\n    rounded_avg => \"0b1111\"\n    rounded_avg => \"0b11010\"\n    \"\"\"\n",
        "canonical_solution":"    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation\/(m - n + 1)))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n"
    },
    {
        "prompt":"\ndef unique_digits(x):\n    \"\"\"Pozitiw sanlardan ybarat x sanaw beril\u00fd\u00e4r. Hi\u00e7 hili juft sanly \n    elementi bolmadyk elementleri\u0148 tertipl\u00e4p sanawyny yzyna ga\u00fdtary\u0148.\n\n    Bellik: Ga\u00fdtarylan sanaw \u00fdokarlan tertipde bolmalydyr.\n\n    Mysal \u00fc\u00e7in:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef by_length(arr):\n    \"\"\"\n    Berilen sanly massiwde, 1 bilen 9 aralygyndaky sanlary tertiple, netijede alnan massiwi tersine \u00f6w\u00fcr, we so\u0148ra her bir sanlary degi\u015fli atlary bilen \u00e7aly\u015f \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nMysal \u00fc\u00e7in:\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> massiwi tertiple -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> massiwi tersine \u00f6w\u00fcr -> [8, 5, 4, 3, 2, 2, 1, 1]\n  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n  Eger massiw bo\u015f bolsa, bo\u015f massiw ga\u00fdtarylmaly:\n  arr = []\n  return []\n\n  Eger massiwde n\u00e4dogry san bar bolsa, olary \u00e4sgerme:\n  arr = [1, -1 , 55] \n        -> massiwi tertiple -> [-1, 1, 55]\n        -> massiwi tersine \u00f6w\u00fcr -> [55, 1, -1]\n  return = ['One']\n    \"\"\"\n",
        "canonical_solution":"    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n"
    },
    {
        "prompt":"\ndef f(n):\n    \"\"\" Funksi\u00fdany f \u00fderine \u00fdetiri\u0148, bu funksi\u00fda n parametrini kabul ed\u00fd\u00e4r, \n    we n ululykdaky sanawyny yzyna ber\u00fd\u00e4r, \u015fe\u00fdlelik bilen i indeksi \u00fderd\u00e4ki elementi\u0148 bahasy i hatda bolsa, i faktor\u00fdaly bol\u00fdar, \n    \u00fda-da bolmasa 1-den i \u00e7enli sanlary\u0148 jemi bol\u00fdar.\n    i 1-den ba\u015fla\u00fdar.\n    i faktor\u00fdaly 1-den i \u00e7enli sanlary\u0148 k\u00f6peldilmegi.\n    Mysal:\n    f == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "canonical_solution":"    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n"
    },
    {
        "prompt":"\ndef even_odd_palindrome(n):\n    \"\"\"\n    Berilen o\u0148yn n sany \u00fc\u00e7in, 1-den n-a \u00e7enli aralygynda \u00fderle\u015f\u00fd\u00e4n, san palindromlaryny\u0148 i\u00e7inde n\u00e4\u00e7e sanyny\u0148 tegiz we n\u00e4\u00e7e sanyny\u0148 t\u00e4kdigini g\u00f6rkez\u00fd\u00e4n bir tuple-y yzyna ga\u00fdtary\u0148.\n\n    Mysal1:\n\n        Girizilen: 3\n        Netije:\n        D\u00fc\u015f\u00fcndiri\u015f:\n        San palindromlary 1, 2, 3. Olary\u0148 biri tegiz, we ikisi t\u00e4k.\n\n    Mysal2:\n\n        Girizilen: 12\n        Netije:\n        D\u00fc\u015f\u00fcndiri\u015f:\n        San palindromlary 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Olary\u0148 d\u00f6rt\u00fc tegiz, we altysy t\u00e4k.\n\n    Bellik:\n        1. 1 <= n <= 10^3\n        2. Yzyna ga\u00fdtarylan tuple tegiz we t\u00e4k san palindromlaryny\u0148 sanyny degi\u015flilikde g\u00f6rkez\u00fd\u00e4r.\n    \"\"\"\n",
        "canonical_solution":"    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef count_nums(arr):\n    \"\"\"\n    ```\ncount_nums atly funksi\u00fdany \u00fdazyp beri\u0148, ol sanlary\u0148 massiwini kabul eder we sanlary\u0148 sanlaryny\u0148 jemi 0-dan uly bolan elementleri\u0148 sanyny yzyna ga\u00fdtarar.\n    Eger bir san negatiw bolsa, onda onu\u0148 i\u0148 birinji belgisi negatiw bolar:\n    mysal \u00fc\u00e7in, -123 sanyny\u0148 belgileri -1, 2 we 3 bolar.\n```\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef move_one_ball(arr):\n    \"\"\"Bizde N sany tam sanly 'arr' atly sanlar massiwimiz bar: arr[1], arr[2], ..., arr[N]. Sanlar massiwde t\u00f6t\u00e4nle\u00fdin tertipde \u00fderle\u015fdirilen. Sizi\u0148 wezipi\u0148iz, a\u015fakdaky amaly \u00fderine \u00fdetirip, massiwi art\u00fdan tertipde tertiplemek m\u00fcmkin\u00e7iligini\u0148 bardygyny kesgitlemekdir:\n    Size massiwde islendik mukdarda sag tarapy s\u00fc\u00fd\u015f\u00fcrme amaly \u00fderine \u00fdetirm\u00e4ge rugsat beril\u00fd\u00e4r.\n\n    Bir sag tarapy s\u00fc\u00fd\u015f\u00fcrme amaly, massiwd\u00e4ki \u00e4hli elementleri bir pozisi\u00fda sag tarapa s\u00fc\u00fd\u015f\u00fcrmek di\u00fdmekdir. Massiwi\u0148 so\u0148ky elementi ba\u015f pozisi\u00fda, \u00fdagny 0-njy indikse ge\u00e7iriler.\n\n    Eger berlen amaly \u00fderine \u00fdetirip, tertiplenen massiwe \u00fdetmek m\u00fcmkin bolsa, True ga\u00fdtar, bolmasa False ga\u00fdtar.\n    Eger berlen massiw bo\u015f bolsa, True ga\u00fdtary\u0148.\n\n    Bellik: Berlen sanawy\u0148 elementleri \u00fc\u00fdtgewsiz elementlerden ybarat boljakdygyna kepillik beril\u00fd\u00e4r.\n\n    Mysallar:\n\n    move_one_ball==>Dogry\n    D\u00fc\u015f\u00fcndiri\u015f: 2 gezek sag tarapy s\u00fc\u00fd\u015f\u00fcrme amaly \u00fderine \u00fdetirmek bilen, berlen massiw \u00fc\u00e7in art\u00fdan tertip gazanyp bolar.\n    \n    move_one_ball==>\u00ddal\u0148y\u015f\n    D\u00fc\u015f\u00fcndiri\u015f: Islendik mukdarda sag tarapy s\u00fc\u00fd\u015f\u00fcrme amaly \u00fderine \u00fdetirmek bilen, berlen massiw \u00fc\u00e7in art\u00fdan tertip gazanyp bolmaz.\n                \n    \"\"\"\n",
        "canonical_solution":"    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n"
    },
    {
        "prompt":"\ndef exchange(lst1, lst2):\n    \"\"\"Bu meselede, iki sany san sanawyny kabul ed\u00fd\u00e4n we elementleri \u00e7aly\u015fmak arkaly lst1 sanawyny di\u0148e teg sanlardan ybarat edip biljekdigini kesgitle\u00fd\u00e4n bir funksi\u00fdany durmu\u015fa ge\u00e7irmeli bolarsy\u0148yz.\n    lst1 we lst2 sanawlaryny\u0148 arasynda \u00e7al\u015fyk edilen elementleri\u0148 sanyna hi\u00e7 hili \u00e7\u00e4klendirme \u00fdokdur.\n    Eger lst1 we lst2 sanawlaryny\u0148 arasynda elementleri \u00e7aly\u015fmak arkaly lst1 sanawyny\u0148 \u00e4hli elementlerini\u0148 teg bolmagyna m\u00fcmkin\u00e7ilik bar bolsa, \"Hawa\" ga\u00fdtar.\n    Bolmasa, \"\u00ddok\" ga\u00fdtar.\n    Mysal \u00fc\u00e7in:\n    exchange => \"Hawa\"\n    exchange => \"\u00ddok\"\n    Girdi sanawlaryny\u0148 bo\u015f bolmajakdygy \u00e7ak edil\u00fd\u00e4r.\n    \"\"\"\n",
        "canonical_solution":"    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"
    },
    {
        "prompt":"\ndef histogram(test):\n    \"\"\"Bo\u015fluklar bilen a\u00fdrylan ki\u00e7i harp belgilerini g\u00f6rkez\u00fd\u00e4n setiri g\u00f6z \u00f6\u0148\u00fcnde tutup, i\u0148 k\u00f6p ga\u00fdtalan\u00fdan harpy we degi\u015fli san bilen s\u00f6zl\u00fck g\u00f6rn\u00fc\u015finde ga\u00fdtaryp beri\u0148. Eger birn\u00e4\u00e7e harp birme\u0148ze\u015f mukdarda \u00fd\u00fcze \u00e7yk\u00fdan bolsa, olary\u0148 hemmesini ga\u00fdtaryp beri\u0148.\n\nMysal:\nhistogram == {'a': 1, 'b': 1, 'c': 1}\nhistogram == {'a': 2, 'b': 2}\nhistogram == {'a': 2, 'b': 2}\nhistogram == {'b': 4}\nhistogram == {}\n\n    \"\"\"\n",
        "canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef reverse_delete(s,c):\n    \"\"\"G\u00f6rev\n    Bize iki sany s we c setir beril\u00fd\u00e4r, siz s setirind\u00e4ki c setirind\u00e4ki ha\u00fdsydyr bir harp bilen de\u0148 bolan \u00e4hli harplary pozmaly\n    we so\u0148ra netije setirini\u0148 palindromdygyny barlamaly.\n    Bir setir yzyna we \u00f6\u0148e okalanda birme\u0148ze\u015f bolsa, ol setir palindrom di\u00fdil\u00fd\u00e4r.\n    Siz netije setirini we barlag \u00fc\u00e7in Dogry \/ \u00ddal\u0148y\u015f bolan tuple ga\u00fdtarmaly.\n    Mysal\n    s = \"abcde\", c = \"ae\" \u00fc\u00e7in, netije bolmaly\n    s = \"abcdef\", c = \"b\"  \u00fc\u00e7in, netije bolmaly\n    s = \"abcdedcba\", c = \"ab\" \u00fc\u00e7in, netije bolmaly\n    \"\"\"\n",
        "canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"
    },
    {
        "prompt":"\ndef odd_count(lst):\n    \"\"\"Berilen sanlardan ybarat setirleri\u0148 sanawyny g\u00f6z \u00f6\u0148\u00fcne getiri\u0148. Her bir setir di\u0148e sanlardan dur\u00fdar, we netijede sanaw d\u00f6nd\u00fcrmeli. \n    \u00c7ykdajy sanawyny\u0148 her bir elementi \"girdi setirini\u0148 i-nji elementind\u00e4ki t\u00e4k elementleri\u0148 sany\" bolmaly. Bu \u00fderde \u00e4hli i'ler girdi setirini\u0148 i-nji elementind\u00e4ki t\u00e4k sanlary\u0148 sany bilen \u00e7al\u015fyrylmaly.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "canonical_solution":"    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minSubArraySum(nums):\n    \"\"\"\n    Intejerlerden ybarat `nums` sanly massiw berilen bolsa, `nums`-y\u0148 hi\u00e7 bolmanda bir elementli islendik \u00fdan-massiwini\u0148 i\u0148 pes jemini tapy\u0148.\n    Mysal\n    minSubArraySum == 1\n    minSubArraySum == -6\n    \"\"\"\n",
        "canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"
    },
    {
        "prompt":"\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    Size bo\u00fdun\u00e7a g\u00f6n\u00fcbur\u00e7ly gu\u00fdulary\u0148 torusy beril\u00fd\u00e4r. Her hat bir gu\u00fdyny a\u0148lad\u00fdar, we hatardaky her bir 1 bir suw birligini a\u0148lad\u00fdar. Her gu\u00fdyny\u0148 suwy \u00e7ykarmak \u00fc\u00e7in ulanyp bol\u00fdan degi\u015fli bir sebedi bar, we \u00e4hli sebetleri\u0148 tutumy birme\u0148ze\u015fdir. Sizi\u0148 wezip\u00e4\u0148iz gu\u00fdulary bo\u015fatmak \u00fc\u00e7in sebetleri ulanmakdyr. Sebetleri a\u015fak salmaly boljak gezekleri\u0148 sanyny \u00e7ykary\u0148.\n\nMysal1:\n    Girizme: \n        tor: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        sebedi\u0148 tutumy: 1\n    \u00c7ykary\u015f: 6\n\nMysal2:\n    Girizme: \n        tor: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        sebedi\u0148 tutumy: 2\n    \u00c7ykary\u015f: 5\n\nMysal3:\n    Girizme: \n        tor: [[0,0,0], [0,0,0]]\n        sebedi\u0148 tutumy: 5\n    \u00c7ykary\u015f: 0\n\n\u00c7\u00e4klendirmeler:\n    * \u00e4hli gu\u00fdulary\u0148 uzynlygy birme\u0148ze\u015fdir\n    * 1 <= toru\u0148 uzynlygy <= 10^2\n    * 1 <= tor[:,1].uzynlygy <= 10^2\n    * tor[i][j] -> 0 | 1\n    * 1 <= tutum <= 10\n    \"\"\"\n",
        "canonical_solution":"    return sum([math.ceil(sum(arr)\/capacity) for arr in grid])\n",
        "test":"def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef sort_array(arr):\n    \"\"\"\n    Bu Kata-da, siz ikilik g\u00f6rn\u00fc\u015find\u00e4ki birleri\u0148 sanyna g\u00f6r\u00e4, t\u00e4sir etme\u00fd\u00e4n go\u015fma\u00e7a sanlary\u0148 tertibini \u00fdokarlanma bo\u00fdun\u00e7a d\u00fczmeli.\n\n    \u015eu\u0148a me\u0148ze\u015f birleri\u0148 sany \u00fc\u00e7in, sanlary onluk g\u00f6rn\u00fc\u015finde tertipl\u00e4p d\u00fcz\u00fc\u0148.\n    \n    Ol \u015fe\u00fdle \u00fderine \u00fdetirilmelidir:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef select_words(s, n):\n    \"\"\"Berilen s setiri we n tebigy san g\u00f6z \u00f6\u0148\u00fcnde tutulyp, \n    s setirinden n sany sessiz harpy \u00f6z i\u00e7ine al\u00fdan s\u00f6zleri\u0148 sanawyny \n    yzly-yzyna ga\u00fdtarmaly i\u015flemi \u00fderine \u00fdetirm\u00e4ge tab\u015fyryldy.\n    Eger s setiri bo\u015f bolsa, funksi\u00fda bo\u015f sanaw ga\u00fdtarmaly.\n    Belligi: giri\u015f setirini\u0148 di\u0148e harplardan we bo\u015fluklardan ybaratdygyny \u00e7ak edip bilersi\u0148iz.\n    Mysallar:\n    select_words ==> [\"little\"]\n    select_words ==> [\"Mary\", \"lamb\"]\n    select_words ==> []\n    select_words ==> [\"world\"]\n    select_words ==> [\"Uncle\"]\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"
    },
    {
        "prompt":"\ndef get_closest_vowel(word):\n    \"\"\"Sizi\u0148 berlen s\u00f6z\u00fc\u0148iz bar. Sizi\u0148 wezpe\u0148iz, s\u00f6zleri\u0148 sag tarapyndaky iki sessiz harpy\u0148 arasynda duran i\u0148 \u00fdakyn \u00e7ekimli harpy tapmak.\n\nBa\u015fda we ahyrda duran \u00e7ekimli harplar hasaba alynma\u00fdar. Above \u015fertine la\u00fdyk gel\u00fd\u00e4n \u00e7ekimli harp tapmasa\u0148yz, bo\u015f setir ga\u00fdtar\u0148.\n\nBerlen setiri\u0148 di\u0148e i\u0148lis harplaryndan ybaratdygyny \u00e7ak edip bilersi\u0148iz.\n\nMysal:\nget_closest_vowel ==> \"u\"\nget_closest_vowel ==> \"U\"\nget_closest_vowel ==> \"\"\nget_closest_vowel ==> \"\"\n    \"\"\"\n",
        "canonical_solution":"    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "canonical_solution":"    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n"
    },
    {
        "prompt":"\ndef maximum(arr, k):\n    \"\"\"\n    Berilen arr atly sanlary\u0148 massiwini\u0148 we k atly o\u0148yn sany\u0148 esasynda, arr-daky i\u0148 \u00fdokary k sanyny \u00f6z i\u00e7ine al\u00fdan tertiplenilen sanaw dolandyry\u0148.\n\nMysal1:\n\n    Girizil\u00fd\u00e4n zatlar: arr = [-3, -4, 5], k = 3\n    \u00c7yk\u00fdan zatlar: [-4, -3, 5]\n\nMysal2:\n\n    Girizil\u00fd\u00e4n zatlar: arr = [4, -4, 4], k = 2\n    \u00c7yk\u00fdan zatlar: [4, 4]\n\nMysal3:\n\n    Girizil\u00fd\u00e4n zatlar: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    \u00c7yk\u00fdan zatlar: [2]\n\nBellik:\n    1. Massiwini\u0148 uzynlygy [1, 1000] aralygynda bolar.\n    2. Massiwini\u0148 elementleri [-1000, 1000] aralygynda bolar.\n    3. 0 <= k <= len\n    \"\"\"\n",
        "canonical_solution":"    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n"
    },
    {
        "prompt":"\ndef solution(lst):\n    \"\"\"Bo\u015f bolmadyk sanlary\u0148 sanawyny g\u00f6z \u00f6\u0148\u00fcnde tutup, hatda \u00fderde duran \u00e4hli t\u00e4k elementleri\u0148 jemi yzyna ga\u00fdtarylsyn.\n\n    Mysallar\n    solution ==> 12\n    solution ==> 9\n    solution ==> 0\n    \"\"\"\n",
        "canonical_solution":"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"
    },
    {
        "prompt":"\ndef add_elements(arr, k):\n    \"\"\"\n    Bo\u015f bolmadyk arr sanlar massiwini we bir san k berlen \u00fdagda\u00fdynda, arr-i\u0148 ilkinji k elementlerini\u0148 arasynda i\u0148 k\u00f6p iki sanly elementleri\u0148 jemi.\n\n    Mysal:\n\n        Girizme: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Netije: 24 # 21 + 3 elementlerini\u0148 jemi\n\n    \u00c7\u00e4klendirmeler:\n        1. 1 <= len <= 100\n        2. 1 <= k <= len\n    \"\"\"\n",
        "canonical_solution":"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef get_odd_collatz(n):\n    \"\"\"\n    Pozitiw n integer berlen bolsa, Collatz yzygiderliliginde t\u00e4k sanlary bar bolan tertiplenen sanawyny yzyna ga\u00fdtary\u0148.\n\n    Collatz \u00e7aklamasy matematika bo\u00fdun\u00e7a \u00e7aklama bolup, a\u015fakdaky \u00fdaly kesgitlenen yzygiderlilik bilen baglany\u015fyklydyr: islendik pozitiw integer n bilen ba\u015fla\u0148. So\u0148ra her bir element \u00f6\u0148ki elementden a\u015fakdaky \u00fdaly al\u00fdar: \u00f6\u0148ki element de\u0148 bolsa, indiki element \u00f6\u0148ki elementi\u0148 \u00fdarysydyr. \u00d6\u0148ki element t\u00e4k bolsa, indiki element \u00f6\u0148ki elementi\u0148 3 esse k\u00f6pelmesi we \u00fcst\u00fcne 1 go\u015fulmasydyr. \u00c7aklama \u015fe\u00fdledirki, n ha\u00fdsy baha bolsa-da, yzygiderlilik elmydama 1-e \u00fdet\u00fd\u00e4r.\n\n    Bellikler:\n        1. Collatz [1] bolup dur\u00fdar.\n        2. yzyna ga\u00fdtarylan sanaw art\u00fdan tertipde tertiplenendir.\n\n    Mysal \u00fc\u00e7in:\n    get_odd_collatz [1, 5] ga\u00fdtaryp ber\u00fd\u00e4r # 5 \u00fc\u00e7in Collatz yzygiderliligi [5, 16, 8, 4, 2, 1] bolup dur\u00fdar, \u015fonu\u0148 \u00fc\u00e7in t\u00e4k sanlar di\u0148e 1 we 5.\n    \"\"\"\n",
        "canonical_solution":"    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n\/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef valid_date(date):\n    \"\"\"\u015eu j\u00fcmleleri t\u00fcrkmen diline terjime edi\u0148:\n\nSizi\u0148 berlen sen\u00e4ni barla\u00fdan we sene dogry bolsa True, \u00fdal\u0148y\u015f bolsa False ga\u00fdtar\u00fdan funksi\u00fda \u00fdazmaly. Sene dogry hasaplan\u00fdar, eger-de a\u015fakdaky d\u00fczg\u00fcnleri\u0148 hemmesi \u00fderine \u00fdetirilse:\n1. Sene setiri bo\u015f bolmaly d\u00e4l.\n2. G\u00fcnleri\u0148 sany 1-den az \u00fda-da 1,3,5,7,8,10,12 a\u00fdlar \u00fc\u00e7in 31-den k\u00f6p bolmaly d\u00e4l. G\u00fcnleri\u0148 sany 1-den az \u00fda-da 4,6,9,11 a\u00fdlar \u00fc\u00e7in 30-dan k\u00f6p bolmaly d\u00e4l. G\u00fcnleri\u0148 sany 1-den az \u00fda-da 2-nji a\u00fd \u00fc\u00e7in 29-dan k\u00f6p bolmaly d\u00e4l.\n3. A\u00fdlar 1-den az \u00fda-da 12-den k\u00f6p bolmaly d\u00e4l.\n4. Sene formatda bolmaly: aa-gg-yyyy\n\nmeselem: \nvalid_date => True\n\nvalid_date => False\n\nvalid_date => False\n\nvalid_date => True\n\nvalid_date => False\n    \"\"\"\n",
        "canonical_solution":"    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n"
    },
    {
        "prompt":"\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"
    },
    {
        "prompt":"\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5]) \u00e2 -> False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u00e2 -> False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u00e2 -> True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u00e2 -> False\n    '''\n",
        "canonical_solution":"    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef intersection(interval1, interval2):\n    \"\"\"Size\u0148ize iki aralyk beril\u00fd\u00e4r,\n    her aralyk san j\u00fcb\u00fcd\u00fcr. Mysal \u00fc\u00e7in, aralyk = =.\n    Berlen aralyk \u00fdapykdyr, \u00fdagny aralygy ba\u015flangyjy hem so\u0148uny hem \u00f6z i\u00e7ine al\u00fdar.\n    Her aralyk \u00fc\u00e7in ba\u015flangyjy so\u0148undan ki\u00e7i \u00fda-da de\u0148 hasaplan\u00fdar.\n    Sizi\u0148 wezipi\u0148iz bu iki aralygy\u0148 kesi\u015fmesini\u0148 uzynlygyny\u0148 prost\u00fd san bolup-bolma\u00fdandygyna karar bermekdir.\n    Mysal \u00fc\u00e7in, we aralyklaryny\u0148 kesi\u015fmesi bolup,\n    onu\u0148 uzynlygy 1 bolup, bu prost\u00fd san d\u00e4l.\n    Eger kesi\u015fm\u00e4ni\u0148 uzynlygy prost\u00fd san bolsa, \"Hawa\" di\u00fden netij\u00e4ni ga\u00fdtar,\n    bolmasa, \"\u00ddok\" ga\u00fdtar.\n    Eger iki aralyk kesi\u015fme\u00fd\u00e4n bolsa, \"\u00ddok\" ga\u00fdtar.\n\n    [girizme\/\u00e7ykma] mysallar:\n    intersection,) ==> \"\u00ddok\"\n    intersection,) ==> \"\u00ddok\"\n    intersection,) ==> \"Hawa\"\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n"
    },
    {
        "prompt":"\ndef prod_signs(arr):\n    \"\"\"\n    Size integerlerden ybarat arr atly sanaw beril\u00fd\u00e4r we sizden sanawdaky her bir sany\u0148\n    \u00e4he\u0148lerini\u0148 jemi bilen \u00e4hli belgileri\u0148 i\u015faralaryny\u0148 hasylyny\u0148 k\u00f6pelmesini\n    yzyna ga\u00fdtarmagy\u0148yz talap edil\u00fd\u00e4r. Bu i\u015faralar 1, -1 \u00fda-da 0 bilen g\u00f6rkezil\u00fd\u00e4r.\n    Bellik: bo\u015f sanaw \u00fc\u00e7in None ga\u00fdtary\u0148.\n\n    Mysal:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "canonical_solution":"    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minPath(grid, k):\n    \"\"\"\n    Berilen matrisada N hatar we N s\u00fctun bar we pozitiw san k,\n    gridi\u0148 her bir \u00f6\u00fdj\u00fcginde bir baha bardyr. [1, N * N] aralygyndaky her bir\n    san gridi\u0148 \u00f6\u00fdj\u00fcklerinde takyk bir gezek pe\u00fdda bol\u00fdar.\n\n    Gridde k uzynlykdaky i\u0148 ki\u00e7i \u00fdoly tapmaly. Islendik \u00f6\u00fdj\u00fckden ba\u015flap bilersi\u0148iz,\n    we her \u00e4dimde go\u0148\u015fy \u00f6\u00fdj\u00fckleri\u0148 birine ge\u00e7ip bilersi\u0148iz, ba\u015fga\u00e7a a\u00fddylanda,\n    h\u00e4zirki \u00f6\u00fdj\u00fcgi\u0148iz bilen gyrasy bilelikde bolan \u00f6\u00fdj\u00fckleri\u0148 birine ge\u00e7ip bilersi\u0148iz.\n    Di\u00fdmek isle\u00fd\u00e4n zat, k uzynlykdaky \u00fdol k \u00f6\u00fdj\u00fcge takyk baryp g\u00f6rmegi a\u0148lad\u00fdar.\n    Siz gridi\u0148 da\u015fyna \u00e7ykyp BOLMA\u00ddARSY\u0147YZ.\n    A \u00fdoly B \u00fdolundan ki\u00e7i hasaplan\u00fdar, eger\n    A we B \u00fdollaryny\u0148 ge\u00e7\u00fd\u00e4n \u00f6\u00fdj\u00fcklerini\u0148 gymmatlyklaryny\u0148 sanawlaryny\n    tertiple\u015fdirip go\u00fdanymyzda, lst_A leksikografiki ta\u00fddan lst_B-den ki\u00e7i bolsa, ba\u015fga\u00e7a\n    a\u00fddylanda, bolan integer indeks i bar, we lst_A[i] < lst_B[i], we\n    islendik j \u00fc\u00e7in lst_A[j] = lst_B[j] bar.\n    Jogaby\u0148 \u00fc\u00fdtgewsizdigi kepillendiril\u00fd\u00e4r.\n    I\u0148 ki\u00e7i \u00fdolu\u0148 ge\u00e7\u00fd\u00e4n \u00f6\u00fdj\u00fcklerini\u0148 gymmatlyklaryny\u0148 tertipli sanawyny ga\u00fdtary\u0148.\n\n    Mysallar:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
        "canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"
    },
    {
        "prompt":"\ndef tri(n):\n    \"\"\"Hemmeler Fibonacci yzygiderliligini bil\u00fd\u00e4r, ol matematika\u00e7ylar tarapyndan so\u0148ky birn\u00e4\u00e7e asyrda gi\u0148i\u015fle\u00fdin \u00f6wrenildi. \u015ee\u00fdle-de bolsa, adamlary\u0148 bilme\u00fd\u00e4n zady - Tribonacci yzygiderliligi. Tribonacci yzygiderliligi a\u015fakdaky t\u00e4zeden ga\u00fdtalanma bilen kesgitlen\u00fd\u00e4r:\ntri = 3\ntri = 1 + n \/ 2, eger n juft bolsa.\ntri = tri + tri + tri, eger n t\u00e4k bolsa.\nMysal \u00fc\u00e7in:\ntri = 1 + = 2\ntri = 3\ntri = tri + tri + tri\n       = 2 + 3 + 3 = 8 \nSize otrisatel d\u00e4l san n beril\u00fd\u00e4r, siz Tribonacci yzygiderliligini\u0148 ilkinji n + 1 sanyny\u0148 sanawyny yzyna ga\u00fdtarmalysy\u0148yz.\nMysallar:\ntri = [1, 3, 2, 8]\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i \/ 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) \/ 2)\n    return my_tri\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"
    },
    {
        "prompt":"\ndef digits(n):\n    \"\"\"Berlen pozitiw n san \u00fc\u00e7in, tek sanlary\u0148 hasylyny yzyna ga\u00fdtar.\n    \u00c4hli sanlar juft bolsa, 0 yzyna ga\u00fdtary\u0148.\n    Mysal \u00fc\u00e7in:\n    digits == 1\n    digits == 0\n    digits == 15\n    \"\"\"\n",
        "canonical_solution":"    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n"
    },
    {
        "prompt":"\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u00e2 -> True\n    is_nested('[]]]]]]][[[[[]') \u00e2 -> False\n    is_nested('[][]') \u00e2 -> False\n    is_nested('[]') \u00e2 -> False\n    is_nested('[[][]]') \u00e2 -> True\n    is_nested('[[]][[') \u00e2 -> True\n    '''\n",
        "canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"
    },
    {
        "prompt":"\n\ndef sum_squares(lst):\n    \"\"\"Size sanlary\u0148 sanawy beril\u00fd\u00e4r.\n    Berlen sanawdaky sanlary\u0148 kwadratlaryny\u0148 jemi ga\u00fdtarjagy\u0148yz gerek,\n    ilki sanawdaky her bir elementi \u00fdokarky int bilen da\u015fla\u015fdyry\u0148.\n    Mysallar:\n    lst = [1,2,3] \u00fc\u00e7in \u00e7ykdy 14 bolmaly\n    lst = [1,4,9] \u00fc\u00e7in \u00e7ykdy 98 bolmaly\n    lst = [1,3,5,7] \u00fc\u00e7in \u00e7ykdy 84 bolmaly\n    lst = [1.4,4.2,0] \u00fc\u00e7in \u00e7ykdy 29 bolmaly\n    lst = [-2.4,1,1] \u00fc\u00e7in \u00e7ykdy 6 bolmaly\n    \n\n    \"\"\"\n",
        "canonical_solution":"    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u00e2 -> True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"\") \u00e2 -> False \n    '''\n",
        "canonical_solution":" \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef can_arrange(arr):\n    \"\"\"Bir funksi\u00fda d\u00f6redi\u0148, ol bir elementi\u0148 i\u0148 uly indeksini yzyna ga\u00fdtarar, ol \u00f6z\u00fcnden \u00f6\u0148ki elementden uly \u00fda-da de\u0148 d\u00e4l. \u015ee\u00fdle element \u00fdok bolsa, -1 ga\u00fdtarar. Berlen sanawda ga\u00fdtalan\u00fdan bahalar bolmaz.\n\nMysallar:\ncan_arrange = 3\ncan_arrange = -1\n    \"\"\"\n",
        "canonical_solution":"    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n"
    },
    {
        "prompt":"\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"
    },
    {
        "prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    Integerleri, onluk kesirleri \u00fda-da hakyky sanlary a\u0148lad\u00fdan setirleri kabul ed\u00fd\u00e4n we berlen \u00fc\u00fdtge\u00fd\u00e4n g\u00f6rn\u00fc\u015finde has uly \u00fc\u00fdtge\u00fdjini yzyna ga\u00fdtaryp ber\u00fd\u00e4n funksi\u00fda d\u00f6redi\u0148. \nG\u00f6rn\u00fc\u015fler de\u0148 bolsa, None ga\u00fdtary\u0148.\nBellik: Hakyky san setir g\u00f6rn\u00fc\u015finde g\u00f6rkezilse, onluk nokat . \u00fda-da , bolup biler.\n\ncompare_one -> 2.5\ncompare_one -> \"2,3\"\ncompare_one -> \"6\"\ncompare_one -> None\n    \"\"\"\n",
        "canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_equal_to_sum_even(n):\n    \"\"\"Berilen n belgini\u0148 takyk 4 sany o\u0148yn j\u00fcb\u00fct sanlary\u0148 jemi h\u00f6km\u00fcnde \u00fdazyljakdygyny bahalandyrmak\n    Mysal\n    is_equal_to_sum_even == \u00ddalan\n    is_equal_to_sum_even == \u00ddalan\n    is_equal_to_sum_even == Dogry\n    \"\"\"\n",
        "canonical_solution":"    return n%2 == 0 and n >= 8\n",
        "test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"
    },
    {
        "prompt":"\ndef special_factorial(n):\n    \"\"\"Brazili\u00fda faktorialy \u015fe\u00fdle kesgitlen\u00fd\u00e4r:\n    brazilian_factorial = n! *! *! * ... * 1!\n    n > 0 \u00fdagda\u00fdynda\n\n    Mysal \u00fc\u00e7in:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"
    },
    {
        "prompt":"\ndef fix_spaces(text):\n    \"\"\"\n    Berilen tekst setirinde \u00e4hli bo\u015fluklary a\u015fakdan \u00e7yzyklar bilen \u00e7aly\u015fy\u0148, \n    we eger bir setirde 2-den k\u00f6p yzygiderli bo\u015fluk bar bolsa, \n    onda \u00e4hli yzygiderli bo\u015fluklary - bilen \u00e7aly\u015fy\u0148.\n\n    fix_spaces == \"Example\"\n    fix_spaces == \"Example_1\"\n    fix_spaces == \"_Example_2\"\n    fix_spaces == \"_Example-3\"\n    \"\"\"\n",
        "canonical_solution":"    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef file_name_check(file_name):\n    \"\"\"\u015ee\u00fdle funksi\u00fda d\u00f6redi\u0148, ol fa\u00fdly\u0148 adyny g\u00f6rkez\u00fd\u00e4n bir setir al\u00fdar we \n    fa\u00fdly\u0148 ady dogry bolsa 'Hawa', bolmasa '\u00ddok' di\u00fdip ga\u00fdtar\u00fdar.\n    Fa\u00fdly\u0148 ady di\u0148e a\u015fakdaky \u00e4hli \u015fertler \u00fderine \u00fdetirilse dogry hasaplan\u00fdar:\n    - Fa\u00fdly\u0148 adynda \u00fc\u00e7den k\u00f6p san bolmaly d\u00e4l.\n    - Fa\u00fdly\u0148 adynda takyk bir nokat '.' bolmaly.\n    - Nokatdan \u00f6\u0148ki b\u00f6lek bo\u015f bolmaly d\u00e4l we latyn elipbi\u00fdinden ba\u015flanmaly.\n    - Nokatdan so\u0148ky b\u00f6lek \u015fu sanawdan biri bolmaly: ['txt', 'exe', 'dll']\n    Mysallar:\n    file_name_check # => 'Hawa'\n    file_name_check # => '\u00ddok'\n    \"\"\"\n",
        "canonical_solution":"    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('\/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n"
    },
    {
        "prompt":"\n\n\ndef sum_squares(lst):\n    \"\"\"Bu funksi\u00fda sanlary\u0148 sanawyny alar. Sanawdaky \u00e4hli elementler \u00fc\u00e7in, funksi\u00fda, eger elementi\u0148 indeksi 3-e b\u00f6l\u00fcn\u00fd\u00e4n bolsa, san elementini kwadrata \u00e7ykarar we eger elementi\u0148 indeksi 4-e b\u00f6l\u00fcn\u00fd\u00e4n we 3-e b\u00f6l\u00fcnme\u00fd\u00e4n bolsa, san elementini kuby \u00e7ykarar. Funksi\u00fda, indeksi 3-e \u00fda-da 4-e b\u00f6l\u00fcnme\u00fd\u00e4n elementleri \u00fc\u00fdtgetmez. So\u0148 bolsa funksi\u00fda \u00e4hli elementleri\u0148 jemi yzyna ga\u00fdtarar.\n\nMysallar:\nEger lst = [1,2,3] bolsa, netije 6 bolmaly\nEger lst = [] bolsa, netije 0 bolmaly\nEger lst = [-1,-5,2,-1,-5] bolsa, netije -126 bolmaly\n    \"\"\"\n",
        "canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef words_in_sentence(sentence):\n    \"\"\"\n    Sizi\u0148 berlen setir j\u00fcmle g\u00f6rkez\u00fd\u00e4r,\n    j\u00fcmlede k\u00e4bir s\u00f6zler bo\u015fluk bilen b\u00f6l\u00fcnendir,\n    we siz asyl j\u00fcmleden s\u00f6zleri \u00f6z i\u00e7ine al\u00fdan setiri yzyna ga\u00fdtarmaly,\n    olary\u0148 uzynlygy ba\u015flangy\u00e7 sanlar,\n    t\u00e4ze setirde s\u00f6zleri\u0148 tertibi asyl j\u00fcmle bilen birme\u0148ze\u015f bolmaly.\n\n    Mysal1:\n        Girizme: setir = \"Bu bir synag\"\n        \u00c7ykary\u015f: \"bir\"\n\n    Mysal2:\n        Girizme: setir = \"gideli \u00fd\u00fczm\u00e4ge\"\n        \u00c7ykary\u015f: \"go y\u00fczm\u00e4ge\"\n\n    \u00c7\u00e4klendirmeler:\n        * 1 <= setiri\u0148 uzynlygy <= 100\n        * j\u00fcmlede di\u0148e harplar bar\n    \"\"\"\n",
        "canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"
    },
    {
        "prompt":"\ndef simplify(x, n):\n    \"\"\"Sizi\u0148 wezip\u00e4\u0148iz x * n a\u0148latmasyny \u00fd\u00f6neke\u00fdle\u015fdirjek funksi\u00fdany durmu\u015fa ge\u00e7irmekden ybaratdyr. Funksi\u00fda x * n tutu\u015f san bilen netijelen\u00fd\u00e4n bolsa, True, bolmasa False yzy\u0148a ga\u00fdtar\u00fdar. Hem x hem-de n kesir g\u00f6rn\u00fc\u015finde bolan setir \u015fekilindedir we a\u015fakdaky formatda beril\u00fd\u00e4r: <sanla\u00fdjy>\/<b\u00f6l\u00fcji>, bu \u00fderde sanla\u00fdjy hem-de b\u00f6l\u00fcji o\u0148yn tutu\u015f sanlardan ybaratdyr.\n\nSiz x hem-de n-i\u0148 dogry kesirlerdigini we b\u00f6l\u00fcjini\u0148 noldan bolma\u00fdandygyny \u00e7ak edip bilersi\u0148iz.\n\nsimplify = True\nsimplify = False\nsimplify = False\n    \"\"\"\n",
        "canonical_solution":"    a, b = x.split(\"\/\")\n    c, d = n.split(\"\/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator\/denom == int(numerator\/denom)):\n        return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test1'\n    assert candidate(\"1\/6\", \"2\/1\") == False, 'test2'\n    assert candidate(\"5\/1\", \"3\/1\") == True, 'test3'\n    assert candidate(\"7\/10\", \"10\/2\") == False, 'test4'\n    assert candidate(\"2\/10\", \"50\/10\") == True, 'test5'\n    assert candidate(\"7\/2\", \"4\/2\") == True, 'test6'\n    assert candidate(\"11\/6\", \"6\/1\") == True, 'test7'\n    assert candidate(\"2\/3\", \"5\/2\") == False, 'test8'\n    assert candidate(\"5\/2\", \"3\/5\") == False, 'test9'\n    assert candidate(\"2\/4\", \"8\/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2\/4\", \"4\/2\") == True, 'test11'\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test12'\n    assert candidate(\"1\/5\", \"1\/5\") == False, 'test13'\n\n"
    },
    {
        "prompt":"\ndef order_by_points(nums):\n    \"\"\"\n    Berilen sanlary\u0148 sanawyny sanlary\u0148 jemi bo\u00fdun\u00e7a art\u00fdan tertipde tertiple\u00fd\u00e4n funksi\u00fda \u00fdaz. \nBellik: sanlary\u0148 jemi me\u0148ze\u015f bolan \u00fdagda\u00fdynda, olary ba\u015flangy\u00e7 sanawdaky indeksine g\u00f6r\u00e4 tertipl\u00e4\u0148.\n\nMysal \u00fc\u00e7in:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef specialFilter(nums):\n    \"\"\"Sanlary\u0148 sanawyny giri\u015f h\u00f6km\u00fcnde kabul edip, sanawdaky 10-dan uly we sanlary\u0148 hem ba\u015f hem-de so\u0148ky sanlary t\u00e4k bolan elementleri\u0148 sanyny ga\u00fdtar\u00fdan funksi\u00fda \u00fdaz.\n\nMysal \u00fc\u00e7in:\nspecialFilter => 1 \nspecialFilter => 2\n    \"\"\"\n",
        "canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"
    },
    {
        "prompt":"\ndef get_max_triples(n):\n    \"\"\"\n    Sizi\u0148 n di\u00fden pozitiw integeri\u0148iz bar. Sizi\u0148 uzynlygy n bolan integer array a d\u00f6retmeli. \n        Her i \u00fc\u00e7in, a[i] = i * i - i + 1 bolmalydyr. \u00fc\u00e7l\u00fcgini\u0148 sanyny yzyna ga\u00fdtary\u0148, bu \u00fderde i < j < k, \n    we a[i] + a[j] + a[k] 3 bilen b\u00f6l\u00fcn\u00fd\u00e4r.\n\n    Mysal:\n        Input: n = 5\n        Output: 1\n        D\u00fc\u015f\u00fcndiri\u015f: \n        a = [1, 3, 7, 13, 21]\n        \u00ddeke-t\u00e4k dogry \u00fc\u00e7l\u00fck.\n    \"\"\"\n",
        "canonical_solution":"    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n"
    },
    {
        "prompt":"\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"
    },
    {
        "prompt":"\ndef sorted_list_sum(lst):\n    \"\"\"Bir funksi\u00fda \u00fdazyp, bu funksi\u00fda parametr h\u00f6km\u00fcnde setirleri\u0148 sanawyny kabul etsin,\n    uzynlygy tek san bolan setirleri sanawdan pozsun,\n    we netijed\u00e4ki sanawy tertiplenen g\u00f6rn\u00fc\u015fde yzyna ga\u00fdtarsyn.\n    Sanaw hemi\u015fe setirleri\u0148 sanawy bolup, asla sanlary\u0148 massiwy bolmaz,\n    we ga\u00fdtalan\u00fdan setirler bolup biler.\n    Sanawy\u0148 tertibi her bir s\u00f6z\u00fc\u0148 uzynlygy bo\u00fdun\u00e7a \u00fdokarlanma tertibinde bolmaly,\n    we siz sanawy \u015fol d\u00fczg\u00fcne g\u00f6r\u00e4 tertiplemeli.\n    Iki s\u00f6z birme\u0148ze\u015f uzynlykda bolsa, sanawy elipbi\u00fd tertibinde tertiplemeli.\n    Funksi\u00fda tertiplenen setirleri\u0148 sanawyny yzyna ga\u00fdtarmaly.\n    Hemme s\u00f6zleri\u0148 birme\u0148ze\u015f uzynlykda boljakdygyny \u00e7aklap bilersi\u0148iz.\n    Mysal \u00fc\u00e7in:\n    assert list_sort => [\"aa\"]\n    assert list_sort => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "canonical_solution":"    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n"
    },
    {
        "prompt":"\ndef x_or_y(n, x, y):\n    \"\"\"\u00dd\u00f6neke\u00fd programma, eger n sany sadadan bolsa x baha, tersine bolsa y bahasyny yzyna ga\u00fdtarmalydyr.\n\nMysallar:\nx_or_y == 34\nx_or_y == 5\n    \n    \"\"\"\n",
        "canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"
    },
    {
        "prompt":"\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "canonical_solution":"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef compare(game,guess):\n    \"\"\"Men pikirim\u00e7e, hemm\u00e4miz uzak gara\u015fylan wakany\u0148 netijesi ahyry m\u00e4lim bolanda \u00fd\u00fcze \u00e7yk\u00fdan du\u00fdgyny \u00fdadymyzdan \u00e7ykarmarys.\n\u015eol pursatdaky du\u00fdgulary\u0148yzy we pikirleri\u0148izi bell\u00e4p, de\u0148e\u015fdirmek h\u00f6kman pe\u00fddaly bolar.\nSizi\u0148 wezip\u00e4\u0148iz, bir adamy\u0148 birn\u00e4\u00e7e o\u00fdnu\u0148 netijelerini dogry \u00e7aklap bilendigini \u00fda-da bilm\u00e4nligini anyklamakdyr.\nSize de\u0148 uzynlykdaky iki sany bahalar we \u00e7aklamalar massiwleri beril\u00fd\u00e4r, her indeks bir o\u00fdny g\u00f6rkez\u00fd\u00e4r.\nHer \u00e7aklamany\u0148 n\u00e4\u00e7e \u00fdal\u0148y\u015fandygyny g\u00f6rkez\u00fd\u00e4n, \u015fol bir uzynlykdaky massiw d\u00f6retmeli. Eger olar dogry \u00e7aklasalar, bahasy 0 bolar, eger \u00fdal\u0148y\u015f \u00e7aklasalar, \u00e7aklama bilen baha arasyndaky absol\u00fdut tapawut bolar.\n\nmysal:\n\ncompare -> [0,0,0,0,3,3]\ncompare -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "canonical_solution":"    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"Size\u0148ize synp ady we gi\u0148eltmeler sanawy berler.\n    Gi\u0148eltmeler synpa go\u015fma\u00e7a synplary \u00fd\u00fcklemek \u00fc\u00e7in ulanylar. Gi\u0148eltm\u00e4ni\u0148 \n    g\u00fc\u00fd\u00e7liligi a\u015fakdaky \u00fdaly kesgitlen\u00fd\u00e4r: Gi\u0148eltm\u00e4ni\u0148 adyndaky ba\u015f harp \n    san CAP we ki\u00e7i harp san SM h\u00f6km\u00fcnde kesgitlen\u00fd\u00e4r, g\u00fc\u00fd\u00e7lilik CAP - SM \n    fraksi\u00fdasy bilen beril\u00fd\u00e4r. I\u0148 g\u00fc\u00fd\u00e7li gi\u0148eltm\u00e4ni tapmaly we \u015fu formatda \n    satr d\u00f6ndermeli: ClassName.StrongestExtensionName.\n    Eger iki \u00fda-da ondan k\u00f6p gi\u0148eltme de\u0148 g\u00fc\u00fd\u00e7lilige e\u00fde bolsa, sanawda \n    ilkinji bolup gel\u00fd\u00e4n sa\u00fdlanmalydyr.\n    Mysal \u00fc\u00e7in, size \"Slices\" synpy we gi\u0148eltmeler sanawy berilse: \n    ['SErviNGSliCes', 'Cheese', 'StuFfed'], onda 'SErviNGSliCes' i\u0148 g\u00fc\u00fd\u00e7li \n    gi\u0148eltme bolany \u00fc\u00e7in 'Slices.SErviNGSliCes' di\u00fden netij\u00e4 gelmeli (onun \n    g\u00fc\u00fd\u00e7liligi -1).\n    Mysal:\n    Strongest_Extension == 'my_class.AA'\n    \"\"\"\n",
        "canonical_solution":"    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n"
    },
    {
        "prompt":"\ndef cycpattern_check(a , b):\n    \"\"\"Size 2 s\u00f6z beril\u00fd\u00e4r. Ikinji s\u00f6z \u00fda-da onu\u0148 islendik a\u00fdlanmasy birinji s\u00f6z\u00fc\u0148 i\u00e7inde substring bolsa, True ga\u00fddyp bermeli.\n    cycpattern_check => \u00ddalan\n    cycpattern_check => Dogry\n    cycpattern_check => \u00ddalan\n    cycpattern_check => Dogry\n    cycpattern_check => \u00ddalan\n    cycpattern_check => Dogry\n\n    \"\"\"\n",
        "canonical_solution":"    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n"
    },
    {
        "prompt":"\ndef even_odd_count(num):\n    \"\"\"Bir san berilen. Sanlary\u0148 degi\u015flilykda tegik we t\u00e4k sanlaryny\u0148 sanyny g\u00f6rkez\u00fd\u00e4n tuple-ni ga\u00fdtar.\n\n     Mysal:\n        even_odd_count ==>\n        even_odd_count ==>\n    \"\"\"\n",
        "canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef int_to_mini_roman(number):\n    \"\"\"\n    Pozitif san berilse, onu\u0148 rim sanyny\u0148 de\u0148ini setir g\u00f6rn\u00fc\u015finde aly\u0148 we ony ki\u00e7i harplar bilen yzyna ga\u00fdtar\u0148.\n\u00c7\u00e4klendirmeler: 1 <= san <= 1000\n\nMysallar:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "canonical_solution":"    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"
    },
    {
        "prompt":"\ndef find_max(words):\n    \"\"\"Funksi\u00fda \u00fdazyp, ol funksi\u00fda setirleri\u0148 sanawyny kabul ed\u00fd\u00e4r.\n    Sanaw d\u00fcrli s\u00f6zleri \u00f6z i\u00e7ine al\u00fdar. \u00ddeke-t\u00e4k ny\u015fanlary\u0148 i\u0148 k\u00f6p mukdaryny\n    \u00f6z i\u00e7ine al\u00fdan s\u00f6zi ga\u00fdtar. Eger birn\u00e4\u00e7e setirleri\u0148 i\u0148 k\u00f6p mukdary \u00fdeke-t\u00e4k\n    ny\u015fanlary bar bolsa, leksikografiki tertip bo\u00fdun\u00e7a birinji gel\u00fd\u00e4n s\u00f6zi ga\u00fdtar.\n\n    find_max == \"string\"\n    find_max == \"enam\"\n    find_max == \"aaaaaaa\"\n    \"\"\"\n",
        "canonical_solution":"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n"
    },
    {
        "prompt":"\ndef eat(number, need, remaining):\n    \"\"\"\n    Siz a\u00e7 j\u00fc\u00fdje, we siz e\u00fd\u00fd\u00e4m belli bir mukdarda k\u00e4\u015fir i\u00fddi\u0148iz,\n    \u00fd\u00f6ne indi g\u00fcn\u00fc\u0148 naharlaryny tamamlamak \u00fc\u00e7in has k\u00f6p k\u00e4\u015fir i\u00fdmelisi\u0148iz.\n    siz [ naharlary\u0148yzdan so\u0148 i\u00fdlen k\u00e4\u015firleri\u0148 jemi sanyny,\n                                    naharlary\u0148yzdan so\u0148 galan k\u00e4\u015firleri\u0148 sanyny ]\n    yzyna ga\u00fdtarmaly bolarsy\u0148yz, eger galan k\u00e4\u015firler \u00fdeterlik bolmasa, galan k\u00e4\u015firleri\u0148 hemmesini i\u00fdersi\u0148iz, \u00fd\u00f6ne henizem a\u00e7 bolarsy\u0148yz.\n    \n    Mysal:\n    * eat -> [11, 4]\n    * eat -> [12, 1]\n    * eat -> [11, 0]\n    * eat -> [7, 0]\n    \n    \u00dc\u00fdtge\u00fdjiler:\n    @number : san\n        sizi\u0148 i\u00fden k\u00e4\u015firleri\u0148izi\u0148 sany.\n    @need : san\n        sizi\u0148 i\u00fdmeli k\u00e4\u015firleri\u0148izi\u0148 sany.\n    @remaining : san\n        ammarda bar bolan galan k\u00e4\u015firleri\u0148 sany\n    \n    \u00c7\u00e4klendirmeler:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Lezzet aly\u0148 :)\n    \"\"\"\n",
        "canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef do_algebra(operator, operand):\n    \"\"\"\n    Iki sanaw berildi: operator we operand. Birinji sanawda esasy algebra amallary bar, ikinji sanawda bolsa sanlary\u0148 sanawy bar. Berlen iki sanawy ulanmak bilen algebra a\u0148latmasyny d\u00f6redi\u0148 we bu a\u0148latmany\u0148 bahasyny yzyna ga\u00fdtary\u0148.\n\nEsasy algebra amallary:\nGo\u015fma \nAyry\u015f \nK\u00f6pl\u00fck \nGat g\u00f6terim \nEksponenti\u00fdasi\u00fda \n\nMysal:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nnetije = 2 + 3 * 4 - 5\n=> netije = 9\n\nBellik:\n    Operator sanawyny\u0148 uzynlygy operand sanawyny\u0148 uzynlygyndan bir azdyr.\n    Operand sanawy o\u0148yn sanlary\u0148 sanawydyr.\n    Operator sanawy azyndan bir operatora e\u00fde, we operand sanawy azyndan iki operand bar.\n\n    \"\"\"\n",
        "canonical_solution":"    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['\/\/', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(s):\n    \"\"\"Size bir s setiri beril\u00fd\u00e4r.\n    eger s[i] harp bolsa, onu\u0148 registrini ki\u00e7iden ululyga \u00fda-da tersine \u00f6wr\u00fc\u0148,\n    bolmasa ony \u00fc\u00fdtge\u015fikligine go\u00fdu\u0148.\n    Eger setirde hi\u00e7 hili harp \u00fdok bolsa, setiri tersine \u00f6wr\u00fc\u0148.\n    Funksi\u00fda netijelenen setiri yzyna ga\u00fdtarmalydyr.\n    Mysallar\n    solve = \"4321\"\n    solve = \"AB\"\n    solve = \"#A@c\"\n    \"\"\"\n",
        "canonical_solution":"    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef string_to_md5(text):\n    \"\"\"\n    Berilen 'text' setirini\u0148 md5 hash de\u0148lik setirini ga\u00fdtar.\n    Eger 'text' bo\u015f setir bolsa, None ga\u00fdtarylmaly.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef generate_integers(a, b):\n    \"\"\"\n    Iki sany o\u0148yn san a we b berlen \u00fdagda\u00fdynda, a we b arasynda \u00fderle\u015f\u00fd\u00e4n\n    tegst sanlary art\u00fdan tertipde yzyna ga\u00fdtary\u0148.\n\n    Mysal \u00fc\u00e7in:\n    generate_integers => [2, 4, 6, 8]\n    generate_integers => [2, 4, 6, 8]\n    generate_integers => []\n    \"\"\"\n",
        "canonical_solution":"    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    }
]