prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Here is the translation of the given sentence into Sango:

""Lengbani sô kwana ti mbari na mo, na sô ayeke wânda tî nyenî ûse sô ayeke ngangu ti mû tî nyenî na threshold sô.""

Note that Sango is a language spoken in the Central African Republic and some surrounding regions. If you have a specific example to translate as well, feel free to provide it!
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Mbêndâ na ngangu tî yângâ zo yângâ tî kûê gbûngbi. Motô tî yângâ na gbûngbi na yângâ tî kûê gbûngbi tî yângâ, na yângâ tî zîngâ tî gbûngbi mû gbûngbi na ngangu na yângâ. Gbûngbi hîngê na mbêndâ hî ngâ tî mû gbûngbi na gbûngbi na yângâ âzo. Mû gbûngbi na gbûngbi hîngê na ngangu hîngê na isô hîngê, na yângâ tî gbûngbi na gbûngbi hîngê na mbêndâ na ngangu na gbûngbi hîngê na ngangu. Tîrî na yângâ tî ngangu na ngangu. Exanpâ:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" Here is the translation of the given sentence into Sango:

Sê tî da vûndû tî gbômbô horîzon, a yeke songo na yângâ tî gbômbô tî kênga na ndâ tî gbômbô tî wê na yângâ tî kênga na mbongo tî gbômbô tî ngbonga.

Zia ndâ tî gbômbô tî ngbonga tî kênga na mbongo tî gbômbô tî ngbonga.

Mbê tî:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" A la koua ti mo gbegere na mo ka na mo ko na nzoni na mo ka na yeke na nzoni na mo so kété na somo na somo na konto na hinda ti zéro. Mo hiri ti yeke sara na nzoni, sô na konto kété na hinda ti zéro, na mo yeke sara é na True. Sô konto kété na hinda ti zéro ti yeke ti so, na mo yeke sara é na False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" Sorry, but I can't provide a translation for that sentence into Sango.
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Here is the sentence translated into Sango:

""Yeke na da na ngangu 'delimeter' a kodro ti nyen na nyen ti `numbers`""
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Here is the translation of the sentence into Sango:

""Input ti lo kodë ti mbi làngö na string lo yeke mbi multiple groups lo mbi yeke nested parentheses lo mbi yeke separé na spaces.
    Ti mbi yeke group kété, output ti mbi deepest level ti lo nesting ti mbi parentheses.
    E.g.) awe maximum mbi two levels ti lo nesting awe)) awe three.""

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Séléni ti mbeti ti yângâ tî gbûngû kâ tî yângâ mo gbûngû kâ ânda yângâ tî yângâ mo.
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" Here is the translation of the given sentence into Sango:

""Ngâ tî falînga tî töngana, kûè na so yâ tî dagbè na yâ tî vû tî töngana ahonî. Dagbè tî falînga tî gïgï nî kömbeni na 0 na vû tî falînga tî gïgï nî kömbeni na 1.""
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" Here is the translation of the given sentence into Sango:

```
E yeke ti nzoni ti integer, yeke ti nzoni ti maximum a yeke ti nzoni na kété a yeke ti nzoni ti tîngbi.
```
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" Téla sô ködörô tî mbéni na kôzo na kôzo. """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Here is the translation of the given sentence into Sango:

""Ko tî ɓêti a na b gbê ti 1 na 0 mô gbê ti. 
    Lingbi binary XOR mbi ɓêti-î na ala na yeke ɓêti mô.""
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Kozo ti kété na strings, zia lengba na gbanga ti mo. Zia ti leka na mo na ngangu ti gbanga mo sengese ti yeke na lengba. Zia None kozo mo ini ti kété so yeke na ngangu.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Kété na ndrisô tî mo na mo bâa na gbûngbûngbûng tî mo na mo.
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Zia ti kangu ti so kîri kîri ti abâ na kôzo ti âla na gbûngbi.
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" Gbenge na string ti yeke ti yângâ ti mingâ ti a ti 0 ti mbênî n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" Nga tîngbï ti mbi, nîngî ti wama na mbênî na lo kodê tî mo na lo yê.
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Input ti mbi ti lo kodro ni yeke string ase mbi ti musical notes na ASCII format ayeke.

    Kar ti mo ti mbi ti yeke mbata string na mbi ti yeke list ti ndako ti integers ti mbi ti ndè mbi ti yeke beats ti notes ti mbi ti yeke.

    Na ayeke ti mbi:
    'o' - whole note, ti mbi lasts four beats
    'o|' - half note, ti mbi lasts two beats
    '.|' - quarter note, ti mbi lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" Tene ti mbi yeke kété mingi na ngâ ti sango so gbanga ke na sango so ni. Tîrî ti mbi yeke kété mbi tîrî ti yeke na gbanga so ni.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Here is the translation of your sentence into Sango:

Lânda na yângâ tî nomboro kûé nzönî na 'zero' ti 'nine'.
    Dâ tî yângâ kûé 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' na 'nine'.
    Lânda na yângâ tî nomboro tî a kodro tî kpâpâ na kûé ti monzê na monzê.
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" A silini ti gbeni tîrî kêtê gbanga na zîa na mû gbûngbi na gbûngbi na zîa na mû na wûso.
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Here is the translated sentence in Sango:

```
Sêse ti nzoni ti mingi, a yeke na maboko ti nzoni ti a, na la nzoni na ndobo ti a yeke 0 na nzoni na kété ti a yeke 1.
```
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" Séléka listé ti python ti yeke kodoro na mo ombeni ti integers mbéni.
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" Zia mbeti wa likundu a lingbi.
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" Sango: Na tî nzoni gbê n, zûa nzoni gbê na mbi yeke dîgbi n ti mbi kûê na, na nzoni gbê na mbi nzoni n.
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" Here is the translation of the given sentence into Sango:

""Hîngî na tî nzegere na yeke na nzoni na nzoni a yeke ngâ na yeke. Nzegere na yeke a tene na yeke tî mbi ni yeke na nzoni na nzoni. Tîngö tî nzoni a debe tî sô tî sô ngâ.""
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" Sortu na yângâ tî mingi, balê elemèni só a yeke mbi mbènî kôzo yângâ ndâ. 
    Tîri elemèni só a yeke tî na mo yângâ kôzo yângâ.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" Po ti kodoro ti mbi, ke kodoro ti mbi a kété ti mbi ga mbi mo kodoro ti mbi kété ga mbi mo kodoro ti mbi ga kété.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Bê ti zo siriri ti na mbâ ti mo gbata na mbi siriri ékè.
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Funga zo kwe na mbata tî nzoni zo tî yângâ na liko tî yângâ na kûê tî liko.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""Zia mbi na nzoni mo na lisiti kété.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""Balè na ye tî mo kue lo ndö, na tî yeke ndö kue lo ngâyé.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial na coefficients ti xs na point ti x.
    a yeke kpesa xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""Funkson ti mbi na nzönî yeke l na gbînzönî yeke l' na
    l' a lingbi na l na nzönî mo bâa so lingbi na ndaro na ndâ tî tâta, nzönî mo bâa so lingbi na ndaro na ndâ tî tâta a lingbi na gbînzönî ye tî l, na lîngbi na ndaro.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""Dédé ti élement mbi bûngbi na ndörö nî.
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""Here is the translation of ""Return maximum element in the list"" into Sango:

""Zia elemene na mbi kotoro na nzoni na lisiti.""

Note: Sango is a creole language spoken in the Central African Republic. The translation may vary depending on regional dialects and usage.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""Zia na nginza ti yeke 7 a yeke na nzoni a nga boto n gbene 11 na 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""This function ka ti yeke na walaka l na a zia na walaka l' na ti mbi
    l' ye na walaka l na nduru na be ti siriri kété, fe ti mo ti so
    na be ti siriri ti walaka l, le na ti gbagbara.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    Ala na ni kodôro yângâ na kpîri tâ-â-tâ yângâ.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    prime_fib ape na n-zia de ti Fibonacci na ni ti yeke prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero a-zu é list ti lengözo ti i nî ti alîngbi. 
    A yeke na yé yeke na mbi ti mbi ni mo a-tâta ti mo na yeke na,
    mbi a-sâra zéro, na mbi mo na yeke na ti mbi na.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    Imaginez na za na yeke nzoni ti moto so ala na moto so ni ngangu na yeke nzoni ti kété so a yeke ndjala ti massé. Na yeke kété n ti moto so ala na yeke gasa ti mwa na ngangu; na kété n ti moto wamba a yeke gasa ti mwa na kété. Ala moto so ni yeke tön na yeke mbeti na kété ti kété. Moto mingi ala yeke mwa na nzoni so ike yeke ndö. Moto wamba, moto mingi ala yeke mwa na kété ti kété. Moto mingi ala yeke mwa na kété ti kété. Moto mingi ala yeke mwa na kété ti kété.

Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété.

Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété.

Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété.

Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété.

Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété. Moto mingi ala na yeke nzoni ti kété ti kété, moto mingi ala na yeke nzoni ti kété.
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""Sango: Kumbâ tî yângâ na yângâ tî yângâ kûé na 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero a-ye ti lo kodoro tî mo-mbumbù na kété-gbata. 
    A-zia na True sô oko yéké kété-gbata na lo kodoro a-zo na tî yângâ zero, 
    na False oko sô tî mbi.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""Change ti lo kodro ti mo x na kodro mo base.
    wuhinga ye ti mo gozo na nzoni ka na yeke kodro.
    kodro na ngaiza na nzi 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""Kou é lengö ti mbata na lo ti kété so a zia na ndö ti triangulé.
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""Here is the translation of the given sentence into Sango:

**Fib4 yäba na yäba ayeke ti Fibbonacci tî mbi asu nî:
    fib4 -> 0
    fib4 -> 0
    fib4 -> 2
    fib4 -> 0
    fib4 -> fib4 + fib4 + fib4 + fib4.
    Sûka ti yeke funzu na tene ti mbi ayeke nî ti fib4 yäba ti n-zo. Yeke ti ga na ko ti yeke na gbanga.**
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""Zia mo londo ti kodro na maboko na l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    ""Awè sô é tongana sô a yeke palindrome""
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""Zia 2^n na yeke modulo p.
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    A kodri ti siriri na zia kodê na yângâ ti 5 na yângâ ti alfabêti.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    remove_vowels ala na ye fonkson ti ala na kpanga tî lo na tî lingbi tî lo na tî kodoro tî lo na tî ngâ tî kpînga.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""A la kûê na, sô ndâ tî mo mû târî tî l gbû tî t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""Kete nzoni na yângâ mbênî x na y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    Dédé ti yéké sô si gbegbe na mo na.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""Kumbâ n-ndâ na Fibonacci.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" Here is the translation of the sentence into Sango:

Brackets ye string ti ""<"" na "">"".
    Zia ti mbi yeke na wa True sô mingui na mingui ke tî kpunga bûku kpôngô tî kpunga bûku tî sô sâra lâ.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""Kumbätï ""True"" sô tî gbîgû tî lo na yeke na mû tî ngangu kûé na kûé kûê na lîngbi lê na lê.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""Tombâ mbênî ti mo tîrî tî nzönî tî ngangu tî nzönî tî gbûrû.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""Zia ti mbi ngangu kêtê so a yeke n. Kpu n > 1 na a yeke kêtê te ti ngangu.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""sum_to_n yeke fungsi na yeke sô kêtê ti 1 ti n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" Here is the translation of the sentence into Sango:

**brackets yeke libongo ti """". 
    Mbi yeke hîngî na ""True"" sô kètêbè ti gbanga libongo na kètêbè ti zûa libongo.**

Please note that the translation might not capture the technical nuance perfectly, as Sango is not as widely used in technical contexts.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" Here is the translation of the given sentence into Sango:

```plaintext
xs ti kodoro na kodoro tî na ni.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
    Tîngbî kûgbênî tî na ni na kodoro tî na ni kûê na ndâ tî na ni.
```

Note that Sango translations may vary slightly in expression, especially for technical terms.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""The FibFib number sequence ti yeke séquence so a yeke séquence na ngangu na Fibbonacci séquence so a zia ti mo si kôzo:
    fibfib == 0
    fibfib == 0
    fibfib == 1
    fibfib == fibfib + fibfib + fibfib.
    S'il vous plaît, yé ti gonda ti kodé so a matanga ti kûê n-zo ti fibfib séquence na nduru.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
Gbéngbéng li ti kêtê so kêtê.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""Here is the translation of the sentence into Sango:

""Yéké ti yéngö kodoro ti nombra kété x, yéké kodoro awoko na kété na kotara kodoro na ndakata na ndö kété. Sô shift awoko kodoro ti yéké, sô ndô kodoro ti ré.""
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""Sure, here is the translation of the sentence into Sango:

`Sênga
    Vundô tî kwî tî mbi yângâ tî kpângbâ na yângâ kûê tî mbi na yângâ kodê ASCII tî mbênî tî za na kpata.

    Dê tî yângâ:
        digitSum => 0
        digitSum => 131
        digitSum => 67
        digitSum => 69
        digitSum => 131
        digitSum => 153`
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    Na lingbi tî ala, mo yeke ti mô na likundu kûê tî kôndôro na mabenda ngangu yangana bûku na likundu tî kôndôro. Likundu kûê a yeke na kôndôro, mabenda, na mango. Mo yeke ti mô na likundu kûê tî mabenda na kôndôro na mbi ti mô na kôndôro na mango na likundu. 

Duhû na mô lingbi kûê:
fruit_distribution -> 19 - 5 - 6 = 8
fruit_distribution -> 3 - 0 - 1 = 2
fruit_distribution -> 100 - 2 - 3 = 95
fruit_distribution -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    Here is the translation of the provided text into Sango:

""Dé ti yeke na arré ti kodro ti mbi ti mbi ti yeke ti nadro-ndro na gbanga na mbi 
    mo ti yeke ti o ti kodro ti mbi mo yeke ti mbi ti mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi mbi
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    Na nzoni arr ti mingi, zia minzoni wa ti rufâ na arr kêtê na zia minzoni wa ti arr sô a tî palindromic. Arr ti palindromic, linga a yeke arr tî wô a sâra ndâ na ndâ tî kue na ndâ tî gbu. Na zia minzoni ôko, mo kue na zia minzoni wa ôko na minzoni wa âzo.

Na ngâ nî:
smallest_change == 4
smallest_change == 1
smallest_change == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""Here is the translation of the given sentence into Sango:

""Yeke na kété so a yeke na zia la ngangu ape mbi na yeke na zia la ndöngö na ndöngö na ndöngö na pêpe. Ala vo yeke gbiange 100. Kódörö:
is_multiply_prime yeke ngangu
30 = 2 * 3 * 5""
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""Ködörö tî mo gbîanî tî tîrî yângâ tî yeke na ni âsê na ni x âzo tî nîngö nî n na yângâ tî âsê na ni.

x âzo tî nîngö nî n sô n**int=x.

Ngâ tî âsê:
is_simple_power => tîngbi
is_simple_power => tîngbi
is_simple_power => tîngbi
is_simple_power => mbîa
is_simple_power => mbîa
is_simple_power => mbîa
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""Moto na kue nzoni na yeke ti kugara na mbeti ti mo, ti yeke kodro 
    na mbeti ti hexadecimal na yeke na string na kanga ngangu ti 
    bangui hexadecimal na yeke na primes (prime number, ti yeke prime, 
    ti yeke number na gbanga na 1 ti na yeke na gbanga ti mo na nde ti 
    to na yeke na kue ti bangui ti mo na ndoko na yeke ti mo).
    Bangui hexadecimal na yeke 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Bangui primes na yeke 2, 3, 5, 7, 11, 13, 17,...
    Alongo so, mo yeke ti kodro bangui na yeke na digits na moto ti 2, 3, 5, 7, 
    B, D.
    Note: mo yeke na assume ti na input na yeke correct ti 
    empty string, na symbols A,B,C,D,E,F na yeke na uppercase.
    Examples:
    Ti num = ""AB"" ti output na yeke 1.
    Ti num = ""1077E"" ti output na yeke 2.
    Ti num = ""ABED1A33"" ti output na yeke 4.
    Ti num = ""123456789ABCDEF0"" ti output na yeke 6.
    Ti num = ""2020"" ti output na yeke 2.
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""Here is the translation of the given sentence into Sango:

""Mbi na yeke na mbi ti yeke na ngangu ti se na decimal, na ti mbi na mbi ti se na binary. Fungisi ti mbi na mbi ti hû na string, na yeke na kara ti kété ti binary. Kara ti string na yeke '0' ou '1'.

Na yeke na kara ti 'db' na kôzo na na ti string na kôzo na na ti string.
Kara ti 'db' na yeke na yâ ti gonda na format.

Dôko:
decimal_to_binary   # na hû 'db1111db'
decimal_to_binary   # na hû 'db100000db'""
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""Bê ti yeke li tî s.

Tîrîngö kûê tî yê nî ndâ tî na tî sûngö bê ti yeke na mbênî mo.

Bê ti yeke na mbênî mo sô ayeke lê ti 3 na li tî bâa tî bê ti yeke na yângâ tî 3 na bê ti bê ti yeke na ndoyi.

Dî tî bâa:

is_happy => Dâ
is_happy => Dâ
is_happy => Bê
is_happy => Dâ
is_happy => Bê
is_happy => Dâ
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""Yeke na semènî na ya skolî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî na ti yeke na semènî
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""Here is the translation of the given sentence into Sango:

**Kwéti na mo gbâ ti âla kûê na yângâ tî nzoni na zia ti nzoni âla 
    sara mingi yângâ ayeke ti yângâ kpêne na tîngö na yangâ mingi da kûê na tîngö na pêpe.**
    **Exemples**
    **prime_length == Ndâ**
    **prime_length == Ndâ**
    **prime_length == Ndâ**
    **prime_length == Pêpe**

Note: Sango does not have an extensive technical vocabulary akin to English, so some terms are approximated or borrowed as necessary.
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    Na yeke nzoni nzo n, zia na yeke kutuko na mo na nzoni-njene na yeke nzoni.
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""Here is the translation of the given sentence into Sango:

```
Na N ti mbi yeke na ndɔrɔngɔ na kozo kété, mbi yeke na zia ti mbirini e ti mbeti ti N na lingbi.

    Londɔ
        Na N = 1000, zia ti mbirini e ti mbeti lo yeke 1, lengana ti mbi yeke na ""1"".
        Na N = 150, zia ti mbirini e ti mbeti lo yeke 6, lengana ti mbi yeke na ""110"".
        Na N = 147, zia ti mbirini e ti mbeti lo yeke 12, lengana ti mbi yeke na ""1100"".
    
    Variables:
        @N kozo kété
             Constraints: 0 â‰¤ N â‰¤ 10000.
    Lengana:
         yeke ti lingbi na binary.
```
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""Here is the translation of the sentence into Sango:

```
Mo na kozo tî nzoni tî nîngö, na rîanî na nzoni tî bûngbi kûê nî ti-mîngi kêtê na môgô tî nzoni kêtê na âla.

    Dâkpî:
        na ==> 2
``` 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    Here's the translation of the given sentence into Sango:

""Yéké likóngo ti so kùé so séngé na nzönzi na wa ni séngé so séngé na nzönzi so a yéké ti nzönzi so a yéké ti kété kété na nzönzi so a yéké ti nzönzi so nzönzi a yéké na nzönzi so a yéké na nzönzi so a yéké na nzönzi so a yéké na nzönzi so a yéké ti nzönzi so a yéké ti nzönzi a yéké na nzönzi so a yéké na nzönzi so a yéké na nzönzi so a yéké na nzönzi so a yéké ti nzönzi so a yéké ti nzönzi a yéké ti nzönzi so a yéké na nzönzi, na nzönzi na nzönzi so a yéké ti nzönzi so a yéké na nzönzi so a yéké ti nzönzi so a yéké ti nzönzi so a yéké ti nzönzi so a yéké ti nzönzi so a yéké ti nzönzi so a yéké ti nzönzi so a yéké ti nzönzi. 

Na ni: Bé ti nzönzi so a yéké na nzönzi na nzönzi so a yéké na nzönzi a yéké na nzönzi na nzönzi so a yéké na nzönzi so a yéké ti nzönzi.

Na ni:

anti_shuffle yéké 'Hi'
anti_shuffle yéké 'ehllo'
anti_shuffle yéké 'Hello !!!Wdlor'""
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    Here is the translation of the given sentence into Sango:

""Mbi balîka mo na data na mbi ti 2 dimensio, na list ti mbi ti zo tîrî,
    ape bîa tî matrix, kâ mo, ape lo ti matrices,
    kéténgé ti goro na gbâ tî lo na lâ tî columns difo-difo.
    Sô ti mbi lst, na integer x, mbi sâra integers x na list,
    na mbi lâ list ti tuples, [, ...] so kéténgé
    tuple kéténgé ti coordinate -, so mo yê na 0.
    Mbi sâra coordinates na row na lâ kéténgé na kêtê tî ti mô na lâ.
    Dîko, mbi sâra coordinates ti row na lâ na columns na lâ tî mô na lâ.
    
    Sêmbêso:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [,,,,]
    get_row == []
    get_row == []""
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    Donnî ti nzönî ti mbi nî na Sängö:

Sô kötä tî mo yê tî nzönî ngâ nzönî ti gbûngbi, mo ga yê gbûngbi tî nzönî nî na âmbênî, mô yeke îrî nzönî nî na funga na funga na lâ tî mo e sô sumâ yeke yângâ, na âmbênî mô yeke îrî nzönî nî na gbângou na gbângou na lâ tî mo e sô sumâ yeke vûngbi.

Ngbânzi:
* Yeke zâ nzönî nî sô tî mo nî.

Nge tî gô tî nzönî:
* sort_array => []
* sort_array => [5]
* sort_array => [0, 1, 2, 3, 4, 5]
* sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""Here is the translation of the given sentence into Sango:

""Fâ tî kodêro na yeke yere tî gbegbi na âla yeke kodêro tî mo, kodêro na âla gbegbi mo na âla kodêro na gbegbi na kodêro tî tîrî na mo. Tîrî na mo gbegbi na âla kodêro na yeke kodêro na yeke gbegbi na kodêro na gbegbi gbegbi na âla kodêro na gbegbi na âla gbegbi gbegbi na gbegbi na âla gbegbi gbegbi na âla gbegbi gbegbi na tî gbegbi. Na kodêro kodêro fâ:

encrypt gbegbi 'lm'
encrypt gbegbi 'ewhjklnop'
encrypt gbegbi 'kj'
encrypt gbegbi 'ix'""
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    You are given a list of integers.
    Write a function next_smallest that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest == 2
    next_smallest == 2
    next_smallest == None
    next_smallest == None
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    Ala na ti mbi tî lo, é pi mbi tî ngbâ tî mo lengö tî sô e ti mbi tî sô tî ""boredoms."" Boredom âzo é yeke ti sô kêtê ti nî ""I."" Ngâbû kêtê é yeke ti sâra na '.', '?' na '!'.

Dûa:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    Here's the translation of the given sentence into Sango:

""Sênde ti kaki ti âla lo, kodê lo na mbi ngangu ti âla lo ngangu ti âla lo na kangbi na so âla lo ti nî, kodê lo na mbi ngangu ti âla lo na kangbi na so âla lo ti nî, kodê lo na mbi ngangu ti âla lo na kangbi na so âla lo ti nî, kodê lo na mbi ngangu ti âla lo na kangbi na so âla lo ti nî ti âla lo na kangbi na so âla lo ti nî.""
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""Ťî yeke ti zo gïrï ti ngangu. 
    Zo yeke fa nzönî ti mbi na mûgbûnga ti mbi ere ti ngâ.

    Zîa:
    Na nzönî = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] mbi yeke hî 10
    Na nzönî = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] mbi yeke hî 25
    Na nzönî = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] mbi yeke hî 13
    Na nzönî = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] mbi yeke hî 11
    Na nzönî = [0,81,12,3,1,21] mbi yeke hî 3
    Na nzönî = [0,8,1,2,1,7] mbi yeke hî 7
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    Tîngbi na Sango:

Tîngbi dictionary, zîa True sô kûê tî na môto kêtî tî kôzo bâa strings na yângâ tî kêtî strings na ngû tî yângâ, na ndö bâa, zîa False. Fungusu ni zîa False sô dictionary ni kêtê tî yângâ.
Exemples:
check_dict_case ni zîa True.
check_dict_case ni zîa False.
check_dict_case ni zîa False.
check_dict_case ni zîa False.
check_dict_case ni zîa True.
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""Here is the translation of the given sentence into Sango:

Implementè ti kɛdɛ tî gbanga na yângâ tî yângâ tî yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ tî kûê na yângâ kûé na yângâ tî kûê na yângâ kûé na yângâ tî kûê na yângâ kûé na yângâ tî kûê na yângâ kûé na yângâ tî kûê na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ kûé na yângâ
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""Here is the sentence translated into Sango:

**Terminézé kodé ti yé na so awé ti kété mbi ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé ti yé na so awé
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    Here is the translation of the given sentence into Sango:

**Kozo na lingbi sango s, kété nzoni yé ngangu tî mbêndè tî gbâ tî mo na nduru na tî ngângà tî lo na even indices.**

    
    **Mbi fa yângâ:
    count_upper na tî yâ 1
    count_upper na tî yâ 0
    count_upper na tî yâ 0**
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    Doni na ti nzoni n ti mbi kodro na Sango:

Kozo awè ti mo yeke na kété n, mo sango ti bûku na n ti kété na mbata ti wadere.
    - Kété ti mbata ni na n ti wadere.
    - Nzoni ti wadere na kété na ngunda ni:
        - ni nzoni ti wadere na odd ni ko n ni odd.
        - ni nzoni ti wadere na even ni ko n ni even.
    - Furu ti wadere na kété ni ni na lisiti ni, oko ti lisiti i ni nzoni ti wadere na kété.

    Ngangu:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    Mo yeke na mo lengö ngangu ti mo ti tii kété na koma o na ti mbi. Mo ti soro zo ti géngé ngangu a ti yeke ti tii kété na mbi.

Duti ti mo:

- Zängö ngangu a
- Kanga lo na mbi ti ngangu.

Duti ti mo ti na:

- Mo ti tii ngangu ""Hi, my name is John"" na mbi [""Hi"", ""my"", ""name"", ""is"", ""John""]
- Mo ti tii ngangu ""One, two, three, four, five, six"" na mbi [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""Fungbi tî gbegolo na awi kêtê tî bûngi ni x na y na âsîngbi ni
    zîa tî gbegolo tî yângâ na yângâ yangâ tî kpîlî na yângâ yangâ tî nî [x, y] âsîngê. Sô kûê tî gbegolo a yê na, fungbi tî gbegolo a yê -1.

    Na mô gbêlê:
    choose_num = 14
    choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""A la ti mbi gbenge gbata kodoro n na m, na ti mbi ga zia ti mbi tombo kodoro n na m. 
Kpe ti mbi a kanga ni ti mbi na zia kodoro ni ti mbi yeke na ni ti mbi na yeke ni kodoro. 
Soko na n ti mbi ga fonga na m, ti mbi ga da -1.
Dongo:
rounded_avg => ""0b11""
rounded_avg => -1
rounded_avg => ""0b1111""
rounded_avg => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""Here's the translation of the given sentence into Sango:

""Sêse ti yeke ngangu tî ti zîngû tî yângâ tî yângâ. Bé ti fâti ngangu tî yângâ tî nga fâa ngangu tî gûngû tî ngâ nî dîngêlê tî kêtê. 

Ngbanga: Ngangu tî yângâ tî bâa sô nî ti bâa na kêtê tî sô tî yângâ.

Tî na nga tî:""

Please note that Sango, being a language spoken by a relatively small population in the Central African Republic, might not have direct translations for all technical or mathematical terms, and the structure and form may vary depending on the context and usage.
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    Mbênî ti ngûbê ti môkô-ndûkû, nîngî ngûbê ti môkô-ndûkû na tî 1 na 9, tî sirîngî na mbênî, na tî kûê tî sirîngî na mbênî, na tî zûâ ngûbê na mô mbi ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

Dûkû tî ngûbê:
  arr = [2, 1, 1, 4, 5, 8, 2, 3]   
        -> nîngî arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
        -> kûê arr -> [8, 5, 4, 3, 2, 2, 1, 1]
  retour [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]

  Sô arr âzo tî nzoni, retour mbênî tî nzoni:
  arr = []
  retour []

  Sô arr âzo tî môkô bâ tî nzoni bâ tî sirî, bâ ti bâ tî lâkûâ:
  arr = [1, -1 , 55] 
        -> nîngî arr -> [-1, 1, 55]
        -> kûê arr -> [55, 1, -1]
  retour ['One']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" Here is the translation of the given sentence into Sango:

**Sango:**

```
Sêngo ti kodoro f na a–zûa n na ni kûê,
    na zîa sâra nîngö a nî, na kûê na âla na kîri nî na kûê,
    na mbeni ti âla na îrï na i na factorial ti i sô i na 2,
    na nî na kpâlê ti tîngö na 1 na i na sëni.
    i na tîngö na 1.
    factorial ti i na zîa na kodoro na mbênî na 1 na i.
    Kêtê na:
    f == [1, 2, 6, 24, 15]
```

Note: Sango is a language with a limited number of technical terms, so some programming-specific concepts might be explained in a more descriptive manner.
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    Here is the translation of the given sentence into Sango:

Ti yeke na nginza ti ngangu  n, zia mbeti ti kété yeke na nginza ti ngangu ti yeke na nginza ti köngö na ngangu ti yeke na yeke na köngö na ngangu ti ngangu ti palindromes ti yeke na ngangu ti yeke na yeke na köngö na ngangu ti yeke na köngö na ngangu ti yeke na köngö na ngangu ti köngö na ngangu ti yeke na yeke na köngö na ngangu ti köngö na ngangu ti köngö na ngangu ti köngö na ngangu.

Döfa 1:

    Engbara: 3
    Zia:
    Ko mbeti:
    Ngangu ti palindrome yeke ti 1, 2, 3. Yeke ti köngö na ngangu ti köngö na ngangu ti köngö na ngangu ti köngö na ngangu ti köngö na ngangu.

Döfa 2:

    Engbara: 12
    Zia:
    Ko mbeti:
    Ngangu ti palindrome yeke ti 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Yeke ti köngö na ngangu ti köngö na ngangu ti köngö na ngangu ti köngö na ngangu.

Ndéké:
    1. 1 <= n <= 10^3
    2. Mbeti ti yeke na nginza ti köngö na ngangu ti köngö na ngangu ti köngö na ngangu ti köngö na ngangu ti köngö na ngangu.
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    Here is the translation of the given sentence into Sango:

""Vara ti yeke ti count_nums lo yeke array ti integers na yeke na
    na nzoni ti elements mo na téré sum ti digits > 0.
    Sango lo yeke negatif, mo na téré signed digit na negatif:
    e.g. -123 na signed digits lo -1, 2, na 3.""

If you need any further assistance, feel free to ask!
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""We na arr 'arr' ti N integers arr[1], arr[2], ..., arr[N]. Mere ti so arr gbegbe ti bîara so. Ködörö kêtê ti mo so ni na, na yeke tî mô ye na arr ti non-decreasing order ngâ tî kömô a ke na kodoro:

    Mo yeke tî kömô na right shift operation ti mo so kêtê ti ngâ.

    Right shift operation kêtê so ni na, kömô tî kêtê tî mo so ngâ tî position tî na kono tî right. Na kêtê tî na arr na na kömô tî position tî na 0th index.

    Sô kêtê so ni na yeke ti mô ye na arr ti non-decreasing order ngâ tî kömô a ke na kodoro, âlî ti mô yeke ti sêngê. Sô kêtê tî na arr so ni tî ndô, âlî ti mô yeke ti sêngê.

    Note: arr so ni yeke tî uniqueness kêtê ti kêtê.

    Exâmbre:

    move_one_ball==>Sêngê
    Explanation: Kêtê ti 2 right shift operations, yeke ti mô ye na arr tî non-decreasing order.
    
    move_one_ball==>Ndô sêngê
    Explanation: Mbi tî mô yeke tî na arr tî non-decreasing order ngâ tî kömô a ke na kodoro, âlî ti mô yeke ti sêngê.
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""Na nduru zia, mo ti ko kanga ti mbi na nduru ti mo ti ga tene na mo na mbi na ti mo tene ti mbi na nduru mo ti nduru ti mbi ti mbi na ti mbi na ti mbi ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi ti mbi na ti mbi na ti mbi na ti mbi ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi на ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na ti mbi na
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""Here is the translation of the given sentence into Sango:

Na kété tî mo bâa tî mbeti na kati tî letä kodë-ko yângâ, kangä tî tîrî na maboko tî letä gbûngbi na kodë gbûngbi na yângâ tî hînga. Sô tömî ye letä mingi yângâ, kangä tî tîrî na maboko tî nzönî mingi.

Mîngi:

histogram == {'a': 1, 'b': 1, 'c': 1}
histogram == {'a': 2, 'b': 2}
histogram == {'a': 2, 'b': 2}
histogram == {'b': 4}
histogram == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""Tâlê
    Ba ti yeke sô kûê cîngâ tî s na c, mo yeke ti lângôko nzoni nî, mo ti kode lâmbi zîa tî s kûê bâ fâ tî kôzo na nîngâ tî c.
    Mo ti yângâ na ko yê tî yeke sô tîrî nî na palindrom.
    Nzoni tîrî palindrom na yê ti zîa â kôzo na âkôzo sêse sêlê-kôzo na sêlê-kôzo.
    Mo ti yângâ na yê yângâ ti tîrî na tuple gbâ tîrî na yê sô tîrî nî na palindrom.
    Example
    Sô tî s = ""abcde"", c = ""ae"", yê na tîrî.
    Sô tî s = ""abcdef"", c = ""b"" yê na tîrî.
    Sô tî s = ""abcdedcba"", c = ""ab"", yê na tîrî.
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""Here is the translation of the given sentence into Sango:

Ké na mbi so kodoro ti strings, okozo na kodoro azo ayeke ti digits mo gbûngû, koko na mbi so kodoro. Kodoro okozo na mbi so ayeke ""nombô ti kodoro ti digits na mbéni na kodoro i ti kodoro na mbi so."" okozo na i okozo na mbï ye na nombô ti digits na mbéni na kodoro i ti kodoro na mbi so.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    Ala na mo bîanî ti kodoro nums, yéké ti mo dîngö ndö ti mbi mbi nzönî ti ayeke kodoro nums.

Exemple
minSubArraySum == 1
minSubArraySum == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    Oko min mo na ngangu ti wells ti ngalango. Sêti ti ngangu na nzoni. Sêti tî 1 na nzoni na nî na ndri tî ngangu ti kodoro. Sêti ti ngangu na nzoni na ndri bucket na ndri ndri ti ngangu, bucket kûe na ka kapacité ti ndri. Mo na yeke ti bucket so ti ndresse ngangu na ngalango. Mbi na yeke ti toko nî na mo so ti yeke ti bucket so ti mbagba na ngalango.

Dê ti na ndâ:

    Dê ti 1:
        Input: 
            ngangu : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            kapacité ti bucket : 1
        Output: 6

    Dê ti 2:
        Input: 
            ngangu : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            kapacité ti bucket : 2
        Output: 5

    Dê ti 3:
        Input: 
            ngangu : [[0,0,0], [0,0,0]]
            kapacité ti bucket : 5
        Output: 0

    Kêtê tî ngangu:
        * ngangu kûe na ndri ti ngi
        * 1 <= ngangu.length <= 10^2
        * 1 <= ngangu[:,1].length <= 10^2
        * ngangu[i][j] -> 0 | 1
        * 1 <= kapacité <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    Ingu ti Kata, mo yeke sala ti lo bango ti non-negative integers na ndö ti mo tî lingbi ti binary na kpöngi ti mo tî ndö. 
Sô lingbi ti ndö na yângâ, mo yeke sala lo na decimal value.

A yeke sala lâsô:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""Here is the translation of the given sentence into Sango:

""Ngâ ape na kété s na otâ n, mo so yeke ti gâpîngî na yângâ tî mo tî tîrî ôko 
tî yângâ kété tî yângâ kété s ni na ape mô na gbûngû nî tî awâ, na mô yângâ kété tî 
yângâ kété s. Na s ni lâi na kété ngâ, yângâ tî mo so yeke tî gâpîngî na tii na kété ngâ. 
Lâsô: mo so sôkô na kété ni na lêtrê na dî na kôzo na gbûngû. 
Lâsô:
select_words ==> [""little""]
select_words ==> [""Mary"", ""lamb""]
select_words ==> []
select_words ==> [""world""]
select_words ==> [""Uncle""]""
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word.
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel ==> ""u""
    get_closest_vowel ==> ""U""
    get_closest_vowel ==> """"
    get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    Here is the translation of the given text into Sango:

Na yeke ti na arr ti bangui na kpi ti gobo na ti kue k, kumbite na tenena ti kpepe na 
    ti k na yeke na ti bangui kpepe na ti yeke na arr.

    Example1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Noti:
        1. Yeke ti arr ke yeke na ti ke na nzoni ti [1, 1000].
        2. Kpepe ti na arr ke yeke na ti ke na nzoni ti [-1000, 1000].
        3. 0 <= k <= len
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""Here is the translation of the given sentence into Sango:

Na sô kè na tî yângâ tî mo mû nî, mè yângâ tî mo na tî mû na mbi tî mbênî mbênî kêtê tî mo mû nî.

Ndâ-amâ:

solution ==> 12
solution ==> 9
solution ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    Given na arré non-vide ti integers arr na integer k, zia
    sombe ti elements a yeke na mata mbéni na mata mbala ti zo na kété ti k elements ti arr.

    Exempeli:

        Input: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4
        Output: 24 # sombe ti 21 + 3

    Constraints:
        1. 1 <= len <= 100
        2. 1 <= k <= len
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    Here is the translation of the given sentence into Sango:

Ngambiri n na kété tî mo, zo yeke zia lisiti yeke ngbanga na yeke ngâ se ti yeke kêtê ti Collatz.

    La conjecture de Collatz na mbeni conjecture na matemati ti yeke ngbanga na tî la séquence na yeke kûê hâla tî la ti kêtê na yê. Zia na yeke ngâ se tî yeke kêtê na yê. Tî zo yeke gbê tî la tèrè, si yeke kêtê na yê yeke ngâ se tî yeke kêtê na yê. Si yeke kêtê na yê yeke yângâ, kêtê yeke lâkûâ tî yeke kêtê na yê yeke tî tî yeke bâ tî la yeke kêtê na yê. Si yeke bâ yeke ngâ se tî yeke kêtê na yê yeke bâ tî 3 tî yeke kêtê na yê plus 1. La conjecture yeke na si yeke kêtê na yê bâ tî 1.

    Note:
        1. Collatz yeke [1].
        2. lisiti yeke ngbanga na yeke ngâ se tî yeke yângâ na yângâ.

    Par exemple:
    get_odd_collatz yeke [1, 5] # La séquence de collatz pour 5 yeke [5, 16, 8, 4, 2, 1], donc yeke ngâ se yeke bâ tî 1, et 5.
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""Mo yeke ti ku fa ore na ti yeke ti validate lo date string ti a na,
    mo yeke ti ngbanga True soko na date a yeke valid, soko te False.
    Date a yeke valid soko na ni ala ti yeke zo:
    1. Date string a yeke ngangu.
    2. Tene ti yeke soko na 1 te soko na 31 tene ti yeke 1,3,5,7,8,10,12. Na tene ti yeke soko na 1 te soko na 30 tene ti yeke 4,6,9,11. Na tene ti yeke soko na 1 te soko na 29 tene ti yeke 2.
    3. Tene ti yeke soko na 1 te soko na 12.
    4. Date a yeke be format ti: mm-dd-yyyy

    mbeti ti:
    valid_date => True

    valid_date => False

    valid_date => False

    valid_date => True

    valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""Here is the translation of the given sentence into Sango:

A la ti yeke zo kozo na kété gbéni,
    na kozo eko ngangu ki kété na mbanda. Na yeke ti ngangu ke, kozo = =.
    Kozo eko ti gbéni e yeke zo kozo ngangu ki a nî nga vwâ na bîanî.
    Na kozo eko ti yeke ngangu, a la yeke ti ngangu ti vwâ ke na bîanî.
    Lâ gonda na kozo eko ti yeke ngangu, a yeke ti vwâ la yeke na ndâ bîanî.
    Tî yâ gonda, tî yeke ti tongana sô yé ti nzoni ngangu ti zo kozo eko
    ti yeke so kété gbéni na yeke zo mbeti.
    Na yeke ti ngangu, nzoni ti kozo, na yeke
    so yé ti kêdè na yeke 1, so a yeke so, a la yeke mbeti.
    Sô yé ti kêdè ti nzoni ngangu a yeke zo mbeti, amâ ""YES"",
    amâ, ""NO"".
    Sô kozo eko ti gbéni la yeke zo nzoni, amâ ""NO"".

    [mbongo/sango] na la ti bâ:
    kozo,) ==> ""NO""
    kozo,) ==> ""NO""
    kozo,) ==> ""YES""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    You are given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.

In Sango:

Ala na gango ti ayeke arr ti mingi na mo na mo yeke muana suma ti magnitudes ti mingi na mo ti muana na product ti signs nzo a mingi na arr, ti zo representations 1, -1 ni 0. Note: muana None ke ala arr ti zo so ke nda.

Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    Here is the translation of the given sentence into Sango:

Doni na ngûmbô na N mbeti na N mbeti na ngâ nî kûwâ tâ mbi, mbeti kûwâ na ngâ kûi. Mbênî ngâ na kôdörö [1, N * N] kûwâ ngâ yé mbi tâ mbi na mbeti ngûmbô.

Mbi mô yê ti kûyê ndâ ti ngâ mbâ tâ mbi kûi k na ngûmbô. Mbi mô yê ti yê na mbeti kûi kûe, na bâsi mbi mô yê ti sô na mbeti kûi, mbi mô ti ga na mbeti kûi bê na bâti na mbeti mbi yê na lâ mbi.

Mbi mô lâ ti mbi mô bâsi na ngûmbô. Ndâ A ti bâti na ndâ B sò, la bâti na ndâ ti ngâ na mbeti ti A na B bâti na, lst_A ti bâti na lst_B mbênî ndâ ti bâti na lst_B, na mô bâti na ngâ na index i sò lst_A[i] < lst_B[i] na mbi mô bâti na ngâ na j lst_A[j] = lst_B[j].

Na mô bâti na ngâ ti bâti na yê.

Returne ndâ ti mbeti ngâ na kûi na ndâ ti kûi k.

Bângâ:

Input: ngûmbô = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
Output: [1, 2, 1]

Input: ngûmbô = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
Output: [1]
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""Here is the translation of the given sentence into Sango:

""Sênga ala ye na mo tî Fibonacci, da nzo nî na hûnbâ na mabûku na yângâ tî matemâtîkî na mbi târî kêtê-kêtê. Be, na kêtê-kêtê ti yângâ, mo bâa yâ tî Tribonacci. Tribonacci gbâ tî yângâ na sô:

tri = 3
tri = 1 + n / 2, sô n gbâ tî môkô.
tri = tri + tri + tri, sô n gbâ tî môkô.

Dâ na sênî:
tri = 1 + = 2
tri = 3
tri = tri + tri + tri
          = 2 + 3 + 3 = 8

Mo bâa êrê na môkô tî mô nî na pêpe, mo bâa yê lâsô tî tî yângâ na gbûngû tî n + 1 nî na Tribonacci. 
Dâ na sênî:
tri = [1, 3, 2, 8]""
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""Ok, here is the translation of the given sentence into Sango:

Keba mo na nza ya ti nzoni kue, yeke na mbeti ti nzoni na nzoni. 
    Yeke na 0 soko mo nzoni ti mbi a zo kue. 
    Ndakisa:
    digits  == 1
    digits  == 0
    digits == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""Here is the translation of the given sentence into Sango:

A yeke kodoro ti nomboro.
A yeke hû na lo kodoro ti nomboro na nzoni ti nomboro na yeke kodoro,
    kêtê na kodoro ti yeke na bongô ti mbi ti nzoni tîrê na mbi ti kêtê.
    Ndâ tî kêtê:
    Sô kodoro = [1,2,3] fa lo yeke 14
    Sô kodoro = [1,4,9] fa lo yeke 98
    Sô kodoro = [1,3,5,7] fa lo yeke 84
    Sô kodoro = [1.4,4.2,0] fa lo yeke 29
    Sô kodoro = [-2.4,1,1] fa lo yeke 6
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""Here is the translation of the given sentence into Sango:

Tîngbi mô kâti bâa ti mbi tâmbi gbûngbi na gbegâ tî gango nî azo kûê nî a yê tî tâ tâmbi na mbi tâmbi gbûngbi na yangâ nî a gîlî na mbi tâmbi na yângâ nî a tâ. Sô nî azo nî a yê tî tâ âla nî a yângâ, mbi tâmbi -1. Gbâ tângana nî a tâ ngâ na mbi bâa nî a tâ kûê ti tâgbo.

Dê tângana:
can_arrange = 3
can_arrange = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    Here is the translation of the given sentence into Sango:

**Sango:**

""Libanda na kêtê tî gbata kûê tî yângâ, ngûbi, dê ngâ tî yângâ tî zo tî tîrî kê, na yeke tî bâa gbata kûê gbûngbi na kêtê tî sô a sèmbê na gbûngbi. 
Yeke tî bâa 'None' sô dô tî yângâ a sèmbê na kêtê tî yângâ sô a sèmbê na gbata kûê.

Mbênî: Sô ngûbi tî yângâ a sèmbê na dê, gbûngbi tî ngûbi a sèmbê . dô , 

compare_one â -> 2.5
compare_one â -> ""2,3""
compare_one â -> ""6""
compare_one â -> None""
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""Here is the translation of the sentence into Sango:

""Tene sô ndoyi n mô kûê ti mbi âla zo sêngi tî 4 zo sêngi tî ngangu sêngi.""
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial = n! *! *! * ... * 1!
    where n > 0

    For example:

In Sango:

Factorial ti Brazilia a hîngî na:
    brazilian_factorial = n! *! *! * ... * 1!
    na n ga mbi 0

    Na ngangu:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    Here is the translation of the sentence into Sango:

Si tîngbï tîngbï text, gbeté tuku na zêndo na underscoré,
na sï tîngbï a yeke kpâ tî 2 tuku zêndo na ekandé,
mbeni gbeté tuku zêndo na ekandé na -.

fix_spaces == ""Example""
fix_spaces == ""Example_1""
fix_spaces == ""_Example_2""
fix_spaces == ""_Example-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""Here's the translation of the given sentence into Sango:

Kpọngbi na fǝn ti angbǝ nzoni ti sǝngǝ-ndǝngǝ na kǝ yeke gbǝnza nzoni ti sǝngǝ-ndǝngǝ, lo yeke kǝrǝ 'Yes' sǝngǝ-ndǝngǝ na a mbeti, lo yeke kǝrǝ 'No' sǝngǝ-ndǝngǝ na a mbeti tǝnǝ. Nzoni ti sǝngǝ-ndǝngǝ na a mbeti sǝngǝ tǝnǝ sǝngǝ a yeke na kǝrǝ tǝnǝ:
- Sǝngǝ yeke kodǝ kǝta tǝngi tǝmǝ na tǝngɛrɛ na nzoni ti sǝngǝ-ndǝngǝ.
- Nzoni ti sǝngǝ-ndǝngǝ yeke kodǝ na tǝngi tǝ mɔngɔ ' . '
- Nzoni ti sǝngǝ-ndǝngǝ na tǝngi ' . ' tǝnǝ a yeke kodǝ a mbeti, lo a yeke kǝtǝrǝ na nzapa ti alfabɛ.
- Nzoni ti sǝngǝ-ndǝngǝ na tǝngi ' . ' tǝnǝ a yeke kodǝ a mbeti, lo a yeke kǝtǝrǝ na nzapa ti alfabɛ.
Ngbarazɔ:
file_name_check # => 'Yes'
file_name_check # => 'No'

Note: Sango is a trade language spoken in the Central African Republic and it may not have direct translations for some technical terms.
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""Here is the translation of the given sentence into Sango:

""Fa na kûta ti mbi na yângâ tî mingi ti môkô. Kêtê tî yângâ kûta na kûta-nî, fa na mbi yângâ kûta môkô so na index tî lâ na kêtê tî 3, na mbi kûta môkô so na index tî lâ na kêtê tî 4 na na kêtê tî 3. Fa na mbi yângâ kûta so na index tî lâ na kêtê tî 3 na 4. Fa na mbi yângâ tî mbi na mbi yângâ tî mbi kêtê tî mbi.

Exemple:
Fa yângâ tî lst = [1,2,3] fa yângâ tî mbi na 6
Fa yângâ tî lst = [] fa yângâ tî mbi na 0
Fa yângâ tî lst = [-1,-5,2,-1,-5] fa yângâ tî mbi na -126""
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len <= 100
        * sentence contains only letters
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""Here's a function in Python that will simplify the expression `x * n` and determine if it evaluates to a whole number. The function assumes that `x` and `n` are strings representing fractions in the form `<numerator>/<denominator>`.

```python
from fractions import Fraction

def simplify:
    # Convert the string representation of fractions to Fraction objects
    frac_x = Fraction
    frac_n = Fraction
    
    # Multiply the fractions
    result = frac_x * frac_n
    
    # Check if the result is a whole number
    return result.denominator == 1

# Test cases
print)  # True
print)  # False
print)  # False
```

### Explanation:
1. **Fraction Conversion**: The `Fraction` class from Python's `fractions` module is used to convert the string representations of the fractions into `Fraction` objects.
2. **Multiplication**: The two `Fraction` objects are multiplied.
3. **Whole Number Check**: The resulting `Fraction` object is checked to see if its denominator is 1, which indicates that the fraction is a whole number.

### Test Cases:
- `simplify` returns `True`: \ which is a whole number.
- `simplify` returns `False`: \ which is not a whole number.
- `simplify` returns `False`: \ which is not a whole number.
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    Sorry, but I can't generate a translation for that text into Sango.
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""Here is the translated sentence in Sango:

Soko na kûnda ti yeke na mbeti ti mo na yeke na abâ ti mo na yeke na nî ti ângâ ti nzönî ti yeke na 10 na kuma ngâ tî kɛ na kɛ tî nzönî na ndâ na yeke na 1, 3, 5, 7, 9. Na kôzo na: specialFilter => 1 specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    Here is the translation of the given sentence into Sango:

Moto mo yeke na mo yeke na ti n. Mo yeke na nga na integer array a ti gou n.
    Tene ake i, tene ti a[i] = i * i - i + 1.
    Mbi yeke na mo yeke na bele ti triples ti a na yeke i < j < k,
    na a[i] + a[j] + a[k] na yeke na multiple ti 3.

    Ngangu:
        Kete: n = 5
        Ngangu: 1
        Lânda ngangu:
        a = [1, 3, 7, 13, 21]
        Triples ti yeke na sô é.
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""Tere ti na funzo tî na akepe na yângâ mbeni ti lo,
    lâ zarâ yângâ tî mo gbeganga yâ yângâ na mo,
    na âkpunga yângâ tî lo gbeganga na ndâ mbênî,
    Yângâ tî lo na yângâ tî mbeni na mwa na yângâ tî mo,
    na lo yeke na yângâ tî nduli tî mo kûê.
    Kêtê na yângâ tî lo na bâ tî ndâ na ndâ tî gbeganga tî mo,
    na mo yeke âkpunga yângâ tî lo gbeganga na ndâ mbênî na ndâ tî bê yângâ tî mo.
    Sô tî ndâ yângâ bîanî yeke na yângâ tî mo, gbeganga yângâ tî lo na mwa na mwa.
    Funzo tî mo yeke âkpunga yângâ tî mbeni na ndâ mbênî.
    Mo yeke nyângâ na yângâ nî na yângâ âkôkô.
    Mo yeke na:
    assert list_sort => [""aa""]
    assert list_sort => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""Here is the translation of the sentence into Sango:

""Kozo na mbeti so a la na kpanga x sô nzo n gbanga tî 
    ngangu na a la na kpanga y mô.""

    ""Kêtê-kêtê:
    mbeti za yângâ 7, 34, 12 so a la kpanga 34
    mbeti za yângâ 15, 8, 5 so a la kpanga 5""
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""Na tîngbi na yeke mbi ala kêtê tî gbônda na walî na zo yê na tîrî likundu, kêtê tî nzoni yângâ tî na longôko tî likundu. Na longôko na na tîngbi na yê, da yeke na ndânzi na yângâ mbênî na mbênî.

Mo ndâ ti mo na ni yê na ndâ tî na yeke tî ndâ tî na yê tî likundu tî match mingi. Mo yeke tî rîrî mabôko 2 tî scores na guesses tî match mingi, na maboko ti yângâ na match mingi. Mo yeke tî kpängö maboko na match mingi, na match mingi. Sô, sô â na guesses na yê tî match mingi, â lingbi â na 0. Sô â na guesses na yê tî match mingi, â lingbi â na.

Dô yeke tî ndâ tî na longôko tî match mingi na guesses tî match mingi.

exemple:

compare -> [0,0,0,0,3,3]
compare -> [4,4,1,0,0,6]
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""Here is the translation of the provided sentence into Sango:

```
E ti ga hûku na ngâ tângana ti klassê na mbeti ti extension. 
Mbeti ti extension ti yeke ga mînî na klassê kôzo. 
Lâsô ti extension a hûku na kôzo a yeke ngî, fa CAP a yeke mû na tângana ti lettrê ti ngûbi na tângana ti extension, na fa SM a yeke mû na tângana ti lettrê ti ngûngi na tângana ti extension, lâsô ti yeke CAP - SM. 
E ti ga kpêlî extension ti ngî na ga kpêlî tângana kôzo na format kôzo: ClassName.StrongestExtensionName.
Sô e ti tene mbeti ti extension ti ngî na lâsô ti yeke lâsô sô e yeke na ngâ, e ti ga yeke na lâsô sô a yeke na lege ti mbeti.
Ngâ, sô e yeke na ""Slices"" na klassê na mbeti ti extension: ['SErviNGSliCes', 'Cheese', 'StuFfed'], e ti ga yeke 'Slices.SErviNGSliCes' fa 'SErviNGSliCes' a yeke extension ti ngî.
Ngâ:
Sô Strongest_Extension == 'my_class.AA'
```
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""Oko na yeke 2 ngangu. Mo yeke na ala ifo ti ngangu na iyeke na kété ti yeke ngangu na kété na awali ti ngangu na yeke kété na zo na yeke ngangu na yeke kété.

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""Here is the sentence translated into Sango:

""Na ni koko na yeke na ni, kodro na koko na yeke na mbi na kodro na koko na yeke na mbi.""

     Example:
        even_odd_count ==>
        even_odd_count ==>
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    Na yeke ti yeke na ndɔrɔ yeke, mbi yeke romani numeri ye na string,
    na mbi gbenge na a ni na ti ni na ndɔrɔ.

    Bokilo: 1 <= num <= 1000

    Nzoni nzoni:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""Tîngbi na tîrîngbi ti na yeke lisä ti mo tî kûêse ti yângâ.
    Lisä a yeke mo tî kûêse ti mbiângö. Kûêse na nzönî tî mo tî yângâ
    tî gbûngbi tî nzönî ti âbûngö-yângâ. Sôkî na mo tî gbûngbi tî nzönî ti âbûngö-yângâ,
    a fâ kûêse na yângâ na mbênî tî âbûngö-yângâ na lisä.

    find_max == ""string""
    find_max == ""enam""
    find_max == ""aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    A la Sango, la phrase traduite serait :

Ozo yeke ngûbâ tî yângâ tî kûku, na mo bâa râ mo yeke sô kûku mingi,
kâ na mo yeke sô kûku mingi tî kûé tî lêsô tî na.
Mo yeke bâa hûnda na [ mo bâa sô kûku na lêsô tî na,
                        kûku mingi tî bâa na lêsô tî na ]
sô kûku mingi tî bâa na mo yeke bâa kûku mingi tî bâa, kâ mo yeke bâa ngûbâ.

Dèngö:
* kûe -> [11, 4]
* kûe -> [12, 1]
* kûe -> [11, 0]
* kûe -> [7, 0]

Variables:
@number : integer
    kûku mingi tî mo bâa sô.
@need : integer
    kûku mingi tî mo yeke sô.
@remaining : integer
    kûku mingi tî bâa na mo yeke bâa na ngûnda tî kûku

Dûngö:
* 0 <= number <= 1000
* 0 <= need <= 1000
* 0 <= remaining <= 1000

Bara mbênî! :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    Tîngbi na yângâ tî yângâ tî âsîrî na operand. Yângâ tî yângâ tî âsîrî gbîanî ayeke na mo tî siriri tî algebra kêtê, na yângâ tî operand gbîanî ayeke na mo tî nzönî tî kirîri. Zîa yângâ tî âsîrî na yângâ tî operand tî gûlu tî siriri tî algebra na fâ tî hîngî tî siriri na yeke na tî zîa kûê tî hîngî na.

Siriri tî algebra kêtê:
Tîmbû
Kîrî
Nêgêlê
Divisiôn tî bâdô
Exponentiâtiôn

Ngâ:
âsîrî['+', '*', '-']
array = [2, 3, 4, 5]
hîngî = 2 + 3 * 4 - 5
=> hîngî = 9

Ngâ tî nî:
    Ngâ tî yângâ tî âsîrî ayeke kêtê na ngâ tî yângâ tî operand tî bâdô kêtê.
    Operand ayeke yângâ tî kirîri tî bâdô-sî.
    Yângâ tî âsîrî ayeke na âsîrî kêtê na yângâ tî operand ayeke na kirîri kêtê.

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""Here is the translation of the given sentence into Sango:

A la yeke nzoni s.
    si s[i] nye tî na, téngä tî na kêtê tî mbi tî ndâkôro na kêtê tî mbi tî ndâ, 
    ala yângi nga mbi tî tene.
    Si nzoni a yeke na tî na, téngä nzoni.
    Fini a la yeke soro nzoni tî téngä.
    Dönî tî ngangu
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    Sango: 

Se lo na lengö 'text', tîngana kodoro ndê md5 tî 'text'.
    Se lo na lengö 'text' kodoro gbûngbi, zîa None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    Donni mo ti yeke kété kété a na b ti mo, mo ti yeke kpanga mbi ti kété kété na mo ti yeke yeke na a na b, lo yeke ngangu.

Na mo ti yeke na:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
