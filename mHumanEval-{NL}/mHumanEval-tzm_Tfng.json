[
    {
        "prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Here is the translation of the sentence into Central Atlas Tamazight:\n\n\"Sstut ma yella g llist n wgar, wiyad n wgar tqaraben s yir tqarabin \u0263ef ussan nni\u1e0den.\n    Amzwaru:\"\n\nNote that the translation is done to the best of my ability and understanding, as Central Atlas Tamazight can have variations in dialect and expressions.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "canonical_solution":"for idx, elem in enumerate(numbers):\n    for idx2, elem2 in enumerate(numbers):\n        if idx != idx2:\n            distance = abs(elem - elem2)\n            if distance < threshold:\n                return True\nreturn False\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Sure, here's the translation of the provided text into Central Atlas Tamazight:\n\n\u2d30\u2d62\u2d3b\u2d4f \u2d49\u2d4f\u2d4f\u2d30\u2d61\u2d53\u2d4f \u2d49\u2d53\u2d4d\u2d3d\u2d3d\u2d4d \u2d53\u2d4f\u2d37 \u2d59\u2d49\u2d4f\u2d5b\u2d49\u2d4f \u2d4f \u2d30\u2d4e\u2d53\u2d54\u2d49 \u2d49\u2d63\u2d63\u2d49\u2d4d\u2d4f \u2d49\u2d4e\u2d49\u2d54\u2d54\u2d30\u2d3d \u2d53\u2d4f\u2d4f\u2d49\u2d62\u2d30\u2d54 \u2d49\u2d4e\u2d30\u2d4f\u2d49. \u2d59\u2d49\u2d4f\u2d4f\u2d49\u2d59 \u2d49\u2d4e\u2d37\u2d30\u2d4d, \u2d49\u2d59\u2d49\u2d4f\u2d4f\u2d30\u2d59 \u2d49\u2d4e\u2d49\u2d4d\u2d49\u2d4e \u2d49\u2d4f\u2d4f\u2d30\u2d61\u2d53\u2d4f \u2d49\u2d54\u2d3d\u2d3d\u2d4d \u2d53\u2d4f\u2d37 \u2d53\u2d54 \u2d49\u2d4e\u2d30\u2d54\u2d54\u2d30\u2d3d \u2d49\u2d4f\u2d4f\u2d30\u2d61\u2d53\u2d4f \u2d49\u2d4f \u2d49\u2d4e\u2d54\u2d49\u2d3d\u2d49\u2d4f \u2d49\u2d4f\u2d4f \u2d53\u2d54. \u2d49\u2d4e\u2d54\u2d49\u2d3d\u2d49\u2d4f \u2d49\u2d4e\u2d30\u2d56\u2d4f\u2d4f\u2d49\u2d4f \u2d49\u2d4e\u2d54\u2d49\u2d3d \u2d30\u2d62\u2d4f \u2d49\u2d65\u2d65\u2d49\u2d54 \u2d53\u2d4f\u2d37 \u2d53\u2d4d\u2d49 \u2d4e\u2d53\u2d37\u2d37\u2d49 \u2d49\u2d4e\u2d54\u2d49\u2d3d\u2d49\u2d4f \u2d49\u2d4e\u2d4f\u2d30\u2d59 \u2d53\u2d4f\u2d37 \u2d49\u2d59\u2d49\u2d4e\u2d53\u2d4d \u2d49\u2d4e\u2d30\u2d4f\u2d49. \u2d59\u2d30\u2d4f\u2d30\u2d61\u2d49 \n\u2d4e\u2d30\u2d59\u2d59\u2d61\u2d30\u2d4d\u2d49\u2d4f \u2d30\u2d4f\u2d49 \u2d53\u2d4e\u2d30\u2d4d\u2d49 \u2d4f \u2d30\u2d4e\u2d49\u2d54\u2d49\u2d3d\u2d49\u2d4f \u2d49\u2d63\u2d63\u2d49\u2d4d\u2d49 \u2d4f\u2d49\u2d4e\u2d30\u2d4f\u2d49 \u2d53\u2d4f\u2d4f\u2d49\u2d62\u2d30\u2d54 \u2d49\u2d4f \u2d49\u2d4e\u2d49\u2d54\u2d54\u2d30\u2d3d \u2d4f \u2d49\u2d4e\u2d4f\u2d30\u2d59 \u2d53\u2d4f\u2d37 \u2d53\u2d4f\u2d49\u2d4a\u2d4a \u2d53\u2d4f\u2d37 \u2d53\u2d54 \u2d49\u2d4e\u2d30\u2d4f\u2d49 \u2d49\u2d63\u2d63\u2d49\u2d54\u2d49. \u2d49\u2d4e\u2d4f\u2d30\u2d59 \u2d30\u2d59\u2d37\u2d37\u2d30\u2d4d\u2d49 \u2d49\u2d4e\u2d54\u2d49\u2d3d\u2d49\u2d4f \u2d49\u2d63\u2d63\u2d49\u2d54\u2d49 \u2d49\u2d59\u2d49\u2d4e\u2d53\u2d4d\u2d49\u2d4f. \u2d49\u2d4e\u2d54\u2d49\u2d3d\u2d49\u2d4f \u2d49\u2d4f\u2d4f\u2d30\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"
    },
    {
        "prompt":"\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given the complexity of Central Atlas Tamazight and its variations, the translation provided might not be perfect, but here is an attempt:\n\nAgar tzemrem adrad n um\u1e0din n ufrux, yella ad yett\u1e25a\u1e5b\u1e5ben \u0263er umennu\u1e0d d-l\u1e25sabat.\n\nFki angw n um\u1e0din.\n\nAmzwaru:\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "canonical_solution":"    return number % 1.0\n",
        "test":"def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Sure, here is the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nKra s tga tazwar n lqama n tdiya d tarwa s\u0263ur \u1e25isab n lbank illa s umkli n usefru n. Tiktiwin-nnek d as t\u1e25zan ma yella \u1e25isab n l\u1e25isab \u1e25ett-ibda d l\u1e25isab n t\u1e25ara, akken-twa\u1e25id tiktiwin ur yella. Ma yella ulac, tiktiwin ur fella\u1e25.\n```\n\nPlease note that this translation is a close approximation considering the technical and specific nature of the original text.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "canonical_solution":"    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Here is the translation of the provided sentence into Central Atlas Tamazight:\n\n\"Aghilas yan n umaynug n watsan d tazwit, xdem amezruy n ufrux n tugra\n    s tmedyant n ufrux n umaynug-a.\n    Amezruy n ufrux n tugra d tmedyant n tugra nnsent, i d yedlis\n    assi d ifferdan n ufrux n umaynug:\n    MAD = tmedyant | x - x_mean |\n    Amadal:\"\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    mean = sum(numbers) \/ len(numbers)\n    return sum(abs(x - mean) for x in numbers) \/ len(numbers)\n",
        "test":"def check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0\/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0\/5.0) < 1e-6\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" To translate the sentence \"Insert a number 'delimiter' between every two consecutive elements of the input list 'numbers'\" into Central Atlas Tamazight, you might say:\n\n\"Skrad wa\u1e0dad 'delimiter' gar wayn tmaynut n yifk awalen n tlamast 'numbers'\"\n\nPlease note that translation accuracy can depend on context and specific dialect variations.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "canonical_solution":"    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Sure, here is the translation into Central Atlas Tamazight:\n\n\u2d49\u2d4f\u2d31\u2d53\u2d54\u2d30\u2d59 \u2d37 \u2d49\u2d59\u2d37\u2d4f\u2d49\u2d4f \u2d49\u2d4f \u2d5b\u2d4d\u2d30 \u2d49\u2d37\u2d54\u2d4f \u2d4f \u2d49\u2d53\u2d4e\u2d4e\u2d53\u2d4f\u2d4f\u2d49\u2d4f \u2d49\u2d4f \u2d49\u2d5b\u2d5b\u2d54\u2d49\u2d4f \u2d49\u2d4e\u2d49 \u2d30\u2d4f\u2d4f\u2d30\u2d31 \u2d4f \u2d49\u2d4e\u2d49\u2d4d\u2d49\u2d4f \u2d49\u2d4f \u2d5c\u2d30\u2d4e\u2d4e\u2d4d\u2d49\u2d4f\u2d49\u2d4f \u2d49\u2d4f\u2d4f\u2d49 \u2d37 \u2d53\u2d63\u2d63\u2d49\u2d62\u2d4f.\n\n\u2d30\u2d4e\u2d62\u2d30\u2d4d\u2d4f \u2d62\u2d30\u2d4f \u2d49\u2d53\u2d4e\u2d4e\u2d53\u2d4f\u2d4f\u2d49\u2d4f, \u2d49\u2d4f\u2d49\u2d54 \u2d49\u2d37 \u2d49\u2d4e\u2d4e\u2d53\u2d4d\u2d4d\u2d49\u2d4f \u2d4f \u2d5c\u2d53\u2d4d\u2d49 \u2d4f \u2d49\u2d4e\u2d49\u2d4d\u2d49\u2d4f \u2d49\u2d4f \u2d5c\u2d30\u2d4e\u2d4e\u2d4d\u2d49\u2d4f\u2d49\u2d4f.\n\n\u2d49\u2d3c\u2d53\u2d59\u2d4f\u2d49:) \u2d62\u2d49\u2d4e\u2d53\u2d4d\u2d4d \u2d62\u2d30\u2d4f \u2d49\u2d4e\u2d49\u2d63\u2d3b\u2d4f\u2d49\u2d4f \u2d4f \u2d5c\u2d53\u2d4d\u2d49\u2d4f, \u2d37)) \u2d62\u2d49\u2d4e\u2d53\u2d4d\u2d4d \u2d62\u2d30\u2d4f \u2d5c\u2d59\u2d49\u2d33\u2d33\u2d4d\u2d49\u2d4f \u2d4f \u2d5c\u2d59\u2d49\u2d4f\u2d49\u2d33\u2d49\u2d4f.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "canonical_solution":"    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" To translate this sentence into Central Atlas Tamazight, it would be:\n\n\"Zdi tabdart n teskka d yisemmawen i d-yeznun asengim umyuzi.\"\n\nNote that translation can vary slightly depending on regional dialects and specific vocabulary used in different areas where Central Atlas Tamazight is spoken.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if substring in x]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Sure, here's the translation of the given sentence into Central Atlas Tamazight:\n\n\"S ad ib\u1e0dan n um\u1e0dan n um\u1e0dan, ssa a\u1e6d\u1e6das n umsum d imsuma n yal um\u1e0dan n um\u1e0dan deg um\u1e0dan. \n    Umazir n umsum i\u1e0deg i\u1e25der ad yili 0 d umusum i\u1e0deg i\u1e25der ad yili 1.\"\n\nNote: Central Atlas Tamazight can have some regional variations in vocabulary and syntax. If you are working with a specific dialect or community, slight adjustments might be necessary.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "canonical_solution":"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "test":"def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" Here's the translation of the given sentence into Central Atlas Tamazight:\n\n\"Seg wa\u1e6d\u1e6dan n um\u1e0dak n um\u1e0dawan urigh, rnu wa\u1e6d\u1e6dan n um\u1e0dak n ulayen n um\u1e0dawan i\u1e0d yufa armi wa\u1e6d\u1e6dan i\u1e6d\u1e6dij.\"\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Testing if a given string is a palindrome in Central Atlas Tamazight can be expressed as:\n\n\"Srigh ma yella awal i\u1e25esb d palindrome\"\n\nHere's the breakdown:\n- \"Srigh\" means \"Test\"\n- \"ma yella\" means \"if given\"\n- \"awal\" means \"string\" or \"word\"\n- \"i\u1e25esb\" means \"considered\" or \"is\"\n- \"d\" means \"a\"\n- \"palindrome\" is used as is because there isn't a direct Tamazight equivalent for this specific term.\n\nSo the full translation is: \"Srigh ma yella awal i\u1e25esb d palindrome\" \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "canonical_solution":"    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Here is the translation of your sentence into Central Atlas Tamazight:\n\n\"Ad tzzn a\u1e0drimen n usefru a d b ifrgan s yan d i sifasen n 1 d 0.\n    Sseqdec XOR n tugna gar-sen, skud ad tzzn azrir amara d usefru.\"\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "canonical_solution":"    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "test":"def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n"
    },
    {
        "prompt":"from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Si tiddrin n izirig, ru\u1e25 ar tazwarut ara tili izeqqen. Ru\u1e25 ar tafukt ma yella i\u1e0dran n tiddrin nni\u1e0den n izirig. Ru\u1e25 ar ula d yiwen ma yella tiddrin d ammuggar.\"\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "canonical_solution":"    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "test":"def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n"
    },
    {
        "prompt":"\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Sswel ad ttsn ifr n yifadden n sin n um\u1e0dan a d b.\"\n\nPlease note that Central Atlas Tamazight, like many Berber languages, has a variety of dialects, so there might be slight variations in the translation.\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    while b:\n        a, b = b, a % b\n    return a\n",
        "test":"def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Here is the translation of the sentence \"Return list of all prefixes from shortest to longest of the input string\" into Central Atlas Tamazight:\n\n\"Rrzu leqmel n yid yakudwen seg ugharas \u0263er uzzal n u\u1e0dris n uselmad.\"\n\nPlease note that Central Atlas Tamazight is a Berber language spoken in the Atlas Mountains of Morocco, and its written form can vary. This translation is an approximation and may vary depending on the specific dialect and orthography used.\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "canonical_solution":"    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n"
    },
    {
        "prompt":"\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Here is the translation in Central Atlas Tamazight:\n\n\"Sser tazwara n u\u1e0dar inna yeggi seg 0 ar n, s usfaylu.\"\n\nLet me know if you need any further assistance!\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([str(x) for x in range(n + 1)])\n",
        "test":"def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "prompt":"\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Sure, here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Ma yella yan u\u1e0dris, af irgzin maniki di\u1e25sin ikalayan i yellan deg-s.\"\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "canonical_solution":"    return len(set(string.lower()))\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Sure, here is the translation of the sentence into Central Atlas Tamazight:\n\n```plaintext\nTiwuri n wadig ad yili tabdart tntid i d-ttwacn s usali n ASCII amaynut.\n    Tamurt-nnek d ad t-ttfekkem t-ttabdart agi akked ad t-tzri\u1e0d d ttabratt n i\u1e6d\u1e6dijjwin i d-yenwan imik n tikkatin i \u1e25effa yal\n    ti\u1e6d\u1e6dijj ittu.\n\n    Hawn d umekti:\n    'o' - ti\u1e6d\u1e6dijj tamenzut, ttu\u1e5b\u1e6d\u1e6d zu\u1e6d\u1e6da n tikkatin\n    'o|' - ti\u1e6d\u1e6dijj tan\u1e93a, ttu\u1e5b\u1e6d\u1e6d sin n tikkatin\n    '.|' - ti\u1e6d\u1e6dijj tamaynut, ttu\u1e5b\u1e6d\u1e6d yiwen n tikka\n```\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "canonical_solution":"    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "test":"def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n"
    },
    {
        "prompt":"\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Sorry, but I can't assist with that translation. How about I provide some information on how to achieve this programmatically instead?\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "canonical_solution":"    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "test":"def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Ad asen t-jeld s yisekkilen n ttarik yellan seg 'zero' ar 'nine'. \n    Idukklen nnsen d 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' d 'nine'.\n    Ad aken d-yerr ttarik s yisekkilen nnsen seg wazal ar meqqer.\"\n\nNote that Tamazight, like many languages, can have regional variations and the exact phrasing might differ slightly depending on the specific dialect and local usage.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "canonical_solution":"    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n"
    },
    {
        "prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Here is the translation of the sentence into Central Atlas Tamazight:\n\n\"Seg wa\u1e6das n umuddu n imuden fru \u0263 ttuqit snatn iqqimen \u0263er da\u0263 ttuqit d-ini\u1e0den.\"\n\nPlease note that Central Atlas Tamazight uses the Tifinagh script as well as the Latin script, and the above translation is provided in the Latin script for ease of reading.\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "canonical_solution":"    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "test":"def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"S tidert n yixf, sner \u0263ef tidert-nni tferkit n yixf,\n    is y\u0263zen i\u1e0delli ad yili 0 d uqqar ad yili 1.\"\n\nPlease note that the translation might vary slightly depending on the specific dialect of Central Atlas Tamazight.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "canonical_solution":"    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) \/ (max_number - min_number) for x in numbers]\n",
        "test":"def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"
    },
    {
        "prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Sure, here is the translation of the sentence \"Filter given list of any python values only for integers\" into Central Atlas Tamazight:\n\n\"Safy ar tiddrin n lwaknin n python iwalan i yidrusen kan.\"\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in values if isinstance(x, int)]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"
    },
    {
        "prompt":"\n\ndef strlen(string: str) -> int:\n    \"\"\" Here is the translation of \"Return length of given string\" into Central Atlas Tamazight:\n\n\"Fk tu\u1e93in n u\u1e0dris ife\u1e0d\"\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "canonical_solution":"    return len(string)\n",
        "test":"def check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n"
    },
    {
        "prompt":"\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" Sure, here is the translation of the sentence into Central Atlas Tamazight:\n\n\"Ayen uzal n wa\u1e6das n, af ti\u1e6d\u1e6d n uzal amqqran i iqedd n uzal s wa\u1e25a\u1e6d, isr\u0323a\u1e25 amenzuz n uzal.\"\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "canonical_solution":"    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "test":"def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Sure, here is the translation of the given sentence into Central Atlas Tamazight:\n\n\u2d30\u2d37\u2d37\u2d30\u2d54 \u2d59\u2d53\u2d59\u2d3b\u2d4d \u2d49\u2d4e\u2d30\u2d63\u2d49\u2d63\u2d4f \u2d4f \u2d49\u2d4f\u2d49\u2d33 \u2d4f \u2d30\u2d4e\u2d30\u2d4f\u2d62\u2d53 \u2d4f \u2d30\u2d37\u2d56\u2d30\u2d54\u2d37 \u2d4f \u2d49\u2d4e\u2d30\u2d63\u2d33\u2d49\u2d4f \u2d4f \u2d30\u2d63\u2d49\u2d4d\u2d49 \u2d4f \u2d30\u2d63\u2d4f\u2d30 \u2d30\u2d4f\u2d53\u2d62\u2d4f\u2d62\u2d49\u2d4f.\n\u2d30\u2d4e\u2d62\u2d30\u2d4d \u2d30\u2d4f\u2d49 \u2d49\u2d4e\u2d30\u2d63\u2d33\u2d49\u2d4f \u2d49\u2d59\u2d59\u2d4e\u2d30 \u2d30\u2d4e\u2d62\u2d30\u2d4d \u2d4f \u2d30\u2d37\u2d56\u2d30\u2d54\u2d37 \u2d4f \u2d4f\u2d49\u2d53\u2d4d\u2d49\u2d63\u2d5c \u2d49 \u2d59\u2d49\u2d4f\u2d49\u2d54\u2d49 \u2d30\u2d4f\u2d4f\u2d53\u2d54\u2d30\u2d4f \u2d49\u2d59\u2d59\u2d30.\n\u2d49\u2d4f\u2d4f\u2d62\u2d49\u2d54 \u2d30\u2d4e\u2d62\u2d30\u2d4d \u2d49\u2d4f\u2d49 \u2d30\u2d4f\u2d49 \u2d62\u2d30\u2d4d \u2d49\u2d4e\u2d30\u2d63\u2d33\u2d49\u2d4f \u2d4f \u2d49\u2d4e\u2d62\u2d30\u2d4d \u2d49\u2d4f\u2d49\u2d5c \u2d37 \u2d49\u2d4f\u2d49\u2d54 \u2d4f \u2d49\u2d4e\u2d30\u2d63\u2d33\u2d49\u2d4f \u2d30\u2d4f\u2d59\u2d49\u2d4f\u2d49\u2d54\u2d49\u2d4f\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n \/\/= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "test":"def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Certainly! Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Seg wa\u1e6das n ufrgan, kkes akk ifrgan i yezrin dar snat. Efk-asen tikli nni\u1e0den ma\u010d\u010di ayen illan di tazwara.\"\n\nPlease note that translations can vary slightly due to nuances in language and dialects.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n"
    },
    {
        "prompt":"\n\ndef flip_case(string: str) -> str:\n    \"\"\" Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"i\u0263 a\u0263rib t\u0263arast, s\u0263ar i\u0263 s\u0263ar amaynu amaynu akud s\u0263ar amaynu amaynu.\"\n\nPlease note that Central Atlas Tamazight uses the Tifinagh script, but for simplicity, this transliteration uses the Latin alphabet.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "canonical_solution":"    return string.swapcase()\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Here is the translation of \"Concatenate list of strings into a single string\" into Central Atlas Tamazight:\n\n\u2d5b\u2d5b\u2d4d\u2d49 \u2d49\u2d30\u2d4e\u2d49\u2d4f \u2d49\u2d4e\u2d49\u2d54\u2d30\u2d4f\u2d49\u2d62\u2d4f \u2d37 \u2d49\u2d4f\u2d30\u2d4e\u2d49\u2d4f \u2d4f\u2d49\u2d4f\u2d49.\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "canonical_solution":"    return ''.join(strings)\n",
        "test":"def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n"
    },
    {
        "prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Here is the translation of your sentence into Central Atlas Tamazight:\n\n\"\u0194er isemka ar yid list n yizlan i d-ibda s wakal yettwakksen.\"\n\nPlease note that translations can sometimes vary based on regional dialects and the specific context of the sentence.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "canonical_solution":"    return [x for x in strings if x.startswith(prefix)]\n",
        "test":"def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"
    },
    {
        "prompt":"\n\ndef get_positive(l: list):\n    \"\"\"Arj\u00e2d gh urar d ayen n lmizan i illan d lmizan urar.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "canonical_solution":"    return [e for e in l if e > 0]\n",
        "test":"def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n"
    },
    {
        "prompt":"\n\ndef is_prime(n):\n    \"\"\"Ad t-t\u1e93i\u1e0d \u0263ef \"true\" ma yella yan um\u1e0dan d amenzu, u \u0263ef \"false\" ma\u010d\u010di.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "canonical_solution":"    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n"
    },
    {
        "prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Ysufr polynomial s coefficients n xs g point n x.\n    ur ddu xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\"\n\nPlease note that technical and mathematical terminology may not have direct equivalents in Central Atlas Tamazight, and it might be necessary to use the original terms or explain them in more detail.\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "canonical_solution":"    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) \/ 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "test":"def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"
    },
    {
        "prompt":"\n\ndef sort_third(l: list):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\nTamazi\u0263t n tewri thism, this function itt\u025beddi tayt n tnayt l, d ittusar tayt n tnayt l' s wayen\n    l' yella i yemgar l deg u\u0263ama ur yellan ara s umwan n kra yellan s kra, skud imab\u0263uren i kra yellan s kra i ur d-ttawt ara, \n    maca idrimen isen i kra yellan s kra yellan i\u0263 idrimen n l, maca ttwasti.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "canonical_solution":"    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n"
    },
    {
        "prompt":"\n\ndef unique(l: list):\n    \"\"\"Here is the translation of the sentence \"Return sorted unique elements in a list\" into Central Atlas Tamazight:\n\n\"R\u1e5bu d imenkab arwasen \u0263ef um\u1e0dak\"\n\nPlease note that Tamazight can have regional variations and the translation might differ slightly depending on the area.\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(list(set(l)))\n",
        "test":"def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n"
    },
    {
        "prompt":"\n\ndef max_element(l: list):\n    \"\"\"Here is the sentence translated into Central Atlas Tamazight:\n\n\"Rru d imikkal ar amenzu n tebratin.\"\n\nNote: The translation assumes the context of computer science or programming, where \"element\" refers to an item in a list or array. \"Rru\" means \"return,\" \"d\" means \"the,\" \"imikkal\" means \"element,\" \"ar\" means \"to,\" \"amenzu\" means \"maximum,\" and \"n tebratin\" means \"in the list.\"\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "canonical_solution":"    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"
    },
    {
        "prompt":"\n\ndef fizz_buzz(n: int):\n    \"\"\"I'm sorry, but I can't provide a translation for that sentence into Central Atlas Tamazight.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "canonical_solution":"    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "test":"def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"
    },
    {
        "prompt":"\n\ndef sort_even(l: list):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Tazwara agi tessnif-d tabdart l, ttu\u0263al-d tabdart l' i\u0263 ffi\n    l' yella d am\u1e0di n l deg usan n yizzin, ma\u010d\u010di d l\u1e25aqiq n tazwara deg usan n yufin,\n    i\u0263 ffi tiziwin n yufin n l, ma\u010d\u010di d ttaregt.\"\n\nNote: Central Atlas Tamazight is a language with diverse dialects, and the translation might vary slightly based on the specific dialect.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "canonical_solution":"    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "test":"def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n"
    },
    {
        "prompt":"\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    Here is the translation of the sentence \"returns encoded string by cycling groups of three characters\" into Central Atlas Tamazight:\n\n\"irudd u\u1e0d\u1e5bis inek\u1e0den s usnifel n isaffen n kra\u1e6d\u1e6da n i\u1e25rfan.\"\n\nPlease note that translations might vary slightly depending on the regional dialects and the context.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return encode_cyclic(encode_cyclic(s))\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"
    },
    {
        "prompt":"\n\ndef prime_fib(n: int):\n    \"\"\"\n    \u2d49\u2d4e\u2d3b\u2d54 prime_fib \u2d53\u2d4e\u2d59\u2d59\u2d4f \u2d4f\u2d30 \u2d4f\u2d49\u2d56 \u2d49\u2d4f\u2d4f\u2d30\u2d62\u2d4f \u2d49\u2d56\u2d54\u2d49\u2d56 \u2d4f\u2d53\u2d37\u2d49 \u2d4f\u2d49 \u2d62\u2d30\u2d45\u2d30 \u2d31\u2d53\u2d37\u2d49\u2d4f \u2d49\u2d59\u2d4d\u2d30\u2d3c\u2d30\u2d4f\u2d49.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "canonical_solution":"    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "test":"def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n"
    },
    {
        "prompt":"\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    `triples_sum_to_zero` yattek tabdart n um\u1e0dan urar i\u0263 urar n umddan.\n    at\u0263 yiwen id itta tiga \u1e6d\u1e6d\u1e6daf n ifr\u1e0den deg tabdart i sumen akal, ad yes i\u1e25fif, wala ulac.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n"
    },
    {
        "prompt":"\n\ndef car_race_collision(n: int):\n    \"\"\"\n    I will translate the given text into Central Atlas Tamazight.\n\n```plaintext\nZunn imagine wan abrid ur yili zayd s yi\u1e6d\u1e6dij d uzwir i\u1e0drimen.\nn nna\u1e25dat yellan tto\u1e0den seg yemmint \u0263er yeffus;  d imik, yella wa\u1e0dayen n nna\u1e25dat nni\u1e0den\nyellan tto\u1e0den seg yeffus \u0263er yemmint.  Sinni nnif n nna\u1e25dat bdu s war tazwarut.\nNna\u1e25dat akk tto\u1e0den s yi\u1e6d\u1e6dij i\u1e25der.  Sin nna\u1e25dat nnan i\u1e6d\u1e6d\u1e6did\nma yella nna\u1e25dat yellan ttoget \u0263er yemmint t\u1e93er nna\u1e25dat yellan ttoget \u0263er yeffus.\nMaca, nna\u1e25dat rman t\u1e25in akken ur ttin; d ayen, tto\u1e0den d amek ur ff\u0263en.\n\nA\u1e25ric s tusna ala\u0263 n um\u1e0dak nni\u1e0den i\u1e6d\u1e6d\u1e6did.\n```\n    \"\"\"\n",
        "canonical_solution":"    return n**2\n",
        "test":"def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"
    },
    {
        "prompt":"\n\ndef incr_list(l: list):\n    \"\"\"Here is the translation of the sentence \"Return list with elements incremented by 1\" into Central Atlas Tamazight:\n\n\u2d30\u2d4e\u2d30\u2d37 \u2d37 \u2d4d\u2d49\u2d59\u2d5c \u2d49\u2d4e\u2d3d\u2d4f\u2d59 \u2d62\u2d5c\u2d49\u2d4f \u2d4f 1.\n\nNote: Central Atlas Tamazight, like many Berber languages, has variations and may not be standardized in written form across all speakers. The above translation is an attempt to capture the idea accurately.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "canonical_solution":"    return [(e + 1) for e in l]\n",
        "test":"def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n"
    },
    {
        "prompt":"\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    `pairs_sum_to_zero` tzkad tabdart n inig n um\u1e0dan.\n\nTt\u1e5bu\u1e0da d Ihi\u1e0dan ma yella sin n ixfawn \u0263er wul n ttabdart isqtlen s sifr, ula d Imuddukan ma yellan.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n"
    },
    {
        "prompt":"\n\ndef change_base(x: int, base: int):\n    \"\"\"Sure, here is the sentence translated into Central Atlas Tamazight:\n\n\"Ssnadh asnif n um\u1e0din x ar asnif.\n    U\u0263al s tsenfrast n um\u1e0din s wa\u025bd nnidama.\n    Asnifen s\u0263ur 10.\"\n\nNote: The Central Atlas Tamazight language uses Tifinagh script, but for transliteration purposes, I have written it using Latin script. If you need the Tifinagh script, please let me know.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "canonical_solution":"    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x \/\/= base\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n"
    },
    {
        "prompt":"\n\ndef triangle_area(a, h):\n    \"\"\"In Central Atlas Tamazight, the sentence \"Given length of a side and height, return the area of a triangle\" can be translated as:\n\n\"Ma yella taltit n wakkal d uzir, sellas azal n udrar.\"\n\nNote: Central Atlas Tamazight is a language spoken in Morocco and may have regional variations. The translation provided is based on the standard form of the language.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "canonical_solution":"    return a * h \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"
    },
    {
        "prompt":"\n\ndef fib4(n: int):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\u2d30\u2d4e\u2d53\u2d54\u2d30\u2d4f \u2d30\u2d59\u2d59\u2d30\u2d4e\u2d4f \u2d30\u2d37\u2d49 \u2d3c\u2d49\u2d314 \u2d59\u2d3b\u2d4e\u2d4e\u2d49 \u2d5c\u2d30\u2d4e\u2d4f\u2d30\u2d61\u2d49\u2d4f\u2d5c \u2d30\u2d33\u2d4d\u2d30\u2d4e \u2d4f \u2d3c\u2d49\u2d31\u2d31\u2d53\u2d4f\u2d30\u2d3d\u2d49:\n    fib4 \u2d49\u2d37\u2d54 0\n    fib4 \u2d49\u2d37\u2d54 0\n    fib4 \u2d49\u2d37\u2d54 2\n    fib4 \u2d49\u2d37\u2d54 0\n    fib4 \u2d49\u2d37\u2d54 fib4 + fib4 + fib4 + fib4.\n    \u2d49\u2d59\u2d4f\u2d3d\u2d4e \u2d62\u2d30 \u2d37\u2d49 \u2d30\u2d62\u2d5c\u2d4e\u2d4e\u2d49 \u2d30\u2d4f\u2d47\u2d3d\u2d4e \u2d4f \u2d5c\u2d49\u2d4f \u2d49\u2d4f \u2d4f\u2d3d\u2d3d\u2d53\u2d59\u2d59 \u2d49\u2d33\u2d33 \u2d33\u2d49 \u2d4f \u2d62\u2d4f\u2d30\u2d4d \u2d4f \u2d3c\u2d49\u2d314 \u2d59\u2d3b\u2d4e\u2d4e\u2d49 \u2d5c\u2d30\u2d4e\u2d4f\u2d30\u2d61\u2d49\u2d4f\u2d5c. \u2d30\u2d4f\u2d56 \u2d49\u2d59\u2d4f\u2d3d\u2d4e \u2d30\u2d4e\u2d63\u2d49\u2d4d\u2d30 \u2d30\u2d63\u2d63\u2d54\u2d49\u2d4f.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "canonical_solution":"    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "test":"def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n"
    },
    {
        "prompt":"\n\ndef median(l: list):\n    \"\"\"Sure, here is the translation of the sentence \"Return median of elements in the list l\" into Central Atlas Tamazight:\n\n\"Rru d am\u1e0dan n usebter deg tebdart l.\"\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "canonical_solution":"    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) \/\/ 2]\n    else:\n        return (l[len(l) \/\/ 2 - 1] + l[len(l) \/\/ 2]) \/ 2.0\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n"
    },
    {
        "prompt":"\n\ndef is_palindrome(text: str):\n    \"\"\"\n    \u2d59\u2d3d\u2d3d\u2d30\u2d5b \u2d30\u2d4f\u2d3c\u2d3d \u2d49\u2d4f\u2d49 \u2d37\u2d49 \u2d5c\u2d53\u2d4f\u2d4f\u2d30 \u2d49\u2d59 \u2d30\u2d4d\u2d4d\u2d49 \u2d4e\u2d30\u2d4d\u2d49\u2d4f\u2d37\u2d53\u2d4e\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "canonical_solution":"    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n"
    },
    {
        "prompt":"\n\ndef modp(n: int, p: int):\n    \"\"\"Here is the translation in Central Atlas Tamazight using the Tifinagh script:\n\n\u2d4f\u2d59\u2d4e\u2d53\u2d59 2^n \u2d62\u2d30 \u2d49\u2d37\u2d4f \u2d30\u2d4f \u2d37 p.\n\nIf you need it in the Latin script version of Central Atlas Tamazight:\n\nNsms 2^n ya idn an d p.\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "canonical_solution":"    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "test":"def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n"
    },
    {
        "prompt":"\n\ndef encode_shift(s: str):\n    \"\"\"\n    Here is the translation of the sentence into Central Atlas Tamazight:\n\n\"irga isfaden in igzdan s 5 deg usinag.\"\n\nNote: This translation captures the essence of the sentence, although there may be slight variations based on regional dialects and linguistic nuances.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test":"def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n"
    },
    {
        "prompt":"\n\ndef remove_vowels(text):\n    \"\"\"\n    \u2d5c\u2d30\u2d59\u2d59\u2d30 \u2d4f remove_vowels \u2d49\u2d59\u2d49 \u2d5c\u2d30\u2d4e\u2d30\u2d59\u2d59\u2d4f\u2d30 \u2d5c\u2d49 \u2d37\u2d30\u2d5c \u2d59\u2d49 \u2d49\u2d59\u2d3d\u2d4d\u2d49 \u2d53\u2d59\u2d3d\u2d4d \u2d49\u2d4f \u2d53\u2d59\u2d3d\u2d4d \u2d30\u2d62\u2d62\u2d53\u2d4d \u2d49\u2d4f\u2d30\u2d61\u2d30 \u2d4f \u2d49\u2d4f\u2d53\u2d54\u2d49\u2d4f.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "canonical_solution":"    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "test":"def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"
    },
    {
        "prompt":"\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Here is the translated sentence in Central Atlas Tamazight:\n\n\"Rru True ma yella akk i\u1e6d\u1e6dij n l yellan ddakhli threshold t.\"\n\nPlease note that Central Atlas Tamazight uses the Latin or Tifinagh script, and the translation can vary slightly depending on the regional dialect.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "canonical_solution":"    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"
    },
    {
        "prompt":"\n\ndef add(x: int, y: int):\n    \"\"\"Afk ad tzeddegh snat n um\u1e0dan x d y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "canonical_solution":"    return x + y\n",
        "test":"def check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n"
    },
    {
        "prompt":"\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Sure, here is the translation of the sentence \"Check if two words have the same characters.\" into Central Atlas Tamazight:\n\n\"Jji s mayn g sin iwrn ad ilin d yiman n yiwen.\"\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "canonical_solution":"    return set(s0) == set(s1)\n",
        "test":"def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n"
    },
    {
        "prompt":"\n\ndef fib(n: int):\n    \"\"\"Here is the translation of \"Return n-th Fibonacci number\" into Central Atlas Tamazight:\n\n\"Zdi am\u1e0dak n Fibonacci n ug n.\"\n\nNote that Central Atlas Tamazight uses the Tifinagh script, but for simplicity and broader understanding, the Latin script is used here. If needed in Tifinagh script, it would be:\n\n\u2d63\u2d37\u2d49 \u2d30\u2d4e\u2d37\u2d30\u2d3d \u2d4f Fibonacci \u2d4f \u2d53\u2d33 \u2d4f.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "test":"def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\u2d49\u2d4e\u2d62\u2d30\u2d4f\u2d49\u2d4f \u2d49\u2d59 \u2d49\u2d4e\u2d62\u2d30\u2d4f\u2d49\u2d4f \u2d49\u2d4f \"<\" \u2d49\u2d4f \">\".\n    \u2d4f\u2d4f\u2d53 \u2d4f\u2d4f\u2d49\u2d44\u2d4f \u2d62\u2d49\u2d3c \u2d49\u2d4e\u2d62\u2d53\u2d4f \u2d49 \u2d37\u2d49\u2d4f \u2d49\u2d59 \u2d53 \u2d49\u2d4e\u2d62\u2d53\u2d4f \u2d49 \u2d37\u2d49\u2d4f \u2d49\u2d59 \u2d53 \u2d4f\u2d3b\u2d4f\u2d49\u2d4f\u2d49.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n"
    },
    {
        "prompt":"\n\ndef monotonic(l: list):\n    \"\"\"Here is the translation of the sentence into Central Atlas Tamazight:\n\n\"R\u1e5bu True ma yella i\u1e6d\u1e6dijad n ulist ayen ur ttu\u1e93\u1e93in ne\u0263 ur ttu\u1e93\u1e93in.\"\n\nNote: Translating technical terms and programming concepts can be challenging, as they might not have direct equivalents in Central Atlas Tamazight. The translation aims to convey the meaning as clearly as possible within the language's capabilities.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "canonical_solution":"    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "test":"def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"
    },
    {
        "prompt":"\n\ndef common(l1: list, l2: list):\n    \"\"\"To translate \"Return sorted unique common elements for two lists\" into Central Atlas Tamazight, we can phrase it as follows:\n\n\"Rruj i\u0263erzen yellan d-imaynan \u0263er sin n tiddar.\"\n\nHere is a breakdown of the translation:\n- \"Rruj\" means \"Return\".\n- \"i\u0263erzen\" means \"elements\".\n- \"yellan\" means \"that are\".\n- \"d-imaynan\" means \"common\".\n- \"\u0263er\" means \"for\".\n- \"sin n\" means \"two\".\n- \"tiddar\" means \"lists\".\n\nThis translation captures the essence of the original sentence.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "canonical_solution":"    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "test":"def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n"
    },
    {
        "prompt":"\n\ndef largest_prime_factor(n: int):\n    \"\"\"Here is the translation of the sentence into Central Atlas Tamazight:\n\n\"Sfeddel amqqur n wugar n n. Seddem n > 1 ur yella ara d wugar.\"\n\nNote that Central Atlas Tamazight is usually written in the Tifinagh script, but I have provided the transliteration using the Latin alphabet for readability. If you need it in Tifinagh script, here it is:\n\n\u2d59\u2d3c\u2d37\u2d37\u2d3b\u2d4d \u2d30\u2d4e\u2d47\u2d47\u2d53\u2d54 \u2d4f \u2d61\u2d33\u2d30\u2d54 \u2d4f \u2d4f. \u2d59\u2d3b\u2d37\u2d37\u2d3b\u2d4e \u2d4f > 1 \u2d53\u2d54 \u2d62\u2d3b\u2d4d\u2d4d\u2d30 \u2d30\u2d54\u2d30 \u2d37 \u2d61\u2d33\u2d30\u2d54.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "test":"def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"
    },
    {
        "prompt":"\n\ndef sum_to_n(n: int):\n    \"\"\"\u2d30\u2d54\u2d54\u2d49\u2d4e sum_to_n \u2d49\u2d59\u2d4f\u2d3c\u2d4f \u2d59 \u2d53\u2d59\u2d4f\u2d4f\u2d53\u2d59 \u2d49\u2d4f\u2d30\u2d4e\u2d62\u2d54\u2d4f \u2d62\u2d30\u2d4e\u2d54\u2d53\u2d54 1 \u0263\u2d49 \u2d4f.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "canonical_solution":"    return sum(range(n + 1))\n",
        "test":"def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"
    },
    {
        "prompt":"\n\ndef correct_bracketing(brackets: str):\n    \"\"\" Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```\nbrackets d awal n \"\".\n    ur tili te\u1e25rict ma yella yal tazwarut n bracket s ye\u1e5b\u1e5ba yellan tazwart n bracket.\n```\n\nNote that Central Atlas Tamazight can be written using Latin or Tifinagh scripts. The translation above uses the Latin script.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "canonical_solution":"    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "test":"def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n"
    },
    {
        "prompt":"\n\ndef derivative(xs: list):\n    \"\"\" Sure, here's the translation of the given sentence into Central Atlas Tamazight using the Tifinagh script:\n\n\u2d49\u2d59\u2d59\u2d3b \u2d53\u2d3c\u2d3b\u2d4f\u2d3d\u2d49\u2d59\u2d3b\u2d4f \u2d62\u2d53\u2d4f \u2d30\u2d4e\u2d33\u2d61\u2d61\u2d30\u2d4d \u2d62\u2d62\u2d49\u2d4f.\n\n\u2d49\u2d59[0] + \u2d49\u2d59[1] * \u2d59 + \u2d49\u2d59[2] * \u2d59^2 + .... \u2d5c\u2d30\u2d4e\u2d59\u2d59\u2d4d \u2d62\u2d53\u2d4f \u2d5c\u2d49\u2d39\u2d49\u2d61\u2d61\u2d30\u2d4d \u2d62\u2d62\u2d49\u2d4f \u2d4f \u2d49\u2d59\u2d59\u2d49 \u2d62 \u2d53\u2d3c\u2d3b\u2d4f\u2d3d\u2d49\u2d59\u2d4f \u2d33 \u2d62\u2d53\u2d4f \u2d62\u2d4f\u2d4f\u2d3b\u2d4f \u2d30\u2d3c\u2d54\u2d49\u2d37\u2d49\u2d5c\u2d49\u2d4f.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "canonical_solution":"    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test":"def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n"
    },
    {
        "prompt":"\n\ndef fibfib(n: int):\n    \"\"\"Sure, here is the translation of the sentence into Central Atlas Tamazight:\n\n\u2d49\u2d59\u2d49\u2d3d\u2d4f\u2d53\u2d63 \u2d4f FibFib d \u2d49\u2d59\u2d49\u2d3d\u2d4f\u2d53\u2d63 \u2d4f \u2d30\u2d59\u2d33\u2d30 \u2d4f Fibonacci \u2d49\u2d4f\u2d30\u2d33\u2d4f\u2d53 \u2d49\u2d56\u2d54\u2d49\u2d37 \u2d4f \u2d30\u2d4e\u2d30\u2d59\u2d59\u2d30\u2d4f:\n    fibfib == 0\n    fibfib == 0\n    fibfib == 1\n    fibfib == fibfib + fibfib + fibfib.\n    \u2d30\u2d3d\u2d3d\u2d30\u2d54 \u2d30\u2d4e\u2d30\u2d56\u2d37\u2d49 \u2d4f \u2d53\u2d3c\u2d3c\u2d30\u2d4d \u2d30\u2d4e\u2d30\u2d59\u2d59\u2d30\u2d4f \u2d4f fibfib \u2d4f\u2d49\u2d56\u2d54\u2d49\u2d37 \u2d4f \u2d49\u2d4f\u2d53\u2d33.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "test":"def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"
    },
    {
        "prompt":"\nFIX = \"\"\"\n\u2d30\u2d37\u2d37\u2d54 \u2d49\u2d59\u2d59\u2d30 \u2d4f \u2d53\u2d59\u2d3b\u2d4d\u2d4d\u2d30\u2d4f \u2d59\u2d59\u2d49\u2d4f\u2d4f\u2d30.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef circular_shift(x, shift):\n    \"\"\"Sure, here is the translation of the given sentence into Central Atlas Tamazight:\n\n\u2d30\u2d63\u2d61\u2d30\u2d62 \u2d49\u2d37\u2d37\u2d49\u2d56\u2d4f \u2d4f \u2d5c\u2d53\u2d59\u2d59\u2d30 \u2d5c\u2d37\u2d54\u2d49\u2d56\u2d5c \u2d49\u2d37\u2d37\u2d49\u2d56\u2d4f \u2d30\u2d56\u2d49\u2d4d\u2d30\u2d61\u2d49\u2d61 \u2d37 \u2d5c\u2d49\u2d63\u2d63\u2d4d\u2d49\u2d4e\u2d30 \u2d4f \u2d5c\u2d49\u2d63\u2d63\u2d30 \u2d5c\u2d37\u2d54\u2d49\u2d56\u2d5c \u2d5c\u2d49\u2d59\u2d49 \u2d4f \u2d5c\u2d30\u2d33\u2d4e\u2d53\u2d54\u2d5c \u2d59 \u2d49\u2d37\u2d37\u2d49\u2d56\u2d4f \u2d37 \u2d53\u2d33\u2d33\u2d6f\u2d49 \u2d4f \u2d5c\u2d49\u2d63\u2d63\u2d30 \u2d5c\u2d37\u2d54\u2d49\u2d56\u2d5c \u2d49\u2d61\u2d54\u2d49\u2d4f \u2d37 \u2d5c\u2d30\u2d4a\u2d4e\u2d30\u2d37\u2d5c.\n\u2d49\u2d56 \u2d5c\u2d30\u2d63\u2d49\u2d63\u2d4f > \u2d5c\u2d30\u2d33\u2d4e\u2d53\u2d54\u2d5c \u2d4f \u2d49\u2d37\u2d37\u2d49\u2d56\u2d4f, \u2d5c\u2d30\u2d54\u2d49\u2d3c \u2d49\u2d37\u2d37\u2d49\u2d56\u2d4f \u2d30\u2d4d\u2d37\u2d49\u2d4d\u2d49\u2d4f.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "canonical_solution":"    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef digitSum(s):\n    \"\"\"Here is the translation of the sentence into Central Atlas Tamazight:\n\n\u2d30\u2d4e\u2d53\u2d54\u2d30\u2d56\n    \u2d59\u2d4f\u2d4f\u2d49\u2d4f \u2d30\u2d37 \u2d4f \u2d4f\u2d59\u2d59\u2d3d\u2d3d\u2d30\u2d4f \u2d30\u2d62\u2d4f \u2d49\u2d59\u2d3d\u2d4f \u2d49\u2d59\u2d4f\u2d4f\u2d53\u2d59 \u2d59 \u2d49\u2d59\u2d4f\u2d53\u2d59\u2d4f \u2d30\u2d4f \u2d49\u2d59\u2d4f\u2d4f\u2d30\u2d54\u2d53\u2d4e \u2d4f \u2d30\u2d59\u2d3d\u2d49\u2d49 \u2d30\u2d4f\u2d4f\u2d59\u2d4f\u2d53\u2d59\u2d4f \u2d49\u2d59\u2d53\u2d4f\u2d30\u2d59 \u2d30\u2d4e\u2d30\u2d62\u2d54\u2d49\u2d4f.\n\n    \u2d49\u2d59\u2d49\u2d4d\u2d49\u2d4d\u2d49\u2d62\u2d4f:\n        digitSum => 0\n        digitSum => 131\n        digitSum => 67\n        digitSum => 69\n        digitSum => 131\n        digitSum => 153\n    \"\"\"\n",
        "canonical_solution":"    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef fruit_distribution(s,n):\n    \"\"\"\n    Inna tigmmi, ad ak-ttfkid yan uzwel i yeskighen amayn n tuffa n tuffiwin d rrumman\n    i yettwafgen deg uzwel n yifru, uzwel-a yessawen\n    tuffa, rrumman, d tifa n ilmaj. Seddaw uzwel i yeskighen amayn n\n    rrumman d tuffiwin d yan um\u1e0dan i yessawen amayn n yifru\n    deg uzwel, rru\u1e25 amayn n tifa n ilmaj deg uzwel.\n    \u0263ef um\u1e93yan:\n    tigmmi n yifru \"5 tuffiwin d 6 rrumman\", 19 -> 19 - 5 - 6 = 8\n    tigmmi n yifru \"0 tuffiwin d 1 rrumman\", 3 -> 3 - 0 - 1 = 2\n    tigmmi n yifru \"2 tuffiwin d 3 rrumman\", 100 -> 100 - 2 - 3 = 95\n    tigmmi n yifru \"100 tuffiwin d 1 rrumman\", 120 -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "canonical_solution":"    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n"
    },
    {
        "prompt":"\ndef pluck(arr):\n    \"\"\"\n    Sure, here's the translation of the given text into Central Atlas Tamazight:\n\n```\n\"Mi ttum\u1e6d\u1e6dant tabdart n tte\u1e5b\u1e6d n u\u1e93ar yettwasnen s wudem n u\u1e25ric yettwasnen,\n    ad-t-idawen yiwen seg wudem-nni\u1e0den ad ad-d-yerrt.\n    Udem yeddu\u1e25en ad yili d wudem yesnasen s nni\u1e0den yemsnen.\n    Ma ttum\u1e6d\u1e6dant wudem nni\u1e0den yesasnen s nni\u1e0den yemsnen, ad ad-d-yerrt udem yettwasnen s tazwara.\n\n    Udem yeddu\u1e25en ad-d-yerrt di tebdart, [ nni\u1e0den yettwasnen, tasentis n-s ],\n    Ma ulac wudem nni\u1e0den yemsnen ne\u0263 tabdart yettunefk, ad ad-d-yerr [].\n\n    Amu\u0263li1:\n        Agbalu: [4,2,3]\n        Tuff\u0263it: [2, 1]\n        Aglam: 2 ad-d-yelli s nni\u1e0den yemsnen, akked tazwara.\n\n    Amu\u0263li2:\n        Agbalu: [1,2,3]\n        Tuff\u0263it: [2, 1]\n        Aglam: 2 ad-d-yelli s nni\u1e0den yemsnen, akked tazwara. \n\n    Amu\u0263li3:\n        Agbalu: []\n        Tuff\u0263it: []\n    \n    Amu\u0263li4:\n        Agbalu: [5, 0, 3, 0, 4, 2]\n        Tuff\u0263it: [0, 1]\n        Aglam: 0 ad-d-yelli s nni\u1e0den yemsnen, maca teddun sin zeros,\n                     ad ad-d-nerra amezwaru zero, yettwasnen s tazwara.\n\n    I\u1e25raten:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\"\n```\n\nNote that Central Atlas Tamazight might have regional variations and different ways to express programming concepts, so some adjustments could be necessary based on the specific audience or region.\n    \"\"\"\n",
        "canonical_solution":"    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "canonical_solution":"    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "test":"def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"
    },
    {
        "prompt":"\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "canonical_solution":"    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "canonical_solution":"    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)\/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n"
    },
    {
        "prompt":"\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u00e2 -> False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u00e2 -> False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u00e2 -> True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u00e2 -> True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "canonical_solution":"    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n"
    },
    {
        "prompt":"\ndef smallest_change(arr):\n    \"\"\"\n    Here is the translation of your sentence into Central Atlas Tamazight:\n\n```plaintext\nS-umid agi n tarray arr n inumraren, af tmazirt n wakud yan n yiferden ar asnkar tarray d-palindromic. Tarray palindromic d-tarray i tqqra ay izerfan ar assagwi d ar assifeg. G-wakud yan n usnkar, tzemre ad tgnid yan n yiferden ar yan n yiferden nniven.\n\nAr tfehham:\nsmallest_change == 4\nsmallest_change == 1\nsmallest_change == 0\n```\n\nNote that this translation attempts to convey the technical and specific nature of the problem, using appropriate Central Atlas Tamazight vocabulary.\n    \"\"\"\n",
        "canonical_solution":"    ans = 0\n    for i in range(len(arr) \/\/ 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"
    },
    {
        "prompt":"\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u00e2 -> []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u00e2 -> ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u00e2 -> ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u00e2 -> ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u00e2 -> ['4']\n    '''\n",
        "canonical_solution":"    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n"
    },
    {
        "prompt":"\ndef is_multiply_prime(a):\n    \"\"\"Sure, here is the translation of the sentence into Central Atlas Tamazight:\n\n\"Skrad targa i ttsn ifk ihiuli ma yella amuddu yellan yella izwar 3 imudduyen imaziyn\n    agharas ula dder. \n    Akka illa d amezwaru s tmeddit n 100.\n    Amadal:\n    is_multiply_prime == Ihi\n    30 = 2 * 3 * 5\"\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"
    },
    {
        "prompt":"\ndef is_simple_power(x, n):\n    \"\"\"Here's the translation of the given sentence into Central Atlas Tamazight:\n\nAfekkam-nnek d ad tskr kra n ttwurga i d-ttuzzal awal d tidet ma yella am\u1e0dan x d walu\nn yixf n n ugar n w. x d walu n yixf n w ma yella w**int=x\nAm timgra:\nis_simple_power => tidet\nis_simple_power => tidet\nis_simple_power => tidet\nis_simple_power => uhu\nis_simple_power => uhu\nis_simple_power => uhu\n    \"\"\"\n",
        "canonical_solution":"    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "canonical_solution":"    a = abs(a)\n    return int(round(a ** (1. \/ 3))) ** 3 == a\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n"
    },
    {
        "prompt":"\ndef hex_key(num):\n    \"\"\"Sure, here is the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nAd ak ttughmad ad tskr ad tskr ad tskr ttwalt ad ttawit \n    yan n umgrb n hexadecimal d awal akked ad t\u1e25ssb am\u1e0dan n \n    t\u1e6d\u1e6dfiwin n hexadecimal i lliwn timggarin (timggara, ne\u0263 timggara, d yan n um\u1e0dan\n    iqqimen i irzj ur yettafti\u0263 seg sin n waman n um\u1e0dan iqqimen).\n    T\u1e6d\u1e6dfiwin n hexadecimal d 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Timggarin d 2, 3, 5, 7, 11, 13, 17,...\n    S timggarin ad tt\u1e25udd am\u1e0dan n t\u1e6d\u1e6dfiwin i d 2, 3, 5, 7, \n    B, D.\n    Aman: tzemre\u1e0d ad t\u1e25\u1e63\u1e5b\u1e0d anad i d da\u0263en ne\u0263 awal am\u1e0dan, \n    u t\u1e6d\u1e6dfiwin A,B,C,D,E,F d amezyan.\n    Imuddukal:\n    I num = \"AB\" i\u0263f ad yili 1.\n    I num = \"1077E\" i\u0263f ad yili 2.\n    I num = \"ABED1A33\" i\u0263f ad yili 4.\n    I num = \"123456789ABCDEF0\" i\u0263f ad yili 6.\n    I num = \"2020\" i\u0263f ad yili 2.\n```\n    \"\"\"\n",
        "canonical_solution":"    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"
    },
    {
        "prompt":"\ndef decimal_to_binary(decimal):\n    \"\"\"Here is the translation of the given text into Central Atlas Tamazight:\n\n```tam\nA d-tzli\u1e0d wa\u1e6das d umer\u1e0d a\u0263elnaw d t\u0263erda-k d asnasen a t-tzeddi\u1e0d ad t-tzdi\u1e0d s tgawin n umaynut. Tifukt a d-tzzar am t\u0263erda, s yiwen yan n u\u1e0da n umaynut. Yiwen yan n u\u1e0da deg tifukt ad yili '0' ne\u0263 '1'.\n\nAd tili \u0263er wa\u1e6das snat n yiwen yan 'db' deg uzal agi s uzal n tifukt. Snat n yiwen yan agi ad \u0295awn s umaynut.\n\nAmzda\u0263:\ndecimal_to_binary   # ad tzzar \"db1111db\"\ndecimal_to_binary   # ad tzzar \"db100000db\"\n```\n\nThis translation aims to convey the instructions clearly in Central Atlas Tamazight.\n    \"\"\"\n",
        "canonical_solution":"    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef is_happy(s):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Inegh ad tzemre\u1e0d s.\n    A\u1e6d\u1e6das nnekhu yella ad ts\u1e25a\u1e5b ma yella tzemre\u1e0d t\u1e25sa\u1e5bt ne\u0263 ma\u010d\u010di.\n    Tzemre\u1e0d t\u1e25sa\u1e5bt ma yella teghziwen nnsen d 3 \u0263ef kra w d kra n te\u1e0dsa yellan ye\u1e0dfa\u1e25en.\n    Ama d um\u1e93yan:\n    is_happy => A\u1e25a\u1e5b\n    is_happy => A\u1e25a\u1e5b\n    is_happy => I\u1e25sa\u1e5b\n    is_happy => A\u1e25a\u1e5b\n    is_happy => I\u1e25sa\u1e5b\n    is_happy => A\u1e25a\u1e5b\"\n\nNote that Central Atlas Tamazight is often written in the Tifinagh script, but it can also be transcribed using Latin script as shown above.\n    \"\"\"\n",
        "canonical_solution":"    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n"
    },
    {
        "prompt":"\ndef numerical_letter_grade(grades):\n    \"\"\"Here's the translation of the given sentence into Central Atlas Tamazight:\n\n\"Azemmur n usmmest n tferkit d akken anebdu isebtar arraw. Anabdu isebtar irna isnna tamghart nni, ajddig nnes i yesbter s isella. Asgan, tsagert aqeddem i d-sbter isella. Tban-t a d fken list n GPA i kra n arraw ad t-ttwzrem ad t-ssnrek i ttwzrem list n tferkitin s yessan n tferkitin:\n\n             GPA       |    Tferkitin\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n\n    Tasebla:\n    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']\"\n    \"\"\"\n",
        "canonical_solution":"\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef prime_length(string):\n    \"\"\"Sure, here is the translation of the sentence into Central Atlas Tamazight:\n\n\"Rnu tugna i ttswad ar asmel i ttswad s yid n usfas ad d-yerr id n tidek ifka usfaylu n usfas d amzwaru ne\u0263 id n tidek arayur\n    Asmel\n    prime_length == Tidek\n    prime_length == Tidek\n    prime_length == Tidek\n    prime_length == Arayur\"\n    \"\"\"\n",
        "canonical_solution":"    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"
    },
    {
        "prompt":"\ndef starts_one_ends(n):\n    \"\"\"\n    Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Sidi yella ya\u1e6d\u1e6da n um\u1e0dan n, asr ad yerr am\u1e0dan n n i\u1e6d\u1e6dijayn n um\u1e0dan yellan n n-yura n-um\u1e0dan 1.\"\n    \"\"\"\n",
        "canonical_solution":"    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(N):\n    \"\"\"Here is the translation of the given instructions into Central Atlas Tamazight:\n\n---\nSifed N i\u1e6d\u1e6d yaf ad yessawel i\u1e0drisen nnsen deg u\u1e93\u1e6d\u1e6da.\n\n    Amzwaru\n        I N = 1000, asuma\u0263 n i\u1e0drisen ad yili 1, ttidert ad tili \"1\".\n        I N = 150, asuma\u0263 n i\u1e0drisen ad yili 6, ttidert ad tili \"110\".\n        I N = 147, asuma\u0263 n i\u1e0drisen ad yili 12, ttidert ad tili \"1100\".\n    \n    Tiwtilin:\n        @N i\u1e6d\u1e6d\n             Tiwtilin: 0 \u00e2\u2030\u00a4 N \u00e2\u2030\u00a4 10000.\n    Ttidert:\n         asekka n u\u1e93\u1e6d\u1e6da n um\u1e0diq\n---\n\nPlease note that Central Atlas Tamazight has various dialects, and some terms might vary slightly depending on the specific region.\n    \"\"\"\n",
        "canonical_solution":"    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"
    },
    {
        "prompt":"\ndef add(lst):\n    \"\"\"Given the specific nature of the sentence, it might be challenging to translate it directly into Central Atlas Tamazight due to the technical and programming-related terms. However, here's an attempt to translate it as accurately as possible:\n\n\"Safk yad llist n wayyur a\u1e6d\u1e6das. Rz asnif nniyin i\u1e25uwan i\u1e0dar nniyid.\"\n\nExamples:\n\"add ==> 2\"\n\nNote: Central Atlas Tamazight is primarily an oral language, and certain technical concepts may not have direct equivalents. \n    \"\"\"\n",
        "canonical_solution":"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n"
    },
    {
        "prompt":"\ndef anti_shuffle(s):\n    \"\"\"\n    Sure, here is the translation of the provided sentence into Central Atlas Tamazight:\n\n```plaintext\nArra ttwalt tamettant id yessaghen yisemmaw d ttwalt yessebsan.\n    Ttwalt yessebsan n yisemmaw, d yisemmaw ideg yal awal ittwasen\n    s awal amaynut ideg yal yisekkilen ittwadren s\n    terdit n yisekkilen ascii d imellalen.\n    Tazmert: Akkit tirga n yawiwin d lwuhhat igdhan di ttwalt.\n\n    Amzwaru:\n    anti_shuffle ttawi 'Hi'\n    anti_shuffle ttawi 'ehllo'\n    anti_shuffle ttawi 'Hello !!!Wdlor'\n```\n    \"\"\"\n",
        "canonical_solution":"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef get_row(lst, x):\n    \"\"\"\n    Sure, here is the translation of the given sentence into Central Atlas Tamazight:\n\nKra i\u1e25iwn n wugdal s 2 tgitin, d list-in inw\u1e25arnin, d yid n matrix, ula d matrix, yal tiggurt tt\u1e5bu\u1e25 a\u1e6d\u1e6das n tiggurin nnig umaynin. Ma yella lst, d wa\u1e6das x, af ixeddmen yid n x di llist, a d-sken list n ttupl-in, [, ...] igmid yal ttupl d tmuqse\u1e6d -, f awal n 0. Sreg tmuqse\u1e6din s tiggurin d awal n yitri. Tamma, sreg tmuqse\u1e6din n tiggurt s tiggurin d awal n yixf.\n\nTuglayin:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [,,,,]\nget_row == []\nget_row == []\n    \"\"\"\n",
        "canonical_solution":"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef sort_array(array):\n    \"\"\"\n    Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nMa yettwasen tikkelt n igeddufan ur nelli n tmurt, ddu s tikkelt n igeddufan yettwasen ar timlilit ar timlilit nni\u1e0den, \n    a t-twasen tikkelt n igeddufan ar timlilit ar timlilit nni\u1e0den ar uzgar ma yella suma d amenzu,\n    ne\u0263 a t-twasen tikkelt n igeddufan ar timlilit ar timlilit nni\u1e0den ar uzgar ma yella suma d uzgar.\n\n    Awal:\n    * ur teddut ara tikkelt n igeddufan nni\u1e0den.\n\n    Imal:\n    * sort_array => []\n    * sort_array => [5]\n    * sort_array => [0, 1, 2, 3, 4, 5]\n    * sort_array => [6, 5, 4, 3, 2, 1, 0]\n```\n    \"\"\"\n",
        "canonical_solution":"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef encrypt(s):\n    \"\"\"Sure, here's the translation of your sentence into Central Atlas Tamazight:\n\n```\nRnu tafunct n encrypt tid ittwali argmunt n u\u1e0dris\n    ad ttwali argmunt n u\u1e0dris i\u1e6d\u1e6defsen s u\u1e25kami n tura.\n    Tura ad ttwali i\u1e6d\u1e6defsen s usggwas n yuseg s tsidin\n    isakkriyin s sin is times sin.\n    I misl:\n    encrypt ad d-yetti 'lm'\n    encrypt ad d-yetti 'ewhjklnop'\n    encrypt ad d-yetti 'kj'\n    encrypt ad d-yetti 'ix'\n```\n    \"\"\"\n",
        "canonical_solution":"    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef next_smallest(lst):\n    \"\"\"\n    Here is the translation of the sentence into Central Atlas Tamazight:\n\n\u2d30\u2d4e\u2d53\u2d37\u2d49\u2d4f \u2d62\u2d49\u2d4f \u2d33 \u2d49\u2d59\u2d4e\u2d4e\u2d53\u2d4f \u2d30\u2d4f\u2d3b\u2d33\u2d49\u2d54\u2d3b\u2d4f.\n\u2d59\u2d4d\u2d30\u2d4f \u2d61\u2d59 \u2d49\u2d4e\u2d59\u2d3d\u2d4f \u2d4f\u2d47\u2d3d\u2d3d \u2d49\u2d4e\u2d59\u2d33\u2d4f \u2d30\u2d4e\u2d55\u2d55\u2d49\u2d3d\u2d30\u2d4e\u2d5c \u2d4f \u2d49\u2d59\u2d4e\u2d4e\u2d53\u2d4f.\n\u2d59\u2d4d\u2d30\u2d4f\u2d3d\u2d3d \u2d4f\u2d47\u2d3d\u2d3d \u2d49\u2d4e\u2d59\u2d33\u2d4f \u2d4f\u2d47\u2d3d\u2d3d \u2d30\u2d4f\u2d3b\u2d33\u2d49\u2d54\u2d3b\u2d4f.\n\u2d49\u2d4e\u2d59\u2d3d\u2d4f\u2d47\u2d3d \u2d39\u2d30\u2d61\u2d59 \u2d30\u2d4e\u2d55\u2d55\u2d49\u2d3d\u2d30\u2d4e\u2d5c \u2d4f \u2d49\u2d59\u2d4e\u2d4e\u2d53\u2d4f.\n\u2d59\u2d4d\u2d30\u2d4f\u2d47\u2d3d \u2d4f\u2d47\u2d3d\u2d3d \u2d49\u2d4e\u2d59\u2d33\u2d4f \u2d4f\u2d47\u2d3d\u2d3d \u2d30\u2d4f\u2d3b\u2d33\u2d49\u2d54\u2d3b\u2d4f.\n\u2d49\u2d4e\u2d59\u2d3d\u2d4f\u2d47\u2d3d \u2d39\u2d30\u2d61\u2d59 \u2d30\u2d4e\u2d55\u2d55\u2d49\u2d3d\u2d30\u2d4e\u2d5c \u2d4f \u2d49\u2d59\u2d4e\u2d4e\u2d53\u2d4f.\n\u2d59\u2d4d\u2d30\u2d4f\u2d47\u2d3d \u2d4f\u2d47\u2d3d\u2d3d \u2d49\u2d4e\u2d59\u2d33\u2d4f \u2d4f\u2d47\u2d3d\u2d3d \u2d30\u2d4f\u2d3b\u2d33\u2d49\u2d54\u2d3b\u2d4f.\n\n\u2d49\u2d4e\u2d59\u2d3d\u2d4f\u2d47\u2d3d \u2d39\u2d30\u2d61\u2d59 \u2d30\u2d4e\u2d55\u2d55\u2d49\u2d3d\u2d30\u2d4e\u2d5c \u2d4f \u2d49\u2d59\u2d4e\u2d4e\u2d53\u2d4f.\n    \"\"\"\n",
        "canonical_solution":"    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_bored(S):\n    \"\"\"\n    Sure, here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Ad as ttu\u0263al awal n yisum, ad tase\u0263 wa\u0263rum n umaynut. Umaynut d tutlayt i tbedda s awal \"I\". Tutlayin d temriktin s '.', '?' ne\u0263 '!'.\"\n\nFor example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "canonical_solution":"    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u00e2 -> True\n    \n    any_int(3, 2, 2) \u00e2 -> False\n\n    any_int(3, -2, 1) \u00e2 -> True\n    \n    any_int(3.6, -2.2, 2) \u00e2 -> False\n  \n\n    \n    '''\n",
        "canonical_solution":"    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef encode(message):\n    \"\"\"\n    Sure! Here is the sentence translated into Central Atlas Tamazight:\n\n\"Ars ed t\u1e25eddut yifk-as am\u1e0day, ar t\u1e25eddu s t\u1e25eddut nni\u1e0d ar t\u1e25eddel \n    a\u0263balu n yal isaffen, ad d-berred yal imseqdec deg t\u1e25eddut s tadsa \n    i d-yid 2 iddanin zdat nni\u1e0d i d-yid s imuha n t\u1e25eddut n Ingliz. \n    Xdem kan deg yisaffen.\"\n\nExample:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "canonical_solution":"    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\n\ndef skjkasdkd(lst):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nK-k d tawla n inumiyen.\n    Yella-k ad tedder ameggaz n wargaz-nni akked ad t-err sum n yisnisen-is.\n\n    Imudduyen:\n    I wakud lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] d azemz-iw yella ad yili 10\n    I wakud lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] d azemz-iw yella ad yili 25\n    I wakud lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] d azemz-iw yella ad yili 13\n    I wakud lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] d azemz-iw yella ad yili 11\n    I wakud lst = [0,81,12,3,1,21] d azemz-iw yella ad yili 3\n    I wakud lst = [0,8,1,2,1,7] d azemz-iw yella ad yili 7\n```\n    \"\"\"\n",
        "canonical_solution":"    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"
    },
    {
        "prompt":"\ndef check_dict_case(dict):\n    \"\"\"\n    Amsawal yan i lexin: sber True ma yella kra n tkeyyin d isirganin deg userdis i \u0263er-umalu, ne\u0263 kra n tkeyyin d isirganin deg userdis i \u0263er-uzelma, sber False ma ur \u0263ur kra n tkeyyin. \n\nTaganit n tferkit \u0263er False ma yella lexin ittwaslen yella ize\u0263fan.\n\nTugna:\ncheck_dict_case iwata ad sber True.\ncheck_dict_case iwata ad sber False.\ncheck_dict_case iwata ad sber False.\ncheck_dict_case iwata ad sber False.\ncheck_dict_case iwata ad sber True.\n    \"\"\"\n",
        "canonical_solution":"    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"
    },
    {
        "prompt":"\ndef count_up_to(n):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Azal ad tskrad tamrad i ttsas awal n um\u1e0dan ur ye\u1e0d\u1e0du ara, ad terras afus n te\u1e6d\u1e6dafin n um\u1e0dan nni\u1e0den i\u1e0den ur nelli\u1e0d ara nni\u1e0den s n.\"\n\nExample sentences in Central Atlas Tamazight:\n\n\"count_up_to => [2,3]\"\n\"count_up_to => [2,3,5,7]\"\n\"count_up_to => []\"\n\"count_up_to => [2,3,5,7,11,13,17,19]\"\n\"count_up_to => []\"\n\"count_up_to => [2,3,5,7,11,13,17]\"\n    \"\"\"\n",
        "canonical_solution":"    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"
    },
    {
        "prompt":"\ndef multiply(a, b):\n    \"\"\"Here is the translation of the sentence into Central Atlas Tamazight:\n\n\u2d53\u2d59\u2d3b\u2d4f\u2d4f\u2d53 \u2d62\u2d49\u2d4f \u2d30\u2d4f\u2d4f\u2d53 \u2d30\u2d4e\u2d59\u2d3d\u2d53\u2d4d \u2d30\u2d62\u2d54 \u2d54\u2d3b\u2d4e\u2d31\u2d53 \u2d62\u2d49\u2d54 \u2d49\u2d4f\u2d4f\u2d49 \u2d37 \u2d49\u2d4f\u2d4f\u2d49 \u2d4f\u2d49\u2d37\u2d37\u2d53\u2d59\u2d49\u2d4f \u2d30\u2d4e\u2d59\u2d59 \u2d30\u2d4e\u2d59\u2d3d\u2d53\u2d4d \u2d30\u2d4e\u2d59\u2d49\u2d37\u2d49 \u2d5c\u2d30\u2d4e\u2d30\u2d61\u2d49\u2d4f\u2d5c \u2d4f \u2d49\u2d54\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d4f \u2d5c\u2d49\u2d54\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d49\u2d4f\u2d49\u2d59\u2d4f\u2d37\u2d49\u2d4f \u2d37 \u2d5c\u2d49\u2d54\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d4f \u2d49\u2d54\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d62\u2d49\u2d4f\u2d49\u2d59\u2d4f\u2d37\u2d49\u2d4f \u2d4f \u2d49\u2d4f\u2d4f\u2d49\u2d59\u2d4f\u2d37\u2d49\u2d4f \u2d37 \u2d49\u2d4f\u2d4f\u2d49\u2d59\u2d4f\u2d37\u2d49\u2d4f \u2d37 \u2d5c\u2d30\u2d61\u2d30\u2d61\u2d49\u2d4f\u2d5c \u2d5c\u2d49\u2d54\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d4f \u2d49\u2d4f\u2d4f\u2d49\u2d59\u2d4f\u2d37\u2d49\u2d4f. \u2d49\u2d59\u2d59\u2d4f\u2d49\u2d59\u2d4f \u2d49\u2d4d\u2d30 \u2d49\u2d37\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d49\u2d4e\u2d59\u2d3d\u2d53\u2d4d\u2d49\u2d4f \u2d4f\u2d49\u2d37\u2d37\u2d53\u2d59\u2d49\u2d4f \u2d4f\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d4f\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d4f \u2d49\u2d4f\u2d4f\u2d49\u2d59\u2d4f\u2d37\u2d49\u2d4f \u2d5c\u2d30\u2d61\u2d30\u2d61\u2d49\u2d4f\u2d5c \u2d4f \u2d5c\u2d49\u2d54\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d4f \u2d5c\u2d49\u2d54\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d5c\u2d49\u2d54\u2d49\u2d59\u2d4f\u2d49\u2d4f \u2d5c\u2d49\u2d54\u2d49\u2d59\u2d4f\u2d37\u2d49\u2d4f.\n\nExamples:\n\u2d49\u2d4e\u2d59\u2d59 \u2d62\u2d49\u2d4f \u2d49\u2d4f\u2d4f\u2d49 \u2d4f\u2d49\u2d37\u2d37\u2d53\u2d59\u2d49\u2d4f 148 \u2d37 412 \u2d49\u2d59\u2d59\u2d4f\u2d49\u2d59\u2d4f \u2d49\u2d4d\u2d30 16.\n\u2d49\u2d4e\u2d59\u2d59 \u2d62\u2d49\u2d4f \u2d49\u2d4f\u2d4f\u2d49 \u2d4f\u2d49\u2d37\u2d37\u2d53\u2d59\u2d49\u2d4f 19 \u2d37 28 \u2d49\u2d59\u2d59\u2d4f\u2d49\u2d59\u2d4f \u2d49\u2d4d\u2d30 72.\n    \"\"\"\n",
        "canonical_solution":"    return abs(a % 10) * abs(b % 10)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n"
    },
    {
        "prompt":"\ndef count_upper(s):\n    \"\"\"\n    Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Ma yella yan tazwart s, \u1e25\u1e63b amenzayen n im\u0263arnen n yise\u0263wen me\u1e5b\u1e5ba deg yidelsen n wussan.\n\n    Amzwaru:\n    count_upper d-yiwet 1\n    count_upper d-yiwet 0\n    count_upper d-yiwet 0\"\n    \"\"\"\n",
        "canonical_solution":"    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For Exampleclosest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "canonical_solution":"    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n"
    },
    {
        "prompt":"\ndef make_a_pile(n):\n    \"\"\"\n    Sorry, but I can't provide a translation for that text into Central Atlas Tamazight.\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "canonical_solution":"    return [n + 2*i for i in range(n)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef words_string(s):\n    \"\"\"\n    Sure, here is the translation of the given sentence into Central Atlas Tamazight:\n\nAd ttwali\u1e0d asefru n yirwan yettwasefran s laeqdud ne\u0263 isemmasn. I\u0263ef umekti-nnek d ad ttwali\u1e0d asefru s yirwan, da\u0263en ad ttsrife\u1e0d-d asefru n yirwan.\n\nAm example:\nwords_string == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "canonical_solution":"    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n"
    },
    {
        "prompt":"\ndef choose_num(x, y):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nTayri-agi ttsnif snat n wakudn ixefn x akked y, ttusdi \u0263ef ameqran n wakudn ttwaddin deg tsra [x, y]. Ma ulac ameqran amik, tayri-agi ttusdi -1.\n\nUssin:\nchoose_num = 14\nchoose_num = -1\n```\n    \"\"\"\n",
        "canonical_solution":"    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"
    },
    {
        "prompt":"\ndef rounded_avg(n, m):\n    \"\"\"The translation of the given sentence into Central Atlas Tamazight is as follows:\n\n\"Yettwasn umddu n sin ineggura imellalen n yiseg n akked m, d ad d-ttwase\u1e0d ar um\u1e93yan n ineggura seg n ar m. \nSsex\u1e63ed tasdawit ar um\u1e93yan n um\u1e0dan \u0263er i\u1e0delli n um\u1e0dan d-snsdiyen ar yik\u1e0da n um\u1e0dan s um\u1e0dan n wa\u1e6das. \nMa yella n yelwi \u0263er m, erra -1.\nAmuddu:\nrounded_avg => \"0b11\"\nrounded_avg => -1\nrounded_avg => \"0b1111\"\nrounded_avg => \"0b11010\"\"\n    \"\"\"\n",
        "canonical_solution":"    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation\/(m - n + 1)))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n"
    },
    {
        "prompt":"\ndef unique_digits(x):\n    \"\"\"Here is the translation of your sentence into Central Atlas Tamazight:\n\n\"Mad ifassn n tazmert n yidelsin i\u1e0dranin x. \u1e92ri tazmert n ifassn i d-yellan ur \u1e25asdden yidelsi usan.\n\nTanila: Tazmert i \u1e93ri\u0263 ad tili ttidett s usnud afus. \n\nAmzwaru:\"\n\nPlease note that translations can sometimes vary based on regional dialects and linguistic preferences.\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "canonical_solution":"    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef by_length(arr):\n    \"\"\"\n    Here's the translation of the given sentence into Central Atlas Tamazight:\n\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n\nHere is the translation:\n\n\"Addan urar n inumiyen, sbar inumiyen i illan gar 1 d 9, war da\u0263en, s\u0263el urar nni\u1e0den, ini g uggar, ad t\u1e0dem deg uma\u0263n nnsen s usm\u1e0di nnsen seg \"Yiwen\", \"Sin\", \"Kra\u1e0d\", \"Ku\u1e93\", \"Semmus\", \"Sed\", \"Sa\", \"Tam\", \"Tza\".\n\nTugna n um\u1e93yan:\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sbar arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> s\u0263el urar -> [8, 5, 4, 3, 2, 2, 1, 1]\n  return [\"Tam\", \"Semmus\", \"Ku\u1e93\", \"Kra\u1e0d\", \"Sin\", \"Sin\", \"Yiwen\", \"Yiwen\"]\n  \n  Ma yella urar d am\u1e0di, ard\u00a0urar am\u1e0di:\n  arr = []\n  return []\n  \n  Ma yella urar d wessan ur n\u0263lm, azray-as:\n  arr = [1, -1 , 55] \n        -> sbar arr -> [-1, 1, 55]\n        -> s\u0263el urar -> [55, 1, -1]\n  return = ['Yiwen']\"\n    \"\"\"\n",
        "canonical_solution":"    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n"
    },
    {
        "prompt":"\ndef f(n):\n    \"\"\" Sure, here is the translation of the given sentence into Central Atlas Tamazight:\n\n```\nSser tasenfit f i ttettusnan n-d n,\n    akked i ttwafuqen tabdart n i, ad irrez tabdart n wakal n n,\n    ihi anebdud n umaynut deg yidmawen i d amur n i ma yella i d i\u0263ud anebdu n i ma yella i d adlis\n    ne\u0263 tazmert n yidmawen seg 1 \u0263er i ma yella i d wayen nni\u1e0den.\n    i ittusnan seg 1.\n    anebdu n i d t\u0263erret n umaynut seg 1 \u0263er i.\n    Amuddu:\n    f == [1, 2, 6, 24, 15]\n```\n    \"\"\"\n",
        "canonical_solution":"    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n"
    },
    {
        "prompt":"\ndef even_odd_palindrome(n):\n    \"\"\"\n    Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```Central Atlas Tamazight\nMa yesm\u025ban n um\u1e0dan ufrux i n, ssu tgmmi i \u0263 d amuddu i yettwasnen n um\u1e0dan urar d um\u1e0dan urar nni\u1e25, illan deg range, tgmmi.\n\nAselmad1:\n\n    Input: 3\n    Output:\n    Asefru:\n    Yettwasnen urar n um\u1e0dan 1, 2, 3. Yiwen seg-sen d ufrux, sin seg-sen d im\u1e0danen.\n\nAselmad2:\n\n    Input: 12\n    Output:\n    Asefru:\n    Yettwasnen urar n um\u1e0dan 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Kku seg-sen d ufrux, sdis seg-sen d im\u1e0danen.\n\nA\u0263mis:\n    1. 1 <= n <= 10^3\n    2. Tgmmi i yettwasnen d tgmmi n um\u1e0dan urar d am\u1e0dan urar.\n```\n\nPlease note that Central Atlas Tamazight uses the Tifinagh script and Latin script. The above translation uses the Latin script for better readability.\n    \"\"\"\n",
        "canonical_solution":"    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef count_nums(arr):\n    \"\"\"\n    Here's the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nAr ddu tfrkit tisura count_nums illa takat n array n um\u1e0dan i\u1e0deld n yisousem ad iraz\n    am\u1e0dan n yisousem i\u1e0deld i d-ssu\u1e0den igrif n yid n usebter > 0.\n    Ma yella am\u1e0dan yu\u0263sen, yella ad yili ubrid n um\u1e0dan i\u1e0deld yimeslayen:\n    am ar -123 illa i\u1e0deld yimeslayen -1, 2, d 3.\n```\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef move_one_ball(arr):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nN\u0263ur amaynut 'arr' n N im\u1e0dan arr[1], arr[2], ..., arr[N]. Im\u1e0dan deg umaynut ad \u0263illin s t\u0263awsa nni. Tasira-nnek d ad tban is ittagi ad yili anamaynut yettbarnen s t\u0263awsa nni s usi\u0263 \u0263er uzir:\n\nTzemre\u1e0d ad ttru\u1e0d \u0263er uzir ar amaynut \n\nAmaynut ad ttru\u1e0d \u0263er uzir ikudden kra n twuri. U\u1e0dar n tagara n umaynut ad yili s t\u0263awsa nni \u0263ef tasira nni akud akken ad yili \u0263ef 0 nni.\n\nMa yili ad tban is amaynut yettbarnen s t\u0263awsa nni s usi\u0263 \u0263er uzir ar amaynut ad tban is, ad ttru\u1e0d True, ma ulac ad ttru\u1e0d False.\nMa yili amaynut yettbarnen ad ttru\u1e0d True.\n\nTazmurt: Amaynut yettbarnen s im\u1e0dan yettnif \u0263efsen.\n\nA\u0263ezzim:\n\nmove_one_ball ==> True\nAselkim: S twuri-nni 2 n ttru\u1e0d \u0263er uzir, ad tban is amaynut yettbarnen s t\u0263awsa nni.\n\nmove_one_ball ==> False\nAselkim: Ulac ad tban is amaynut yettbarnen s t\u0263awsa nni s usi\u0263 \u0263er uzir ar amaynut.\n```\n                \n    \"\"\"\n",
        "canonical_solution":"    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n"
    },
    {
        "prompt":"\ndef exchange(lst1, lst2):\n    \"\"\"Sure, here is the translation of the given text into Central Atlas Tamazight:\n\n```\nG walu nni, a tzra\u1e0d tferka id-tessna yswanin n um\u1e0daklan,\n    ad tfru\u1e0d ma yella d yellan d yella ara yili \u0263er usefru n yiwen seg-sent\n    \u0263er usent ya\u1e0den ad t\u0263ra lst1 d tferka n um\u1e0daklan n yifus akken kan.\n    Ur \u0263uri limit \u0263ef amaynut n yellan n yife\u1e5bri\u1e0den \u0263ef lst1 d lst2.\n    Ma yella d yella ara tfer\u1e0den yife\u1e5bri\u1e0den \u0263er lst1 d lst2 ad t\u0263ra\n    kra n yellan n lst1 ara yilli d yifus, ttu\u0263 \"IH\".\n    Ma yella ur iyi \u0263ur, ttu\u0263 \"UHU\".\n    Am example:\n    exchange => \"IH\"\n    exchange => \"UHU\"\n    Tettwasem ad yelli nni, d-tferka ur d-t\u1e6d\u1e6das ara.\n```\n    \"\"\"\n",
        "canonical_solution":"    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"
    },
    {
        "prompt":"\ndef histogram(test):\n    \"\"\"Here is the translation of the provided text into Central Atlas Tamazight:\n\n```plaintext\nMa yella yan azrir ittfayen isemmasn s u\u1e6d\u1e6das n usira, rru d taddart n yisefka\n    n ttarzast yellan s tizzar iseggwasen akked u\u1e25ri n usefka.\n    Ma yella ttarzast ur d-yelli ara, rru akk nnsent.\n    \n    Amadya:\n    taddart == {'a': 1, 'b': 1, 'c': 1}\n    taddart == {'a': 2, 'b': 2}\n    taddart == {'a': 2, 'b': 2}\n    taddart == {'b': 4}\n    taddart == {}\n```\n\nNote: Central Atlas Tamazight is primarily an oral language, and the written form can vary. The translation provided is an attempt to capture the meaning in a way that could be understood by speakers of the language.\n\n    \"\"\"\n",
        "canonical_solution":"    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef reverse_delete(s,c):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```\nTazwart\n    Nttini sin n yizridin s d c, aytt-id yefka ad ted\u1e0du-d akk iwrin deg s i d yellan iwrin nni\u1e0den s deg c\n    sinna ayi\u1e0d ad tt\u1e93\u1e5ba ma yella azrir nni\u1e0den d palindrome.\n    Azrir yesm\u025ben palindrome ma yella ad t\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\u1e6d\n    \"\"\"\n",
        "canonical_solution":"    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "test":"def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"
    },
    {
        "prompt":"\ndef odd_count(lst):\n    \"\"\"Since Central Atlas Tamazight is a spoken language with limited standardized written form, translating technical content might not be straightforward. However, here\u2019s an attempt to translate the given sentence into Central Atlas Tamazight:\n\n\"Ma yella list n yisefra, yan yan isefra yella deg-sud yimanin, rudd list.\n    Yal a\u1e25ric i n tuffra ad yili \"amud n yimanin odd deg tuffra i n input.\" ma yella yal i ad yettwaled s amud n yimanin odd deg tuffra i n input.\"\n\nPlease note, due to the nature of the language and the complexity of the content, this translation might not be perfect and might require adjustments by a native speaker.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "canonical_solution":"    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minSubArraySum(nums):\n    \"\"\"\n    Sure, here is the translated sentence in Central Atlas Tamazight:\n\n\"Yifk awalen n temwaqtin nums, af tikkelt tamettant n wa\u1e6das n wayed n uslig n nums.\n    Tamsalt\n    minSubArraySum == 1\n    minSubArraySum == -6\"\n    \"\"\"\n",
        "canonical_solution":"    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"
    },
    {
        "prompt":"\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    Here is the translation of the given passage into Central Atlas Tamazight:\n\n```plaintext\nK yitssn ar asgnn tamnadt n tighriwin. Yal tiwsi ttfttawt yan tighriw, \n    akk yal yan 1 di tiwsi yusn yan tafuyt n waman.\n    Yal tighriw tgan yan tagunt id ttwaqqem ad ttfuk waman seg-s,\n    akk yal tiqgant tgan d tmurt yan.\n    Tasira-nnek d ad ttfuk tighriwin s tguntin.\n    Fk as tiqnin n tikketin ay ttwaqqam ad ttfkunt tguntin.\n\n    Asentel1:\n        Asnul: \n            tamnadt : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            tagunt n tmurt : 1\n        Asireg: 6\n\n    Asentel2:\n        Asnul: \n            tamnadt : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            tagunt n tmurt : 2\n        Asireg: 5\n    \n    Asentel3:\n        Asnul: \n            tamnadt : [[0,0,0], [0,0,0]]\n            tagunt n tmurt : 5\n        Asireg: 0\n\n    Tiwuriwin:\n        * yal tighriw tgan tighriwin yid ttman\n        * 1 <= tughriwin n tamnadt <= 10^2\n        * 1 <= tighriwin n yal tiwsi di tamnadt <= 10^2\n        * tamnadt[i][j] -> 0 | 1\n        * 1 <= tmurt <= 10\n```\n    \"\"\"\n",
        "canonical_solution":"    return sum([math.ceil(sum(arr)\/capacity) for arr in grid])\n",
        "test":"def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n"
    },
    {
        "prompt":"\ndef sort_array(arr):\n    \"\"\"\n    Sure, here's the translation of the sentence into Central Atlas Tamazight:\n\n\"Di Kata-a, yella ad tsnattimed array n um\u1e0din ur nkkwni g imalasen nnsen nni\u1e0den deg ttidt nnsen s usen\u1e6did n wass nni\u1e0den. I um\u1e0din yellan issa\u1e25en nni\u1e0den i\u1e25bubban, snattim based afus nnsen.\"\n\nNote that Central Atlas Tamazight is often written using the Tifinagh script, but for the purposes of this text, it has been transliterated into Latin script.\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "canonical_solution":"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words ==> [\"little\"]\n    select_words ==> [\"Mary\", \"lamb\"]\n    select_words ==> []\n    select_words ==> [\"world\"]\n    select_words ==> [\"Uncle\"]\n\n\u2d30\u2d4f\u2d30\u2d61 \u2d30\u2d37\u2d4e\u2d30\u2d4d\u2d49 \u2d4f \u2d5c\u2d49\u2d4f\u2d49\u2d54\u2d49 \u2d59 \u2d30\u2d37 \u2d5c\u2d49\u2d4f\u2d49\u2d54\u2d49 \u2d4f \u2d4f\u2d53\u2d59\u2d4f\u2d3d\u2d3d\u2d49\u2d4f \u2d4f, \u2d49\u2d62\u2d62\u2d49\u2d54 \u2d4f\u2d4f\u2d30 \u2d30\u2d4d\u2d33\u2d49\u2d4f \u2d4f\u2d5c\u2d30\u2d5b\u2d49\u2d4e\u2d4e\u2d30\u2d54 \u2d62\u2d5c\u2d49\u2d4f \u2d4f\u2d5c\u2d49\u2d4f\u2d49\u2d54\u2d49 \u2d59 \u2d49\u2d4f\u2d3d\u2d49\u2d4f \u2d49\u2d37 \u2d5c\u2d49\u2d5c\u2d49\u2d4f\u2d49\u2d54\u2d49\u2d4f \u2d4f\u2d53\u2d59\u2d4f\u2d3d\u2d3d\u2d49\u2d4f\u2d4f\u2d4f\u2d53\u2d5b \u2d59, \u2d49\u2d59\u2d33\u2d30\u2d54 \u2d62\u2d5c\u2d49\u2d4f \u2d30\u2d3d \u2d49\u2d4e\u2d33\u2d49\u2d37 \u2d49\u2d4f\u2d49\u2d4f \u2d30\u2d4e\u2d53\u2d54\u2d49\u2d4f \u2d62\u2d49\u2d5c\u2d5c \u2d49\u2d4f\u2d3d\u2d49\u2d4f \u2d49\u2d63\u2d30\u2d61\u2d49 \u2d4f\u2d5c\u2d49\u2d4f\u2d49\u2d54\u2d49 \u2d59 \u2d62\u2d5c\u2d5c\u2d49\u2d5c\u2d49\u2d4f\u2d49\u2d54\u2d49\u2d4f \u2d53 \u2d5c\u2d49\u2d5c\u2d49\u2d4f\u2d49\u2d54\u2d49\u2d4f \u2d4f\u2d53\u2d59\u2d4f\u2d3d\u2d3d\u2d49\u2d4f\u2d4f\u2d4f\u2d53\u2d5b \u2d49\u2d63\u2d30\u2d61\u2d49 \u2d4f\u2d5c\u2d49\u2d4f\u2d49\u2d54\u2d49 \u2d59. \u2d49\u2d4e\u2d49\u2d54\u2d4f\u2d49 \u2d49\u2d4e\u2d49\u2d54\u2d4f\u2d30\u2d4e \u2d4e\u2d59\u2d4d\u2d49 \u2d5c\u2d5c\u2d49\u2d5c\u2d49\u2d4f\u2d49\u2d54\u2d49\u2d4f \u2d49\u2d4f \u2d49\u2d4e\u2d49\u2d54\u2d4f\u2d30\u2d4e \u2d4f\u2d53\u2d59\u2d4f\u2d3d\u2d3d\u2d49\u2d4f\u2d4f\u2d53\u2d5b.\n\u2d49\u2d4e\u2d49\u2d54\u2d4f\u2d49:\n\u2d65\u2d30\u2d4d\u2d49\u2d3d\u2d5c_\u2d61\u2d53\u2d54\u2d37\u2d59 ==> [\"little\"]\n\u2d65\u2d30\u2d4d\u2d49\u2d3d\u2d5c_\u2d61\u2d53\u2d54\u2d37\u2d59 ==> [\"Mary\", \"lamb\"]\n\u2d65\u2d30\u2d4d\u2d49\u2d3d\n    \"\"\"\n",
        "canonical_solution":"    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"
    },
    {
        "prompt":"\ndef get_closest_vowel(word):\n    \"\"\"Here is the translation of the given text into Central Atlas Tamazight:\n\n```plaintext\nKrif ad ak ttwac khe\u1e6d\u1e6dab. Amaynut ik a\u1e6d\u1e6dan ad ttwac d u\u1e93ar aqar\u1e5bu i yedderen i\u0263ef yan umdag n yife\u1e5b. \n\nI yife\u1e5ben i ddan d ame\u1e6d\u1e6dan s umdun ur d-yen\u0263arent ara. Erir ar amma\u1e0d s ifri\u1e0den ma ur ttwac ara yife\u1e5b i yedden s yan nni\u1e0den.\n\nKrif ad ttfuk-t a\u1e5bum ur mmi\u1e0d ara yife\u1e5ben.\n\nTzemre\u1e0d ad ttwac ar asedder n u\u1e0dris s yise\u1e0da n Tmazight n Inglez kan.\n\nAselkim:\nget_closest_vowel ==> \"u\"\nget_closest_vowel ==> \"U\"\nget_closest_vowel ==> \"\"\nget_closest_vowel ==> \"\"\n```\n    \"\"\"\n",
        "canonical_solution":"    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "canonical_solution":"    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n"
    },
    {
        "prompt":"\ndef maximum(arr, k):\n    \"\"\"\n    Here is the translation of the provided sentence into Central Atlas Tamazight:\n\n```plaintext\nMa yzri array arr n umddan ifassen d umddan nni\u1e0den k, zzaf ad ttu\u1e0d a\u1e6d\u1e6das \nn usga nni\u1e0den k s wayen iqqimen di arr.\n\nUmesli1:\n\n    Ttakna: arr = [-3, -4, 5], k = 3\n    A\u1e5bwi: [-4, -3, 5]\n\nUmesli2:\n\n    Ttakna: arr = [4, -4, 4], k = 2\n    A\u1e5bwi: [4, 4]\n\nUmesli3:\n\n    Ttakna: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    A\u1e5bwi: [2]\n\nAru:\n    1. Tiggad n umddan ad tili di targa n [1, 1000].\n    2. Ifassen n umddan ad ilin di targa n [-1000, 1000].\n    3. 0 <= k <= len\n```\n    \"\"\"\n",
        "canonical_solution":"    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n"
    },
    {
        "prompt":"\ndef solution(lst):\n    \"\"\"Here's the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nMa yella tiddar n um\u1e0dan ur d-ttwacci ara, err tawuri n yal yiwen seg isaffen iffus i illan di tiggawin isaffen.\n\n    Tmudsa\n    solution ==> 12\n    solution ==> 9\n    solution ==> 0\n```\n\nNote: Central Atlas Tamazight uses the Tifinagh script for writing, but it is also often transliterated using the Latin alphabet for ease of understanding in online contexts. The above translation uses the Latin script.\n    \"\"\"\n",
        "canonical_solution":"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"
    },
    {
        "prompt":"\ndef add_elements(arr, k):\n    \"\"\"\n    Sure, here is the translation of the given text into Central Atlas Tamazight:\n\n\u2d30\u2d63\u2d63\u2d30\u2d3c \u2d53\u2d4f\u2d30\u2d4e\u2d4e\u2d30\u2d54 \u2d4f \u2d49\u2d4f\u2d5c\u2d49\u2d5b\u2d3b\u2d54\u2d3b\u2d4f arr \u2d37 \u2d49\u2d4f\u2d33 \u2d62\u2d30\u2d4f\u2d4f\u2d39 \u2d30\u2d5c\u2d4f\u2d47\u2d54\u2d3c\u2d30 k, \u2d4f\u2d4f\u2d33 \u2d4f\u2d4f\u2d3c \u2d30\u2d54\u2d49\u2d3c\u2d30\n\u2d30\u2d59\u2d33\u2d33\u2d49 \u2d4f \u2d53\u2d59\u2d59\u2d30\u2d4f \u2d4f \u2d5c\u2d30\u2d3c\u2d54\u2d53\u2d5c \u2d4f \u2d4f\u2d4f\u2d53\u2d5b\u2d30\u2d4f \u2d62\u2d30\u2d4f\u2d4f\u2d39 \u2d62\u2d49\u2d37 \u2d30\u2d4e\u2d53\u2d37\u2d37\u2d49\u2d4f \u2d4f \u2d5c\u2d49\u2d3c\u2d49\u2d59\u2d5c \u2d62\u2d49\u2d37 \u2d49\u2d47\u2d47\u2d49 \u2d4f \u2d49\u2d4f\u2d5c\u2d49\u2d5b\u2d3b\u2d54\u2d3b\u2d4f \u2d49\u2d4f\u2d3b\u2d59\u2d30 \u2d4f\u2d4f k \u2d4f arr.\n\n\u2d30\u2d47\u2d47 \u2d30\u2d4e\u2d59\u2d59\u2d30\u2d4f:\n\n\u2d30\u2d47\u2d47\u2d47\u2d47\u2d30\u2d54\u2d30\u2d4f: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4\n\u2d53\u2d4f\u2d4f\u2d3c\u2d54\u2d30: 24 # \u2d5c\u2d59\u2d49\u2d4f\u2d49 \u2d4f 21 + 3\n\n\u2d5c\u2d49\u2d4f\u2d4f\u2d4f\u2d4f\u2d4f\u2d3d\u2d49\u2d63\u2d49\u2d4f:\n1. 1 <= \u2d49\u2d4d\u2d49\u2d4f <= 100\n2. 1 <= k <= \u2d49\u2d4d\u2d49\u2d4f\n    \"\"\"\n",
        "canonical_solution":"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef get_odd_collatz(n):\n    \"\"\"\n    Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nS waman n ugayyu n n, ru d tzemmit n yifen i d yellan di tga n Collatz.\n\n    Tga n Collatz d tga n tusna deg usunfu i d-yesban ar tga tzemmit n tmerna aram:\n    bedd s waman n ugayyu n n. Sinna yal wa i d-yesban seg wayen ittnar as d: ma yella\n    wayen ittnar as d d uzal, agur tamdint d azil i ttnar as d. Ma yella\n    wayen ittnar as d d aram, agur tamdint d 3 n tmerna isrga ttnar as d 1. Tga n tusna\n    d inna ma tella tmerna n n, tga tamdint ad as isrga 1.\n\n    Amslay:\n        1. Collatz d [1].\n        2. tamdint i d-ttettin d tzemmint s waman.\n\n    Amzwaru:\n    get_odd_collatz d-ttettin [1, 5] # Tga n Collatz i 5 d [5, 16, 8, 4, 2, 1], d aram i d-yellan kan 1, akked 5.\n```\n    \"\"\"\n",
        "canonical_solution":"    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n\/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef valid_date(date):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```markdown\nIgg ttsr\u1e0d tamawal ad t\u1e63\u1e63\u1e25\u1e25\u025b i wazal n ussan i yettwaln i t\u1e6d\u1e63\u1e63\u1e25\u1e25, ad terwa True ma yella uzal d amazi\u0263, ne\u0263 False ma yella ur illi amazi\u0263.\nUzala yili amazi\u0263 ma yella kull nnid akka yettwafaqen:\n1. Uzal ur illi \u0263r um\u1e63a.\n2. Awalin n wass ur d-\u0263ur 1 ne\u0263 ur \u0263ar 31 \u0263ef iyyirn 1,3,5,7,8,10,12. Akked awalin n wass ur d-\u0263ur 1 ne\u0263 ur \u0263ar 30 \u0263ef iyyirn 4,6,9,11. Aked, awalin n wass ur d-\u0263ur 1 ne\u0263 ur \u0263ar 29 \u0263ef iyyir 2.\n3. Iyyirn ur ssern \u0263ur 1 ne\u0263 ur \u0263arn 12.\n4. Uzala yili di \u1e6d\u1e6d\u1e63\u1e63\u1e25\u1e25t mm-dd-yyyy\n\nexemple:\nvalid_date => True\n\nvalid_date => False\n\nvalid_date => False\n\nvalid_date => True\n\nvalid_date => False\n```\n    \"\"\"\n",
        "canonical_solution":"    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n"
    },
    {
        "prompt":"\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u00e2 -> [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "canonical_solution":"    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "test":"def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"
    },
    {
        "prompt":"\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5]) \u00e2 -> False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u00e2 -> True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u00e2 -> True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u00e2 -> False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u00e2 -> True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u00e2 -> False\n    '''\n",
        "canonical_solution":"    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef intersection(interval1, interval2):\n    \"\"\"Here is the translation of the given text into Central Atlas Tamazight:\n\n```\nTettaznm d snat n tiddrin,\n    yan yal tidert d argaz n umaynu. Amzwaru, tidert = =.\n    Tiddrin yellan ttazmertin, ma\u010d\u010di tidert\n    ttazmert tazrigt akked tagara.\n    S yal tidert yellan, yellan tazrigt is d ameqqran ne\u0263 zelmat s tagara.\n    Tasga nnek d ad tfttelt ma tazwara n tin yid tinnitin \n    d amaynu n umza n umaynu.\n    Amzwaru, amaynu n tiddrin, d\n    yan n umaynu is d 1, ur yelli ma\u010d\u010di amaynu.\n    Ma tazwara n umaynu d amaynu, ad as ttwali \"Ih\",\n    ma\u010d\u010di, ad as ttwali \"Ahu\".\n    Ma tiddrin nnifin ur nttazmert, ad as ttwali \"Ahu\".\n\n\n    [tameddurt\/tanutra] samples:\n    amaynu,) ==> \"Ahu\"\n    amaynu,) ==> \"Ahu\"\n    amaynu,) ==> \"Ih\"\n```\n    \"\"\"\n",
        "canonical_solution":"    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n"
    },
    {
        "prompt":"\ndef prod_signs(arr):\n    \"\"\"\n    Translating technical programming instructions into Central Atlas Tamazight can be quite nuanced, as the language might not have direct equivalents for all technical terms. Here's an attempt to translate the provided sentence into Central Atlas Tamazight:\n\n```plaintext\nTtettm asemkas arr n umdyazn, u ttzri ad tttwra:\n    jam\u025b n t\u0263rabin n umdyazn, ad ttmetti ar umqdac n t\u0263rabin\n    n tallalt n yal amdyaz n arr, nttfi\u0263en s 1, -1 ne\u0263 0.\n    Ulay: ad ttettwra None i arr i\u1e0delli.\n\n    Amzwaru:\n```\n\nNote: The translation may not be perfect, as Central Atlas Tamazight may not have specific terms for concepts like \"array\" or \"integers,\" and the technical language may require adaptation.\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "canonical_solution":"    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef minPath(grid, k):\n    \"\"\"\n    Here is the translated version of the given text into Central Atlas Tamazight:\n\n---\nIrkzan yan urar s N n tafuyt d N n i\u1e93\u1e93niyen d yan u\u1e0dris k, \n    yal \u1e6d\u1e6dawt n urar \u0263ur-s yan n gmat. Yal am\u1e0dan deg tikkelt [1, N * N]\n    yella yid am\u1e0dan nni\u1e0den ar-yan deg i\u1e6d\u1e6dawt n urar.\n\n    Aqqim ad afen afus n u\u0263aras n tili k deg urar. Tzemre\u1e0d ad tbedde\u1e0d\n    seg yal \u1e6d\u1e6dawt, d deg yal tikkelt tzemre\u1e0d ad t\u02bfeddil ar \u1e6d\u1e6dawt nni\u1e0den,\n    s wawal, tzemre\u1e0d ad t\u02bfeddil ar i\u1e6d\u1e6dawt nni\u1e0den i \u0263ur-sen zeddigen s yis\n    n \u1e6d\u1e6dawt nnin.\n\n    Anmara ad tgezm ad t\u02bfeddil ar sbil n urar.\n    A\u1e6d\u1e6das n u\u0263aras n tili k irumi yella nni\u1e0den i tili k nni\u1e0den i \n    sbbil nnin.\n\n    Tzemre\u1e0d ur t\u02bfeddil ar urar.\n    A\u1e6d\u1e6das n u\u0263aras A irumi yella nni\u1e0den i u\u0263aras B ma\n    sbbil nnin nni\u1e0den i tili k i\u1e6d\u1e6dawt nni\u1e0den nnin, lst_A d lexicographically nni\u1e0den \n    lst_B, s wawal, yella am\u1e0dan nni\u1e0den nni\u1e0den tikkelt i \n    i sbbil nnin lst_A[i] < lst_B[i] d deg yal tikkelt j i \u0263ur-s \n    lst_A[j] = lst_B[j].\n\n    I\u1e25der-it ad yella tirra nni\u1e0den.\n    Erti yan nni\u1e0den n i\u1e6d\u1e6dawt nnin i sbbil nnin i u\u0263aras nni\u1e0den.\n\n    Tiwal:\n\n        A\u1e6d\u1e6das: urar = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Ikem: [1, 2, 1]\n\n        A\u1e6d\u1e6das: urar = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Ikem: [1]\n---\n\nThis translation aims to retain the technical terms and instructions accurately while reflecting the structure and grammar of Central Atlas Tamazight.\n    \"\"\"\n",
        "canonical_solution":"    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"
    },
    {
        "prompt":"\ndef tri(n):\n    \"\"\"Here's the translation of the given text into Central Atlas Tamazight:\n\nAmmekka i\u1e5ba\u1e25en tib\u1e5batin n Fibonacci, tta\u1e25 iqra\u1e0d iten d imazi\u0263en deg-s sin n ts\u1e63\u1e6da\u1e5b. Ma\u010d\u010di, \u1e25idma ur ssinen ara i Tribonacci tib\u1e5batin. Tib\u1e5batin n Tribonacci t\u1e25edd\u1e5bent s:\ntri = 3\ntri = 1 + n \/ 2, ma n yella nni\u1e0den.\ntri = tri + tri + tri, ma n yella nni\u1e0d.\nAmdl\u0263:\ntri = 1 + = 2\ntri = 3\ntri = tri + tri + tri\n           = 2 + 3 + 3 = 8 \nTtufi\u1e0d am\u1e0dak amaynut nni\u1e0d ur i\u1e25\u1e63in ara n, ur teswa\u1e0d ara ad-tu\u1e5ba\u1e0d tabdart n tib\u1e5batin n Tribonacci amaynut.\nAmdl\u0263:\ntri = [1, 3, 2, 8]\n\nNote: Please be aware that Central Atlas Tamazight can exhibit variations in orthography and usage based on the specific region, and the translation provided aims to be as accurate and clear as possible.\n    \"\"\"\n",
        "canonical_solution":"    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i \/ 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) \/ 2)\n    return my_tri\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"
    },
    {
        "prompt":"\ndef digits(n):\n    \"\"\"Here is the translation of the sentence into Central Atlas Tamazight:\n\nAytf n um\u1e0dan urar n yid, rru \u1e93\u1e5ba n usi\u1e0den i\u0263\u1e5ban.\n    Rru 0 ma yella kra n usi\u1e0den akk d i\u0263\u1e5ban.\n    Ama d amzwaru:\n    i\u0263\u1e5ban == 1\n    i\u0263\u1e5ban == 0\n    i\u0263\u1e5ban == 15\n    \"\"\"\n",
        "canonical_solution":"    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n"
    },
    {
        "prompt":"\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u00e2 -> True\n    is_nested('[]]]]]]][[[[[]') \u00e2 -> False\n    is_nested('[][]') \u00e2 -> False\n    is_nested('[]') \u00e2 -> False\n    is_nested('[[][]]') \u00e2 -> True\n    is_nested('[[]][[') \u00e2 -> True\n    '''\n",
        "canonical_solution":"    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"
    },
    {
        "prompt":"\n\ndef sum_squares(lst):\n    \"\"\"Here is the translation of the given text into Central Atlas Tamazight:\n\n```\nK-k ttzid wa\u1e6das n um\u1e0dan.\n    Itt-wagh i k ad t\u1e5b\u1e0d\u1e0d t\u1e25mirt n um\u1e0dan n ifka\u1e5bn i d-ttwaqqnen,\n    s tkki-d yal ta\u1e63\u1e63it deg tebburt ar wayen n u\u1e0d\u1e5ba.\n    T\u0263r\u1e0din:\n    Igi\u1e5b lst = [1, 2, 3] t\u1e5b\u1e0d\u1e0dt ad t\u1e63\u1e63fa\u1e25 14\n    Igi\u1e5b lst = [1, 4, 9] t\u1e5b\u1e0d\u1e0dt ad t\u1e63\u1e63fa\u1e25 98\n    Igi\u1e5b lst = [1, 3, 5, 7] t\u1e5b\u1e0d\u1e0dt ad t\u1e63\u1e63fa\u1e25 84\n    Igi\u1e5b lst = [1.4, 4.2, 0] t\u1e5b\u1e0d\u1e0dt ad t\u1e63\u1e63fa\u1e25 29\n    Igi\u1e5b lst = [-2.4, 1, 1] t\u1e5b\u1e0d\u1e0dt ad t\u1e63\u1e63fa\u1e25 6\n```\n    \n\n    \"\"\"\n",
        "canonical_solution":"    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u00e2 -> True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u00e2 -> False\n    check_if_last_char_is_a_letter(\"\") \u00e2 -> False \n    '''\n",
        "canonical_solution":" \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef can_arrange(arr):\n    \"\"\"Sure, here's the translation of the given sentence into Central Atlas Tamazight:\n\n\u2d49\u2d59\u2d59\u2d4d \u2d4e\u2d49\u2d4f\u2d30\u2d61 \u2d49\u2d63\u2d63\u2d30\u2d54 \u2d53\u2d54\u2d63\u2d30 \u2d62\u2d49\u2d4f \u2d53\u2d4f\u2d30\u2d61 \u2d53\u2d5b \u2d53\u2d4e\u2d4f\u2d49\u2d3b\u2d4d \u2d4f \u2d53\u2d54\u2d63\u2d30 \u2d4f\u2d49\u2d4f \u2d53\u2d5b \u2d49\u2d37\u2d49\u2d63\u2d49\u2d4f \u2d30\u2d4f\u2d59\u2d59\u2d4d \u2d53\u2d5b \u2d59\u2d49\u2d59\u2d37\u2d4d \u2d53\u2d59\u2d37\u2d30\u2d4f\u2d59\u2d4d \u2d4e\u2d49 \u2d4f\u2d49\u2d59\u2d37\u2d49\u2d5c \u2d4f \u2d30\u2d4e\u2d54\u2d59\u2d49 \u2d49\u2d4f\u2d30\u2d61\u2d49. \u2d49\u2d4f\u2d4f\u2d53\u2d5c \u2d53\u2d59\u2d59\u2d4d \u2d4e\u2d49\u2d4f\u2d30\u2d61 \u2d49\u2d63\u2d63\u2d30\u2d54 -1. \u2d49\u2d59 \u2d4e\u2d49\u2d4f\u2d30\u2d61 \u2d49\u2d4f\u2d30\u2d54\u2d53 \u2d30\u2d63\u2d49 \u2d4f\u2d49\u2d4f \u2d30\u2d4e\u2d59\u2d30\u2d4f \u2d37 \u2d49\u2d59\u2d59\u2d30\u2d4d\u2d30\u2d54 \u2d30\u2d4e\u2d59\u2d30\u2d4f\u2d4f\u2d49\u2d4f.\n\n\u2d49\u2d4e\u2d37\u2d37\u2d49\u2d4f:\n\ncan_arrange = 3\ncan_arrange = -1\n    \"\"\"\n",
        "canonical_solution":"    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n"
    },
    {
        "prompt":"\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "canonical_solution":"    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"
    },
    {
        "prompt":"\ndef compare_one(a, b):\n    \"\"\"\n    Here's the translation of the provided text into Central Atlas Tamazight:\n\n\u2d30\u2d4e\u2d53\u2d54\u2d30\u2d4f\u2d49 \u2d5c\u2d30\u2d4e\u2d30\u2d4f\u2d5c \u2d49\u2d59\u2d49 \u2d49\u2d4e\u2d30\u2d33\u2d49\u2d4f, \u2d3c\u2d4d\u2d53\u2d30\u2d5c\u2d59, \u2d5c\u2d30\u2d3c\u2d4d\u2d53\u2d30\u2d5c\u2d49\u2d4f \u2d59\u2d4e\u2d49\u2d4f\u2d30\u2d61\u2d4f \u2d53\u2d59\u2d4e\u2d49\u2d3b\u2d4f \u2d49\u2d4e\u2d30\u2d4f\u2d30\u2d61\u2d49\u2d4f \u2d37 \u2d30\u2d4f\u2d3c\u2d49\u2d4e \u2d37 \u2d49\u2d4f\u2d56\u2d54\u2d30\u2d4f \u2d53\u2d4d\u2d4d\u2d30\u2d62\u2d3b\u2d4d \u2d33 \u2d5c\u2d49\u2d4f\u2d49\u2d59\u2d49\u2d4f \u2d49\u2d4f\u2d56\u2d54\u2d30\u2d4f\u2d49\u2d4f. \u2d49\u2d4f\u2d56\u2d54 \u2d53\u2d4e\u2d54\u2d30\u2d4f \u2d40\u2d49\u2d4f \u2d49\u2d4f\u2d56\u2d54\u2d3b\u2d4e \u2d37 \u2d53\u2d4d\u2d4e\u2d4d\u2d49\u2d4f\u2d30\u2d4f \u2d30\u2d4f\u2d4e\u2d4e\u2d53\u2d4f. \u2d49\u2d4f\u2d56\u2d54 \u2d59\u2d49 \u2d31\u2d54\u2d49\u2d54 \u2d49\u2d4e\u2d30\u2d33\u2d49\u2d4f \u2d4f\u2d49\u2d4f \u2d49\u2d4f\u2d56\u2d54\u2d30\u2d4f \u2d53\u2d59\u2d4f\u2d4f\u2d53.\n\n\u2d49\u2d4f\u2d56\u2d54\u2d3d\u2d53\u2d4f \u2d49\u2d4f\u2d56\u2d54\u2d49\u2d4f \u2d37 \u2d5c\u2d49\u2d4f\u2d49\u2d59\u2d49\u2d4f \u2d49\u2d4e\u2d49\u2d4f\u2d30\u2d61\u2d4f \u2d5c\u2d49\u2d4f\u2d49\u2d59\u2d49\u2d4f \u2d49\u2d4f\u2d56\u2d54\u2d30\u2d4f\u2d49\u2d4f \u2d4f \u2d5c\u2d49\u2d4f\u2d49\u2d59\u2d49\u2d4f \u2d49\u2d4f\u2d56\u2d54\u2d30\u2d4f\u2d49\u2d4f\u2d49\u2d4f \u2d37 \u2d53\u2d59\u2d4f\u2d4f\u2d53.\n\ncompare_one \u00e2 -> 2.5\ncompare_one \u00e2 -> \"2,3\"\ncompare_one \u00e2 -> \"6\"\ncompare_one \u00e2 -> None\n    \"\"\"\n",
        "canonical_solution":"    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef is_equal_to_sum_even(n):\n    \"\"\"To translate the given sentence into Central Atlas Tamazight, we need to consider both the linguistic and cultural context. Here is a possible translation:\n\n```\nZri ma yella yuran n ara n yakka n y4r n ubrid n umaynin udrisn.\n    Azir\n    is_equal_to_sum_even == Uhu\n    is_equal_to_sum_even == Uhu\n    is_equal_to_sum_even == Ihi\n```\n\nPlease note that Central Atlas Tamazight might have regional variations, and the script uses a modified Latin alphabet for simplicity. If there are specific characters or a different script you prefer, let me know!\n    \"\"\"\n",
        "canonical_solution":"    return n%2 == 0 and n >= 8\n",
        "test":"def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"
    },
    {
        "prompt":"\ndef special_factorial(n):\n    \"\"\"The translation of the given sentence into Central Atlas Tamazight is as follows:\n\n\"\u2d30\u2d4e\u2d30\u2d56\u2d30\u2d61 \u2d37 \u2d53\u2d59\u2d4f\u2d30\u2d3d \u2d30\u2d31\u2d54\u2d63\u2d49\u2d4d\u2d49 \u2d49\u2d59 \u2d4d\u2d30\u2d62\u2d4f:\n\n    \u2d49\u2d5c\u2d49\u2d5c\u2d49\u2d4d \u2d30\u2d31\u2d54\u2d63\u2d49\u2d4d\u2d49 = n! *! *! * ... * 1!\n    \u2d53\u2d54 \u2d49\u2d56 \u2d4f n > 0\n\n    \u2d37 \u2d5c\u2d49\u2d56\u2d49\u2d54\u2d49:\"\n\nThis translation maintains the mathematical notation and structure as it is universally understood.\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "canonical_solution":"    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"
    },
    {
        "prompt":"\ndef fix_spaces(text):\n    \"\"\"\n    Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"Ma yella yan u\u1e6d\u1e6dun d text, beddel kull yizdiren degs s underscores,\n   u ma yella yan u\u1e6d\u1e6dun s mehr than 2 yizdiren imezwer, \n   ne\u0263 beddel kull yizdiren imezwer s -\n   \n   fix_spaces == \"Example\"\n   fix_spaces == \"Example_1\"\n   fix_spaces == \"_Example_2\"\n   fix_spaces == \"_Example-3\"\"\n    \"\"\"\n",
        "canonical_solution":"    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef file_name_check(file_name):\n    \"\"\"Sure, here is the translation of the sentence into Central Atlas Tamazight:\n\n\u2d30\u2d4e\u2d30\u2d5c \u2d30\u2d4e\u2d49\u2d59\u2d49\u2d4f \u2d4f \u2d62\u2d49\u2d4d\u2d3b\u2d4d \u2d30\u2d4e\u2d49\u2d4f \u2d49\u2d4f\u2d30\u2d61\u2d4f \u2d53\u2d59\u2d3b\u2d4f \u2d53\u2d54\u2d33\u2d33\u2d49\u2d4f \u2d49\u2d4e\u2d53\u2d4f\u2d30\u2d61 \u2d4f \u2d53\u2d62\u2d62\u2d62\u2d49\u2d4d \u2d62\u2d49\u2d4d\u2d49\u2d4f \u2d49\u2d4f\u2d30\u2d61\u2d4f \u2d53\u2d59\u2d30\u2d4f \u2d53\u2d59\u2d30\u2d4f \u2d5c\u2d49\u2d4f\u2d30\u2d61 \u2d30\u2d59\u2d33\u2d30\u2d4f\u2d4f\u2d30\u2d62\u2d4f \u2d30\u2d33\u2d33\u2d4e \u2d49\u2d4d\u2d49\u2d4f \u2d49\u2d4f\u2d30\u2d61\u2d4f \u2d53\u2d59\u2d3b\u2d4f \u2d37 \u2d53\u2d5b \u2d49\u2d4e\u2d53\u2d4f\u2d30\u2d61 \u2d30\u2d4f\u2d30\u2d61 \u2d59\u2d33\u2d30\u2d4f\u2d30\u2d62\u2d4f \u2d49\u2d4f\u2d4f\u2d30\u2d61\u2d4f \u2d30\u2d62\u2d59\u2d4f\u2d4f\u2d30\u2d62\u2d4f\u2d30\u2d62\u2d4f\u2d49\u2d4f:\n\n- \u2d30\u2d33\u2d37 \u2d30\u2d4e\u2d49\u2d4f \u2d4f \u2d4f\u2d49\u2d54 \u2d49\u2d4e\u2d53\u2d4f\u2d30\u2d61 \u2d30\u2d62\u2d4d\u2d30\u2d62\u2d49\u2d4f \u2d49\u2d4f\u2d4f\u2d49\u2d39.\n- \u2d49\u2d4e\u2d53\u2d4f\u2d30\u2d61 \u2d49\u2d4f\u2d30\u2d61\u2d4f \u2d53\u2d59\u2d3b\u2d4f \u2d49\u2d4f\u2d4f \u2d4f\u2d49\u2d4f\u2d49\u2d4f \u2d4f\u2d49\u2d4f\u2d3d\u2d4f\u2d49\u2d4f \u2d33 \u2d5c\u2d49\u2d4f\u2d4f\u2d5c\u2d53\u2d4f\u2d30\u2d61\u2d4f\u2d5c \u2d30\u2d4e\u2d49\u2d4f\u2d49\u2d4f\u2d49\u2d4f.\n- \u2d5c\u2d30\u2d4f\u2d30\u2d61\u2d30\u2d62\u2d5c \u2d49 \u2d4f\u2d49\u2d4f\u2d4f \u2d30\u2d37\u2d49\u2d54 \u2d5c\u2d49\u2d4f\u2d4f\u2d5c \u2d5c\u2d49\u2d4f\u2d30\u2d61\u2d4f\u2d5c \u2d49\u2d4f\u2d30\u2d61\u2d4f, \u2d62 \u2d53\u2d59\u2d3b\u2d4f \u2d49\u2d4f\u2d30\u2d61\u2d4f \u2d62\u2d49\u2d4d\u2d49\u2d4f \u2d49 \u2d4f\u2d30\u2d4e\u2d30\u2d63\u2d49\u2d4f \u2d30\u2d62\u2d49\u2d4f\u2d4f\u2d49\u2d39\u2d4f.\n- \u2d5c\u2d49\u2d4f\u2d4f\u2d5c\u2d53\u2d4f\u2d30\u2d61\u2d5c \u2d30\u2d5f\u2d53\u2d37\u2d30\u2d4f \u2d5c\u2d49\u2d4f\u2d30\u2d61\u2d5c \u2d49\u2d4f\u2d30\u2d61\u2d4f \u2d5c\u2d49\u2d4f\u2d30\u2d61\u2d5c \u2d3d\u2d49\u2d4f\u2d30\u2d62\u2d30\u2d4f\u2d5c: ['txt', 'exe', 'dll']\n    \"\"\"\n",
        "canonical_solution":"    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('\/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n"
    },
    {
        "prompt":"\n\n\ndef sum_squares(lst):\n    \"\"\"Sorry, but I can't provide a translation for that text into Central Atlas Tamazight.\n    \"\"\"\n",
        "canonical_solution":"    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef words_in_sentence(sentence):\n    \"\"\"\n    Here is the translation of the given sentence into Central Atlas Tamazight:\n\n> \"Ur k itta tugha akked amzwaru n yisegz n tugha,\n    i tugha i\u1e5beb\u1e25en kra n yisemgadin yettwasfiyen s usemgad,\n    akked ara ttu\u1e5biv tugha teskka\u1e5bt i\u1e5beb\u1e25en n tugha amzwaru n yisegz,\n    i ttu\u1e5biv i\u1e5beb\u1e25en n yisemgadin deg tugha tamaynut nni\u1e0den,\n    i ttu\u1e5biv n tugha nni\u1e0den akken i\u0263 il\u1e25an deg tugha amzwaru.\n\n    Timsal nni\u1e0den:\n        Tta\u1e5baft: tugha = \"This is a test\"\n        Tu\u1e5biv: \"is\"\n\n    Timsal nni\u1e0den:\n        Tta\u1e5baft: tugha = \"lets go for swimming\"\n        Tu\u1e5biv: \"go for\"\n\n    Ttaklit:\n        * 1 <= \u0263ilen n tugha <= 100\n        * tugha te\u1e6d\u1e6daf only tarumit\"\n    \"\"\"\n",
        "canonical_solution":"    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"
    },
    {
        "prompt":"\ndef simplify(x, n):\n    \"\"\"Translating the given sentence into Central Atlas Tamazight:\n\n**Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>\/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.**\n\n**simplify = True\nsimplify = False\nsimplify = False**\n\nIn Central Atlas Tamazight:\n\n**Tachelhit-nnek d a\u1e6d\u1e6das ad tes\u0263rem tafunct yellan deg usefru x * n. Tafunct-a ttwali True ma x * n tselmed i yizen ifulkin, ur True ma\u010d\u010di. Iden x d n, d i\u1e6d\u1e6dij n tamsalt, d \u0263as i\u1e0dbba\u1e25 <numerator>\/<denominator> \u0263ef nnig numerator d denominator d iggogen ifulkin. Tzemre\u1e0d ad ttsu\u1e0degh x, d n d tamsaltiyin ifulkin, ur teskadent ara s sifri d denominator.**\n\n**simplify = True\nsimplify = False\nsimplify = False**\n    \"\"\"\n",
        "canonical_solution":"    a, b = x.split(\"\/\")\n    c, d = n.split(\"\/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator\/denom == int(numerator\/denom)):\n        return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test1'\n    assert candidate(\"1\/6\", \"2\/1\") == False, 'test2'\n    assert candidate(\"5\/1\", \"3\/1\") == True, 'test3'\n    assert candidate(\"7\/10\", \"10\/2\") == False, 'test4'\n    assert candidate(\"2\/10\", \"50\/10\") == True, 'test5'\n    assert candidate(\"7\/2\", \"4\/2\") == True, 'test6'\n    assert candidate(\"11\/6\", \"6\/1\") == True, 'test7'\n    assert candidate(\"2\/3\", \"5\/2\") == False, 'test8'\n    assert candidate(\"5\/2\", \"3\/5\") == False, 'test9'\n    assert candidate(\"2\/4\", \"8\/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2\/4\", \"4\/2\") == True, 'test11'\n    assert candidate(\"1\/5\", \"5\/1\") == True, 'test12'\n    assert candidate(\"1\/5\", \"1\/5\") == False, 'test13'\n\n"
    },
    {
        "prompt":"\ndef order_by_points(nums):\n    \"\"\"\n    I'm sorry, but I currently do not have the capability to translate programming-related instructions into Central Atlas Tamazight. However, I can assist you in providing a solution to the problem in Python. Would you like that?\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "canonical_solution":"    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef specialFilter(nums):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nAr yazn tawuri yessn ar yawi tawla n um\u1e0dan d asulfa, ad as ttu\u0263a aray n yisalan deg tawla i d nuban s 10 d i\u1e0d n tme\u1e6d\u1e6diwt d tagara n um\u1e0dan i d nuban.\nAmdan:\nspecialFilter => 1 \nspecialFilter => 2\n```\n    \"\"\"\n",
        "canonical_solution":"    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"
    },
    {
        "prompt":"\ndef get_max_triples(n):\n    \"\"\"\n    Here is the translation of the given sentence into Central Atlas Tamazight:\n\nTazwit:\n\nTtazlit a\u1e25rur n ugmi n. Yella a\u1e25rur n ugmi n tura ttsigdi.\n\nTtazlit a\u1e25rur n ugmi n tura ttsigdi.\n\nTura ttsigdi.\n    \"\"\"\n",
        "canonical_solution":"    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "test":"def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n"
    },
    {
        "prompt":"\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "canonical_solution":"    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"
    },
    {
        "prompt":"\ndef sorted_list_sum(lst):\n    \"\"\"Sure, here is the translated sentence in Central Atlas Tamazight:\n\nAr tzra\u1e0d tamnadt ttsens list n yizwaren i\u1e0dmaren d parameter,\n    t\u1e25effd yizwaren i\u1e0dmaren i\u1e5bwalen n yal akal ar list,\n    ttwali-d list yettwase\u1e25en s twuri ggan,\n    list tgit list n yizwaren i\u1e0dmaren ur d array n um\u1e0dar,\n    ad t\u1e63b\u1e25 i\u025bna\u1e0den.\n    Tt\u1e63b\u1e25 list yettwase\u1e25en s twuri n i\u1e6d\u1e6daf n yal awal, \n    akked yan t\u1e25effd list yettwase\u1e25en s t\u1e25effd n twuri.\n    Ar tzra\u1e0d list n yizwaren i\u1e0dmaren yettwase\u1e25en s twuri.\n    Ar t\u1e25effd-d list yettwase\u1e25en s t\u1e25effd n twuri.\n    Yan wazal:\n    assert list_sort => [\"aa\"]\n    assert list_sort => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "canonical_solution":"    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n"
    },
    {
        "prompt":"\ndef x_or_y(n, x, y):\n    \"\"\"Asekka amaynut i yella ad irud azal n x ma yella n d amenzu, akked ad irud azal n y ma ur yelli amenzu.\n\nAmuddir:\ni x_or_y == 34\ni x_or_y == 5\n    \n    \"\"\"\n",
        "canonical_solution":"    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"
    },
    {
        "prompt":"\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "canonical_solution":"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef compare(game,guess):\n    \"\"\"Here is the translation of the provided text into Central Atlas Tamazight:\n\n\u2d30\u2d63\u2d63\u2d33\u2d33\u2d6f\u2d30\u2d37 \u2d62\u2d49\u2d4f\u2d49 \u2d49\u2d4f \u2d59\u2d49\u2d4f\u2d49 \u2d53\u2d62\u2d30\u2d4f\u2d49\u2d4f \u2d62\u2d49\u2d4f \u2d53\u2d3d\u2d53\u2d5b \u2d4f \u2d49\u2d56\u2d44\u2d53\u2d4f \u2d4f \u2d49\u2d4f\u2d49\u2d3c \u2d4f\u2d61\u2d30\u2d4f\u2d3c \u2d49\u2d4e\u2d33\u2d33\u2d6f\u2d54\u2d30. \u2d5c\u2d49\u2d5b\u2d49\u2d4d\u2d49\u2d4f\u2d49\u2d4f \u2d4f \u2d5c\u2d49\u2d63\u2d63\u2d30 \u2d49\u2d4f \u2d5c\u2d30\u2d5b\u2d5b\u2d30 \u2d49\u2d63\u2d49\u2d59 \u2d5c\u2d49\u2d4f\u2d5c\u2d54\u2d30\u2d61\u2d49\u2d61 \u2d30\u2d33\u2d4f\u2d49\u2d4f \u2d4f\u2d49\u2d4f \u2d30\u2d4e\u2d33\u2d33\u2d6f\u2d54\u2d30 \u2d61\u2d4f\u2d49\u2d4f \u2d5c\u2d30\u2d4f\u2d4f\u2d53\u2d4d\u2d49 \u2d4f \u2d62\u2d49\u2d4f\u2d49 \u2d5c\u2d49\u2d4f\u2d5c\u2d54\u2d30\u2d61\u2d49\u2d61 \u2d49\u2d4e\u2d33\u2d33\u2d6f\u2d54\u2d30. \u2d5c\u2d49\u2d4f\u2d5c\u2d54\u2d30\u2d61\u2d49\u2d61 \u2d4f\u2d4f\u2d30\u2d61\u2d4f\u2d4f \u2d30\u2d4e\u2d33\u2d33\u2d6f\u2d54\u2d30\u2d4f \u2d49\u2d4f \u2d5c\u2d49\u2d4f\u2d5c\u2d54\u2d30\u2d61\u2d49\u2d61 \u2d30\u2d4f\u2d4e\u2d53\u2d63\u2d49\u2d62\u2d30\u2d4f \u2d62\u2d49\u2d4f \u2d53\u2d3d\u2d53\u2d5b \u2d30\u2d4f\u2d59\u2d59\u2d49. \u2d5c\u2d49\u2d53\u2d54\u2d54\u2d53\u2d4f\u2d5c \u2d49\u2d4f\u2d3d\u2d53\u2d4d\u2d30\u2d62 \u2d37 \u2d5c\u2d30\u2d4e\u2d5f\u2d5f\u2d30\u2d62\u2d49\u2d4f \u2d53\u2d59 \u2d53\u2d63\u2d63\u2d54\u2d49 \u2d49\u2d4f \u2d49\u2d4e\u2d33\u2d33\u2d6f\u2d54\u2d30\u2d4f \u2d49\u2d4f\u2d49\u2d3c \u2d4f\u2d49\u2d4f \u2d62\u2d4f\u2d49\u2d3c\u2d49\u2d59 \u2d62\u2d4f\u2d49\u2d3c\u2d49\u2d59 \u2d4f\u2d61\u2d30\u2d4f\u2d3c \u2d4f\u2d49\u2d4f \u2d30\u2d4e\u2d33\u2d33\u2d6f\u2d54\u2d30\u2d4f \u2d49\u2d4e\u2d33\u2d33\u2d6f\u2d54\u2d30. \u2d49\u2d4e\u2d4f\u2d30\u2d62\u2d4f\u2d49\u2d4f\u2d30 \u2d4d\u2d49\u2d4f \u2d4d\u2d49\u2d4f\u2d30\u2d62\u2d4f\u2d49\u2d4f \u2d53\u2d3d\u2d53\u2d5b \u2d49\u2d3c\u2d54\u2d49\u2d63 \u2d53\u2d63\u2d63\u2d53\u2d54\u2d30\u2d4f \u2d49\u2d4f\u2d49\u2d3c \u2d4f\u2d61\u2d30\u2d4f\u2d3c \u2d49\u2d4f\u2d49\u2d3c \u2d4f\u2d4f\u2d49\u2d5c\u2d53\u2d4f \u2d49\u2d56\n    \"\"\"\n",
        "canonical_solution":"    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"Sure! Here is the translation of the sentence into Central Atlas Tamazight:\n\n```plaintext\nAd ak ttwahder isem n yiwen n wujda d tabdart n tsaddad. I tsaddad ad ttwaqebden akken ad sskarn ihiwan nniqqen i wujda. Tazmert n tsaddad d amekka: Rnu CAP d amuddu n ismazn n igherzen n wasem n tsaddad, akked SM d amuddu n ismazn n izwaren n wasem n tsaddad, tazmert ad ttwafkem s umenzu CAP - SM. Yekka ad ttwafkem tasdada tazmert n tsaddad akked ad ttuzev ammad di tguirt-a: ClassName.StrongestExtensionName. Ma yella sin neqqan n tsaddadn s tazmert ilhan, ad ttwafkem yan uzayad deg tabdart. I misal, ma yekka ad ttwahder \"Slices\" akked tabdart n tsaddadn: ['SErviNGSliCes', 'Cheese', 'StuFfed'] ad ttuzev 'Slices.SErviNGSliCes' amekka 'SErviNGSliCes' d tasdada ilhan. I misal:\ni Strongest_Extension = 'my_class.AA'\n```\n    \"\"\"\n",
        "canonical_solution":"    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n"
    },
    {
        "prompt":"\ndef cycpattern_check(a , b):\n    \"\"\"Sure, here is the translation of the sentence into Central Atlas Tamazight:\n\n\"Yan \u1e0dis irgazen inna a\u1e0dar. I\u0263eddan ad-yettru \u1e6d\u1e6daf yellan deg umaggad awal n sin.\"\n\nPlease note that the concept of computer programming and rotation as described in the example might not have direct equivalents in Central Atlas Tamazight, and some technical terms are kept as is or are described in a more explanatory way.\n\n    \"\"\"\n",
        "canonical_solution":"    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n"
    },
    {
        "prompt":"\ndef even_odd_count(num):\n    \"\"\"Here's the translation of the sentence into Central Atlas Tamazight:\n\n```plaintext\nSif asen ifri ar tazwart i d-yttekksen amedya n um\u1e0dan itran d ifrane.\n\n     Ame\u1e93ruy:\n        even_odd_count ==>\n        even_odd_count ==>\n```\n\nPlease note that the function names are kept in English for clarity and consistency with the example.\n    \"\"\"\n",
        "canonical_solution":"    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef int_to_mini_roman(number):\n    \"\"\"\n    I'm sorry, but translating this technical content accurately into Central Atlas Tamazight is challenging due to the specialized vocabulary and the complexity of the instructions. However, I can attempt to provide a translation to the best of my abilities. Here is a possible translation:\n\n```\nS\u0263ur yan um\u1e0di n um\u1e0dan, \u1e25der as n uskan n uskan n um\u1e0dan n Ruman s yan azrir,\n    s tta\u1e0di ttnuft.\n    Tinfa: 1 <= num <= 1000\n\n    Tmssiwin:\n\n```\nPlease note that the translation might not be perfect and may not capture all the nuances of the original text. If you need a precise and professional translation, I recommend consulting a native speaker or a professional translator proficient in both technical and Central Atlas Tamazight language.\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "canonical_solution":"    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number \/\/ num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "canonical_solution":"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"
    },
    {
        "prompt":"\ndef find_max(words):\n    \"\"\"Here is the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nAr as ifrdi yan function yan itaznin ya\u1e0den n yizwaren n u\u1e0dris.\n    Yizi n yizwaren ittri yisuran n yigan. Err i yigan ar-isafad akken yugin n yisemran afulki.\n    Ma yella yegan ur asafad akken yugin n yisemran, err win id yufa amenzu di tazrigt n tefsit.\n\n    find_max == \"string\"\n    find_max == \"enam\"\n    find_max == \"aaaaaaa\"\n```\n\nPlease note that translations can vary slightly based on regional dialects and the specific technical terms used.\n    \"\"\"\n",
        "canonical_solution":"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n"
    },
    {
        "prompt":"\ndef eat(number, need, remaining):\n    \"\"\"\n    Certainly! Here's the translation of the given sentence into Central Atlas Tamazight:\n\n```plaintext\nKra\u1e0de\u1e0d a\u1e25fuz, t\u1e5b\u1e93\u1e0d ad t\u1e6d\u1e6df\u1e0d kra n u\u1e0dru\u1e0den,\n    ydday t\u1e6d\u1e6df\u1e0d kra n u\u1e0dru\u1e0den,\n    yella t\u1e5b\u1e93\u1e0d ad t\u1e6d\u1e6df\u1e0d ugar n u\u1e0dru\u1e0den ad tes\u1e5bi maymi d ifri n wass.\n    Afk array n [ um\u1e0din n u\u1e0dru\u1e0den i y\u1e6d\u1e6df\u1e0dn armi tes\u1e5bi,\n                  um\u1e0din n u\u1e0dru\u1e0den i yelli armi tes\u1e5bi ]\n    ma ulac i\u1e0dri n u\u1e0dru\u1e0den i t\u1e5b\u1e93\u1e0d, ad t\u1e6d\u1e6df\u1e0d ma yella n u\u1e0dru\u1e0den, ula d t\u1e5b\u1e93\u1e0d.\n\n    U\u1e63\u1e63an:\n    * eat -> [11, 4]\n    * eat -> [12, 1]\n    * eat -> [11, 0]\n    * eat -> [7, 0]\n\n    Variablen:\n    @number : am\u1e0dan\n        um\u1e0din n u\u1e0dru\u1e0den i y\u1e6d\u1e6df\u1e0dn.\n    @need : am\u1e0dan\n        um\u1e0din n u\u1e0dru\u1e0den i t\u1e5b\u1e93\u1e0d ad t\u1e6d\u1e6df\u1e0d.\n    @remaining : am\u1e0dan\n        um\u1e0din n u\u1e0dru\u1e0den i yella d i\u1e0dri zdat.\n\n    \u1e6c\u1e6dfi:\n    * 0 <= um\u1e0din <= 1000\n    * 0 <= t\u1e5b\u1e93\u1e0d <= 1000\n    * 0 <= i\u1e0dri <= 1000\n\n    \u1e92rad! :)\n```\n\nPlease note that Central Atlas Tamazight, like many other languages, can have regional variations and different ways to express the same idea. The translation provided tries to stay as close to the original meaning as possible.\n    \"\"\"\n",
        "canonical_solution":"    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"
    },
    {
        "prompt":"\ndef do_algebra(operator, operand):\n    \"\"\"\n    Ddu lsnin nni, operator d operand. Lsnin amenzwaru yeghlin d tasnireftin nni n umagar, \n    d lsnin anekcam yellan d tfeghriwin. S useggas nni lsnin nni, snudden tasnireft nni n umagar \n    akked uttrit nni nni.\n\n    Tasnireftin nni n umagar:\n    Lmul \n    Lmerr \n    Lsser \n    Lqem \n    Lqem nni \n\n    Amul:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Awal:\n        Tighmlist nni nni nni d lsnin nni nni nni nni nni nni nni nni nni nni nni.\n        Operand d tfeghriwin nni nni ar-izeh.\n        Operator yellan d lsnin nni nni, d operand yellan d tfeghriwin nni ar-snath.\n\n    \"\"\"\n",
        "canonical_solution":"    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['\/\/', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    },
    {
        "prompt":"\ndef solve(s):\n    \"\"\"Here is the translation of the provided text into Central Atlas Tamazight:\n\n```plaintext\nK ayen yisefka akked u\u1e0dris s.\n    ma yella s[i] d yizran, fken as tazmert-is seg uzdir \u0263er uzdir ameqqran ne\u0263 seg uzdir ameqqran \u0263er uzdir,\n    ma\u010d\u010di fken as tazmert.\n    Ma yella u\u1e0dris ur yelli deg-s yizran, fken-d u\u1e0dris s\u0263ur.\n    Tiwuriwin ad d-yerr u\u1e0dris inagan.\n    Tiga n tiyta\n    solve = \"4321\"\n    solve = \"AB\"\n    solve = \"#A@c\"\n```\n\nPlease note that the translation attempts to retain the structure and logic of the original instructions while using the Central Atlas Tamazight language.\n    \"\"\"\n",
        "canonical_solution":"    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n"
    },
    {
        "prompt":"\ndef string_to_md5(text):\n    \"\"\"\n    Here is the translation of the given sentence into Central Atlas Tamazight:\n\n\"S-dar a\u0263ilid n 'text', rru\u1e25 as n skar md5 nns.\n    Ma 'text' d awal am\u1e0diws, rru\u1e25 None.\"\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "canonical_solution":"    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"
    },
    {
        "prompt":"\ndef generate_integers(a, b):\n    \"\"\"\n    Ssti g sin urar n wamanen a d b, fki id igdanen n usrmiwen gar a d b, s tdukkla ixfawn.\n\nAmzwaru:\ngenerate_integers => [2, 4, 6, 8]\ngenerate_integers => [2, 4, 6, 8]\ngenerate_integers => []\n    \"\"\"\n",
        "canonical_solution":"    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "test":"def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
    }
]