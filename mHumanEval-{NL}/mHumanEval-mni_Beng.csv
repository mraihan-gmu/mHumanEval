prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" প্রদত্ত সংখ্যার তালিকাতে পরীক্ষা করুন, কোন দুটি সংখ্যা কি প্রদত্ত সীমার চেয়ে একে অপরের কাছাকাছি আছে কিনা।
উদাহরণ:
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" ফাংশনটিতে ইনপুট হিসেবে একটি স্ট্রিং থাকে যা একাধিক স্তরযুক্ত বন্ধনীগুলির গ্রুপ ধারণ করে। আপনার লক্ষ্য হল সেই গ্রুপগুলিকে পৃথক স্ট্রিংয়ে ভাগ করা এবং সেইগুলির তালিকা ফেরত দেওয়া। পৃথক গ্রুপগুলি সুষম এবং একে অপরের মধ্যে নেস্ট করা নেই। ইনপুট স্ট্রিংয়ে যেকোনো স্থান উপেক্ষা করুন। উদাহরণ:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    an integer part and decimals.

    Return the decimal part of the number.
    Example:

একটা ধনাত্মক ভাসমান বিন্দু সংখ্যা দিলে, এটিকে দুটি ভাগে বিভক্ত করা যায়
    এবং পূর্ণসংখ্যার অংশ এবং দশমিক অংশ।

    সংখ্যার দশমিক অংশ ফেরত দিন।
    উদাহরণ:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" তোমায় একটি ব্যাংক অ্যাকাউন্টে জমা এবং উত্তোলনের ক্রিয়াকলাপের একটি তালিকা দেওয়া হয়েছে যা শূন্য ব্যালেন্স দিয়ে শুরু হয়। তোমার কাজ হল সনাক্ত করা যে কোনও সময়ে অ্যাকাউন্টের ব্যালেন্স শূন্যের নিচে নেমে যায় কিনা, এবং সেই সময়ে ফাংশনটি True রিটার্ন করা উচিত। অন্যথায় এটি False রিটার্ন করবে। উদাহরণ:
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" Given the complexity and specialized nature of the text, translating it into Meitei requires not only linguistic skill but also familiarity with mathematical terminology in the Meitei language. Here's the translation:

দিয়া থোঈবী লিষ্ট অমদি ইনপুট থোঈবী নম্বরসিংগী ফোরাক্তা, মীন এব্সোলিউট ডেভিয়েশনগী হেয়ক আটক্কুংসি
    এই ডেটাসেটগী মীন অমা ফোরাক্তা।
    মীন এব্সোলিউট ডেভিয়েশন হৌব্ধা মীঞ্চা থোঈবী থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং থোয়াং ফোরাক্তা থোয়াং ফোরাক্তা থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং ফোরাক্তা থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং ফোরাক্তা থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থোয়াং থো
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" এনম্বর 'delimeter' প্ৰৱিষ্ট কৰক প্ৰত্যেক দুই ক্ৰমাগত উপাদানৰ মাজত ইনপুট তালিকা `numbers'।
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" এই ফাংশনৰ ইনপুট হৈছে এক স্ট্ৰিং যিটো স্থানৰ দ্বাৰা পৃথক কৰা নেস্টেড পাৰেন্থেছিসৰ বহুতো গোট প্ৰতিনিধিত্ব কৰে।
    প্ৰত্যেক গোটৰ বাবে, পাৰেন্থেছিস নেস্টিংৰ গভীৰতম স্তৰৰ আউটপুট কৰক।
    উদাহৰণস্বৰূপে,)ৰ নেস্টিংৰ সৰ্বাধিক দুটা স্তৰ থাকে যেতিয়া))ৰ তিনিটা থাকে।

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" একটি ইনপুট তালিকার স্ট্রিংগুলিকে শুধুমাত্র নির্দিষ্ট উপসর্গটি থাকা স্ট্রিংগুলির জন্য ফিল্টার করুন।
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" দিয়া থোবা লিস্ট অগা ইণ্টিজাৰসিংদা, লিস্ট থোকখিবা ইণ্টিজাৰসিংগী সুম আমা প্রডাক্ট থোক্লিবা টুপল হৌনাদু পিরকখ্রিব। 
    খালি সুম ০ অমদি খালি প্রডাক্ট ১ হৌনু।
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" Given the specialized nature of your request, translating technical content accurately is crucial. Here is the translation of the sentence into Meitei:

দেওয়া সংখ্যা তালিকা থকে, তালিকা য়েকি ত্তাংগবা সময় ত্তাংগবা সময় থক্কয়া পর্যন্ত পা পাঙবা সৰ্বোচ্চ উপাদান বাচে তালিকা সৃষ্টি করা।

Please note that Meitei has multiple script usages including Meitei Mayek and Bengali script. The above translation is provided in Bengali script.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" Given string অমাদৌক মখৈডৌনুংখী পালিণ্ড্ৰম অদৌনি হাইজারিবা তৌ। """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" ইনপুটদুটি স্ট্রিং a আৰু b যেগুলি কেৱল 1 আৰু 0 সমন্বিত। 
    এই ইনপুটগুলিতে বাইনারি XOR সম্পাদন কৰক আৰু ফলাফলকো একটি স্ট্রিং হিসাবে ফেরত দিন।
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" স্ট্রিংগুলির তালিকা থেকে, সবচেয়ে লম্বা স্ট্রিংটি ফেরত দাও। যদি একাধিক সমান দৈর্ঘ্যের স্ট্রিং থাকে, তাহলে প্রথমটি ফেরত দাও। যদি ইনপুট তালিকাটি খালি থাকে, তাহলে কিছুই ফেরত দিও না।
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" দুইটি পূর্ণসংখ্যা a এবং b-র সর্বোচ্চ সাধারণ গুণক ফেরত দিন
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" ইনপুট স্ট্রিংৰ পৰা সৰ্বাধিক ক্ষুদ্রৰ পৰা সৰ্বাধিক দীৰ্ঘ পৰ্যন্ত সকলো প্ৰিফিক্সৰ তালিকা ঘূৰাই দিয়া
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" 0 থেকে n পর্যন্ত অন্তর্ভুক্ত স্থান সীমাবদ্ধ সংখ্যাগুলির একটি স্ট্রিং ফেরত দিন।
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" Here is the translation of the sentence into Meitei:

একটা স্ট্রিং দিলে, এর মধ্যে কটা পৃথক অক্ষর আছে তা বের করুন।
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" এই ফাংশনটিতে ইনপুট একটি স্ট্রিং যেটি বিশেষ ASCII ফরম্যাটে সুরেলা নোটগুলি উপস্থাপন করে।
    তোমার কাজ হল এই স্ট্রিংটি বিশ্লেষণ করা এবং প্রতিটি নোট কতটা সময় ধরে থাকে তার সাথে মিল রেখে পূর্ণসংখ্যার তালিকা ফেরত দেওয়া।

    এখানে একটি নির্দেশনা:
    'o' - সম্পূর্ণ নোট, চার বিট স্থায়ী হয়
    'o|' - অর্ধেক নোট, দুটি বিট স্থায়ী হয়
    '.|' - কোয়ার্টার নোট, একটি বিট স্থায়ী হয়

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" দিয়া গোৱা উপস্তুতি মূলস্তুতিতে কতবার পাওয়া যায়। ওভারল্যাপিং কেস গণনা কর।
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Here is the translation in Meitei:

ইনপুট হৌবগী হান্না মকহৌবা আখৈয়া লমজিঙ্গী হুমবা ঙখল হৌরগদ্রে 'zero' থৌদোক 'nine' ফাজা।
    মাকল থৌগৎখ্রে 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' অমদি 'nine'।
    লৌবা ঙখল হুমবা আখৈয়ে মাতোম ফৌদা থৌরগনি।
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" A list আৰু সংখ্যাবুধি তি সংবাধানখু পাঙদনা তাঙখিদৌদৌ উনুপা, তাঙখিদৌদৌ তাঙখিদৌদৌ পাঙখিদৌদৌ উনুপা, smaller number, larger number.
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers, apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1
    উনবা লিপুংদা লমদা নুমায়েৎ, মাকো লিপুংদা লমদা সম্মান ফাংগ্লদৌ, হৌনবা নুমায়েৎ 0 অদোমখ্রে, আম্বা নুমায়েৎ 1 অদোমখ্রে.
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" The translation of the sentence ""Filter given list of any python values only for integers"" into Meitei is:

দিয়া তালিকা পুড়া ফিল্টার করে খালি পূর্ণ সংখ্যা গুলা রাখ।
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" দিয়া অক্ষরশ্রেণীৰ দৈৰ্ঘ্য ফিরাই।।
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" দিয়াগা নংগোল ন, নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী নংগোলগী ওয়াংমখৈ থোক্লে অমদৌগী
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" দিয়াগি ইন্টিজারগী প্রাইম ফ্যাক্টারসিংনা এনাৎপা মাকহুবা হৌদানা অখৈগী মাকহুবা ফিজরকপা লিস্ট তৌ-উ।
    ফ্যাক্টারস পুমনা ফ্যাক্টারাইজেসনদা কতকতবা হৌদানা মাকহুবা তৌ-উ।
    ইনপুট নুম্বরগী মেহৌদা ফ্যাক্টার পুমনা মাকদা মাক্লা তৌ-উগনি।
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" Here's the translation of the provided sentence into Meitei:

এক লিষ্টৰ পৰা সমস্ত সংখ্যা গুলি যি একাধিক বাৰৰ বাবে উপস্থিত হয়, সেই সংখ্যা গুলি অপসাৰণ কৰক। অবশিষ্ট সংখ্যাগুলির ক্রম ইনপুট অনুযায়ী একই রাখুন।
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" দিয়াগোঙথোক পঙথোকচাৎনা, মমা লোয়ারকেস অক্ষরগী অমা আপারকেসদা তম্বদৌ, আপারকেস অক্ষরগী অমা লোয়ারকেসদা তম্বদৌ।
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" স্ট্রিংসমূহৰ তালিকাক একক স্ট্ৰিংত মিলাওক
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" একটি ইনপুট তালিকাতে থাকা স্ট্রিংগুলি থেকে শুধু নির্দিষ্ট প্রিফিক্স দিয়ে শুরু হওয়া স্ট্রিংগুলি ফিল্টার করুন।
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""তালিকায় শুধুমাত্র ধনাত্মক সংখ্যাগুলি ফেরত দিন।
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""দিয়া নম্বরটি মৌলিক হলে সত্য ফেরত দিন, অন্যথায় মিথ্যা।
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    পলিনোমিয়ালকে সহগগুলি সহ বিন্দুতে মূল্যায়ন করে।
    রিটার্ন xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""এই ফাংশনটি একটি তালিকা l গ্রহণ করে এবং একটি তালিকা l' ফেরত দেয় যা
    l' তিন দ্বারা বিভাজ্য না হওয়া সূচকগুলিতে l এর অনুরূপ, যখন তিন দ্বারা বিভাজ্য সূচকগুলিতে এর মানগুলি l এর সংশ্লিষ্ট সূচকগুলির মানের সমান কিন্তু সাজানো।
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""তালিকা খন একক উপাদানবিলাক শৃংখলিতকৈ উলেই দিয়।
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""লিস্টত শাৰীৰ ঠাইতখৎ এলিমেণ্ট থাবিরাগু।
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""এন-এর চেয়ে কম যেই পূর্ণসংখ্যাগুলি ১১ বা ১৩ দ্বারা বিভাজ্য, সেগুলিতে সংখ্যা ৭ কতবার আসে তা ফেরত দিন।
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""এই ফাংশনটি একটি তালিকা l গ্রহণ করে এবং একটি তালিকা l' ফেরত দেয় যেটি এমন যে
l' অসম সূচকগুলিতে l এর মতো একই, যখন এর মানগুলি সমান সূচকগুলিতে l এর সমান হয়,
কিন্তু সাজানো হয়।
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    থা থা ইণ্ডকোড থা উ থা ই সাইক্লিং থা থা ই থা থা ই।
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    prime_fib n-তম সংখ্যা ফেরত দেয় যা ফিবোনাচ্চি সংখ্যা এবং এটি একটি মৌলিক সংখ্যা।
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero ꯃꯇꯝꯁꯤ ꯂꯣꯏꯁꯤ ꯇꯝꯒꯤ ꯂꯤꯁ꯭ꯇ ꯑꯣꯏꯗꯕꯤ ꯆꯥꯡꯄꯤꯛ.
    ꯑꯃꯠ ꯂꯣꯏꯁꯤꯡꯕꯤꯜꯗꯤ ꯑꯃꯁꯤ ꯃꯇꯝꯁꯤ ꯑꯃꯤ ꯇꯝꯒꯤ ꯂꯤꯁ꯭ꯇ ꯑꯃꯠ ꯂꯧꯇꯤ ꯍꯥꯡꯅꯤ ꯈꯤꯎꯀꯟꯅꯤ ꯍꯥꯡꯅꯤ, ꯊꯝꯕꯥ ꯋꯥꯝ ꯇꯝꯒꯤ ꯂꯤꯁ꯭ꯇ ꯑꯃꯁꯤ ꯊꯧꯒꯤ ꯇꯨꯅꯥ ꯊꯧꯒꯤ ꯍꯟꯅꯤ ꯁꯅꯥ ꯆꯔꯤꯅꯤ.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    অনুমান কর য়েকটা রাস্তা যেটা একদম সোজা অসীম লম্বা রেখা।
এনটা গাড়ী বাওন্দোঙ থোকপা হৌখ্রে; তাদোকা, এনটা মখল খোয়দা গাড়ী
তাদোকপু বাওন্দোঙ থোকপা হৌখ্রে। মশিং মখল গাড়ীখ্রেপু মখোদা নুমিদাংদা হৌখ্রে। সকল গাড়ীখ্রেপু একইগী গতি থোকপা। মখল গাড়ীখ্রেপু মথৌদা থোকলে যদা বাওন্দোঙ থোকপা গাড়ীখ্রপু তাদোকপা গাড়ীখ্রপু মথৌদা থোকলে। 
তাদোকা, গাড়ীখ্রেপু অসীম মজবুত অমা শক্তিশালী হৌখ্রে; মশিংগী মথৌদা, মখলগী মথৌদা থোকপা মারমদা মখোয়দা থোকপা হৌখ্রে মথৌদা থোকপা নাখৌদা নোয়দে।

মখলগী মাখা উবিরবা মখোল মথৌদা থোকপা মখোলখ্রপু লমজিনা ওখ্রে।
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""তালিকা পিরিরখক ফোঙদোকখোঙে ১ দিয়ে।
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero হানবা হকচঙগী ফমদা ইন্টিজারসিংহক ইনপুটনা তৌদুনখ্রে।
    মখা নখ্রে True তৌরি হাইনবা মখা মখি ফমদা হুমফাংগী ফমদা ঙক্লক্লহৈখ্রে হায না তৌদুনখ্রে, অমদি False তৌরি হাইনবা হযক নখ্রে।
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""ইনপুট সংখ্যা x-এর সংখ্যাগত ভিত্তি পরিবর্তন করুন।
    রূপান্তরের পরে স্ট্রিং উপস্থাপন করুন।
    ভিত্তি সংখ্যা ১০ এর কম।
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""একটি বাহুর দৈর্ঘ্য এবং উচ্চতা দেওয়া হলে একটি ত্রিভুজের ক্ষেত্রফল নির্ণয় করুন।
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""Fib4 সংখ্যা অনুক্রমটি একটি অনুক্রম যা Fibbonacci অনুক্রমের সাথে সাদৃশ্যপূর্ণ এবং নিম্নরূপ সংজ্ঞায়িত করা হয়েছে:
    fib4 -> 0
    fib4 -> 0
    fib4 -> 2
    fib4 -> 0
    fib4 -> fib4 + fib4 + fib4 + fib4.
    অনুগ্রহ করে একটি ফাংশন লিখুন যা কার্যকরভাবে fib4 সংখ্যা অনুক্রমের n-তম উপাদানটি গণনা করতে পারে। পুনরাবৃত্তি ব্যবহার করবেন না।
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""তালিকা l-এর উপাদানগুলির মধ্যম ফেরত দিন।
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    দিয়া ত্রিংগ্তি পালিন্ড্রোম অখৈ কৌম্না চেক তৌজাৰি।
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""2^n পি দ্বাৰা ভাগৰ বাকীটো উল্টিয়া আনিব।
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    প্ৰত্যেক বৰ্ণক বর্ণমালাত ৫ স্থান সৰাই দিলে এনকোড কৰা শ্ৰিংখলাক উভতাই আনে।
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    remove_vowels হৌরি হৌখ্রী সংজাবা আখোবা হৌরি মঙল হৌয়া আখোবা মঙলদা ওয়েলহাল নোঙদৌনি।
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""লিস্ট l ত থাকা সকল সংখ্যা যদি সীমা t র নিচে থাকে তেন্তে True ফেরত দে।
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""দুইটা সংখ্যা x আর y যোগ কর।
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    দুইটি শব্দৰ একেই বৰ্ণবোৰ আছে নে চাওক।
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""n-তম ফিবোনাচি সংখ্যা ফিরাই।
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" ব্র্যাকেটস ""<"" এবং "">"" এর একটি স্ট্রিং।
    প্রত্যেকটি খোলার ব্র্যাকেটের একটি সম্পর্কিত বন্ধ ব্র্যাকেট থাকলে True ফেরত দিন।

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""True ৰে ফিৰাইব যদি তালিকা উপাদানসমূহ একমাত্ৰ ভাবে বৃদ্ধি অথবা হ্ৰাস পাই থাকে।
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""দুইটি তালিকার জন্য সাজানো অনন্য সাধারণ উপাদানগুলি ফেরত দিন।
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""n-এর সবচেয়ে বড় মৌলিক গুণক ফেরত দিন। n > 1 এবং মৌলিক সংখ্যা নয় বলে ধরুন।
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""sum_to_n হৌহৈ এক function যি ১ থৌকা n লৈ নুম্বরগী সমা আমদৌনখ্রে।
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" ব্ৰাকেট এক """" ৰ চাৰি। প্ৰতিটো খোলাৰ ব্ৰাকেটে যদি একোখন বন্ধ ব্ৰাকেট থাকে তেনেহ'লে সত্য প্ৰত্যাভূতি কৰক।

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" xs প্ৰাৰম্ভিকৰূপ ৰূপক পলিনমিয়েলৰ।  
    xs[0] + xs[1] * x + xs[2] * x^2 + ....  
     এই পলিনমিয়েলৰ ডেৰিভেটিভক একেই ৰূপত উভতি দিয়া।
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""FibFib সংখ্যা শ্রেণীটি ফিবোনাচ্চি সংখ্যা শ্রেণীর অনুরূপ একটি সংখ্যা শ্রেণী যা নিম্নরূপ সংজ্ঞায়িত করা হয়:
    fibfib == ০
    fibfib == ০
    fibfib == ১
    fibfib == fibfib + fibfib + fibfib.
    অনুগ্রহ করে এমন একটি ফাংশন লিখুন যা FibFib সংখ্যা শ্রেণীর n-তম উপাদানটি দক্ষতার সাথে গণনা করতে পারে।
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
আরু টেষ্ট কেস অমা।
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""ইনটিজাৰ x ৰ অংকবোৰ চক্ৰীয়ভাৱে স্থানান্তৰ কৰক, অংকবোৰক shift পৰিমাণে সোঁফালে স্থানান্তৰ কৰক আৰু ফলাফলটো ষ্ট্ৰিং ৰূপে উভতাই দিয়া।
যদি shift > অংকৰ সংখ্যা, তেতিয়া অংকবোৰ উল্টাই দিয়া।
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""Here's the translation of the given sentence into Meitei:

একটি ফাংশন লিখুন যেটি একটি স্ট্রিংকে ইনপুট হিসেবে গ্রহণ করে এবং শুধুমাত্র বড় অক্ষরের ASCII কোডগুলির যোগফল প্রতিফলিত করে।

উদাহরণস্বরূপ:
    digitSum => ০
    digitSum => ১৩১
    digitSum => ৬৭
    digitSum => ৬৯
    digitSum => ১৩১
    digitSum => ১৫৩
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    এই কাজত, আপুনি এটা ষ্ট্ৰিং পাব যি আপেল আৰু কমলাৰ সংখ্যা প্ৰতিনিধিত্ব কৰে যিবোৰ ফলৰ চেপেটাত বিতৰণ কৰা হৈছে। এই চেপেটাটোত আপেল, কমলা আৰু আম ফলবোৰ আছে। দিয়া ষ্ট্ৰিংটো যি মুঠ কমলা আৰু আপেলৰ সংখ্যা প্ৰতিনিধিত্ব কৰে আৰু এটা পূৰ্ণসংখ্যা যিটো ফলৰ চেপেটাত মুঠ ফলৰ সংখ্যা প্ৰতিনিধিত্ব কৰে, চেপেটাত আম ফলৰ সংখ্যা উলিয়াই দিব। উদাহৰণস্বৰূপ:
ফল বিতৰণ ->১৯ - ৫ - ৬ = ৮
ফল বিতৰণ -> ৩ - ০ - ১ = ২
ফল বিতৰণ -> ১০০ - ২ - ৩ = ৯৫
ফল বিতৰণ -> ১২০ - ১০০ - ১ = ১৯
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    ""নন্-নেগেটিভ পূৰ্ণাংক নোড সমূহ থকা গছৰ এটি শাখা প্ৰতিনিধিত্ব কৰা এটি আৰ্ৰে দিয়া হৈ
    তোমাৰ কৰ্তব্য হৈছে নোড সমূহৰ ভিতৰত এটি নোড উলিয়াই আনিব।
    উলিয়াই অনা নোডটি সৰ্বনিম্ন জোড় সংখ্যা থকা নোডটি হ'ব লাগে।
    যদি সৰ্বনিম্ন জোড় সংখ্যা থকা একাধিক নোড পোৱা যায় তেন্তে সৰ্বনিম্ন সূচীৰ নোডটি উলিয়াই আনিব লাগিব।

    উলিয়াই অনা নোডটি একটি তালিকাত প্ৰদান কৰিব, [সৰ্বনিম্ন মান, তাৰ সূচী],
    যদি কোনাে জোড় সংখ্যা নাথাকে বা দিয়া আৰ্ৰেটি খালী হয়, তেন্তে [] প্ৰদান কৰিব।

    Example1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 সৰ্বনিম্ন জোড় মান, আৰু 2 সৰ্বনিম্ন সূচী।

    Example2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 সৰ্বনিম্ন জোড় মান, আৰু 2 সৰ্বনিম্ন সূচী। 

    Example3:
        Input: []
        Output: []
    
    Example4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 সৰ্বনিম্ন মান, কিন্তু দুইটা শূন্য আছে,
                     সেইবাবে আমিবে প্ৰথম শূন্যটি বাছিম, যিটো সৰ্বনিম্ন সূচী আছে।

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value""
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    ইন্টিজাৰৰ এটি এৰে দিয়া হ'লে, এৰে খন পলিন্ড্ৰ'মিক কৰিবলৈ কিমান সংখ্যক উপাদান পৰিবৰ্তন কৰিব লাগিব তাক বিচাৰক। পলিন্ড্ৰ'মিক এৰে হৈছে এটি এৰে যি পঠনৰ সমূহ পুট আৰু পিছৰ পৰা একে হয়। এজন পৰিবৰ্তনত, আপুনি এটি উপাদান যিকোনো অন্য উপাদানলৈ পৰিবৰ্তন কৰিব পাৰে।

উদাহৰণস্বৰূপে:
smallest_change == ৪
smallest_change == ১
smallest_change == ০
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""Here's the translated sentence in Meitei:

একটা ফাংশন লিখিব যিটো সত্যকেই উভতি যদি দিয়া দিয়া সংখ্যা ৩ টা মৌলিক সংখ্যা ৰ গুণফল হয় আৰু মিছা নহয়।
জানিব লাগে যে ১০০ ৰ কম।
উদাহৰণ:
is_multiply_prime == True
৩০ = ২ * ৩ * ৫
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""আপোনাৰ কাৰ্য্য হৈছে এটা ফাংশন লিখা যি সত্য প্ৰত্যাবৰ্তন কৰে যদি সংখ্যা x n ৰ এটা সহজ শক্তি হয় আৰু আন ক্ষেত্ৰসমূহত মিছা হয়।
    x n ৰ এটা সহজ শক্তি হয় যদি n**int=x
    উদাহৰণ স্বৰূপ:
    is_simple_power => true
    is_simple_power => true
    is_simple_power => true
    is_simple_power => false
    is_simple_power => false
    is_simple_power => false
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""তুমি একটি ফাংশন লিখার দায়িত্ব পেয়েছ যেটি একটি ষোলমিক সংখ্যা স্ট্রিং হিসেবে গ্রহণ করে এবং ষোলমিক অঙ্কগুলি গণনা করে যেগুলি মৌলিক সংখ্যা।
ষোলমিক অঙ্কগুলি হল ০, ১, ২, ৩, ৪, ৫, ৬, ৭, ৮, ৯, A, B, C, D, E, F।
মৌলিক সংখ্যা হল ২, ৩, ৫, ৭, ১১, ১৩, ১৭,...
তাহলে তোমাকে নিম্নলিখিত অঙ্কগুলির সংখ্যা নির্ধারণ করতে হবে: ২, ৩, ৫, ৭, 
B, D।
নোট: তুমি ধরে নিতে পারো ইনপুট সবসময় সঠিক বা খালি স্ট্রিং, এবং প্রতীক A,B,C,D,E,F সবসময় বড় হাতের।
উদাহরণস্বরূপ:
যদি সংখ্যা = ""AB"" হয় তাহলে আউটপুট হবে ১।
যদি সংখ্যা = ""1077E"" হয় তাহলে আউটপুট হবে ২।
যদি সংখ্যা = ""ABED1A33"" হয় তাহলে আউটপুট হবে ৪।
যদি সংখ্যা = ""123456789ABCDEF0"" হয় তাহলে আউটপুট হবে ৬।
যদি সংখ্যা = ""2020"" হয় তাহলে আউটপুট হবে ২।
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""তুমক decimal আকাৰে এক হিল্লক দৌরগনি, আরগা নাখোইগী তাজা হনিবা খুৎশিলগি ছনি আদুগী আকারদা তৌদোকপি।
    Function-দা এক string পীজারি, মখন্তা character আমা binary number হৌনা তৌদোকপা।
    String-দা হৌদোকপা character খুরা '0' নতরে '1' হৌগনি।

    String-গী মখল আমদা মধলদা 'db' হৌবা character কুদা আমা শুন্দোকপগনি।
    Extra character কুদা format-গী মসকপি হৌগনি।

    Examples:
    decimal_to_binary   # ""db1111db"" তৌদোকপগনি
    decimal_to_binary   # ""db100000db"" তৌদোকপগনি
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""তোক হক্পা য়াদিনা স.
    নঙ্গোঙ থাবা তাদা স হক্পা ওইদো তদৌখিবা।
    স হক্পা ওইদো তদৌখিবা তানা লেংথা ৩ ওখৈদ্রিবা লৌবা মখাই থোকপা মখোল লামিনকহৌবা ওউমখ্রে।
    উদাহরণ শিংদোকখ্রে:
    is_happy => False
    is_happy => False
    is_happy => True
    is_happy => False
    is_happy => True
    is_happy => False
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""সেমেস্টারের শেষ সপ্তাহ, আৰু শিক্ষকগী য়াদা ছাত্র-ছাত্রীদগী গ্রেডদগী পাংবিরগানি। শিক্ষকগী ওকনা গ্রেডদা পাংবিরগা algorithm তৌদৌনি। মখৈদা ফোঙদবা প্রকৃতি, মাকনা পাঙদবা কোডদা তৌদৌনি মখৈ খোংদৌনি। মাকনা নাহারোলদগী GPA লিস্টদা পাঙদৌনি আরু নাখোইদা লেটার গ্রেড লিস্টদা আনি ফাংবগানি ফাংশন তৌখিবগানি হ্যানবা টেবলগী:

    GPA       |    Letter grade
    4.0                A+
    > 3.7                A 
    > 3.3                A- 
    > 3.0                B+
    > 2.7                B 
    > 2.3                B-
    > 2.0                C+
    > 1.7                C
    > 1.3                C-
    > 1.0                D+ 
    > 0.7                D 
    > 0.0                D-
    0.0                E

উদাহরণ:
grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""এখুনি বস্তু লিখা ফাংচনগী লেংথ ওকনা প্রাইম নম্বর অতি হাইনবা True অখিবা নতরব False অখিবা।
উদাহরণ:
prime_length == True
prime_length == True
prime_length == True
prime_length == False
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    ধনাত্মক পূর্ণসংখ্যা n দেওয়া থাকলে, n-অঙ্কের ধনাত্মক পূর্ণসংখ্যাগুলির মধ্যে যেগুলি ১ দিয়ে শুরু বা শেষ হয়, সেগুলির সংখ্যা ফেরত দিন।
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.

    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number

Translated to Meitei:

একটা ধনাত্মক পূর্ণসংখ্যা N দেওয়া হলে, তার অঙ্কগুলির মোট যোগফল বাইনারিতে ফেরত দিন।

    উদাহরণ
        N = 1000 এর জন্য, অঙ্কগুলির যোগফল হবে 1 এবং আউটপুট হওয়া উচিত ""1""।
        N = 150 এর জন্য, অঙ্কগুলির যোগফল হবে 6 এবং আউটপুট হওয়া উচিত ""110""।
        N = 147 এর জন্য, অঙ্কগুলির যোগফল হবে 12 এবং আউটপুট হওয়া উচিত ""1100""।
    
    ভেরিয়েবলস:
        @N পূর্ণসংখ্যা
             সীমাবদ্ধতা: 0 ≤ N ≤ 10000।
    আউটপুট:
         একটি বাইনারি সংখ্যার স্ট্রিং
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""Here is the translation of the given sentence into Meitei:

একটা নন-এম্পটি ইন্টিজার লিস্ট 'lst' । অড ইনডেক্সেসত থৌবা ইভেন এলিমেন্টসে মখা ফু ।।

    উদাহরণসমূহ:
        add ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    Here is the translation of the given sentence into Meitei:

""একটি ফাংশন লিখুন যা একটি স্ট্রিং গ্রহণ করে এবং এর একটি সজ্জিত সংস্করণ ফেরত দেয়। স্ট্রিংয়ের সজ্জিত সংস্করণ হল একটি স্ট্রিং যেখানে সমস্ত শব্দ একটি নতুন শব্দ দ্বারা প্রতিস্থাপিত হয় যেখানে সমস্ত অক্ষর ASCII মানের উপর ভিত্তি করে ঊর্ধ্বক্রমে সাজানো থাকে। 
উল্লেখ্য: আপনাকে বাক্যে শব্দ এবং ফাঁকা স্থানগুলির ক্রম রাখতে হবে।

উদাহরণস্বরূপ:
anti_shuffle 'Hi' ফেরত দেয়
anti_shuffle 'ehllo' ফেরত দেয়
anti_shuffle 'Hello !!!Wdlor' ফেরত দেয়""
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    আপনি একটি ২ মাত্রিক ডেটা পাইয়েছেন, যা একটি Nested list আকারে দেওয়া আছে,
    এটি ম্যাট্রিক্সের মত, তবে ম্যাট্রিক্সের মত নয়,
    প্রতিটি রো তে বিভিন্ন সংখ্যক কলাম থাকতে পারে।
    দেওয়া lst এবং একটি পূর্ণসংখ্যা x, তালিকার মধ্যে x পূর্ণসংখ্যা খুঁজুন,
    এবং টুপলগুলির একটি তালিকা ফেরত দিন, [, ...] এই রূপে,
    প্রতিটি টুপল একটি কোঅর্ডিনেট -, ০ থেকে শুরু করে।
    কোঅর্ডিনেটগুলি প্রথমে রো অনুযায়ী ঊর্ধ্বমুখী ক্রমে সাজান।
    এছাড়াও, রো এর কোঅর্ডিনেটগুলি কলাম অনুযায়ী অবনমুখী ক্রমে সাজান।
    
    উদাহরণস্বরূপ:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [,,,,]
    get_row == []
    get_row == []
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    একটা অ-পৰিবাৰ্তনশীল অমুল্য পূৰ্ণাংকৰ তালিকা দিয়া হ'লে, সেই তালিকাটোৰ এটা নকল তালিকা ঘূৰাই দিব,
    তালিকাটো বাঢ়নী অনুক্ৰমত সজাব যদিহে প্ৰথম সূচী আৰু শেষ সূচীৰ মুঠ যোগফল বিজোড় হয়,
    অথবা ৰিজা অনুক্ৰমত সজাব যদিহে মুঠ যোগফল যুগ্ম হয়।

    টোকা:
    * দিয়া তালিকাটোক সলনি নকৰিবা।

    উদাহৰণসমূহ:
    * sort_array => []
    * sort_array => [5]
    * sort_array => [0, 1, 2, 3, 4, 5]
    * sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""Here is the translation of the given sentence into Meitei:

একটা function encrypt তৈরী কর যেটা একটা string কে argument হিসাবে নেবে আর
    একটা string return করবে যেটা alphabet ঘুরানোর মাধ্যমে encrypted হবে।
    Alphabet টা এমনভাবে ঘোরানো উচিত যেন অক্ষরগুলি দুই গুণ দুই জায়গায় shift হয়।
    উদাহরণস্বরূপ:
    encrypt 'lm' return করবে
    encrypt 'ewhjklnop' return করবে
    encrypt 'kj' return করবে
    encrypt 'ix' return করবে
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    তুমাক এক তালিকা পূর্ণ সংখ্যা দিয়া হৈছে।
    next_smallest নামৰ এটা ফাংকশ্যন লিখা যিয়ে তালিকার দ্বিতীয় সৰ্বনিম্ন উপাদানটো ঘূৰাই দিব।
    এনে উপাদান যদি নাথাকে তেন্তে None ঘূৰাই দিব।
    
    next_smallest == 2
    next_smallest == 2
    next_smallest == None
    next_smallest == None
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    তুমাক এটি শব্দৰ তন্ত্রী দিয়া হ'ব, আৰু তোমাৰ কাম হ'ল বোৰডমৰ সংখ্যা গণনা কৰা। এটি বোৰডম হৈছে এটি বাক্য যি শব্দ ""মই""ৰে আৰম্ভ হয়। বাক্যবোৰ '.' '?' বা '!' দ্বাৰা সীমিত কৰা হয়।

উদাহৰণস্বৰূপ:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    Here is the translation of the given sentence into Meitei language:

```plaintext
একটা ফাংকশন লিখ, যেটা একটা মেসেজ লয় আর এনকোড করে এমনভাবে যাতে সমস্ত অক্ষরের কেস অদলবদল হয়, সমস্ত স্বরবর্ণ মেসেজে হাজির সেই স্বরবর্ণ থেকে ২টি স্থানে এগিয়ে থাকা অক্ষরে প্রতিস্থাপন হয়।
মাত্র অক্ষরগুলি অনুমান করো।

উদাহরণস্বরূপ:
```
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""তোমাক এখন ইন্টিজাৰ তালিকা দিয়া হৈছে।
    তোমাক আটাইতকৈ ডাঙৰ মৌলিক সংখ্যা বিচাৰি তার অংক সমূহৰ যোগফল উলিয়াব লাগিব।

    উদাহৰণ:
    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] হ'লে আউটপুটটো 10 হব লাগে।
    lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] হ'লে আউটপুটটো 25 হব লাগে।
    lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] হ'লে আউটপুটটো 13 হব লাগে।
    lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] হ'লে আউটপুটটো 11 হব লাগে।
    lst = [0,81,12,3,1,21] হ'লে আউটপুটটো 3 হব লাগে।
    lst = [0,8,1,2,1,7] হ'লে আউটপুটটো 7 হব লাগে।
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    দিয়েক্তা ডিকশনারি, যদি সমস্ত কী লোয়ার কেস বা সমস্ত কী আপার কেস হয় তাহোলে True ফেরত দাও, নয়তো False ফেরত দাও।
যদি দেওয়া ডিকশনারি খালি হয় তাহোলে ফাংশনটি False ফেরত দাও।
উদাহরণ:
check_dict_case True ফেরত দেবে।
check_dict_case False ফেরত দেবে।
check_dict_case False ফেরত দেবে।
check_dict_case False ফেরত দেবে।
check_dict_case True ফেরত দেবে।
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""Translate the following sentence into Meitei:

একটা ফাংশন ইমপ্লিমেন্ট করো যেটা একটা অ-নেগেটিভ পূর্ণসংখ্যা গ্রহণ করে এবং n-এর চেয়ে কম nটি প্রাইম সংখ্যা নিয়ে একটা অ্যারে রিটার্ন করে। উদাহরণস্বরূপ:
count_up_to => [2,3]
count_up_to => [2,3,5,7]
count_up_to => []
count_up_to => [2,3,5,7,11,13,17,19]
count_up_to => []
count_up_to => [2,3,5,7,11,13,17]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""ফংখশানদা তুমি মখা অদুংগা নিংথোকপা মপু ফাংনবা হৌগনি
    মখা মপু অমসু মখা মপু ফামাংগী ইউনিট ডিজিট ফাংডোকখ্রিবা মপু ফাংনবা হৌগনি।
    ইনপুট খরক আডুবা নখেই কারিগানি হাইরখ্রিব।
    উদাহরণসমূহ:
    multiply নখরক 16 ফাংনবা হৌগনি।
    multiply নখরক 72 ফাংনবা হৌগনি।
    multiply নখরক 0 ফাংনবা হৌগনি।
    multiply নখরক 20 ফাংনবা হৌগনি।
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.

    For example:
    count_upper returns 1
    count_upper returns 0
    count_upper returns 0
    
Translate to Meitei:

এইয়া এটা স্ট্রিং s, ইয়াত ইভেন ইনডেক্সত বড়া ভয়েলস সংখ্যা গণনা করিব।

    উদাহৰণ স্বৰূপে:
    count_upper ১ রিটার্ন দিব
    count_upper ০ রিটার্ন দিব
    count_upper ০ রিটার্ন দিব
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    Here is the translation of the given sentence into Meitei:

ধনাত্মক পূর্ণসংখ্যা n দিলে, তোমাকে n স্তরের পাথরের একটি স্তূপ তৈরি করতে হবে।
    প্রথম স্তরে n টি পাথর থাকে।
    পরবর্তী স্তরে পাথরের সংখ্যা হল:
        - n বিজোড় হলে পরবর্তী বিজোড় সংখ্যা।
        - n জোড় হলে পরবর্তী জোড় সংখ্যা।
    প্রতিটি স্তরে পাথরের সংখ্যা একটি তালিকায় ফেরত দাও, যেখানে সূচক i তে থাকা উপাদানটি স্তরের পাথরের সংখ্যা নির্দেশ করে।

    উদাহরণসমূহ:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    তোমাক শব্দগুলির একটি স্ট্রিং দেওয়া হবে যা কমা বা স্পেস দ্বারা পৃথক করা হয়েছে। তোমার কাজ হল স্ট্রিংটিকে শব্দগুলিতে ভাগ করা এবং শব্দগুলির একটি অ্যারে ফিরিয়ে দেওয়া।

উদাহরণস্বরূপ:
words_string == [""Hi"", ""my"", ""name"", ""is"", ""John""]
words_string == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""এই ফাংচনটি দুইটা পজিটিভ সংখ্যা x আর y লৈবি, আর yত [x, y] ৰেঞ্জৰ ভিতৰতে থকা সৰ্ববৃহৎ জোড় সংখ্যা পৰতাই। যদি তেনেকুৱা সংখ্যা নাথাকিলে, ফাংচনটিয়ে -1 পৰতাব লাগিব।

উদাহৰণ স্বৰূপ:
choose_num = 14
choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""তোমাকে দুইটি ধনাত্মক পূর্ণসংখ্যা n এবং m দেওয়া হয়, এবং তোমার কাজ হল n থেকে m পর্যন্ত পূর্ণসংখ্যাগুলির গড় হিসাব করা।
উত্তরটি নিকটতম পূর্ণসংখ্যায় রাউন্ড করে সেটিকে বাইনারিতে রূপান্তরিত কর।
যদি n m এর চেয়ে বড় হয়, -1 ফেরত দাও।
উদাহরণ:
rounded_avg => ""0b11""
rounded_avg => -1
rounded_avg => ""0b1111""
rounded_avg => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""Here is the translated text in Meitei:

𑘐𑑧𑑛𑑵 𑑛𑒻𑑯𑑴𑑟𑒰𑑛𑑧𑑑𑑦𑑯𑑰𑑛𑑵𑑓𑒹𑑛𑒷𑑦𑑛𑒻𑑯𑑴𑑟𑒹𑑟𑑧𑑟𑑧𑑖𑒷𑑟𑑵𑑛𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑟𑑵𑑓𑒻𑑯𑒷𑑛𑒻𑑯𑑴𑑟𑑰𑑖𑒻𑑛𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑟𑑵𑑓𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑯𑑴𑑟𑑰𑑖𑒻𑑛𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑟𑑵𑑓𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑯𑒷𑑛𑒻𑑯𑑴𑑟𑑰𑑖𑒻𑑛𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑟𑑵𑑓𑒻𑑯𑒷𑑛𑒻𑑯𑑴𑑟𑑰𑑖𑒻𑑛𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑟𑑵𑑓𑒻𑑯𑒷𑑛𑒻𑑯𑑴𑑟𑑰𑑖𑒻𑑛𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑟𑑵𑑓𑒻𑑯𑒷𑑛𑒻𑑯𑑴𑑟𑑰𑑖𑒻𑑛𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑟𑑵𑑓𑒻𑑯𑒷𑑛𑒻𑑯𑑴𑑟𑑰𑑖𑒻𑑛𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑟𑑵𑑓𑒻𑑯𑒷𑑛𑒻𑑯𑑴𑑟𑑰𑑖𑒻𑑛𑒻𑑯𑑴𑑢𑑧𑑛𑒻𑑟𑑵𑑓𑒻𑑯𑒷𑑛𑒻𑑯𑑴𑑟𑑰𑑖𑒻𑑛𑒻𑑯
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    একটি পূর্ণসংখ্যার অ্যারে দেওয়া হলে, ১ থেকে ৯-এর মধ্যে অন্তর্ভুক্ত পূর্ণসংখ্যাগুলি সাজান,
এরপর উল্টিয়ে দিন, এবং তারপর প্রতিটি সংখ্যাকে তার সংশ্লিষ্ট নাম দ্বারা প্রতিস্থাপন করুন 
যেমন ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine""।

উদাহরণ স্বরূপ:
    arr = [2, 1, 1, 4, 5, 8, 2, 3]   
          -> arr সাজান -> [1, 1, 2, 2, 3, 4, 5, 8] 
          -> arr উল্টান -> [8, 5, 4, 3, 2, 2, 1, 1]
    return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
    যদি অ্যারেটি খালি হয়, একটি খালি অ্যারে ফেরত দিন:
    arr = []
    return []
    
    যদি অ্যারেতে কোনো অদ্ভুত সংখ্যা থাকে তবে তা এড়িয়ে যান:
    arr = [1, -1 , 55] 
          -> arr সাজান -> [-1, 1, 55]
          -> arr উল্টান -> [55, 1, -1]
    return = ['One']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" ফ ফাংকশনটো ইমপ্লিমেন্ট করিবা যেটি n অর্গুমেন্ট হিচাপে লয়,
    আরু n আকারৰ এতা তালিকা রিটার্ন করে, যিটো তালিকাৰ i ইণ্ডেক্সৰ এলিমেন্টৰ মান হব i-ৰ ফ্যাক্টোরিয়েল যদি i জোড়,
    বা 1 ৰ পৰা i পৰ্যন্ত সংখ্যা সমষ্টি যদি i বিজোড়।
    i 1 ৰ পৰা আৰম্ভ হয়।
    i ৰ ফ্যাক্টোরিয়েল হ'ল 1 ৰ পৰা i পৰ্যন্ত সংখ্যাৰ গুণফল।
    উদাহৰণ:
    f == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    Here is the translation of your request to Meitei:

ধনাত্মক পূর্ণসংখ্যা n দেওয়া হলে, একটি টাপল ফেরত দিন যা ১ থেকে n এর মধ্যে পড়ে এমন জোড় এবং বিজোড় পূর্ণসংখ্যা প্যালিনড্রোমের সংখ্যাটি ধারণ করে।

উদাহরণ ১:

ইনপুট: ৩
আউটপুট:
ব্যাখ্যা:
পূর্ণসংখ্যা প্যালিনড্রোমগুলি হল ১, ২, ৩। এর মধ্যে একটি জোড় এবং দুটি বিজোড়।

উদাহরণ ২:

ইনপুট: ১২
আউটপুট:
ব্যাখ্যা:
পূর্ণসংখ্যা প্যালিনড্রোমগুলি হল ১, ২, ৩, ৪, ৫, ৬, ৭, ৮, ৯, ১১। এর মধ্যে চারটি জোড় এবং ৬টি বিজোড়।

নোট:
১. ১ <= n <= ১০^৩
২. ফেরত দেওয়া টাপলে যথাক্রমে জোড় এবং বিজোড় পূর্ণসংখ্যা প্যালিনড্রোমগুলির সংখ্যা থাকবে।
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    Here is the translation of the sentence into Meitei:

একটা ফাংকশন count_nums লিখা যি ইন্টিজাৰ এৰেৰ লৈগি আৰু যেইটা এলিমেন্টৰ সংখ্যা ফিরাই যাৰ ডিজিটৰ সমষ্টি > 0 আছে।
যদি এটা সংখ্যা নেগেটিভ হয়, তেন্তে ইয়াৰ প্ৰথম চাইনড ডিজিট নেগেটিভ হ’ব:
উদাহৰণ স্বৰূপ -123 ৰ চাইনড ডিজিট হৈছে -1, 2, আৰু 3।
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""আমাদের কাছে N সংখ্যার একটি অ্যারে 'arr' আছে arr[1], arr[2], ..., arr[N]। অ্যারের সংখ্যাগুলি এলোমেলোভাবে সাজানো থাকবে। আপনার কাজ হলো নিম্নলিখিত অপারেশনটি প্রদত্ত অ্যারেতে সম্পাদন করে অ্যারেটিকে অ-বৃদ্ধিমূলক ক্রমানুসারে সাজানো সম্ভব কিনা তা নির্ধারণ করা:
    আপনি যে কোনো সংখ্যক ডান শিফট অপারেশন সম্পাদন করতে পারবেন।

একটি ডান শিফট অপারেশন মানে অ্যারের সমস্ত উপাদানকে একটি করে ডানদিকে সরানো। অ্যারের শেষ উপাদানটি অ্যারের শুরুর অবস্থানে অর্থাৎ ০তম সূচকে স্থানান্তরিত হবে।

যদি উপরের অপারেশনটি সম্পাদন করে সাজানো অ্যারে পাওয়া সম্ভব হয় তাহলে True ফেরত দিন অন্যথায় False ফেরত দিন।
যদি প্রদত্ত অ্যারে খালি থাকে তাহলে True ফেরত দিন।

নোট: প্রদত্ত তালিকায় অনন্য উপাদান থাকার গ্যারান্টি থাকে।

উদাহরণস্বরূপ:

move_one_ball==>True
ব্যাখ্যা: ২টি ডান শিফট অপারেশন সম্পাদন করে, প্রদত্ত অ্যারের জন্য অ-বৃদ্ধিমূলক ক্রম অর্জন করা সম্ভব।
move_one_ball==>False
ব্যাখ্যা: প্রদত্ত অ্যারের জন্য কোনো সংখ্যক ডান শিফট অপারেশন সম্পাদন করে অ-বৃদ্ধিমূলক ক্রম অর্জন করা সম্ভব নয়।
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""এই সমস্যায়, আপুনি এটা কাৰ্য সম্পাদন কৰিব যি দুটা সংখ্যাৰ তালিকা লয়,
    আৰু স্থিৰ কৰে যে তালিকাদ্বয়ৰ মাজত উপাদানৰ বিনিময় সম্পাদন কৰিবলৈ
    lst1 কে কেৱল জোড় সংখ্যা থকা তালিকা হিচাপে গঠন কৰিব পাৰিব নেকি। 
    lst1 আৰু lst2ৰ মাজত বিনিময় কৰা উপাদানৰ সংখ্যাত কোনো সীমা নাই।
    যদি lst1 আৰু lst2ৰ মাজত উপাদান বিনিময় কৰি lst1ৰ সকলো উপাদানক জোড় সংখ্যা
    কৰা সম্ভৱ হয়, তেন্তে ""YES"" উলিয়াওক।
    নহ'লে, ""NO"" উলিয়াওক।
    উদাহৰণস্বৰূপ:
    exchange => ""YES""
    exchange => ""NO""
    ধাৰণা কৰা হৈছে যে ইনপুট তালিকাবোৰ খালী নহ'ব।
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""এই বাক্যখানাক মৈতৈত অনুবাদ কৰক:

দিয়া আখৰটোৰ পৰা এটা স্থান সৰলিত নিম্নকেছ আখৰৰ প্ৰতিনিধিত্ব কৰে, সেয়া এটা অভিধান প্ৰত্যাবৰ্তন কৰক
    সকলোতকৈ বেছি পুনৰাবৃত্তি থকা আখৰ আৰু সংলগ্ন গণনাটো সমেত।
    যদি বহুতো আখৰৰ একে সংখ্যক উপস্থিতি থাকে, তেন্তে সেইবোৰ সকলো প্ৰত্যাবৰ্তন কৰক।
    
    উদাহৰণ:
    histogram == {'a': 1, 'b': 1, 'c': 1}
    histogram == {'a': 2, 'b': 2}
    histogram == {'a': 2, 'b': 2}
    histogram == {'b': 4}
    histogram == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""Task
    ꯂꯧꯇꯧ ꯃꯇꯥ ꯑꯌꯥꯎꯅ ꯁꯤ ꯁ꯭ꯇ꯭ꯔꯤꯡꯁ ꯁ ꯃꯃ ꯁ, ꯆ ꯃꯃ ꯁ, ꯁꯤ ꯁ꯭ꯇ꯭ꯔꯤꯡꯁ ꯁ ꯏ ꯁ꯭ꯇ꯭ꯔꯤꯡ ꯑꯁꯡꯕꯥ ꯑ ꯃꯇꯥ ꯑꯗꯃꯥ ꯑꯃꯤ ꯁꯤ ꯁꯤꯡ ꯁꯤ ꯁ꯭ꯇ꯭ꯔꯤꯡ ꯁꯆꯤꯄꯤ ꯑꯑꯡꯗ ꯑꯃꯥ ꯐꯤ ꯁ ꯃꯦꯅꯕꯥꯛꯀꯤꯗꯤꯀꯤ ꯏꯕ ꯆꯦꯛ ꯑꯑꯡꯗ ꯁꯤꯡ ꯌꯦꯛꯅꯥ ꯑꯣꯏꯕ ꯑꯣꯏꯕ ꯑꯑꯡꯗ ꯑꯃꯥ ꯌꯦꯛꯅꯥ ꯈꯤꯕ ꯇꯥꯝꯕꯥ ꯑꯗꯃꯥ ꯑꯃꯤ ꯑꯃꯤ ꯁꯤ ꯑꯌꯥꯎꯅ ꯑꯌꯥꯎꯅ ꯌꯦꯛꯅꯥ ꯆꯦꯛꯀꯤ ꯑꯃꯥ ꯁꯥꯔꯦꯟ ꯌꯦꯛꯅꯥ ꯇꯥꯝꯕꯥ ꯈꯤꯕ ꯇꯥꯝꯕꯥ ꯑꯁꯤꯡ ꯑꯃꯤ ꯁꯨꯇꯦꯝ ꯑꯌꯥꯎꯅ ꯏꯕ ꯈꯤꯕ ꯑꯄꯥꯎꯔꯦ ꯑꯃꯥ ꯃꯥ ꯑꯗ ꯑꯃꯤ ꯁꯤ ꯁꯨꯇꯦꯝ ꯌꯦꯛꯅꯥ ꯃꯥ ꯑꯃꯤ ꯁꯤ ꯁ꯭ꯔꯤꯡ ꯑꯃꯤꯁꯝ ꯑꯁꯤꯡ ꯌꯦꯛꯅꯥ ꯁ꯭ꯔꯤꯡꯁ ꯃꯦꯟꯕꯥ ꯑꯃꯤ ꯑ ꯂꯩꯇꯧ ꯑꯑꯡꯗ ꯁ꯭ꯔꯤꯡ ꯃꯇꯥ ꯂꯨꯝꯕꯥ ꯑꯁꯤꯡ ꯆꯥꯔꯥ ꯑꯃ
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""তালিকাৰ এক তালিকা দি, য'ত প্ৰতিটো তালিকাত কেৱল সংখ্যা থাকে, এটা তালিকা উভতাই দিব। 
    আউটপুটৰ প্ৰতিটো উপাদান i হ'ব ""ইনপুটৰ তালিকা i ত থকা বিজোড় উপাদানৰ সংখ্যা"" য'ত সকলো iক 
    ইনপুটৰ i'তম তালিকাত থকা বিজোড় অঙ্কৰ সংখ্যাৰ সৈতে পৰিবৰ্তন কৰিব লাগে।

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.
Example
minSubArraySum == 1
minSubArraySum == -6

Given sentence translated into Meitei:

দিয়া থোঙদোকপা হোঙদোক্কা নুম্বারসিংগী আরে, নুম্বারসিংগী অমুকা হোঙদোকপা নন-এম্পটি সাব-আরে-গী মিনিমাম সুম ফুংগানবু ফিনদৌ।

উদাহরণ
minSubArraySum == 1
minSubArraySum == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    তুমি এগো মাটির কুয়া সমূহের আয়তাকার গ্রিড পাইছ। প্রতি সারি একটি একক কুয়া প্রতিনিধিত্ব করিব, আৰু প্রতিটা ১ একটি একক জল প্রতিনিধিত্ব করিব।
প্ৰতিটা কুয়ার একটি অনুকূল বাল্টি আছে যাহা হইতে জল উঠাই লব পাৰি, আৰু সমস্ত বাল্টিগুলিৰ একই ক্ষমতা থাকে।
তোমাৰ কাম হ'ল বাল্টি ব্যৱহাৰ কৰি কুয়া সমূহ খালি কৰা।
তুমি কিমান বাল্টি নিচে নামাইব লাগিব জানিবলৈ আউটপুট দিয়া।

উদাহরণ ১:
    ইনপুট: 
        গ্রিড: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
        বাল্টি ক্ষমতা: 1
    আউটপুট: 6

উদাহরণ ২:
    ইনপুট: 
        গ্রিড: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
        বাল্টি ক্ষমতা: 2
    আউটপুট: 5
    
উদাহরণ ৩:
    ইনপুট: 
        গ্রিড: [[0,0,0], [0,0,0]]
        বাল্টি ক্ষমতা: 5
    আউটপুট: 0

শর্তাবলী:
    * সমস্ত কুয়া সমূহৰ সমান দৈৰ্ঘ্য আছে
    * 1 <= গ্রিড.length <= 10^2
    * 1 <= গ্রিড[:,1].length <= 10^2
    * গ্রিড[i][j] -> 0 | 1
    * 1 <= ক্ষমতা <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    এই কাটা-ত, নাহাক্তা য়ৌবু য়ৌম্না য়ৌরীবা না-নেগেটিভ ইন্টিজারসিং উনৌন থৌদোক্ক্ছা তমমীদা সোর্ত তৌদোক্লে।
    বাইনাৰী রিপ্ৰেজেন্টেশনে আনি ইসিং থৌদোক্কা নুম্বাৰ সিংদা আসেণ্ডিং অর্ডার তে সোর্ত তৌদোক্লে।
    ইসিং থৌদোক্কা নুম্বাৰ সিংদা তাংগনা তমমীদা, ডেসিমাল ভেলু তে বেস তৌদোক্লে।

    মশু মখা হায়দোক্কা ইমপ্লিমেণ্ট তৌদোক্লে:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
a function that returns a list of all words from string s that contain exactly 
n consonants, in order these words appear in the string s.
If the string s is empty then the function should return an empty list.
Note: you may assume the input string contains only letters and spaces.
Examples:
select_words ==> [""little""]
select_words ==> [""Mary"", ""lamb""]
select_words ==> []
select_words ==> [""world""]
select_words ==> [""Uncle""]

Translate the above text into Meitei.

গীভেন আ স্ত্রিং s অ্যান্ড আ ন্যাচুরাল নাম্বার n, যু হাভ বিন তাস্কড তো ইমপ্লেমেন্ট 
আ ফাংশন থাট রিটার্নস আ লিস্ট অফ অল ওয়ার্ডস ফ্রম স্ত্রিং s থাট কন্টেইন এক্সাক্টলি 
n কন্সোনান্টস, ইন অর্ডার থিজ ওয়ার্ডস আপ্পিয়ার ইন থে স্ত্রিং s.
ইফ থে স্ত্রিং s ইজ এম্পটি থেন থে ফাংশন শুড রিটার্ন আন এম্পটি লিস্ট.
নোট: যু মাই আসুম থে ইনপুট স্ত্রিং কন্টেইনস অনলি লেটার্স অ্যান্ড স্পেসেস.
এক্জাম্পলস:
সেলেক্ট_ওয়ার্ডস ==> [""little""]
সেলেক্ট_ওয়ার্ডস ==> [""Mary"", ""lamb""]
সেলেক্ট_ওয়ার্ডস ==> []
সেলেক্ট_ওয়ার্ডস ==> [""world""]
সেলেক্ট_ওয়ার্ডস ==> [""Uncle""]
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""আপুনি এটা শব্দ পাইছে। আপোনাৰ কাম হ'ল শব্দৰ সোঁফালে থকা দুটা ব্যঞ্জনৰ মাজত থকা আটাইতকৈ ওচৰৰ স্বৰবৰ্ণটো বিচাৰি উলিওৱা।

শব্দৰ আৰম্ভণি আৰু শেষৰ স্বৰবৰ্ণ গণ্য নহয়। যদি আগৰ শর্ত পূৰণ কৰা কোনো স্বৰবৰ্ণ নাপায়, তেন্তে খালি ষ্ট্ৰিঙ ৰিটার্ণ কৰিব।

আপুনি অনুমান কৰিব পাৰে যে দিয়া ষ্ট্ৰিঙত কেৱল ইংৰাজী আখৰসমূহ আছে।

উদাহৰণ:
get_closest_vowel ==> ""u""
get_closest_vowel ==> ""U""
get_closest_vowel ==> """"
get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len

Meitei translation:

দেওয়া হৈছে এটা পূৰ্ণসংখ্যা সম্বলিত শ্ৰেণী arr আৰু এটা ধনাত্মক পূৰ্ণসংখ্যা k, 
arr ত থকা সৰ্বাধিক k সংখ্যাৰ সৈতে k দৈৰ্ঘ্যৰ এটা সজাওঁ তালিকা উভতি দিয়া।

উদাহৰণ1:

    ইনপুট: arr = [-3, -4, 5], k = 3
    আউটপুট: [-4, -3, 5]

উদাহৰণ2:

    ইনপুট: arr = [4, -4, 4], k = 2
    আউটপুট: [4, 4]

উদাহৰণ3:

    ইনপুট: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
    আউটপুট: [2]

নোট:
    1. শ্ৰেণীৰ দৈৰ্ঘ্য [1, 1000]ৰ পৰিসৰত হ’ব।
    2. শ্ৰেণীত থকা উপাদানবোৰ [-1000, 1000]ৰ পৰিসৰত হ’ব।
    3. 0 <= k <= len
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""Here is the translation of the given sentence into Meitei:

একটা খালি নহৈক, পূর্ণ পূর্ণ সংখ্যা সম্বলিত তালিকা দিলে, সমূহ তলিকাৰ সন্ধি দিব যি প্ৰতিটি বিজোড় উপাদান যি সমান স্থানত আছে।

উদাহৰণ সমূহ
solution ==> 12
solution ==> 9
solution ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    Here is the translation of the provided sentence into Meitei:

একটা নন-এম্পটি সংখ্যা গুচ্ছ arr আর একটা সংখ্যা k দেওয়া আছে, প্রথম k সংখ্যার মধ্যে দুই সংখ্যাঙ্কের বেশী নথাকিবা সংখ্যাগুলির যোগফল ফিরাই।

উদাহরণ:

    ইনপুট: arr = [111,21,3,4000,5,6,7,8,9], k = 4
    আউটপুট: 24 # 21 + 3 এর যোগফল

নিয়মাবলী:
    ১. ১ <= len <= ১০০
    ২. ১ <= k <= len
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    ধনাত্মক পূর্ণসংখ্যা n দিলে, একটি সাজানো তালিকা ফেরত দিন যাতে কলাতজ ক্রমের বিজোড় সংখ্যা থাকে।

কলাতজ অনুমানটি গণিতের একটি অনুমান যা নিম্নলিখিতভাবে সংজ্ঞায়িত একটি ক্রম নিয়ে উদ্বিগ্ন: যেকোনো ধনাত্মক পূর্ণসংখ্যা n দিয়ে শুরু করুন। তারপর প্রতিটি পদ আগের পদ থেকে নিম্নরূপে প্রাপ্ত হয়: যদি আগের পদটি জোড় হয়, তবে পরবর্তী পদটি আগের পদের অর্ধেক। যদি আগের পদটি বিজোড় হয়, তবে পরবর্তী পদটি আগের পদের ৩ গুণ এবং ১ যোগ। অনুমানটি হল যে n এর মান যাই হোক না কেন, ক্রমটি সর্বদা ১-এ পৌঁছাবে।

মন্তব্য:
1. Collatz হল [1]।
2. ফেরত দেওয়া তালিকাটি বর্ধমান ক্রমে সাজানো।

উদাহরণ স্বরূপ:
get_odd_collatz [1, 5] ফেরত দেয় # 5 এর জন্য কলাতজ ক্রম হল [5, 16, 8, 4, 2, 1], তাই বিজোড় সংখ্যাগুলি শুধুমাত্র 1 এবং 5।
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""আপুনি এটা ফাংচন লিখিব লাগিব যি এটা দিয়া তাৰিখৰ ষ্ট্ৰিং বৈধ কৰিব আৰু
    তাৰিখ বৈধ হলে True আৰু নহলে False উভতাই।
    তাৰিখ বৈধ যদি তলৰ সকলো নিয়ম পূৰণ হয়:
    ১। তাৰিখৰ ষ্ট্ৰিং খালী নহ'ব লাগিব।
    ২। দিনৰ সংখ্যা ১তকৈ কম বা ৩১তকৈ বেছি নহ'ব লাগিব ১,৩,৫,৭,৮,১০,১২ মাহৰ বাবে। আৰু দিনৰ সংখ্যা ১তকৈ কম বা ৩০তকৈ বেছি নহ'ব লাগিব ৪,৬,৯,১১ মাহৰ বাবে। আৰু, দিনৰ সংখ্যা ১তকৈ কম বা ২৯তকৈ বেছি নহ'ব লাগিব মাহ ২ৰ বাবে।
    ৩। মাহৰ সংখ্যা ১তকৈ কম বা ১২তকৈ বেছি নহ'ব লাগিব।
    ৪। তাৰিখৰ ফৰমেট হব লাগিব: mm-dd-yyyy

    উদাহৰণ স্বৰূপে:
    valid_date => True

    valid_date => False

    valid_date => False

    valid_date => True

    valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""তুমি দুটি সময়সীমা পাবা, 
    যেখানে প্রতিটি সময়সীমা একটি পূর্ণসংখ্যার যুগল। উদাহরণস্বরূপ, সময়সীমা = =। 
    প্রদত্ত সময়সীমাগুলি বন্ধ, যার মানে সময়সীমা উভয় শুরু এবং শেষ অন্তর্ভুক্ত করে।
    প্রতিটি প্রদত্ত সময়সীমার জন্য, ধরে নেওয়া হয় যে এর শুরু তার শেষের চেয়ে কম বা সমান।
    তোমার কাজ হল নির্ধারণ করা যে এই দুটি সময়সীমার ছেদ দৈর্ঘ্য একটি মৌলিক সংখ্যা কিনা।
    উদাহরণস্বরূপ, সময়সীমাগুলির, এর ছেদ হল যার দৈর্ঘ্য ১, যা একটি মৌলিক সংখ্যা নয়।
    যদি ছেদের দৈর্ঘ্য একটি মৌলিক সংখ্যা হয়, তাহলে ""YES"" ফেরত দিও,
    অন্যথায়, ""NO"" ফেরত দিও।
    যদি দুটি সময়সীমার ছেদ না হয়, তাহলে ""NO"" ফেরত দিও।


    [ইনপুট/আউটপুট] উদাহরণ:
    intersection,) ==> ""NO""
    intersection,) ==> ""NO""
    intersection,) ==> ""YES""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    Here is the translation of the given sentence into Meitei:

তুমি একখান সংখ্যাৰ এৰে দিয়া হৈছে আৰু তোমাৰ প্ৰয়োজন
    সংখ্যাবোৰৰ পৰিমাণৰ যোগফলক উভগতিৰ সকলো চিহ্নৰ গুণফলৰ দ্বাৰা গুণিত কৰি
    সংখ্যাৰ প্ৰতিটো সংখ্যাৰ চিহ্নৰ দ্বাৰা প্ৰতিনিধিত্ব কৰা 1, -1 বা 0।
    টোকা: খালী এৰেৰ বাবে None উভগতি।

    উদাহৰণ:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A is considered less than a path B if
    after making the ordered lists of the values on the cells that A and B go
    through, lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i
    such that lst_A[i] < lst_B[i] and for any j we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""সকলে ফিবোনাচ্চি ক্রমটিপা তুরিব, মথেমাটিক্সগী ওয়াংথোউবা চিংথোকপা মখোত্তমদা মথেমাটিশিয়ানসিংনা হীপা থোকপা. আডুবা, মখলঙা থোউরগদৌনা তুরিবা ত্রিবোনাচ্চি ক্রম. ত্রিবোনাচ্চি ক্রম তকপা শিরগা চৈবগী তীরঙ হৌরি:
tri = ৩
tri = ১ + n / ২, যদু n ইওড।
tri =  tri + tri + tri, যদু n অড।
উদাহরণ শিরবা:
tri = ১ + = ২
tri = ৩
tri = tri + tri + tri
           = ২ + ৩ + ৩ = ৮
নাখোয়না হানবা হুপা নেগেটিভ আদুম ইয়াম্না অমা নুম্বর ন তুরিব, নাখোয়না ত্রিবোনাচ্চি ক্রমগী মখলঙা n + ১ নুম্বরগী লিষ্ট ফমীখ্রে.
উদাহরণ:
tri = [১, ৩, ২, ৮]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
Return 0 if all digits are even.
For example:
digits  == 1
digits  == 0
digits == 15

Translate to Meitei:

ধণি পূর্ণ সংখ্যা n দিলে, বিজোড় অঙ্কগুলির গুনফল ফেরত দিন।
যদি সমস্ত অঙ্ক জোড় হয়, তবে 0 ফেরত দিন।
উদাহরণ স্বরূপ:
digits == 1
digits == 0
digits == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""তোমাক সংখ্যাবোৰৰ এখন তালিকা দিয়া হৈছে।
    তালিকাত দিয়া সংখ্যাবোৰৰ বৰ্গফলৰ যোগফল উভতাই দিব লাগিব,
    তালিকাৰ প্ৰতিটো উপাদান প্ৰথমে ওপৰৰ পূৰ্ণসংখ্যাত ঘূৰাই ল'ব লাগিব।
    উদাহৰণসমূহ:
    তালিকা lst = [1,2,3] হলে ফলাফল 14 হ'ব লাগে।
    তালিকা lst = [1,4,9] হলে ফলাফল 98 হ'ব লাগে।
    তালিকা lst = [1,3,5,7] হলে ফলাফল 84 হ'ব লাগে।
    তালিকা lst = [1.4,4.2,0] হলে ফলাফল 29 হ'ব লাগে।
    তালিকা lst = [-2.4,1,1] হলে ফলাফল 6 হ'ব লাগে।
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""Here is the translation of the given sentence into Meitei:

একটি ফাংশন তৈরি করুন যা এমন উপাদানের বৃহত্তম সূচকটি ফেরত দেয় যা অবিলম্বে পূর্ববর্তী উপাদানের সমান বা তার চেয়ে বড় নয়। যদি এ ধরনের কোনো উপাদান না থাকে তবে -1 ফেরত দিন। প্রদত্ত অ্যারেতে ডুপ্লিকেট মান থাকবে না।

উদাহরণগুলো:
can_arrange = 3
can_arrange = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    ইন্টিজার, ফ্লোট বা আসল সংখ্যাবোধক স্ট্রিং গ্রহণ করে এমন একটি ফাংশন তৈরি করুন, এবং প্রদত্ত ভ্যারিয়েবল টাইপ অনুযায়ী বড় ভ্যারিয়েবলটি রিটার্ন করুন।
যদি ভ্যালুগুলি সমান হয় তবে None রিটার্ন করুন।
নোট: যদি আসল সংখ্যা স্ট্রিং হিসাবে উপস্থাপন করা হয়, তবে ফ্লোটিং পয়েন্ট হতে পারে . বা ,

compare_one -> 2.5
compare_one -> ""2,3""
compare_one -> ""6""
compare_one -> None
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""Given the complexity of the translation task, I will translate the sentence provided:

Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers

Here is the translation in Meitei:

নির্ণয় কর যে প্রদত্ত সংখ্যা n ঠিক ৪টি ধনাত্মক জোড় সংখ্যার যোগফল হিসাবে লেখা যায় কিনা

Note: The examples provided in the original sentence remain in English as they are code-related and should be universally understood.
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial = n! *! *! * ... * 1!
    where n > 0

    For example:

The sentence you provided includes mathematical notation which doesn't need to be translated. Here is the translation of the non-mathematical parts into Meitei:

ব্রাজিলিয়ান ফ্যাক্টোরিয়াল টিক্কুটমাহৈ:
    brazilian_factorial = n! *! *! * ... * 1!
    যিনা n > 0

    উদাহরণ স্বরূপ:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces == ""Example""
    fix_spaces == ""Example_1""
    fix_spaces == ""_Example_2""
    fix_spaces == ""_Example-3""

ধরিবা এক সুত্র text, ইহাৎথকব্বা সকল স্থানখল অন্ডাৰস্কোৰ্দ্সে ইহাতু রিপ্লেচ তৌ, 
    আরু যদি এক সুত্রখল ২তুংবী কনছেক্যুটিভ স্থানখল যে, 
    অদু ইহাৎথকব্বা সকল কনছেক্যুটিভ স্থানখল - তু রিপ্লেচ তৌ
    
    fix_spaces == ""Example""
    fix_spaces == ""Example_1""
    fix_spaces == ""_Example_2""
    fix_spaces == ""_Example-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""একটা ফাংসান তৈরী কর যেটা একটা স্ট্রিং নিবে যা ফাইলের নামকে প্রতিনিধিত্ব করে, আর ফেরত দিবে
    'হয়' যদি ফাইলের নাম বৈধ হয়, আর 'না' ফেরত দিবে অন্যথায়।
    একটা ফাইলের নামকে বৈধ মনে করা হবে যদি এবং শুধুমাত্র যদি নিম্নলিখিত সব শর্ত পূরণ হয়:
    - ফাইলের নামে তিনটির বেশি সংখ্যা থাকা উচিত নয়।
    - ফাইলের নামে ঠিক একটি ডট '.' থাকা উচিত।
    - ডটের আগে থাকা সাবস্ট্রিংটি খালি থাকা উচিত নয়, এবং এটি ল্যাটিন বর্ণমালার একটি অক্ষর 
    দিয়ে শুরু হওয়া উচিত।
    - ডটের পরে থাকা সাবস্ট্রিংটি ['txt', 'exe', 'dll'] এর একটি হওয়া উচিত।
    উদাহরণ:
    file_name_check # => 'হয়'
    file_name_check # => 'না'
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""এই ফাংকশনটি পূর্ণসংখ্যার একটি তালিকা গ্রহণ করবে। তালিকায় থাকা সমস্ত এন্ট্রিগুলির জন্য, যদি এন্ট্রিটির সূচক ৩-এর গুণিতক হয় তবে ফাংকশনটি পূর্ণসংখ্যার এন্ট্রিটিকে বর্গ করবে এবং যদি এন্ট্রিটির সূচক ৪-এর গুণিতক হয় কিন্তু ৩-এর গুণিতক না হয় তবে ফাংকশনটি পূর্ণসংখ্যার এন্ট্রিটিকে ঘন করবে। ফাংকশনটি সেই এন্ট্রিগুলির মান পরিবর্তন করবে না যাদের সূচক ৩ বা ৪-এর গুণিতক নয়। তারপর ফাংকশনটি সমস্ত এন্ট্রির যোগফল ফেরত দেবে।

উদাহরণস্বরূপ:
lst = [১,২,৩] এর জন্য আউটপুট হবে ৬
lst = [] এর জন্য আউটপুট হবে ০
lst = [-1,-5,2,-1,-5] এর জন্য আউটপুট হবে -১২৬
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    আপুনি এটা স্ট্ৰিং পোৱা হৈছে যি এটা বাক্যৰ প্ৰতিনিধিত্ব কৰে,
    বাক্যত কিছুমান শব্দ আছে যিবোৰ একে স্থানত পৃথক হৈ থাকে,
    আৰু আপুনিতে এটা স্ট্ৰিং উলিয়াব লাগে যি মূল বাক্যৰ পৰা শব্দবোৰ অন্তর্ভুক্ত কৰে,
    যিবোৰৰ দৈৰ্ঘ্য প্ৰধান সংখ্যা,
    নতুন স্ট্ৰিংত শব্দবোৰৰ অনুক্ৰমণ মূল বাক্যৰ দৰে হোৱা উচিত।

    উদাহৰণ ১:
        ইনপুট: বাক্য = ""This is a test""
        আউটপুট: ""is""

    উদাহৰণ ২:
        ইনপুট: বাক্য = ""lets go for swimming""
        আউটপুট: ""go for""

    বাধ্যবাধকতা:
        * ১ <= বাক্যৰ দৈৰ্ঘ্য <= ১০০
        * বাক্যত কেৱল অক্ষৰ থাকে
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""Here is the translated sentence in Meitei:

আপনার কাজ হ'ল একটি ফাংশন বাস্তবায়ন করা যা x * n এর প্রকাশকে সরল করবে। ফাংশনটি True ফেরত দেয় যদি x * n একটি পূর্ণ সংখ্যায় মূল্যায়ন করে এবং অন্যথায় False। x এবং n উভয়ই ভগ্নাংশের স্ট্রিং উপস্থাপনা, এবং নিম্নলিখিত বিন্যাসে থাকে, <নিউমারেটর>/<ডিনোমিনেটর> যেখানে নিউমারেটর এবং ডিনোমিনেটর উভয়ই ধনাত্মক পূর্ণ সংখ্যা। আপনি ধরে নিতে পারেন যে x এবং n বৈধ ভগ্নাংশ এবং ডিনোমিনেটরে শূন্য নেই।

simplify = True
simplify = False
simplify = False
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    Here is the translation of the given sentence into Meitei:

""এখে function লিখিবা যিটো দেওয়া integer list টোকে ascending order ত sorting করিব
    তাঙঙা digits সকলকু যোগহানী অনুযায়ী।
    Note: যদি এককো সুম sum তাঙঙা digits সকলকু যোগহানী সমান থাকে,
    তাঙঙা index অনুযায়ী original list ত sorting করিব।

    উদাহরণস্বরূপ:""
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""একটা ফাংশন লিখো যেটা একটা সংখ্যার অ্যারের ইনপুট নেবে এবং অ্যারের মধ্যে কতগুলো উপাদান আছে যা ১০-এর চেয়ে বড় এবং সংখ্যার প্রথম ও শেষ অঙ্ক উভয়ই বিজোড় তা রিটার্ন করবে।
উদাহরণ স্বরূপ:
specialFilter => 1 
specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    আপনি একটি ধনাত্মক পূর্ণসংখ্যা n দেওয়া হয়েছে। আপনাকে n দৈর্ঘ্যের একটি পূর্ণসংখ্যা অ্যারে a তৈরি করতে হবে।
        
        প্রতিটি i এর জন্য, a[i] এর মান = i * i - i + 1।
        
        অ্যারের ত্রিপল সংখ্যা ফেরত দিন যেখানে i < j < k,
        এবং a[i] + a[j] + a[k] 3 এর গুণিতক হয়।

        উদাহরণ:
            ইনপুট: n = 5
            আউটপুট: 1
            ব্যাখ্যা:
            a = [1, 3, 7, 13, 21]
            একমাত্র বৈধ ত্রিপল হল।
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""The given instructions translated into Meitei would be:

একটা ফাংশন লিখিবা যেটা প্যারামিটার হিচাপে স্ট্রিংগুলিৰ এটা তালিকা গ্ৰহণ কৰে,
    তালিকাৰ পৰা বেজোৰ দৈৰ্ঘ্যৰ স্ট্রিংবোৰ মচি পেলাব,
    আৰু ফলাফল তালিকাটো সজানো অৱস্থাত উভতাই দিব,
    তালিকাটো সদায় স্ট্রিংগৰ এটা তালিকা আৰু কেতিয়াও সংখ্যাৰ এৰা নহয়,
    আৰু ইয়াত সদায় সদৃশ থাকতে পাৰে।
    তালিকাটোৰ অৰ্ডাৰ প্ৰতিটো শব্দৰ দৈৰ্ঘ্যৰ ওপৰত উভতাই দিব লাগে, আৰু
    তালিকাটো সেই নিয়মৰ ওপৰত সজানো হ'ব লাগে।
    যদি দুটা শব্দৰ একে দৈৰ্ঘ্য থাকে, তালিকাটো বৰ্ণানুক্ৰমিকভাৱে সজোৱা হ'ব।
    ফাংশনটো সজানো অৰ্ডাৰত স্ট্রিংগৰ তালিকা উভতাই দিব লাগে।
    তুমি অনুমান কৰিব পাৰিবা যে সকলো শব্দৰ একে দৈৰ্ঘ্য হ'ব।
    উদাহৰণ স্বৰূপে:
    assert list_sort => [""aa""]
    assert list_sort => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""একটি সরল প্রোগ্রাম যা n যদি একটি মৌলিক সংখ্যা হয় তবে x এর মান ফেরত দেবে এবং অন্যথায় y এর মান ফেরত দেবে।

উদাহরণসমূহ:
x_or_y == 34
x_or_y == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""Here is the translated sentence in Meitei:

ময়না আইপা খুংঙমলইদা নুপা আমা না ফলফল লেকপা খুংঙমলজারদা মখুংদা হৌরকপা অনুভাব পুড়কদা হৌরকপা অনুভাব মখুংদা নিংসিংদ্রবা।

Note: As Meitei language has multiple scripts including Meitei Mayek and Bengali script, make sure you are referring to the correct script and the context of usage.
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""তুমাক এটা ক্লাছৰ নাম আৰু এক তালিকা এক্সটেনচনৰ দিয়া হ'ব।
এই এক্সটেনচনসমূহ ক্লাছলৈ অতিৰিক্ত ক্লাছসমূহ লোড কৰিবলৈ ব্যৱহাৰ কৰা হ'ব। 
এক্সটেনচনৰ শক্তি তলত দিয়া অনুসৰি: CAP এক্সটেনচনৰ নামত থকা বৃহৎ অক্ষৰসমূহৰ সংখ্যা আৰু SM এক্সটেনচনৰ নামত থকা সৰু অক্ষৰসমূহৰ সংখ্যা, শক্তি CAP - SM দ্বাৰা দিয়া হৈছে।
তুমিয়ে সবাতোকৈ শক্তিশালী এক্সটেনচনটো বিচাৰিব লাগিব আৰু এই ফৰ্মেটত এটা ষ্ট্ৰিং প্ৰদান কৰিব লাগিব: ClassName.StrongestExtensionName.
যদি দুই বা তাতে অধিক এক্সটেনচনে একেই শক্তি থাকে, তেন্তে তালিকাত প্ৰথমে থকা এটা বাছনি কৰিব লাগে।
উদাহৰণস্বৰূপে, যদি তুমাক ""Slices"" ক্লাছৰূপে দিয়া হয় আৰু এক্সটেনচনৰ তালিকাঃ ['SErviNGSliCes', 'Cheese', 'StuFfed'] তেন্তে তুমিয়ে 'Slices.SErviNGSliCes' প্ৰদান কৰিব লাগিব কাৰণ 'SErviNGSliCes' সবাতোকৈ শক্তিশালী এক্সটেনচন।
উদাহৰণ:
Strongest_Extension == 'my_class.AA'
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""ꯌꯨꯀꯨ ꯃꯤꯇꯝ ꯑꯃꯗꯨꯕ ꯑꯃꯗꯨꯕ ꯑꯁꯦꯛ ꯂꯨ. ꯋꯥꯛꯀꯇꯝ ꯊꯤꯛꯗꯤ ꯁꯦꯛ ꯑꯃꯗꯨꯕ ꯑꯃꯗꯨꯕ ꯑꯁꯦꯛ ꯂꯠꯊꯣꯛ ꯑꯗꯨ ꯊꯣꯛꯗꯤ ꯃꯇꯝ ꯑꯌꯦꯟꯕ ꯊꯤꯛꯗꯤ ꯁꯦꯛ ꯂꯨ. 
    cycpattern_check => ꯐꯣꯁꯦ
    cycpattern_check => ꯊꯨꯔꯦ
    cycpattern_check => ꯐꯣꯁꯦ
    cycpattern_check => ꯊꯨꯔꯦ
    cycpattern_check => ꯐꯣꯁꯦ
    cycpattern_check => ꯊꯨꯔꯦ

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count ==>
        even_odd_count ==>

এই বাক্যটি মৈতৈ তে অনুবাদ করা হল:

ইন্তেজার দৌরাক্কী। মাপু ফামৌ হান্না মডখে ছিংদৌ হৌরি মডখে ছিংদৌ চাৎদৌ হান্না তুমাফামৌ তৌরাক্কী।

     উদাহরণ:
        even_odd_count ==>
        even_odd_count ==>
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    Here is the translation of the sentence into Meitei:

একটা ধনাত্মক পূর্ণসংখ্যা দিলে, তার রোমান সংখ্যা সমতুল্যের স্ট্রিং হিসেবে বের করুন,
     এবং তা ছোট হাতের অক্ষরে ফিরিয়ে দিন।
     সীমাবদ্ধতা: ১ <= সংখ্যা <= ১০০০

     উদাহরণ:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""এই বাক্যটিকে মৈতৈ ভাষায় অনুবাদ করুন।

একটি ফাংশন লিখুন যা স্ট্রিংয়ের একটি তালিকা গ্রহণ করে।
    তালিকায় বিভিন্ন শব্দ থাকে। সর্বাধিক অনন্য অক্ষর সহ শব্দটি ফেরত দিন।
    যদি একাধিক স্ট্রিংয়ের সর্বাধিক অনন্য অক্ষর থাকে, তবে যা বর্ণানুক্রমিক ক্রমে প্রথমে আসে তা ফেরত দিন।

    find_max == ""string""
    find_max == ""enam""
    find_max == ""aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    তুমি একটে ক্ষুধার্ত খরগোস, আৰু তুমিনা ইতিমধ্যে নির্দিষ্ট সংখ্যক গাজৰ খাইছে,
    কিন্তু এতিয়া তুমি দিনৰ খাদ্যৰ তালিকা সম্পূৰ্ণ কৰিবলৈ অধিক গাজৰ খাইব লাগিব।
    তুমি এটা এৰেৰ আকাৰৰ [ তোমাৰ খাদ্যৰ পিছত খোৱা গাজৰৰ মুঠ সংখ্যা,
                                    তোমাৰ খাদ্যৰ পিছত থকা গাজৰৰ সংখ্যা ]
    যদি যথেষ্ট বাচি থকা গাজৰ নাই, তুমি সকলো বাচি থকা গাজৰ খাই ল'বা, কিন্তু এতিয়া তুমি ক্ষুধাতুৰ হ'বা।

    উদাহৰণ:
    * eat -> [11, 4]
    * eat -> [12, 1]
    * eat -> [11, 0]
    * eat -> [7, 0]
    
    চলক:
    @number : পূৰ্ণসংখ্যা
        তুমি ইতিমধ্যে খোৱা গাজৰৰ সংখ্যা।
    @need : পূৰ্ণসংখ্যা
        তুমি খোৱা প্ৰয়োজনীয় গাজৰৰ সংখ্যা।
    @remaining : পূৰ্ণসংখ্যা
        বাচি থকা গাজৰৰ সংখ্যা, যি মজুত আছে

    বাধা:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    মজা লওক :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    এই বাক্যটিক Meitei ভাষায় অনুবাদ করুন:

দুইটি তালিকা প্রদান করা হয়েছে: অপারেটর এবং অপারেন্ড। প্রথম তালিকায় মৌলিক বীজগণিত অপারেশন রয়েছে এবং দ্বিতীয় তালিকাটি পূর্ণসংখ্যার একটি তালিকা। প্রদত্ত দুটি তালিকা ব্যবহার করে বীজগণিত অভিব্যক্তি তৈরি করুন এবং এই অভিব্যক্তির মূল্যায়ন ফিরিয়ে দিন।

মৌলিক বীজগণিত অপারেশনগুলি:
যোগ
বিয়োগ
গুণ
মেঝে ভাগ
ঘাত

উদাহরণ:
operator['+', '*', '-']
array = [2, 3, 4, 5]
result = 2 + 3 * 4 - 5
=> result = 9

নোট:
    অপারেটর তালিকার দৈর্ঘ্য অপারেন্ড তালিকার দৈর্ঘ্যের চেয়ে এক কম।
    অপারেন্ড একটি অ-ঋণাত্মক পূর্ণসংখ্যার তালিকা।
    অপারেটর তালিকায় কমপক্ষে একটি অপারেটর রয়েছে এবং অপারেন্ড তালিকায় কমপক্ষে দুটি অপারেন্ড রয়েছে।

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""Here is the translation of the given sentence into Meitei:

তইবা একটি স্ট্রিং s অখৈ।

    যদি s[i] একটি অক্ষৰ অখৈ, সেই অক্ষৰৰ কেচ উল্টাও,
    নহলে সেইটিকে যেমন অখৈ তেমনই রাখ।

    যদি স্ট্রিংত কোনো অক্ষৰ নাই, সেই স্ট্রিংটিকেই উল্টাও।

    ফাংশনটি ফলাফল হওয়া স্ট্রিংটি ফিরাইব।

উদাহরণসমূহ:
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    ধৰিব যদি 'text' নামৰ এটা string থাকে, তেনেহলে তাৰ md5 hash stringৰ সদৃশ stringটো উভতি দিয়া।
    যদি 'text' এটা খালী string হয়, তেন্তে None উভতি দিয়া।

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    দুইটা ধণাত্মক পূর্ণ সংখ্যা a আৰু b দিলে, a আৰু bৰ মাজত থকা জোৰা সংখ্যা সমূহক বাঢ়নী ক্ৰমত ঘূৰাই দিয়া।

উদাহৰণ স্বৰূপে:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
