hu_task_id,task_id,nl,pl,prompt,canonical_solution,test,entry_point,gpt4
HumanEval/0/en/python/,HumanEval/0,ceb_Latn,python,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Susiha kung sa gihatag nga lista sa mga numero, adunay bisan unsang duha ka numero nga mas duol sa usag usa kaysa sa gihatag nga threshold.
    Pananglitan:
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

",has_close_elements,"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" 
    Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    """"""
    # Sort the list numerically
    numbers.sort()
    
    # Iterate over the indexes in the list to use in comparisons
    for i in range(len(numbers) - 1):
        
        # Check if the absolute difference between the current number and the next one is less than the threshold
        if abs(numbers[i] - numbers[i+1]) < threshold:
            # If it is, return True
            return True
    
    # If no close numbers are found, return False
    return False"
HumanEval/1/en/python/,HumanEval/1,ceb_Latn,python,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Ang input sa kini nga function mao ang usa ka string nga naglangkob sa daghang grupo sa nagkatakdo nga mga parentheses. Ang imong tumong mao ang pagbulag sa mga grupo ngadto sa lain-laing mga string ug ibalik ang lista sa mga grupo. Ang mga binulag nga grupo balanse ug dili magkatakdo sulod sa usag usa. Ipabaylo ang bisan unsang mga espasyo sa input nga string. Pananglitan:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
",separate_paren_groups,"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    paren_string = paren_string.replace(' ', '')
    stack = []
    result = []
    current_string = ''

    for char in paren_string:
        if char == '(':
            if current_string:
                stack.append(current_string)
                current_string = ''
            current_string += char
        elif char == ')':
            current_string += char
            if stack:
                current_string = stack.pop() + current_string
            else:
                result.append(current_string)
                current_string = ''
    return result"
HumanEval/2/en/python/,HumanEval/2,ceb_Latn,python,"

def truncate_number(number: float) -> float:
    """""" Hatagan ug positibong floating point nga numero, kini mahimo nga mabahin ngadto sa integer nga bahin ug mga decimal.

Ibalik ang decimal nga bahin sa numero.
Pananglitan:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
",truncate_number,"import math

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    an integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.

    Example:
    >>> truncate_number(3.5)
    0.5
    """"""

    frational_part, _ = math.modf(number)
    return frational_part


# Test the function
print(truncate_number(3.5))  # Outputs: 0.5"
HumanEval/3/en/python/,HumanEval/3,ceb_Latn,python,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" Gihatagan ka ug lista sa mga deposito ug pag-withdraw nga mga operasyon sa usa ka banko nga nagsugod sa zero nga balanse. Ang imong buluhaton mao ang pag-detect kung sa bisan unsang punto ang balanse sa account moabot sa ubos sa zero, ug sa maong punto ang function kinahanglan mobalik ug Tinuod. Kung dili, kinahanglan kini mobalik ug Bakak.
Pananglitan:
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
",below_zero,"from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False"
HumanEval/4/en/python/,HumanEval/4,ceb_Latn,python,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" Para sa usa ka gihatag nga lista sa mga numero sa input, kalkulaha ang Mean Absolute Deviation 
    palibot sa mean sa kini nga dataset.
    Ang Mean Absolute Deviation mao ang average absolute nga kalainan tali sa matag
    elemento ug sa usa ka centerpoint:
    MAD = average | x - x_mean |
    Pananglitan:
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

",mean_absolute_deviation,"from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    deviations = [abs(x - mean) for x in numbers]
    return sum(deviations) / len(deviations)"
HumanEval/5/en/python/,HumanEval/5,ceb_Latn,python,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Ibutang ang numero nga 'delimeter' tali sa matag duha ka magkasunod nga elemento sa input nga lista `numbers`
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
",intersperse,"from typing import List

def intersperse(numbers: List[int], delimiter: int) -> List[int]:
    """""" Insert a number 'delimiter' between every two consecutive elements of input list 'numbers' """"""
    result = []

    for i in range(len(numbers)):
        if i != 0:
            result.append(delimiter)
        result.append(numbers[i])

    return result"
HumanEval/6/en/python/,HumanEval/6,ceb_Latn,python,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Ang input sa kini nga function kay usa ka string nga nagrepresentar og daghang grupo sa gilakip nga parentesis nga gibulag sa mga espasyo.
    Para sa matag grupo, i-output ang labing lawom nga lebel sa nesting sa parentesis.
    Pananglitan, ang) adunay maximum nga duha ka lebel sa nesting samtang ang)) adunay tulo.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
",parse_nested_parens,"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    levels = []
    for group in paren_string.split(' '):
        level_count = 0
        max_level = 0
        for paren in group:
            if paren == '(':
                level_count += 1
                if level_count > max_level:
                    max_level = level_count
            elif paren == ')':
                level_count -= 1
        levels.append(max_level)
    return levels"
HumanEval/7/en/python/,HumanEval/7,ceb_Latn,python,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" I-filter ang input nga lista sa mga string aron makuha lamang ang mga adunay gihatag nga substring.
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
",filter_by_substring,"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring.""""""
    
    filtered_strings = [string for string in strings if substring in string]
    
    return filtered_strings"
HumanEval/8/en/python/,HumanEval/8,ceb_Latn,python,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" Para sa usa ka lista sa mga integer, ibalik ang usa ka tupulo nga naglangkob sa usa ka suma ug usa ka produkto sa tanang mga integer sa lista.
    Ang walay sulod nga suma kinahanglan nga katumbas sa 0 ug ang walay sulod nga produkto kinahanglan nga katumbas sa 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
",sum_product,"from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    """"""

    if not numbers:
        return (0, 1)

    sum_of_numbers = sum(numbers)
    product_of_numbers = 1

    for number in numbers:
        product_of_numbers *= number

    return (sum_of_numbers, product_of_numbers)"
HumanEval/9/en/python/,HumanEval/9,ceb_Latn,python,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" Gikan sa usa ka lista sa mga integer, pag-generate ug usa ka lista sa rolling maximum nga elemento nga nakit-an hangtod sa gihatag nga higayon sa sunod-sunod.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
",rolling_max,"from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    max_num = numbers[0]
    result = [max_num]
    for num in numbers[1:]:
        if num > max_num:
            max_num = num
        result.append(max_num)
    return result"
HumanEval/10/en/python/,HumanEval/10,ceb_Latn,python,"

def is_palindrome(string: str) -> bool:
    """""" Sulayi kung ang gihatag nga string kay usa ka palindromo """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
",make_palindrome,"def is_palindrome(string: str) -> bool:
    """"""Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """"""Find the shortest palindrome that begins with a supplied string.""""""
    if is_palindrome(string):
        return string
    # list all prefix palindromes, reverse sort to find longest 
    postfixes = sorted([string[i:] for i in range(len(string)) if is_palindrome(string[i:])], key=len, reverse=True)
    # find longest postfix which is a palindrome
    longest_postfix = postfixes[0]
    # find and save the prefix part before the longest palindromic postfix
    prefix = string[:-len(longest_postfix)] if len(longest_postfix) != len(string) else """"
    # append to the end of the string the reverse of that prefix
    return string + prefix[::-1]

print(make_palindrome(''))  # Output: ''
print(make_palindrome('cat'))  # Output: 'catac'
print(make_palindrome('cata'))  # Output: 'catac'"
HumanEval/11/en/python/,HumanEval/11,ceb_Latn,python,"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Ang input mao ang duha ka mga string nga a ug b nga naglangkob lamang sa mga 1 ug 0.
    I-perform ang binary XOR sa mga input nga kini ug i-return ang resulta usab ingon nga string.
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
",string_xor,"from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    binary_a = int(a, 2)
    binary_b = int(b, 2)
    
    xor_result = bin(binary_a ^ binary_b)[2:]
    
    return xor_result.zfill(max(len(a), len(b)))"
HumanEval/12/en/python/,HumanEval/12,ceb_Latn,python,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Sa listahan sa mga string, ibalik ang pinakataas. Ibalik ang una kung adunay daghang mga string nga parehas ang gitas-on. Ibalik ang Wala kung ang listahan sa input walay sulod.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
",longest,"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:  # list is empty
        return None
    
    longest_string = strings[0]  # start with first string
    for string in strings:
        if len(string) > len(longest_string):  
            longest_string = string  # replace if current string is longer
    return longest_string"
HumanEval/13/en/python/,HumanEval/13,ceb_Latn,python,"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Ibalik ang labing dakong komon nga divisor sa duha ka mga integer a ug b.
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
",greatest_common_divisor,"def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
        
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    
    while b != 0:
        a, b = b, a % b
        
    return abs(a)  # Ensure result is positive"
HumanEval/14/en/python/,HumanEval/14,ceb_Latn,python,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Ibalik ang lista sa tanan nga mga prefix gikan sa pinakaputot hangtod sa pinakataas sa input nga string.
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
",all_prefixes,"from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" 
    Return list of all prefixes from shortest to longest of the input string
    
    Args:
    string (str): input string

    Returns:
    List[str]: list of all prefixes of the input string

    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i] for i in range(1, len(string) + 1)]"
HumanEval/15/en/python/,HumanEval/15,ceb_Latn,python,"

def string_sequence(n: int) -> str:
    """""" Ibalik ang string nga naglakip og mga numero nga gilain-lain pinaagi sa espasyo sugod sa 0 hangtod n nga apil.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
",string_sequence,"def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return "" "".join(str(i) for i in range(n + 1))"
HumanEval/16/en/python/,HumanEval/16,ceb_Latn,python,"

def count_distinct_characters(string: str) -> int:
    """""" Gihatag ang usa ka string, pangitaa kung pila ka lain-laing mga karakter ang naa niini.
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
",count_distinct_characters,"def count_distinct_characters(string: str) -> int:
    # convert all characters to lower case to avoid case sensitive counts
    string = string.lower()
    # use set to remove duplicate and count the length of set
    distinct_characters = set(string)
    return len(distinct_characters)"
HumanEval/17/en/python/,HumanEval/17,ceb_Latn,python,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Ang input sa kini nga function mao ang usa ka string nga nagrepresentar sa mga nota sa musika sa espesyal nga ASCII nga format.
    Ang imong buluhaton mao ang pag-parse sa kini nga string ug pagbalik sa lista sa mga integer nga nagkorekponde sa kung pila ka beats ang matag nota molungtad.

    Ania ang legend:
    'o' - whole note, molungtad og upat ka beats
    'o|' - half note, molungtad og duha ka beats
    '.|' - quarter note, molungtad og usa ka beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
",parse_music,"from typing import List

def parse_music(music_string: str) -> List[int]:
    notes = music_string.split(' ')
    beats = []
    
    for note in notes:
        if note == 'o':
            beats.append(4)
        elif note == 'o|':
            beats.append(2)
        elif note == '.|':
            beats.append(1)
            
    return beats"
HumanEval/18/en/python/,HumanEval/18,ceb_Latn,python,"

def how_many_times(string: str, substring: str) -> int:
    """""" Pangitaa kung pila ka beses makita ang gihatag nga substring sa orihinal nga string. Apila ang nag-overlap nga mga kaso.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
",how_many_times,"def how_many_times(string: str, substring: str) -> int:
    count = 0
    start = 0
    while start < len(string):
        pos = string.find(substring, start)
        if pos != -1:
            start = pos + 1
            count += 1
        else:
            break
    return count"
HumanEval/19/en/python/,HumanEval/19,ceb_Latn,python,"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Ang input usa ka string nga gibulag sa espasyo nga naglangkob sa mga numero gikan sa 'zero' hangtod 'nine'.
    Valid nga mga pagpili mao ang 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', ug 'nine'.
    Ibalik ang string nga adunay mga numero nga gisunod gikan sa gamayng numero ngadto sa dakong numero.
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
",sort_numbers,"from typing import List

def sort_numbers(numbers: str) -> str:
    """""" 
    Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest.
    """"""
    word_num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5,
                     'six':6, 'seven':7, 'eight':8, 'nine':9}

    num_word_dict = {value:key for key, value in word_num_dict.items()}

    # split the number string into list
    num_list = numbers.split()

    # map the number word to integer
    num_list = [word_num_dict[word] for word in num_list]

    # sort the number list
    num_list.sort()

    # map the integer to number word
    num_list = [num_word_dict[num] for num in num_list]

    # join the number word list into string
    sorted_numbers = "" "".join(num_list)

    return sorted_numbers"
HumanEval/20/en/python/,HumanEval/20,ceb_Latn,python,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" Gikan sa usa ka giprovide nga lista sa mga numero, pili ug ibalik ang duha nga labing duol sa usag usa ug ibalik kini nga nakahan-ay.
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

",find_closest_elements,"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    # Sort the list of numbers in ascending order
    sorted_numbers = sorted(numbers)

    # initialize the pair with the first two elements and their difference
    closest_pair = (sorted_numbers[0], sorted_numbers[1])
    min_difference = abs(sorted_numbers[1] - sorted_numbers[0])

    # Go through the list and find the pair with the smallest difference
    for i in range(1, len(sorted_numbers) - 1):
        difference = abs(sorted_numbers[i] - sorted_numbers[i+1])
        if difference < min_difference:
            min_difference = difference
            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])
            
    return closest_pair"
HumanEval/21/en/python/,HumanEval/21,ceb_Latn,python,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Sa gihatag nga lista sa mga numero, ipatuman ang usa ka linear nga transform sa maong lista,
    aron ang labing gamay nga numero mahimong 0 ug ang labing dako mahimong 1.
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
",rescale_to_unit,"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
    
    # Check if the list has at least two elements
    if len(numbers) < 2:
        raise ValueError(""The list must contain at least two elements."")
    
    min_val = min(numbers)
    max_val = max(numbers)

    return [(i - min_val) / (max_val - min_val) for i in numbers]"
HumanEval/22/en/python/,HumanEval/22,ceb_Latn,python,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" I-filter ang gihatag nga listahan sa bisan unsang mga halad-nga-Python nga mga numero alang lamang sa mga integer.
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
",filter_integers,"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
    return [value for value in values if isinstance(value, int)]"
HumanEval/23/en/python/,HumanEval/23,ceb_Latn,python,"

def strlen(string: str) -> int:
    """""" Ibalik ang gitas-on sa gihatag nga string.
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
",strlen,"def strlen(string: str) -> int:
    """""" 
    Return length of given string
    
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)"
HumanEval/24/en/python/,HumanEval/24,ceb_Latn,python,"

def largest_divisor(n: int) -> int:
    """""" Alang sa gihatag nga numero nga n, pangitaa ang labing dako nga numero nga makadivide sa n nga walay labaw ug mas gamay pa sa n.
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
",largest_divisor,"def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    """"""
    for d in range(n-1, 0, -1):
        if n % d == 0:
            return d
    return 1  # if no other divisor found, n is a prime number and 1 is the largest divisor other than n 

print(largest_divisor(15))  # Output: 5"
HumanEval/25/en/python/,HumanEval/25,ceb_Latn,python,"from typing import List


def factorize(n: int) -> List[int]:
    """""" Ibalik ang lista sa mga prime factors sa gihatag nga integer gikan sa gamay ngadto sa dako. Ang matag usa sa mga factors kinahanglan nga malista sa gidaghanon nga beses nga katumbas sa pila ka beses kini makita sa factorization. Ang input nga numero kinahanglan nga katumbas sa produkto sa tanang mga factors.
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
",factorize,"def factorize(n: int) -> List[int]:
    factors=[]
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors"
HumanEval/26/en/python/,HumanEval/26,ceb_Latn,python,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" Sa lista sa mga integer, tangtanga ang tanang mga elemento nga nagpakita labaw pa sa usa ka beses. 
    Ipadayon ang han-ay sa mga elemento nga nabilin sama sa input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
",remove_duplicates,No code found in response.
HumanEval/27/en/python/,HumanEval/27,ceb_Latn,python,"

def flip_case(string: str) -> str:
    """""" Alang sa usa ka gihatag nga string, ilisi ang mga gamay nga karakter ngadto sa dagkong letra ug ang mga dagkong letra ngadto sa gamay nga karakter.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
",flip_case,"def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return string.swapcase()"
HumanEval/28/en/python/,HumanEval/28,ceb_Latn,python,"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Pagsumpay sa listahan sa mga string ngadto sa usa ka string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
",concatenate,"from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)"
HumanEval/29/en/python/,HumanEval/29,ceb_Latn,python,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Siyahan ang usa ka lista sa mga string nga nagsugod lamang sa usa ka gihatag nga prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
",filter_by_prefix,"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" 
    Filter an input list of strings only for ones that start with a given prefix.
    
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]"
HumanEval/30/en/python/,HumanEval/30,ceb_Latn,python,"

def get_positive(l: list):
    """"""Ibalik lamang ang mga positibong numero sa lista.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

",get_positive,"def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
    return [num for num in l if num > 0]"
HumanEval/31/en/python/,HumanEval/31,ceb_Latn,python,"

def is_prime(n):
    """"""Mobalik og true kung ang gihatag nga numero kay prime, ug false kung dili.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

",is_prime,"def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    """"""
    if n < 2:
        return False

    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False

    return True"
HumanEval/32/en/python/,HumanEval/32,ceb_Latn,python,"import math


def poly(xs: list, x: float):
    """"""
    Gi-evaluate ang polynomial nga adunay mga coefficients nga xs sa punto nga x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

",find_zero,"import math
from scipy.optimize import fsolve

def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    """"""
    xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees a solution.
    """"""
    if len(xs) % 2 == 0 and xs[-1] != 0:
        root = fsolve(poly, 0, args=(xs))
        return root[0]
    else:
        raise ValueError(""The list of coefficients must have an even number of elements and the largest coefficient should be non-zero"")"
HumanEval/33/en/python/,HumanEval/33,ceb_Latn,python,"

def sort_third(l: list):
    """"""Kini nga function modawat ug lista nga l ug mobalik ug lista nga l' nga
    l' parehas sa l sa mga indeks nga dili mahimo nga bahinon sa tulo, samtang ang mga valor sa mga indeks nga mahimo nga bahinon sa tulo parehas 
    sa mga valor sa mga katugbang nga indeks sa l, apan gi-ayo sa han-ay.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

",sort_third,"def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    """"""
    # Create a list of elements at indices divisible by 3
    indices_divisible_by_three = [l[i] for i in range(0, len(l), 3)]
    
    # Sort the list
    indices_divisible_by_three.sort()
    
    # Create a new list with the same values as `l` for indices not divisible by 3,
    # and sorted values of `l` for indices divisible by 3 
    l_prime = [indices_divisible_by_three[i//3] if i % 3 == 0 else l[i] for i in range(len(l))]
    
    return l_prime"
HumanEval/34/en/python/,HumanEval/34,ceb_Latn,python,"

def unique(l: list):
    """"""Ibalik ang mga pinasaylo ug talagsaon nga mga elemento sa usa ka lista
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

",unique,"def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(list(set(l)))"
HumanEval/35/en/python/,HumanEval/35,ceb_Latn,python,"

def max_element(l: list):
    """"""Ibalik ang pinakadakong elemento sa listahan.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
",max_element,"def max_element(l: list):
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
    if len(l) == 0:
        return None
    max_elem = l[0]
    for element in l:
        if element > max_elem:
            max_elem = element
    return max_elem"
HumanEval/36/en/python/,HumanEval/36,ceb_Latn,python,"

def fizz_buzz(n: int):
    """"""Ibalik ang gidaghanon sa mga higayon nga mogawas ang numero nga 7 sa mga integer nga mas gamay pa sa n nga mahitungod sa 11 o 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

",fizz_buzz,"def fizz_buzz(n: int) -> int:
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count"
HumanEval/37/en/python/,HumanEval/37,ceb_Latn,python,"

def sort_even(l: list):
    """"""Kini nga function nagkuha ug lista l ug nagbalik ug lista l' nga ingon niini
    l' parehas sa l sa mga odd nga indices, samtang ang mga values niini sa even nga indices parehas
    sa mga values sa even nga indices sa l, apan naka-ayos.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

",sort_even,"def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])
    l_prime = [even_indices_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]
    return l_prime"
HumanEval/38/en/python/,HumanEval/38,ceb_Latn,python,"

def encode_cyclic(s: str):
    """"""
    Nagbalik sa encoded nga string pinaagi sa pag-usab-usab sa mga grupo nga adunay tulo ka karakter.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

",decode_cyclic,"def encode_cyclic(s: str) -> str:
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str) -> str:
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # Reverse the cycle in each group. Unless group has fewer elements than 3.
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)"
HumanEval/39/en/python/,HumanEval/39,ceb_Latn,python,"

def prime_fib(n: int):
    """"""
    Ang prime_fib nagbalik sa ika-n nga numero nga usa ka Fibonacci number ug usab usa ka prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

",prime_fib,"def prime_fib(n: int):
    def is_prime(num):
        if num < 2:  # 0 and 1 are not prime
            return False
        for i in range(2, num):  # check from 2 to n-1
            if num % i == 0:  # if n is divisible by i, it's not prime
                return False
        return True

    def fib(number):
        fib_nums = [0, 1]
        while len(fib_nums) <= number:
            fib_nums.append(fib_nums[-1] + fib_nums[-2])
        return fib_nums[number]

    prime_fibs_list = []
    count = 0
    while len(prime_fibs_list) < n:
        if is_prime(fib(count)):
            prime_fibs_list.append(fib(count))
        count += 1
    return prime_fibs_list[-1]"
HumanEval/40/en/python/,HumanEval/40,ceb_Latn,python,"

def triples_sum_to_zero(l: list):
    """"""
    Ang `triples_sum_to_zero` modawat ug lista sa mga integer isip input. Mobalik kini ug True kung adunay tulo ka lahi nga mga elemento sa lista nga ang total kay zero, ug False kung dili.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

",triples_sum_to_zero,"def triples_sum_to_zero(l):
    sorted_list = sorted(l)
    length = len(sorted_list)

    for i in range(0, length - 2):
        if sorted_list[i] > 0:
            return False
        left = i + 1
        right = length - 1

        while left < right:
            total = sorted_list[i] + sorted_list[left] + sorted_list[right]
            if total == 0:
                return True
            elif total < 0:
                left = left + 1
            else:
                right = right - 1

    return False"
HumanEval/41/en/python/,HumanEval/41,ceb_Latn,python,"

def car_race_collision(n: int):
    """"""
    Hunahunaa ang usa ka dalan nga perpekto nga tuwid ug walay kinutuban nga linya. n ka mga sakyanan ang nagmaneho paingon sa wala ngadto sa tuo; sabay-sabay, laing set nga n ka mga sakyanan ang nagpadagan gikan sa tuo paingon sa wala. Ang duha ka set sa mga sakyanan magsugod nga layo kaayo sa usag usa. Tanang sakyanan naglihok sa parehas nga tulin. Duha ka sakyanan giingon nga nagbangga kung ang usa ka sakyanan nga nagpadulong sa wala ngadto sa tuo makaigo sa usa ka sakyanan nga nagpadulong sa tuo paingon sa wala. Bisan pa, ang mga sakyanan walay kinutuban nga lig-on ug kusgan; tungod niini, magpadayon sila sa ilang agianan nga daw wala sila nagbangga.

Kini nga function mag-output sa gidaghanon sa maong mga bangga.
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

",car_race_collision,"def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
    # since all cars move at the same speed and in opposite directions,
    # every car from the left will collide with every car from the right
    # so, the numbers of collisions will be the number of cars from one direction 
    # multiplied by the number of cars from the other direction
    return n * n"
HumanEval/42/en/python/,HumanEval/42,ceb_Latn,python,"

def incr_list(l: list):
    """"""Ibalik ang listahan nga may mga elemento nga nadugangan ug usa.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

",incr_list,"def incr_list(l: list) -> list:
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
    return [x+1 for x in l]"
HumanEval/43/en/python/,HumanEval/43,ceb_Latn,python,"

def pairs_sum_to_zero(l):
    """"""
    Ang pairs_sum_to_zero kay modawat ug lista sa mga integers isip input.
    Kini magbalik ug True kung adunay duha ka lahi nga elemento sa lista nga
    mo-total ug zero, ug False kung dili.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

",pairs_sum_to_zero,"def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    """"""
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            if l[i] + l[j] == 0:
                return True
    return False"
HumanEval/44/en/python/,HumanEval/44,ceb_Latn,python,"

def change_base(x: int, base: int):
    """"""Pag-usab ang numerikal nga base sa input nga numero nga x ngadto sa base.
    ibalik ang string nga representasyon human sa konbersyon.
    ang mga base nga numero kay ubos sa 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

",change_base,"def change_base(x: int, base: int) -> str:
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    """"""
    digits = []

    while x > 0:
        x, remainder = divmod(x, base)
        digits.append(str(remainder))

    # Reverse digits and join them into a string
    return ''.join(digits[::-1])"
HumanEval/45/en/python/,HumanEval/45,ceb_Latn,python,"

def triangle_area(a, h):
    """"""Gihatag nga gitas-on sa usa ka kilid ug taas nga balik sa area para sa usa ka trianggulo.
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

",triangle_area,"def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
    return 0.5 * a * h"
HumanEval/46/en/python/,HumanEval/46,ceb_Latn,python,"

def fib4(n: int):
    """"""Ang Fib4 nga numero nga sunod-sunod mao ang usa ka sunod-sunod nga pareho sa Fibbonacci nga sunod-sunod nga gihubit ingon niini:

    fib4 -> 0
    fib4 -> 0
    fib4 -> 2
    fib4 -> 0
    fib4 -> fib4 + fib4 + fib4 + fib4.

Palihug himoa ang usa ka function aron ma-efisiyente nga makompyutar ang ika-n nga elemento sa Fib4 nga numero nga sunod-sunod. Ayaw gamita ang recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

",fib4,"def fib4(n: int):
    if n <= 0: 
        return 0
    elif n == 1:   
        return 0
    elif n == 2:   
        return 2
    elif n == 3:   
        return 0
    
    fib = [0, 0, 2, 0] + [0]*(n-3)
    
    for i in range(4, n+1):
        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]
        
    return fib[n]"
HumanEval/47/en/python/,HumanEval/47,ceb_Latn,python,"

def median(l: list):
    """"""Ibalik ang median sa mga elemento sa listahan nga l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

",median,"def median(l: list):
    """"""
    Return median of elements in the list l.
    """"""
    n = len(l)
    l.sort()

    # If length of list is even, get the average of the two middle numbers
    if n % 2 == 0:
        median = (l[n//2] + l[n//2 - 1]) / 2
    # If length of list is odd, get the middle number
    else:
        median = l[n//2]
        
    return median"
HumanEval/48/en/python/,HumanEval/48,ceb_Latn,python,"

def is_palindrome(text: str):
    """"""
    Nagsusi kung ang gihatag nga string usa ka palindrome.
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

",is_palindrome,"def is_palindrome(text: str) -> bool:
    """"""
    Checks if given string is a palindrome
    
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
    return text == text[::-1]"
HumanEval/49/en/python/,HumanEval/49,ceb_Latn,python,"

def modp(n: int, p: int):
    """"""Ibalik ang 2^n modulo p.
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

",modp,"def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numnerics).
    
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    return pow(2, n, p)"
HumanEval/50/en/python/,HumanEval/50,ceb_Latn,python,"

def encode_shift(s: str):
    """"""
    Mobalik ang gi-encode nga string pinaagi sa pagbalhin sa matag karakter sa 5 ka letra sa alpabeto.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

",decode_shift,"def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])

def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])"
HumanEval/51/en/python/,HumanEval/51,ceb_Latn,python,"

def remove_vowels(text):
    """"""
    Ang remove_vowels usa ka function nga nagkuha ug string ug nagbalik ug string nga walay mga bokal.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

",remove_vowels,"def remove_vowels(text):
    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
    return ''.join([char for char in text if char not in vowels])"
HumanEval/52/en/python/,HumanEval/52,ceb_Latn,python,"

def below_threshold(l: list, t: int):
    """"""Ibalik ang Tinuod kung ang tanan nga numero sa lista l ubos sa threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

",below_threshold,"def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t.""""""
    return all(x < t for x in l)

# Testing the function
print(below_threshold([1, 2, 4, 10], 100))  # True
print(below_threshold([1, 20, 4, 10], 5))  # False"
HumanEval/53/en/python/,HumanEval/53,ceb_Latn,python,"

def add(x: int, y: int):
    """"""Idugang ang duha ka numero nga x ug y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

",add,"def add(x: int, y: int) -> int:
    """"""Add two numbers x and y

    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y"
HumanEval/54/en/python/,HumanEval/54,ceb_Latn,python,"

def same_chars(s0: str, s1: str):
    """"""
    Susiha kung ang duha ka pulong adunay parehas nga mga karakter.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

",same_chars,"def same_chars(s0: str, s1: str) -> bool:
    """"""
    Check if two words have the same characters.

    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
    return sorted(set(s0)) == sorted(set(s1))"
HumanEval/55/en/python/,HumanEval/55,ceb_Latn,python,"

def fib(n: int):
    """"""Ibalik ang ika-n nga numero sa Fibonacci.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

",fib,"def fib(n: int) -> int:
    if n <= 0:
        return ""Error: input must be a positive integer""

    if n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b"
HumanEval/56/en/python/,HumanEval/56,ceb_Latn,python,"

def correct_bracketing(brackets: str):
    """""" Ang brackets kay usa ka string nga naglangkob sa ""<"" ug "">"". 
    mobalik ug True kung ang matag abli nga bracket adunay katugbang nga pagsira nga bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

",correct_bracketing,"def correct_bracketing(brackets: str) -> bool:
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.
    """"""
    count = 0
    for character in brackets:
        if character == '<':
            count += 1
        elif character == '>':
            if count == 0:
                return False
            count -= 1
    return count == 0"
HumanEval/57/en/python/,HumanEval/57,ceb_Latn,python,"

def monotonic(l: list):
    """"""Mobalik ug Tinuod kung ang mga elemento sa lista kay padayon nga nagkataas o nagkagamay.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

",monotonic,"def monotonic(l: list):
    """"""Return True if list elements are monotonically increasing or decreasing.

    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):
        return True
    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):
        return True
    return False"
HumanEval/58/en/python/,HumanEval/58,ceb_Latn,python,"

def common(l1: list, l2: list):
    """"""Balika ang mga pinasahi ug managsamang elemento nga nasort sa duha ka lista.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

",common,"def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]
    """"""

    # Using set intersection to find common elements 
    # and sorted function to sort the result.
    return sorted(list(set(l1) & set(l2)))"
HumanEval/59/en/python/,HumanEval/59,ceb_Latn,python,"

def largest_prime_factor(n: int):
    """"""Ibalik ang labing daku nga prime nga factor sa n. I-assume nga n > 1 ug dili kini prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

",largest_prime_factor,No code found in response.
HumanEval/60/en/python/,HumanEval/60,ceb_Latn,python,"

def sum_to_n(n: int):
    """"""Ang sum_to_n kay usa ka function nga nag-asumada sa mga numero gikan sa 1 hangtod n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

",sum_to_n,"def sum_to_n(n: int) -> int:
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
    if n < 1:
        return ""Input must be a positive integer""
    else:
        return sum(range(1, n+1))"
HumanEval/61/en/python/,HumanEval/61,ceb_Latn,python,"

def correct_bracketing(brackets: str):
    """""" Ang ""brackets"" kay usa ka string nga naglangkob sa """". 
    Mobalik og True kung ang matag bukas nga bracket adunay katumbas nga sirado nga bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

",correct_bracketing,"def correct_bracketing(brackets: str) -> bool:
    stack = []

    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack or stack.pop() != '(':
                return False

    return len(stack) == 0"
HumanEval/62/en/python/,HumanEval/62,ceb_Latn,python,"

def derivative(xs: list):
    """""" Ang mga xs nagrepresentar sa mga coefficient sa usa ka polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
    Ibalik ang derivative niini nga polynomial sa parehas nga porma.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

",derivative,"def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
    Return derivative of this polynomial in the same form.
    """"""
    return [i*x for i, x in enumerate(xs)][1:]"
HumanEval/63/en/python/,HumanEval/63,ceb_Latn,python,"

def fibfib(n: int):
    """"""Ang FibFib nga sunod-sunod nga numero usa ka sunod-sunod nga sama sa Fibonacci nga gihubit ingon niini:
    fibfib == 0
    fibfib == 0
    fibfib == 1
    fibfib == fibfib + fibfib + fibfib.
    Palihug isulat ang usa ka function aron epektibong makompyuta ang ika-n nga elemento sa FibFib nga sunod-sunod nga numero.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

",fibfib,"def fibfib(n: int) -> int:
    if n==0:
        return 0
    elif n==1:
        return 0
    elif n==2:
        return 1
    else:
        fibfib_seq = [0, 0, 1]
        for i in range(3,n+1):
            fibfib_seq.append(fibfib_seq[i-1] + fibfib_seq[i-2] + fibfib_seq[i-3])
        return fibfib_seq[n]"
HumanEval/64/en/python/,HumanEval/64,ceb_Latn,python,"
FIX = """"""
Pagdugang ug daghang mga kaso sa pagsulay.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",vowels_count,"def vowels_count(s):
    # Convert the string to lowercase to simplify the checks
    s = s.lower()
    
    # Initialize count
    count = 0
    
    # Check each character
    for i in range(len(s)):
        if s[i] in 'aeiou':
            count += 1
        elif s[i] == 'y' and i == len(s) - 1:  # 'y' is a vowel when it's at the end of the word
            count += 1
    
    return count"
HumanEval/65/en/python/,HumanEval/65,ceb_Latn,python,"
def circular_shift(x, shift):
    """"""I-circular shift ang mga numero sa integer nga x, i-shift ang mga numero pakanan pinaagi sa shift ug ibalik ang resulta isip string. Kung ang shift mas dako pa sa gidaghanon sa mga numero, ibalik ang mga numero nga binaliktad.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

",circular_shift,"def circular_shift(x, shift):
    # Convert integer to string
    x_str = str(x)

    # Define length of the string
    len_str = len(x_str)

    # If shift > number of digits, return digits reversed
    if shift > len_str:
        return x_str[::-1]

    # Shift the digits
    x_shifted = x_str[-shift:] + x_str[:-shift]

    return x_shifted"
HumanEval/66/en/python/,HumanEval/66,ceb_Latn,python,"
def digitSum(s):
    """"""Isulat ang mosunod nga pangungusap sa Cebuano:

Task
    Paghimo ug usa ka function nga mokuha ug string isip input ug mobalik sa suma sa mga upper characters lamang'
    ASCII codes.

    Mga Pananglitan:
        digitSum => 0
        digitSum => 131
        digitSum => 67
        digitSum => 69
        digitSum => 131
        digitSum => 153
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

",digitSum,"def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())

print(digitSum(""""))         # => 0
print(digitSum(""abAB""))     # => 131
print(digitSum(""abcCd""))    # => 67
print(digitSum(""helloE""))   # => 69
print(digitSum(""woArBld""))  # => 131
print(digitSum(""aAaaaXa""))  # => 153"
HumanEval/67/en/python/,HumanEval/67,ceb_Latn,python,"
def fruit_distribution(s,n):
    """"""
    Sa kini nga buluhaton, hatagan ka og usa ka string nga nagrepresenta sa gidaghanon sa mansanas ug mga kahel nga gipang-apod-apod sa usa ka basket sa prutas. Kini nga basket adunay mga mansanas, mga kahel, ug mga prutas nga mangga. Hatagan ka og string nga nagrepresenta sa kinatibuk-ang gidaghanon sa mga kahel ug mansanas ug usa ka integer nga nagrepresenta sa kinatibuk-ang gidaghanon sa mga prutas sa basket, ibalik ang gidaghanon sa mga prutas nga mangga sa basket.
Pananglitan:
fruit_distribution -> 19 - 5 - 6 = 8
fruit_distribution -> 3 - 0 - 1 = 2
fruit_distribution -> 100 - 2 - 3 = 95
fruit_distribution -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
",fruit_distribution,"def fruit_distribution(s, n):
    # Splitting string
    fruits = s.split()
    # Finding indexes of 'apples' and 'oranges' in list
    apples_index = fruits.index('apples')
    oranges_index = fruits.index('oranges')
    # Getting number of apples and oranges
    apples = int(fruits[apples_index-1])
    oranges = int(fruits[oranges_index-1])
    # Subtracting number of apples and oranges from total number of fruits
    mangoes = n - apples - oranges
    return mangoes"
HumanEval/68/en/python/,HumanEval/68,ceb_Latn,python,"
def pluck(arr):
    """"""
    Given ang usa ka array nga nagrepresentar sa usa ka sanga sa kahoy nga adunay mga non-negative integer nodes,
    ang imong buluhaton mao ang pagpili og usa sa mga nodes ug ibalik kini.
    Ang napili nga node kinahanglan mao ang node nga adunay labing gamay nga even value.
    Kung daghang nodes nga adunay parehas nga labing gamay nga even value ang nakit-an, ibalik ang node nga adunay labing gamay nga index.

    Ang napili nga node kinahanglan ibalik sa usa ka listahan, [smallest_value, iyang index],
    Kung walay even values o ang array nga gihatag walay sulod, ibalik [].

    Pananglitan1:
        Input: [4,2,3]
        Output: [2, 1]
        Pagpatin-aw: Ang 2 adunay labing gamay nga even value, ug ang 2 adunay labing gamay nga index.

    Pananglitan2:
        Input: [1,2,3]
        Output: [2, 1]
        Pagpatin-aw: Ang 2 adunay labing gamay nga even value, ug ang 2 adunay labing gamay nga index.

    Pananglitan3:
        Input: []
        Output: []
    
    Pananglitan4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Pagpatin-aw: Ang 0 mao ang labing gamay nga value, apan adunay duha ka zero,
                     mao nga pilion nato ang una nga zero, nga adunay labing gamay nga index.

    Mga Paghagit:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

",pluck,"def pluck(arr):
    min_even_val = float('inf')
    min_val_index = None

    for i, value in enumerate(arr):
        if value % 2 == 0 and value < min_even_val:
            min_even_val = value
            min_val_index = i
            
    if min_val_index is None:
        return []
    return [min_even_val, min_val_index]"
HumanEval/69/en/python/,HumanEval/69,ceb_Latn,python,"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

",search,"def search(lst):
    from collections import Counter
    count_dict = Counter(lst)
    eligible_values = [num for num in count_dict if num<=count_dict[num]]
    if not eligible_values:
        return -1
    return max(eligible_values)"
HumanEval/70/en/python/,HumanEval/70,ceb_Latn,python,"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

",strange_sort_list,"def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''

    if not lst:  # list is empty
        return []

    lst.sort()  
    result = []  

    while len(lst) > 1:  
        result.append(lst.pop(0))  # remove and append the smallest 
        result.append(lst.pop())  # remove and append the largest

    # handling case where original list had odd number of elements
    if lst:  
        result.append(lst[0])  

    return result"
HumanEval/71/en/python/,HumanEval/71,ceb_Latn,python,"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

",triangle_area,"def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    '''
    # check if the sides form a valid triangle
    if a + b > c and a + c > b and b + c > a:
        # calculate the semi-perimeter
        s = (a + b + c) / 2
        # calculate the area using heron's formula
        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
        return round(area, 2)
    else:
        return -1"
HumanEval/72/en/python/,HumanEval/72,ceb_Latn,python,"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

",will_it_fly,"def will_it_fly(q, w):
    '''Returns True if the object q will fly, false otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.
    '''

    def is_palindrome(lst):
        '''Returns True if the list is a palindrome, false otherwise'''
        return lst == lst[::-1]  # Compares the list with its reverse
    
    if not is_palindrome(q):   # check if it's unbalanced
        return False
    
    total_weight = sum(q)  # Calculate total weight
       
    return total_weight <= w  # Check if total weight is less or equal to the maximum weight"
HumanEval/73/en/python/,HumanEval/73,ceb_Latn,python,"
def smallest_change(arr):
    """"""
    Gihatag ang usa ka laray nga arr nga adunay mga integer, pangitaa ang minimum nga gidaghanon sa mga elemento nga kinahanglan usbon aron mahimong palindromic ang laray. Ang palindromic nga laray mao ang laray nga mabasa nga pareho sa likod ug unahan. Sa usa ka pagbag-o, mahimo nimong usbon ang usa ka elemento ngadto sa bisan unsang laing elemento.

Pananglitan:
smallest_change == 4
smallest_change == 1
smallest_change == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

",smallest_change,"def smallest_change(arr):
    i, j = 0, len(arr) - 1
    changes = 0
    while i < j:
        if arr[i] != arr[j]:
            changes += 1
        i += 1
        j -= 1
    return changes"
HumanEval/74/en/python/,HumanEval/74,ceb_Latn,python,"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

",total_match,"def total_match(lst1, lst2):
    # calculate the total number of characters in each list
    total_chars_lst1 = sum(len(s) for s in lst1)
    total_chars_lst2 = sum(len(s) for s in lst2)

    # compare the total number of characters and return the appropriate list
    if total_chars_lst1 <= total_chars_lst2:
        return lst1
    else:
        return lst2"
HumanEval/75/en/python/,HumanEval/75,ceb_Latn,python,"
def is_multiply_prime(a):
    """"""Pagsulat ug usa ka function nga mobalik ug ""true"" kung ang gihatag nga numero kay produkto sa 3 ka mga prime nga numero
    ug ""false"" kung dili.
    Kahibalo nga ang kay mas gamay sa 100.
    Pananglitan:
    is_multiply_prime == Tinuod
    30 = 2 * 3 * 5
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

",is_multiply_prime,"def is_multiply_prime(a):
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n%2 == 0 or n%3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    count = 0
    prime_factors = []
    for i in range(2, a + 1):
        if a % i == 0:
            if is_prime(i):
                a /= i
                prime_factors.append(i)
                count += 1
    if count == 3 and a == 1:
        return True
    else:
        return False"
HumanEval/76/en/python/,HumanEval/76,ceb_Latn,python,"
def is_simple_power(x, n):
    """"""Ang imong buluhaton mao ang pagsulat sa usa ka function nga mobalik og true kung ang usa ka numero x usa ka simple nga gahum sa n ug false sa ubang mga kaso.
    Ang x usa ka simple nga gahum sa n kung n**int=x
    Pananglitan:
    is_simple_power => true
    is_simple_power => true
    is_simple_power => true
    is_simple_power => false
    is_simple_power => false
    is_simple_power => false
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

",is_simple_power,"def is_simple_power(x, n):
    """"""Returns True if x is a simple power of n and False otherwise.""""""
    if x == 1:
        return True
    elif n == 1:
        return x == 1
    else:
        exponent = 1
        while n ** exponent < x:
            exponent += 1
        return n ** exponent == x"
HumanEval/77/en/python/,HumanEval/77,ceb_Latn,python,"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

",iscube,"def iscube(a):
    # compute cube root of a
    cube_root = round(abs(a) ** (1. / 3))

    # compare cube of cube_root to original a
    return cube_root ** 3 == abs(a)"
HumanEval/78/en/python/,HumanEval/78,ceb_Latn,python,"
def hex_key(num):
    """"""Gihatagan ka ug buluhaton nga magsulat ug function nga modawat ug hexadecimal nga numero isip string ug mag-ihap sa gidaghanon sa mga hexadecimal nga numero nga mga prime. Ang mga hexadecimal nga numero mao ang 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Ang mga prime numbers mao ang 2, 3, 5, 7, 11, 13, 17,...
Busa kinahanglan nimo mahibal-an ang gidaghanon sa mosunod nga mga numero: 2, 3, 5, 7, B, D.
Nota: mahimo nimo nga igsumpay nga ang input kanunay nga sakto o wala'y sulod nga string, ug ang mga simbolo nga A, B, C, D, E, F kanunay nga uppercase.
Mga Pananglitan:
Alang sa num = ""AB"" ang output kinahanglan 1.
Alang sa num = ""1077E"" ang output kinahanglan 2.
Alang sa num = ""ABED1A33"" ang output kinahanglan 4.
Alang sa num = ""123456789ABCDEF0"" ang output kinahanglan 6.
Alang sa num = ""2020"" ang output kinahanglan 2.
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

",hex_key,"def hex_key(num):
    hex_primes = set(['2', '3', '5', '7', 'B', 'D'])
    count = 0
    for digit in num:
        if digit in hex_primes:
            count += 1
    return count"
HumanEval/79/en/python/,HumanEval/79,ceb_Latn,python,"
def decimal_to_binary(decimal):
    """"""Ikaw pagatagan ug numero nga anaa sa desimal nga porma ug ang imong buluhaton mao ang pag-usab niini ngadto sa binary nga pormat. Ang function kinahanglan mobalik ug string, nga ang matag karakter nagrepresentar sa usa ka binary nga numero. Ang matag karakter sa string mahimong '0' o '1'.

Adunay duha ka dugang nga mga karakter 'db' sa sinugdanan ug sa katapusan sa string. Ang mga dugang nga karakter anaa diha aron makatabang sa pormat.

Mga Pananglitan:
decimal_to_binary   # mobalik ""db1111db""
decimal_to_binary   # mobalik ""db100000db""
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",decimal_to_binary,"def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]  # Convert the decimal to binary and remove the ""0b"" prefix
    return ""db"" + binary + ""db""  # Add the ""db"" prefix and suffix"
HumanEval/80/en/python/,HumanEval/80,ceb_Latn,python,"
def is_happy(s):
    """"""Gihatagan ka ug string nga s.
    Ang imong buluhaton mao ang pagsusi kung ang string malipay ba o dili.
    Ang string malipay kung ang iyang gitas-on labing menos 3 ug ang matag 3 ka sunod-sunod nga letra kay lain-lain.
    Pananglitan:
    is_happy => Dili
    is_happy => Dili
    is_happy => Tinuod
    is_happy => Dili
    is_happy => Tinuod
    is_happy => Dili
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
",is_happy,"def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:
            return False
    return True"
HumanEval/81/en/python/,HumanEval/81,ceb_Latn,python,"
def numerical_letter_grade(grades):
    """"""Kini ang kataposang semana sa semestro ug ang magtutudlo kinahanglan nga ihatag ang mga grado sa mga estudyante. Ang magtutudlo nagbuhat sa iyang kaugalingong algorithm alang sa paggrado. Ang bugtong problema mao nga nawala niya ang code nga iyang gigamit alang sa paggrado. Gihatagan ka niya ug lista sa mga GPA sa pipila ka mga estudyante ug kinahanglan nimong isulat ang usa ka function nga makaproduce ug lista sa mga letter grade gamit ang mosunod nga tsart:

             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Pananglitan:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

",numerical_letter_grade,"def numerical_letter_grade(grades):
    grades_letters = []

    for gpa in grades:
        if gpa >= 4.0:
            grades_letters.append('A+')
        elif gpa > 3.7:
            grades_letters.append('A')
        elif gpa > 3.3:
            grades_letters.append('A-')
        elif gpa > 3.0:
            grades_letters.append('B+')
        elif gpa > 2.7:
            grades_letters.append('B')
        elif gpa > 2.3:
            grades_letters.append('B-')
        elif gpa > 2.0:
            grades_letters.append('C+')
        elif gpa > 1.7:
            grades_letters.append('C')
        elif gpa > 1.3:
            grades_letters.append('C-')
        elif gpa > 1.0:
            grades_letters.append('D+')
        elif gpa > 0.7:
            grades_letters.append('D')
        elif gpa > 0.0:
            grades_letters.append('D-')
        else:
            grades_letters.append('E')
            
    return grades_letters"
HumanEval/82/en/python/,HumanEval/82,ceb_Latn,python,"
def prime_length(string):
    """"""Pagsulat ug usa ka function nga mo-dawat ug string ug mo-uli ug True kung ang gidugayon sa string kay prime number o False kung dili.
    Mga Pananglitan
    prime_length == True
    prime_length == True
    prime_length == True
    prime_length == False
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

",prime_length,"def is_prime(n):
    """"""Check if a number is a prime""""""
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_length(string):
    """"""Check if the length of the string is a prime number""""""
    return is_prime(len(string))"
HumanEval/83/en/python/,HumanEval/83,ceb_Latn,python,"
def starts_one_ends(n):
    """"""
    Gihatag ang usa ka positibong integer nga n, ibalik ang pag-ihap sa mga numero sa n-digit nga positibong mga integer nga nagsugod o nagtapos sa 1.
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",starts_one_ends,"def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
    if n == 1:
        return 1
    else:
        # for n-digit numbers that start with 1, there are 10^(n-1) possibilities.
        # for n-digit numbers that end with 1, there are 10^(n-1) possibilities.
        # for numbers that start and end with 1, we have counted twice, so subtract off.
        return (2 * 10**(n-1)) - (10**(n-2))

# Test
print(starts_one_ends(2)) # Should print 30
print(starts_one_ends(3)) # Should print 280
print(starts_one_ends(4)) # Should print 2700
print(starts_one_ends(1)) # Should print 1"
HumanEval/84/en/python/,HumanEval/84,ceb_Latn,python,"
def solve(N):
    """"""Hatagi ang usa ka positibo nga integer N, ibalik ang kinatibuk-ang sumada sa mga numero niini sa binary.

    Pananglitan
        Para sa N = 1000, ang sumada sa mga numero kay 1 ang output kinahanglan ""1"".
        Para sa N = 150, ang sumada sa mga numero kay 6 ang output kinahanglan ""110"".
        Para sa N = 147, ang sumada sa mga numero kay 12 ang output kinahanglan ""1100"".
    
    Mga Variable:
        @N integer
             Mga Pagdili: 0 ≤ N ≤ 10000.
    Output:
         usa ka string nga binary nga numero
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

",solve,"def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.""""""
    # Convert the number to binary and remove the '0b' prefix.
    binary_number = bin(N)[2:]
    
    # Find the sum of all binary digits.
    binary_digit_sum = sum([int(digit) for digit in binary_number])
    
    # Convert the sum to binary and return as a string.
    return bin(binary_digit_sum)[2:]

# Example usage:
print(solve(1000))  # Output: ""1""
print(solve(150))   # Output: ""110""
print(solve(147))   # Output: ""1100"""
HumanEval/85/en/python/,HumanEval/85,ceb_Latn,python,"
def add(lst):
    """"""Tungod sa usa ka dili bakante nga lista sa mga integer nga lst. idugang ang mga bisan nga elemento nga anaa sa mga dili pares nga mga indeks.

    Mga Pananglitan:
        add ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
",add,"def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices.

    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""

    # Extract elements at odd indices
    odd_index_elements = lst[1::2]
    
    # Filter out the even numbers from odd index elements
    even_values = [num for num in odd_index_elements if num % 2 == 0]

    # Return the sum of the even numbers
    return sum(even_values)"
HumanEval/86/en/python/,HumanEval/86,ceb_Latn,python,"
def anti_shuffle(s):
    """"""
    Isulat ang usa ka function nga mopadawat ug string ug mopabalik ug usa ka han-ay nga bersyon niini.
    Ang han-ay nga bersyon sa string, mao ang usa ka string diin ang tanang mga pulong
    gipulihan ug usa ka bag-ong pulong diin ang tanang mga karakter gihahan-ay sa
    pagsaka base sa ascii value.
    Nota: Dapat nimo itipig ang han-ay sa mga pulong ug mga walay sulod nga espasyo sa pangungusap.

    Pananglitan:
    ang anti_shuffle mopabalik ug 'Hi'
    ang anti_shuffle mopabalik ug 'ehllo'
    ang anti_shuffle mopabalik ug 'Hello !!!Wdlor'
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

",anti_shuffle,"def anti_shuffle(s):
    # split the input string into words
    words = s.split(' ')
    
    # sort the characters in each word
    for i in range(len(words)):
        words[i] = ''.join(sorted(words[i]))

    # rejoin the words into a string with a space between each word
    return ' '.join(words)"
HumanEval/87/en/python/,HumanEval/87,ceb_Latn,python,"
def get_row(lst, x):
    """"""
    Gihatagan ka og 2-dimensional nga datos, nga usa ka nested lists, nga susama sa matrix. Apan, dili sama sa mga matrix, matag linya mahimong adunay lain-laing gidaghanon sa mga kolum. Gihatagan ang lst ug integer x, pangitaa ang mga integer x sa listahan, ug ibalik ang listahan sa mga tuples, [, ...] nga ang matag tuple kay usa ka coordinate -, nga magsugod sa 0. I-sort ang mga coordinate una sa mga linya sa ascending order. I-sort usab ang mga coordinate sa linya pinaagi sa mga kolum sa descending order.

Mga Pananglitan:
get_row([
  [1,2,3,4,5,6],
  [1,2,3,4,1,6],
  [1,2,3,4,5,1]
], 1) == [,,,,]
get_row == []
get_row == []
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

",get_row,"def get_row(lst, x):
    # Initialize the empty list
    result = []

    # For each row in the list
    for i in range(len(lst)):
        # For each column in the row
        for j in range(len(lst[i])):
            # If the value in the specific position equals x, add the tuple (i, j) to the result list
            if lst[i][j] == x:
                result.append((i, j))

    # Sort the result list as per the conditions - first by row number in ascending order and then by column number in descending order
    result.sort(key=lambda x: (x[0], -x[1]))

    return result"
HumanEval/88/en/python/,HumanEval/88,ceb_Latn,python,"
def sort_array(array):
    """"""
    Hatagi ko ug array nga walay negatibong integer, ibalik ang kopya sa gihatag nga array human kini ma-sort,
    imong i-sort ang gihatag nga array sa ascending order kung ang sum kay odd,
    o i-sort kini sa descending order kung ang sum kay even.

    Nota:
    * ayaw usba ang gihatag nga array.

    Mga Pananglitan:
    * sort_array => []
    * sort_array => [5]
    * sort_array => [0, 1, 2, 3, 4, 5]
    * sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

",sort_array,"def sort_array(array):
    if len(array) == 0:     # if array is empty, return an empty array
        return []
    elif len(array) == 1:   # if array has only one element, return it as is
        return array
    else:
        sum_of_first_and_last = array[0] + array[-1] 
        if sum_of_first_and_last % 2 == 0: # if sum is even, sort in descending order
            return sorted(array, reverse=True)
        else: # if sum is odd, sort in ascending order
            return sorted(array)"
HumanEval/89/en/python/,HumanEval/89,ceb_Latn,python,"
def encrypt(s):
    """"""```python
def encrypt:
    encrypted = """"
    shift = 2 * 2  # Shift by two multiplied by two places
    for char in s:
        if 'a' <= char <= 'z':  # Check if the character is a lowercase letter
            new_char = chr - ord + shift) % 26) + ord)
            encrypted += new_char
        else:
            encrypted += char  # If not a lowercase letter, keep the character as is
    return encrypted

# Example usage:
print)          # Output: lm
print)   # Output: ewhjklnop
print)          # Output: kj
print)          # Output: ix
```

This function `encrypt` takes a string `s`, then shifts each lowercase letter in the string by 4 positions in the alphabet. The function handles the wrapping of the alphabet using the modulo operation.
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

",encrypt,"def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""

    encrypted = """"
    
    for c in s:
        if c.isalpha():
            if c.isupper(): 
                encrypted += chr((ord(c) - 65 + 4) % 26 + 65) 
            else: 
                encrypted += chr((ord(c) - 97 + 4) % 26 + 97) 
        
        else:
            encrypted += c
            
    return encrypted"
HumanEval/90/en/python/,HumanEval/90,ceb_Latn,python,"
def next_smallest(lst):
    """"""
    Gihatagan ka ug lista sa mga integer.
    Isulat ang usa ka function nga gitawag ug next_smallest nga mobalik sa ikaduhang labing gamay nga elemento sa lista.
    Ibalik ang None kung walay ingon nga elemento.

    next_smallest == 2
    next_smallest == 2
    next_smallest == Wala
    next_smallest == Wala
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

",next_smallest,No code found in response.
HumanEval/91/en/python/,HumanEval/91,ceb_Latn,python,"
def is_bored(S):
    """"""
    Hatagan ka ug usa ka linya nga mga pulong, ug ang imong buluhaton mao ang pag-ihap sa gidaghanon sa mga kapul-an. Ang kapul-an kay usa ka sentence nga nagsugod sa pulong nga ""I"". Ang mga sentence kay gilimitahan sa '.', '?' o '!'.

Pananglitan:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",is_bored,"def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
    # Split the string into sentences based on delimiters '.', '?' or '!'
    sentences = [sentence.strip() for sentence in re.split('[.?!]', S)]
    # count number of sentences starting with 'I'
    boredoms = sum(sentence.startswith('I') for sentence in sentences)
    return boredoms"
HumanEval/92/en/python/,HumanEval/92,ceb_Latn,python,"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

",any_int,"def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.

    Examples
    any_int(5, 2, 7) -> True
    any_int(3, 2, 2) -> False
    any_int(3, -2, 1) -> True
    any_int(3.6, -2.2, 2) -> False
    '''
    # Check if all inputs are integer
    if all(isinstance(i, int) for i in (x, y, z)):
        # Check if any number is the sum of the other two
        if x + y == z or x + z == y or y + z == x:
            return True
    # In any other case return False
    return False"
HumanEval/93/en/python/,HumanEval/93,ceb_Latn,python,"
def encode(message):
    """"""
    Magsulat ug usa ka function nga mopili ug mensahe, ug mag-encode sa ingon nga paagi nga ilisan ang kaso sa tanang mga letra, ilisan ang tanang mga bokales sa mensahe sa letra nga nagpakita 2 ka lugar sa unahan niadtong bokales sa english nga alpabeto.
Assume nga mga letra lamang.

Mga Pananglitan:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

",encode,"def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    """"""
    
    vowels_to_replace = 'aeiou'
    replacement_characters = 'cgikm'
    swap_case_message = message.swapcase()
    trans = str.maketrans(vowels_to_replace, replacement_characters)
    return swap_case_message.translate(trans)


# Test
print(encode('test'))  # Expected ""TGST""
print(encode('This is a message'))  # Expected ""tHKS KS C MGSSCGG"""
HumanEval/94/en/python/,HumanEval/94,ceb_Latn,python,"

def skjkasdkd(lst):
    """"""Gihatagan ka og listahan sa mga integer.
Kinahanglan nimo pangitaon ang labing dako nga prime value ug ibalik ang sum sa iyang mga digit.

Mga Pananglitan:
Alang sa lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ang output kay 10
Alang sa lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ang output kay 25
Alang sa lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ang output kay 13
Alang sa lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ang output kay 11
Alang sa lst = [0,81,12,3,1,21] ang output kay 3
Alang sa lst = [0,8,1,2,1,7] ang output kay 7
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
",skjkasdkd,"def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i:
                continue
            return False
        return True

    largest_prime = max(filter(is_prime, lst))
    return sum(map(int, str(largest_prime)))"
HumanEval/95/en/python/,HumanEval/95,ceb_Latn,python,"
def check_dict_case(dict):
    """"""
    Gamit ang diksyonaryo, ibalik ang True kung ang tanan nga mga yawe kay mga string nga porma sa ubos 
    o ang tanan nga mga yawe kay mga string nga porma sa taas, kon dili ibalik ang False.
    Ang function kinahanglan mubalik og False kung ang gihatag nga diksyonaryo kay walay sulod.
    Mga Pananglitan:
    check_dict_case kinahanglan mubalik og True.
    check_dict_case kinahanglan mubalik og False.
    check_dict_case kinahanglan mubalik og False.
    check_dict_case kinahanglan mubalik og False.
    check_dict_case kinahanglan mubalik og True.
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

",check_dict_case,"def check_dict_case(dict):
    if not dict:
        return False
    
    lower_case = all(k.islower() for k in dict.keys() if isinstance(k, str))
    upper_case = all(k.isupper() for k in dict.keys() if isinstance(k, str))

    return lower_case or upper_case"
HumanEval/96/en/python/,HumanEval/96,ceb_Latn,python,"
def count_up_to(n):
    """"""Mugamit ug usa ka function nga modawat ug dili negatibong integer ug mobalik ug array sa unang n
    nga mga integer nga mga prime number ug mas gamay pa sa n.
    pananglitan:
    count_up_to => [2,3]
    count_up_to => [2,3,5,7]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17,19]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

",count_up_to,"def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = [i for i in range(n) if is_prime(i)]
    return primes"
HumanEval/97/en/python/,HumanEval/97,ceb_Latn,python,"
def multiply(a, b):
    """"""Kompletuha ang function nga modawat ug duha ka integer ug mobalik sa 
    produkto sa ilang mga yunit nga numero.
    I-assume nga ang input kanunay nga balido.
    Mga Pananglitan:
    multiply mobalik ug 16.
    multiply mobalik ug 72.
    multiply mobalik ug 0.
    multiply mobalik ug 20.
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

",multiply,"def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.""""""
    
    # Get the unit digits
    unit_a = abs(a) % 10
    unit_b = abs(b) % 10

    # Return the product
    return unit_a * unit_b

# Test the function
print(multiply(148, 412))  # should return 16.
print(multiply(19, 28))  # should return 72.
print(multiply(2020, 1851))  # should return 0.
print(multiply(14, -15))  # should return 20."
HumanEval/98/en/python/,HumanEval/98,ceb_Latn,python,"
def count_upper(s):
    """"""
    Sa gihatag nga string nga s, ihap ang gidaghanon sa mga uppercase nga bokales sa mga even nga indeks.

    Pananglitan:
    count_upper mobalik og 1
    count_upper mobalik og 0
    count_upper mobalik og 0
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

",count_upper,"def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    """"""
    count = 0
    uppercase_vowels = ['A', 'E', 'I', 'O', 'U']

    for i in range(0, len(s), 2):
        if s[i] in uppercase_vowels:
            count += 1

    return count"
HumanEval/99/en/python/,HumanEval/99,ceb_Latn,python,"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

",closest_integer,"def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
    num = float(value)
    if num >= 0:
      return int(num) if num - int(num) < 0.5 else int(num) + 1
    else:
      return int(num) if int(num) - num < 0.5 else int(num) - 1"
HumanEval/100/en/python/,HumanEval/100,ceb_Latn,python,"
def make_a_pile(n):
    """"""
    Gihatag ang usa ka positibo nga integer n, kinahanglan nimong maghimo ug usa ka pundok nga may n nga lebel sa mga bato.
    Ang unang lebel adunay n ka mga bato.
    Ang gidaghanon sa mga bato sa sunod nga lebel mao:
        - ang sunod nga odd number kung ang n kay odd.
        - ang sunod nga even number kung ang n kay even.
    Ibalik ang gidaghanon sa mga bato sa matag lebel sa usa ka lista, diin ang elemento sa index i nagrepresenta sa gidaghanon sa mga bato sa lebel.

    Mga Ehemplo:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",make_a_pile,"def make_a_pile(n):
    if n <= 0:
        return []
    else:
        pile = []
        for i in range(n):
            if n % 2 == 0:
                pile.append(n + 2 * i)
            else:
                pile.append(n + 2 * i)
        return pile"
HumanEval/101/en/python/,HumanEval/101,ceb_Latn,python,"
def words_string(s):
    """"""
    Ikaw hatagan og usa ka string sa mga pulong nga gibuwag sa mga koma o mga espasyo. Ang imong buluhaton mao ang pagbahin sa string ngadto sa mga pulong ug ibalik ang usa ka array sa mga pulong.

Pananglitan:
words_string == [""Hi"", ""my"", ""name"", ""is"", ""John""]
words_string == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

",words_string,"def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    """"""
    return [word.strip() for word in s.replace(',', ' ').split()]"
HumanEval/102/en/python/,HumanEval/102,ceb_Latn,python,"
def choose_num(x, y):
    """"""Kini nga function nagdawat og duha ka positibo nga numero x ug y ug mobalik sa labing dako nga numero nga even integer nga naa sa range [x, y] inclusive. Kung walay ingon nga numero, ang function dapat mobalik og -1.

Pananglitan:
choose_num = 14
choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

",choose_num,"def choose_num(x, y):
    # If y is odd, deduct 1 to make it even
    if y % 2 != 0:
        y -= 1
    # Now y is even. If it is less than x, there's no valid choice in the 
    # range, so return -1
    if y < x:
        return -1
    # Otherwise return y, the greatest even number in the range
    else:
        return y"
HumanEval/103/en/python/,HumanEval/103,ceb_Latn,python,"
def rounded_avg(n, m):
    """"""Gihatagan ka ug duha ka positibong integer n ug m, ug ang imong buluhaton mao ang pagkwenta sa 
    average sa mga integer gikan sa n hangtod sa m.
    I-round ang tubag ngadto sa pinakadool nga integer ug i-convert kana ngadto sa binary.
    Kung ang n mas dako kaysa m, ibalik ang -1.
    Pananglitan:
    rounded_avg => ""0b11""
    rounded_avg => -1
    rounded_avg => ""0b1111""
    rounded_avg => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

",rounded_avg,"def rounded_avg(n, m):
  if n > m: 
    return -1

  avg = round((n + m) / 2)

  return bin(avg)"
HumanEval/104/en/python/,HumanEval/104,ceb_Latn,python,"
def unique_digits(x):
    """"""Gihatag ang listahan sa mga positibong integer x. Ibalik ang usa ka nahisunod nga listahan sa tanang 
    elemento nga walay bisan unsang even nga numero.

    Nota: Ang gibalik nga listahan kinahanglan nga masunod sa increasing order.
    
    Pananglitan:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

",unique_digits,"def unique_digits(x):
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.
    """"""
    
    result = [i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))]
    
    return sorted(result)"
HumanEval/105/en/python/,HumanEval/105,ceb_Latn,python,"
def by_length(arr):
    """"""
    Hatagi ug array sa mga integers, ayuha ang mga integers nga naapil sa 1 ug 9,
    balihon ang resulting array, ug dayon ilisan ang matag digit sa iyang katumbas nga ngalan gikan sa
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    Pananglitan:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> ayuha ang arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> balihon ang arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      mobalik [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      Kung ang array walay sulod, mobalik ug empty array:
      arr = []
      mobalik []
    
      Kung ang array adunay bisan unsang dili normal nga numero, i-ignore kini:
      arr = [1, -1 , 55] 
            -> ayuha ang arr -> [-1, 1, 55]
            -> balihon ang arr -> [55, 1, -1]
      mobalik ['One']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

",by_length,"def by_length(arr):
    # Define the dictionary to map integers to their corresponding names
    num_to_name = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 
                   5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}

    # Filter the array, only keep numbers from 1 to 9 inclusive
    filtered_arr = [num for num in arr if 1 <= num <= 9]
    # Sort and reverse the array
    filtered_arr.sort(reverse = True)

    # Convert each number to its corresponding name
    return [num_to_name[i] for i in filtered_arr]"
HumanEval/106/en/python/,HumanEval/106,ceb_Latn,python,"
def f(n):
    """""" I-implement ang function nga f nga modawat ug n isip parameter,
    ug mobalik ug usa ka lista nga adunay gikusgon nga n, diin ang value sa elemento sa index i mao ang factorial sa i kon ang i kay even
    o ang sum sa mga numero gikan sa 1 hangtod i kon dili.
    magsugod ang i gikan sa 1.
    ang factorial sa i mao ang pag-multiply sa mga numero gikan sa 1 hangtod i.
    Pananglitan:
    f == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
",f,"import math

def f(n):
    """"""Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at
    index i is the factorial of i if i is even or the sum of numbers
    from 1 to i otherwise.""""""
    
    f_list = []
    for i in range(1, n+1):
        if i % 2 == 0:
            f_list.append(math.factorial(i))  
        else:  
            f_list.append(sum(range(1, i+1)))
    return f_list"
HumanEval/107/en/python/,HumanEval/107,ceb_Latn,python,"
def even_odd_palindrome(n):
    """"""
    Hatagi ug usa ka positibong integer n, ibalik ang usa ka tupol nga adunay gidaghanon sa mga even ug odd
    integer palindromes nga mahulog sa sulod sa range, apil na.

    Pananglitan1:

        Input: 3
        Output:
        Eksplenasyon:
        Ang mga integer palindrome mao ang 1, 2, 3. Usa kanila ang even, ug duha kanila ang odd.

    Pananglitan2:

        Input: 12
        Output:
        Eksplenasyon:
        Ang mga integer palindrome mao ang 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Upat kanila ang even, ug unom kanila ang odd.

    Nota:
        1. 1 <= n <= 10^3
        2. Ang gipabalik nga tupol adunay gidaghanon sa even ug odd integer palindromes matag usa.
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

",even_odd_palindrome,"def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]
    
    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return even_count, odd_count"
HumanEval/108/en/python/,HumanEval/108,ceb_Latn,python,"
def count_nums(arr):
    """"""
    Isulat ang usa ka function nga gitawag ug count_nums nga modawat ug array sa mga integer ug mobalik sa gidaghanon sa mga elemento nga adunay total nga mga digit > 0.
    Kon ang numero negatibo, ang una nga signed digit niini mahimong negatibo:
    pananglitan, -123 adunay mga signed digit nga -1, 2, ug 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",count_nums,"def count_nums(arr):
    count = 0
    for num in arr:
        num_str = str(num)
        sum_digits = sum(int(digit) for digit in num_str if digit.isnumeric())
        
        if num < 0:
            # Making first digit as negative if original number is negative
            sum_digits = sum_digits - 2*int(num_str[1])
        
        if sum_digits > 0:
            count += 1
            
    return count"
HumanEval/109/en/python/,HumanEval/109,ceb_Latn,python,"
def move_one_ball(arr):
    """"""Ani nga pangungusap isalin sa Cebuano:

Aduna kita'y usa ka array 'arr' nga adunay N ka mga integers arr[1], arr[2], ..., arr[N]. Ang mga numero sa array kay random ang paghan-ay. Ang imong buluhaton mao ang pagdeterminar kun mahimo ba nga makakuha og array nga han-ay sa non-decreasing order pinaagi sa pagperform sa mosunod nga operasyon sa gihatag nga array:
    Gitugotan ka nga magperform og right shift operation bisan pila ka beses.

    Ang usa ka right shift operation nagpasabot sa pag-shift sa tanang mga elemento sa array sa usa ka posisyon paingon sa tuo. Ang katapusan nga elemento sa array ilihok ngadto sa sugod nga posisyon sa array, i.e., 0th index.

    Kun mahimo nga makuha ang han-ay nga array pinaagi sa pagperform sa ibabaw nga operasyon, ibalik ang True, kon dili False.
    Kun ang gihatag nga array kay wala'y sulod, ibalik ang True.

    Nota: Sigurado nga ang gihatag nga lista adunay unique nga mga elemento.

    Pananglitan:

    move_one_ball==>True
    Explanation: Pinaagi sa pagperform og 2 ka right shift operations, mahimo nga makab-ot ang non-decreasing order alang sa gihatag nga array.
    move_one_ball==>False
    Explanation: Dili mahimo nga makuha ang non-decreasing order alang sa gihatag nga array bisan unsa nga gidaghanon sa right shift operations.
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
",move_one_ball,"def move_one_ball(arr):
    sorted_arr = sorted(arr)
    # checking for all possible shifts
    for _ in range(len(arr)):
        if arr == sorted_arr:
            return True
        arr = [arr[-1]] + arr[:-1]  # right shift
    return False"
HumanEval/110/en/python/,HumanEval/110,ceb_Latn,python,"
def exchange(lst1, lst2):
    """"""Sa kini nga problema, mag-implementar ka ug usa ka function nga modawat ug duha ka lista sa mga numero, ug mag-determinar kung posible ba ang pag-exchange sa mga elemento tali kanila aron mahimo nga ang lst1 mahimong lista nga naglangkob lamang sa mga even nga numero. Wala'y limitasyon sa gidaghanon sa mga elemento nga ma-exchange tali sa lst1 ug lst2. Kung posible ang pag-exchange sa mga elemento tali sa lst1 ug lst2 aron mahimo nga tanan nga mga elemento sa lst1 mahimo nga mga even nga numero, ibalik ang ""YES"". Kung dili, ibalik ang ""NO"". Pananglitan:
exchange => ""YES""
exchange => ""NO""
Gipasabot nga ang input nga mga lista dili walay sulod.
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

",exchange,"def exchange(lst1, lst2):
    # calculate the number of odd numbers in lst1
    num_odd_lst1 = len([num for num in lst1 if num % 2 != 0])
    # calculate the number of even numbers in lst2
    num_even_lst2 = len([num for num in lst2 if num % 2 == 0])

    # if there are not enough even numbers in lst2
    # to exchange out all of the odd values in lst1, return ""NO""
    if num_odd_lst1 > num_even_lst2:
        return ""NO""
    # otherwise, return ""YES""
    else:
        return ""YES"""
HumanEval/111/en/python/,HumanEval/111,ceb_Latn,python,"
def histogram(test):
    """"""Gihatag ang usa ka string nga nagrepresentar og mga lowercase letters nga gibuwag og espasyo, ihatag ang usa ka diksyonaryo
    sa letra nga adunay pinakadaghan nga pagbalik-balik ug naglakip sa katugbang nga ihap.
    Kung daghang mga letra ang adunay parehas nga kadaghan sa pagbalik-balik, ihatag silang tanan.

    Pananglitan:
    histogram == {'a': 1, 'b': 1, 'c': 1}
    histogram == {'a': 2, 'b': 2}
    histogram == {'a': 2, 'b': 2}
    histogram == {'b': 4}
    histogram == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

",histogram,"def histogram(test):
    # replace the spaces with nothing
    letters = test.replace("" "", """")

    # create a dictionary of letter counts
    counts = {}
    for letter in letters:
        if letter in counts:
            counts[letter] += 1
        else:
            counts[letter] = 1

    # find the maximum count
    max_count = max(counts.values(), default=0)

    # create a dictionary with only the letters with the maximum count
    histogram_dict = {letter: count for letter, count in counts.items() if count == max_count}

    return histogram_dict"
HumanEval/112/en/python/,HumanEval/112,ceb_Latn,python,"
def reverse_delete(s,c):
    """"""Here is the translation of the given sentence into Cebuano:

Task
    Gihatag ang duha ka string nga s ug c, kinahanglan nimo tangtangon ang tanan nga karakter sa s nga katumbas sa bisan unsang karakter sa c
    unya susihon kung ang resulta nga string kay palindrome.
    Ang usa ka string gitawag nga palindrome kung kini mobasa nga parehas pabalik sa pasulong.
    Kinahanglan nimo ibalik ang usa ka tuple nga naglangkob sa resulta nga string ug True/False para sa pagsusi.
    Pananglitan
    Para sa s = ""abcde"", c = ""ae"", ang resulta kinahanglan nga
    Para sa s = ""abcdef"", c = ""b"" ang resulta kinahanglan nga
    Para sa s = ""abcdedcba"", c = ""ab"", ang resulta kinahanglan nga
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
",reverse_delete,"def reverse_delete(s,c):
    # remove characters from s that are in c
    result = """".join([letter for letter in s if letter not in c])
    
    # check if the result is a palindrome
    if result == result[::-1]:
        return (result, True)
    else:
        return (result, False)

# Testing the function
print(reverse_delete(""abcde"",""ae"")) # Expected output: ('bcd', False)
print(reverse_delete(""abcdef"",""b"")) # Expected output: ('acdef', False)
print(reverse_delete(""abcdedcba"",""ab"")) # Expected output: ('cdedc', True)"
HumanEval/113/en/python/,HumanEval/113,ceb_Latn,python,"
def odd_count(lst):
    """"""Hatagi ug usa ka lista sa mga string, diin ang matag string naglangkob lamang ug mga numero, ibalik ang usa ka lista.
    Ang matag elemento i sa output kinahanglan nga ""ang gidaghanon sa mga dili pares nga elemento sa string i sa input."" diin ang tanan nga i kinahanglan pulihan sa gidaghanon sa mga dili pares nga numero sa ika-i nga string sa input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",odd_count,"def odd_count(lst):
    def count_odd_digits(s):
        """"""Count the number of odd digits in a string.""""""
        return sum(1 for char in s if int(char) % 2 == 1)

    return [""the number of odd elements {}n the str{}ng {} of the {}nput."".format(count_odd_digits(s), count_odd_digits(s), count_odd_digits(s), count_odd_digits(s)) for s in lst]"
HumanEval/114/en/python/,HumanEval/114,ceb_Latn,python,"
def minSubArraySum(nums):
    """"""
    Gihatag ang usa ka array sa mga integer nga nums, pangitaa ang minimum nga suma sa bisan unsang dili walay sulod nga sub-array sa nums.
    Pananglitan
    minSubArraySum == 1
    minSubArraySum == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
",minSubArraySum,"def minSubArraySum(nums):
    if len(nums) == 0:
        return 0
    current_sum = minimum_sum = nums[0]
    for num in nums[1:]:
        # This checks whether the current number contributes to the minimum sum or
        # if it is less than the current_sum
        current_sum = min(current_sum + num, num)

        # This keeps track of the minimum sum
        minimum_sum = min(current_sum, minimum_sum)
    return minimum_sum"
HumanEval/115/en/python/,HumanEval/115,ceb_Latn,python,"
def max_fill(grid, capacity):
    import math
    """"""
    Gihatagan ka ug rectangular grid sa mga balon. Ang matag han-ay nagrepresentar sa usa ka balon, ug ang matag 1 sa usa ka han-ay nagrepresentar sa usa ka unit sa tubig. Ang matag balon adunay katugbang nga balde nga magamit aron makuha ang tubig gikan niini, ug tanan nga mga balde adunay parehas nga kapasidad. Ang imong buluhaton mao ang paggamit sa mga balde aron mahubas ang mga balon. I-output ang gidaghanon sa mga higayon nga kinahanglan nimo ipanaog ang mga balde.

Halimbawa 1:
    Input: 
        grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
        kapasidad sa balde: 1
    Output: 6

Halimbawa 2:
    Input: 
        grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
        kapasidad sa balde: 2
    Output: 5

Halimbawa 3:
    Input: 
        grid : [[0,0,0], [0,0,0]]
        kapasidad sa balde: 5
    Output: 0

Mga Pagdili:
    * Ang tanan nga mga balon adunay parehas nga gitas-on
    * 1 <= gidaghanon sa grid <= 10^2
    * 1 <= gidaghanon sa grid[:,1] <= 10^2
    * grid[i][j] -> 0 | 1
    * 1 <= kapasidad <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

",max_fill,"def max_fill(grid, capacity):
    # count the number of water units (represented by 1) in the grid
    water_units = sum(sum(row) for row in grid)
    # Since python's division operator / always returns a float, 
    # we need to use math.ceil() to round up the result
    return math.ceil(water_units / capacity)"
HumanEval/116/en/python/,HumanEval/116,ceb_Latn,python,"
def sort_array(arr):
    """"""
    Sa kini nga Kata, kinahanglan nimo nga i-sort ang usa ka array sa mga non-negative integers sumala sa gidaghanon sa mga ""ones"" sa ilang binary representation sa pag-asenso nga han-ay. Para sa parehas nga gidaghanon sa mga ""ones,"" i-sort base sa decimal nga value.

Kinahanglan kini nga ipatuman sama niini:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",sort_array,"def sort_array(arr):
    # convert each number to binary and count the number of ones
    # it works for both positive and negative numbers
    arr.sort(key=lambda x: (bin(x).count('1'), x))
    return arr"
HumanEval/117/en/python/,HumanEval/117,ceb_Latn,python,"
def select_words(s, n):
    """"""Gihatagan ug usa ka string nga s ug natural nga numero nga n, gihatagan ka ug buluhaton nga mag-implementar ug usa ka function nga mobalik sa lista sa tanang mga pulong gikan sa string nga s nga adunay eksakto nga n ka konsonante, sa pagkasunod-sunod nga makita kini nga mga pulong sa string nga s. Kung ang string nga s walay sulod, ang function kinahanglan mobalik ug usa ka walay sulod nga lista.
Nota: mahimo nimong i-assume nga ang input string naglangkob lamang ug mga letra ug mga espasyo.
Mga pananglitan:
select_words ==> [""little""]
select_words ==> [""Mary"", ""lamb""]
select_words ==> []
select_words ==> [""world""]
select_words ==> [""Uncle""]
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

",select_words,"def select_words(s, n):
    # Define vowels
    vowels = ""aeiouAEIOU""
    
    # split the string s into words using split function
    words = s.split()
    
    # Initialize an empty list to store words that contain exactly n consonants
    select_words = []
    
    # Iterate over every word in words
    for word in words:
        # Count the number of consonants in the word
        consonants = sum(1 for c in word if c not in vowels)
        
        # If the word contains exactly n consonants, append it to select_words
        if consonants == n:
            select_words.append(word)
            
    # return the list of selected words
    return select_words"
HumanEval/118/en/python/,HumanEval/118,ceb_Latn,python,"
def get_closest_vowel(word):
    """"""Gihatagan ka og usa ka pulong. Ang imong tahas mao ang pagpangita sa labing duol nga bokal nga nagbarug taliwala sa duha ka konsonante gikan sa tuo nga bahin sa pulong.

    Ang mga bokal sa sinugdanan ug katapusan dili apil. Ibalik ang walay sulod nga string kung wala kay makita nga bokal nga mituman sa taas nga kondisyon.

    Imong mahimo nga ipalagay nga ang gihatag nga string naglangkob lang sa mga letra sa Iningles.

    Pananglitan:
    get_closest_vowel ==> ""u""
    get_closest_vowel ==> ""U""
    get_closest_vowel ==> """"
    get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

",get_closest_vowel,"def get_closest_vowel(word):
    """"""Find closest inter-consonant vowel from the right side of the word.""""""
    vowels = ""AEIOUaeiou""

    # Extract the substrings between consecutive consonants
    splits = []
    start = 0
    for i in range(1, len(word) - 1):
        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:
            splits.append(word[start:i + 1])
            start = i + 1
    splits.append(word[start:])

    # Consider only the splits starting and ending with a consonant
    valid_splits = [s for s in splits if s[0] not in vowels and s[-1] not in vowels]

    if valid_splits:
        # Return the vowel of the last valid split
        return [ch for ch in valid_splits[-1] if ch in vowels][-1]

    return """""
HumanEval/119/en/python/,HumanEval/119,ceb_Latn,python,"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

",match_parens,"def match_parens(lst):
    # concatenate the two strings in both possible orders
    concat1 = lst[0] + lst[1]
    concat2 = lst[1] + lst[0]

    # check if either concatenation results in a good string
    if is_good(concat1) or is_good(concat2):
        return 'Yes'
    else:
        return 'No'

def is_good(s):
    # a stack to keep track of open parentheses
    stack = []

    for char in s:
        if char == '(':
            # push an open parenthesis onto the stack
            stack.append(char)
        elif char == ')':
            # if we see a close parenthesis, and there's an
            # open parenthesis on the stack, pop it off the stack
            if len(stack) > 0 and stack[-1] == '(':
                stack.pop()
            else:
                # if there's no open parenthesis on the stack,
                # this close parenthesis cannot be matched
                return False

    # if all parentheses have been matched, the stack should be empty
    return len(stack) == 0"
HumanEval/120/en/python/,HumanEval/120,ceb_Latn,python,"
def maximum(arr, k):
    """"""
    Ihatag ang usa ka array nga arr nga mga integer ug usa ka positibong integer k, ibalik ang usa ka sorted list nga may gitas-on nga k uban ang maximum nga k nga mga numero sa arr.

    Pananglitan1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Pananglitan2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Pananglitan3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Mubo nga nota:
        1. Ang gitas-on sa array mahimong naa sa range nga [1, 1000].
        2. Ang mga elemento sa array mahimong naa sa range nga [-1000, 1000].
        3. 0 <= k <= len
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

",maximum,"def maximum(arr, k):
    arr.sort()
    return arr[-k:]

# Testing
print(maximum([-3, -4, 5], 3))  # [-4, -3, 5]
print(maximum([4, -4, 4], 2))  # [4, 4]
print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # [2]"
HumanEval/121/en/python/,HumanEval/121,ceb_Latn,python,"
def solution(lst):
    """"""Hatagi og dili-walay sulod nga listahan sa mga integer, ibalik ang kabuuan sa tanang mga even nga elemento nga naa sa mga odd nga posisyon.

Mga Pananglitan:
solution ==> 12
solution ==> 9
solution ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

",solution,"def solution(lst):
    sum_odd = 0
    for i in range(len(lst)):
        if i % 2 == 0 and lst[i] % 2 != 0:
            sum_odd += lst[i]
    return sum_odd"
HumanEval/122/en/python/,HumanEval/122,ceb_Latn,python,"
def add_elements(arr, k):
    """"""
    Gihatag ang dili walay sulod nga array sa mga integer nga `arr` ug usa ka integer nga `k`, ibalik
    ang suma sa mga elemento nga adunay dili molapas sa duha ka numero gikan sa unang k mga elemento sa `arr`.

    Pananglitan:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Mga Pagdili:
        1. 1 <= gitas-on <= 100
        2. 1 <= k <= gitas-on
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

",add_elements,"def add_elements(arr, k):
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""
    # ensure arr and k are within constraint
    if len(arr) < 1 or len(arr) > 100 or k < 1 or k > len(arr):
        return ""Invalid input. Please check the constraints.""
    else:
        # slice the array up to 'k' elements and filter those with at most two digits
        selected_elements = [num for num in arr[:k] if num >= -99 and num <= 99]
        
        # return the sum of the selected elements
        return sum(selected_elements)"
HumanEval/123/en/python/,HumanEval/123,ceb_Latn,python,"
def get_odd_collatz(n):
    """"""
    Gihatag ang usa ka positibong integer nga n, ibalik ang usa ka pinasaylo nga lista nga adunay mga odd numbers sa collatz sequence.

    Ang Collatz nga konjecture usa ka palandungan sa matematika nga naghisgot sa usa ka sequencing nga gipaila-ila ingon niini: magsugod sa bisan unsang positibong integer n. Unya ang matag termino makuha gikan sa miaging termino ingon niini: kung ang miaging termino even, ang sunod nga termino mao ang katunga sa miaging termino. Kung ang miaging termino odd, ang sunod nga termino mao ang 3 ka beses sa miaging termino plus 1. Ang konjecture mao nga bisan unsa pa ang kantidad sa n, ang sequence kanunay moabot sa 1.

    Nota:
        1. Ang Collatz mao ang [1].
        2. Ang gipangbalik nga lista giasort sa pagsaka nga pamaagi.

    Pananglitan:
    ang get_odd_collatz mobalik ug [1, 5] # Ang collatz sequence para sa 5 mao ang [5, 16, 8, 4, 2, 1], busa ang mga odd numbers mao ra ang 1, ug 5.
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

",get_odd_collatz,"def get_odd_collatz(n):
    collatz_sequence = [n]
    while n != 1:
        if n % 2 == 0:
            n = n / 2
        else:
            n = 3 * n + 1
        collatz_sequence.append(n)
    odd_sequence = [x for x in collatz_sequence if x % 2 == 1]
    return sorted(odd_sequence)

print(get_odd_collatz(5)) # it should `returns [1, 5]`"
HumanEval/124/en/python/,HumanEval/124,ceb_Latn,python,"
def valid_date(date):
    """"""Kinahanglan ka magsulat ug usa ka function nga mag-validate sa gihatag nga date string ug
    mobalik ug True kung ang petsa valid, kung dili False.
    Ang petsa valid kung nasunod ang mosunod nga mga lagda:
    1. Ang date string dili empty.
    2. Ang gidaghanon sa mga adlaw dili ubos sa 1 o labaw sa 31 ka adlaw para sa mga bulan 1,3,5,7,8,10,12. Ug ang gidaghanon sa mga adlaw dili ubos sa 1 o labaw sa 30 ka adlaw para sa mga bulan 4,6,9,11. Ug, ang gidaghanon sa mga adlaw dili ubos sa 1 o labaw sa 29 para sa bulan 2.
    3. Ang mga bulan dili dapat ubos sa 1 o labaw sa 12.
    4. Ang petsa kinahanglan naa sa pormat: mm-dd-yyyy

    pananglitan:
    valid_date => True

    valid_date => False

    valid_date => False

    valid_date => True

    valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
",valid_date,No code found in response.
HumanEval/125/en/python/,HumanEval/125,ceb_Latn,python,"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
",split_words,No code found in response.
HumanEval/126/en/python/,HumanEval/126,ceb_Latn,python,"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

",is_sorted,"def is_sorted(lst):
    if lst != sorted(lst):
        return False
    return len(lst) == len(set(lst))"
HumanEval/127/en/python/,HumanEval/127,ceb_Latn,python,"
def intersection(interval1, interval2):
    """"""Gihatagan ka og duha ka mga interval,
    diin ang matag interval kay duha ka integer. Pananglitan, interval = =.
    Ang gihatag nga mga interval kay closed, nga nagpasabot nga ang interval
    naglakip sa duha ka sugod ug katapusan.
    Sa matag gihatag nga interval, gipasabot nga ang sugod niini kay mas gamay o katumbas sa katapusan niini.
    Ang imong buluhaton mao ang pag-determine kung ang gitas-on sa intersection aning duha ka interval
    kay usa ka prime number.
    Pananglitan, ang intersection sa mga interval, kay
    nga ang gitas-on niini kay 1, nga dili usa ka prime number.
    Kung ang gitas-on sa intersection kay usa ka prime number, mubalik ug ""YES"",
    kung dili, mubalik ug ""NO"".
    Kung ang duha ka interval dili mag-intersect, mubalik ug ""NO"".

    [input/output] mga sample:
    intersection,) ==> ""NO""
    intersection,) ==> ""NO""
    intersection,) ==> ""YES""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

",intersection,"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n%i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    if start >= end:
        return ""NO""
    else:
        length = end - start
        if is_prime(length):
            return ""YES""
        else:
            return ""NO"""
HumanEval/128/en/python/,HumanEval/128,ceb_Latn,python,"
def prod_signs(arr):
    """"""
    Here is the translation of the given sentence into Cebuano:

""Gihatagan ka og array nga arr nga naglangkob og mga integer ug kinahanglan nimo ibalik ang 
    sum sa mga magnitudes sa mga integer nga gipadaghanan sa produkto sa tanang mga sign
    sa matag numero sa array, nga girepresentar sa 1, -1 o 0.
    Nota: ibalik ang Wala alang sa walay sulod nga arr.

    Pananglitan:""
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",prod_signs,"def prod_signs(arr):
    if not arr:  # check if array is empty
        return None
      
    # calculate magnitude sum and product of signs
    magnitude_sum = 0  # sum of absolute values
    sign_product = 1  # product of signs
    for num in arr:  
        magnitude_sum += abs(num)
        if num < 0:
            sign_product *= -1
        elif num == 0:
            sign_product = 0  # if there's any zero in the arr, product will remain zero
            break

    return magnitude_sum * sign_product"
HumanEval/129/en/python/,HumanEval/129,ceb_Latn,python,"
def minPath(grid, k):
    """"""
    Here is the translation of the provided sentence into Cebuano:

---

Gihatagan ka ug grid nga adunay N ka mga laray ug N ka mga kolum ug usa ka positibong integer nga k,
    ang matag cell sa grid adunay usa ka value. Ang matag integer sa range [1, N * N]
    inclusive makita eksakto kausa sa mga cell sa grid.

    Kinahanglan nimo pangitaon ang minimum path nga adunay gitas-on nga k sa grid. Pwede ka magsugod
    gikan sa bisan unsang cell, ug sa matag lakang pwede ka mobalhin sa bisan unsang silingan nga cell,
    sa laing pagkasulti, pwede ka moadto sa mga cell nga nagbahin ug usa ka edge sa imong kasamtangang cell.
    Palihug hinumdomi nga ang path nga adunay gitas-on nga k nagpasabot nga mobisita ka eksakto k mga cell (dili
    kinahanglan nga lahi-lahi).
    DILI ka pwede molapas sa grid.
    Ang path A giisip nga mas gamay kaysa path B kon
    human mabuhat ang ordered lists sa mga value sa mga cell nga giagian sa A ug B, ang lst_A mas lexicographically ubos kaysa lst_B, sa laing pagkasulti, adunay integer index nga i
    nga ang lst_A[i] mas gamay sa lst_B[i] ug para sa bisan unsang j adunay
    lst_A[j] = lst_B[j].
    Garantiyado nga ang tubag kay unique.
    Ibalik ang ordered list sa mga value sa mga cell nga giagian sa minimum path.

    Mga Pananglitan:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

",minPath,"def minPath(grid, k):
    N = len(grid)
    moves = [[0, 1], [1, 0], [0, -1], [-1, 0]]  # right, down, left, up
    visited = [[0]*N for _ in range(N)]
    min_path = [N*N+1]*k

    def neighbours(r, c):
        for mr, mc in moves:
            nr, nc = r+mr, c+mc
            if 0 <= nr < N and 0 <= nc < N and visited[nr][nc] == 0:
                yield nr, nc

    def dfs(r, c, path):
        nonlocal min_path
        path.append(grid[r][c])
        visited[r][c] = 1

        if len(path) == k:
            min_path = min(min_path, path)
        else:
            for nr, nc in neighbours(r, c):
                dfs(nr, nc, path)

        path.pop()
        visited[r][c] = 0

    for r in range(N):
        for c in range(N):
            dfs(r, c, [])

    return min_path"
HumanEval/130/en/python/,HumanEval/130,ceb_Latn,python,"
def tri(n):
    """"""Ang tanan nakahibalo sa Fibonacci sequence, kini gipadayag ug maayo sa mga matematiko sa miaging pipila ka mga siglo. Apan, dili tanan nakahibalo bahin sa Tribonacci sequence.
Ang Tribonacci sequence giklaro pinaagi sa sunod-sunod nga mga pamaagi:
tri = 3
tri = 1 + n / 2, kung n kay even.
tri = tri + tri + tri, kung n kay odd.
Pananglitan:
tri = 1 + = 2
tri = 3
tri = tri + tri + tri
         = 2 + 3 + 3 = 8 
Gihatagan ka ug non-negative integer nga numero n, kinahanglan nimo mobalik ug usa ka lista sa mga unang n + 1 nga numero sa Tribonacci sequence.
Mga Pananglitan:
tri = [1, 3, 2, 8]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
",tri,"def tri(n):
    tribonacci_sequence = [1, 3]
    if n < 2:
        return tribonacci_sequence[:n+1]
    while len(tribonacci_sequence) <= n:
        next_value = tribonacci_sequence[-1] + tribonacci_sequence[-2] / 2 if len(tribonacci_sequence) % 2 == 0 else sum(tribonacci_sequence[-2:]) + tribonacci_sequence[-1] + 1
        tribonacci_sequence.append(next_value)
    return tribonacci_sequence"
HumanEval/131/en/python/,HumanEval/131,ceb_Latn,python,"
def digits(n):
    """"""Hatagi ug positibong integer nga n, ibalik ang produkto sa mga dili pares nga numero.
    Ibalik ang 0 kung tanan nga numero kay pares.
    Pananglitan:
    digits  == 1
    digits  == 0
    digits == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

",digits,"def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.""""""
    
    product = 1
    all_even = True
    
    for digit in str(n):
        if int(digit) % 2 != 0:
            all_even = False
            product *= int(digit)
            
    return 0 if all_even else product"
HumanEval/132/en/python/,HumanEval/132,ceb_Latn,python,"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

",is_nested,"def is_nested(string):
    if string.count(""[["") == 0 or string.count(""]]"") == 0:
        return False
    stack = []
    for char in string:
        if char == ""["":
            stack.append(char)
        elif char == ""]"":
            if not stack:
                return False
            stack.pop()
    return len(stack) == 0"
HumanEval/133/en/python/,HumanEval/133,ceb_Latn,python,"

def sum_squares(lst):
    """"""Gihatagan ka og listahan sa mga numero.
Kinahanglan nimo ibalik ang kinatibuk-ang kantidad sa mga numero nga gipilo sa gihatag nga listahan,
i-round una ang matag elemento sa listahan ngadto sa pinakataas nga tibuok numero.
Mga Pananglitan:
Para sa lst = [1,2,3] ang output kinahanglan 14
Para sa lst = [1,4,9] ang output kinahanglan 98
Para sa lst = [1,3,5,7] ang output kinahanglan 84
Para sa lst = [1.4,4.2,0] ang output kinahanglan 29
Para sa lst = [-2.4,1,1] ang output kinahanglan 6
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

",sum_squares,"import math

def sum_squares(lst):
    return sum([math.ceil(num)**2 for num in lst])"
HumanEval/134/en/python/,HumanEval/134,ceb_Latn,python,"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

",check_if_last_char_is_a_letter,"def check_if_last_char_is_a_letter(txt):
    '''
    Function to verify whether the last character in the
    provided string is an alphabet and is not a part of word

    Parameters:
    txt (str): The input string

    Returns:
    bool: True if last character of string is an alphabet and is not part of word, False otherwise
    '''

    # If the string is empty, return False
    if not txt:
        return False
    
    # If the string ends with a space, last character is not an alphabetical character, hence return False
    if txt[-1] == "" "":
        return False
    
    # If the string has multiple words and last character is an alphabetical character, return True
    if "" "" in txt and txt[-1].isalpha():
        return True
    
    # For all other cases, return False
    return False"
HumanEval/135/en/python/,HumanEval/135,ceb_Latn,python,"
def can_arrange(arr):
    """"""Here is the translation of the given sentence into Cebuano:

Mugama og usa ka function nga mobalik sa pinakadakong index sa usa ka elemento nga dili mas dako o managsama sa elemento nga nag-una niini. Kung walay ing-ana nga elemento, mobalik kini og -1. Ang gihatag nga array dili maglakip og mga doble nga mga balor.

Mga Pananglitan:
can_arrange = 3
can_arrange = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

",can_arrange,"def can_arrange(arr):
    if len(arr)<2:
        return -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            return i
    return -1"
HumanEval/136/en/python/,HumanEval/136,ceb_Latn,python,"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
",largest_smallest_integers,"def largest_smallest_integers(lst):
    if not lst:  # if list is empty, return (None, None)
        return (None, None)

    # separate the list into negatives and positives
    negatives = [i for i in lst if i < 0]
    positives = [i for i in lst if i > 0]
    
    # find the largest negative number (if exist)
    if negatives:
        max_neg = max(negatives)
    else:
        max_neg = None

    # find the smallest positive number (if exist)
    if positives:
        min_pos = min(positives)
    else:
        min_pos = None

    # return the tuple (largest negative, smallest positive)
    return (max_neg, min_pos)"
HumanEval/137/en/python/,HumanEval/137,ceb_Latn,python,"
def compare_one(a, b):
    """"""
    Mugna ug usa ka function nga modawat ug mga integer, float, o mga string nga nagrepresentar ug tinuod nga mga numero, ug mobalik sa labing dako nga variable sa iyang gihatag nga klase sa variable. Balika None kon ang mga balor managsama.

Pananglitan:
```python
def compare_one:
    # Convert strings to appropriate float values with . or , as decimal point
    if isinstance:
        a = float)
    if isinstance:
        b = float)
    
    # Compare values
    if a > b:
        return a
    elif b > a:
        return b
    else:
        return None

# Mga Pananglitan sa paggamit:
print) # Mobalik ug 2.5
print) # Mobalik ug ""2,3""
print) # Mobalik ug ""6""
print) # Mobalik ug None
```

Panghinumdom: Kon ang usa ka tinuod nga numero gipakita isip usa ka string, ang decimal point mahimo nga . o ,
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

",compare_one,"def compare_one(a, b):
    # Replaces comma with point if a or b is string.
    a = float(a.replace(',', '.')) if isinstance(a, str) else a
    b = float(b.replace(',', '.')) if isinstance(b, str) else b

    # Returns None if a and b are equal
    if a == b:
        return None
    
    # Returns the larger variable in its given variable type
    if type(a) == type(b):
        return a if a > b else b
    else:
        return a if a > b else str(b).replace('.', ',')"
HumanEval/138/en/python/,HumanEval/138,ceb_Latn,python,"
def is_equal_to_sum_even(n):
    """"""Pagsusi kung ang gihatag nga numero n mahimo bang isulat isip suma sa eksaktong 4 ka positibong mga even nga numero
    Pananglitan
    is_equal_to_sum_even == Sayop
    is_equal_to_sum_even == Sayop
    is_equal_to_sum_even == Tinuod
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
",is_equal_to_sum_even,"def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers""""""
    
    # smallest possible even number is '2', so if 'n' is less than sum of 4 smallest even numbers('2'), it can't be expressed as sum of 4 even numbers
    if n < 8: 
        return False

    # For >=8, every positive integer can be written as the sum of exactly 4 positive even numbers
    # Example: 2,2,2,2 for 8 and if the number is larger
    # uses one 2 and rest 4s
    # 12 = 2 + 4 + 4 + 4, 14 = 2 + 4 + 4 + 4 

    return True"
HumanEval/139/en/python/,HumanEval/139,ceb_Latn,python,"
def special_factorial(n):
    """"""Ang Brazilian factorial kay gipahayag ingon:
    brazilian_factorial = n! *! *! * ... * 1!
    diin n > 0

    Pananglitan:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

",special_factorial,"import math

def special_factorial(n):
    if n < 0:
        raise ValueError(""Input must be a positive integer"")
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result"
HumanEval/140/en/python/,HumanEval/140,ceb_Latn,python,"
def fix_spaces(text):
    """"""
    Given ang usa ka string nga text, ilisi ang tanan nga mga espasyo niini og underscores, 
    ug kon ang usa ka string adunay kapin sa 2 ka magkasunod nga mga espasyo, 
    unya ilisi ang tanan nga magkasunod nga mga espasyo og -
    
    fix_spaces == ""Example""
    fix_spaces == ""Example_1""
    fix_spaces == ""_Example_2""
    fix_spaces == ""_Example-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

",fix_spaces,"import re 

def fix_spaces(text: str) -> str:
    # replace more than 2 consecutive spaces with -
    text = re.sub(' {2,}', '-', text) 
    # replace remaining single spaces with _
    text = text.replace(' ', '_') 
    return text"
HumanEval/141/en/python/,HumanEval/141,ceb_Latn,python,"
def file_name_check(file_name):
    """"""Mugna ug usa ka function nga modawat sa usa ka string nga nagrepresentar sa pangalan sa usa ka file, ug mobalik
    'Oo' kung ang pangalan sa file balido, ug mobalik 'Dili' kung dili balido.
    Ang pangalan sa usa ka file giisip nga balido kung ug lamang kung ang tanan nga mga mosunod nga kondisyon
    natuman:
    - Dili kinahanglan molabaw sa tulo ka mga numero ang anaa sa pangalan sa file.
    - Ang pangalan sa file adunay eksaktong usa ka tuldok '.'
    - Ang substring sa wala sa tuldok dili kinahanglan nga walay sulod, ug magsugod kini sa usa ka letra gikan sa
    latin nga alfabeto.
    - Ang substring human sa tuldok kinahanglan usa niini: ['txt', 'exe', 'dll']
    Mga pananglitan:
    file_name_check # => 'Oo'
    file_name_check # => 'Dili'
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

",file_name_check,"import re

def file_name_check(file_name):
    valid_extensions = ['txt', 'exe', 'dll']
    file_parts = file_name.split('.')
    
    if len(file_parts) != 2 or not file_parts[0] or not file_parts[0][0].isalpha():
        return 'No'
        
    if len(re.sub(""\D"", """", file_parts[0])) > 3:
        return 'No'
        
    if file_name.count('.') > 1 or file_parts[1] not in valid_extensions:
        return 'No'
    
    return 'Yes'"
HumanEval/142/en/python/,HumanEval/142,ceb_Latn,python,"


def sum_squares(lst):
    """"""Kini nga function mogamit ug lista sa mga integer. Para sa tanang entries sa lista, ang function mag-square sa integer entry kung ang index niini multiple sa 3 ug mag-cube sa integer entry kung ang index niini multiple sa 4 ug dili multiple sa 3. Ang function dili mag-usab sa mga entries sa lista nga ang mga index dili multiple sa 3 o 4. Dayon ang function mobalik sa sum sa tanang entries.

Mga Pananglitan:
Para sa lst = [1,2,3] ang output kinahanglan 6
Para sa lst = [] ang output kinahanglan 0
Para sa lst = [-1,-5,2,-1,-5] ang output kinahanglan -126
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
",sum_squares,"def sum_squares(lst):
    total = 0
    for i in range(len(lst)):
        if i % 3 == 0:
            total += lst[i]**2
        elif i % 4 == 0:
            total += lst[i]**3
        else:
            total += lst[i]
    return total"
HumanEval/143/en/python/,HumanEval/143,ceb_Latn,python,"
def words_in_sentence(sentence):
    """"""
    Ikaw gihatagan ug usa ka string nga nagrepresentar sa usa ka pangungusap,
    ang pangungusap naglangkob ug mga pulong nga gibulag sa usa ka espasyo,
    ug kinahanglan nimo ibalik ang usa ka string nga naglangkob sa mga pulong gikan sa orihinal nga pangungusap,
    nga ang gitas-on prime number,
    ang pagkasunod-sunod sa mga pulong sa bag-ong string kinahanglan pareho sa orihinal nga pangungusap.

    Pananglitan1:
        Input: pangungusap = ""This is a test""
        Output: ""is""

    Pananglitan2:
        Input: pangungusap = ""lets go for swimming""
        Output: ""go for""

    Mga Limitasyon:
        * 1 <= len <= 100
        * ang pangungusap naglangkob lamang ug mga letra
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

",words_in_sentence,"def words_in_sentence(sentence):
    """"""
    Given a string representing a sentence,
    and returns a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.
    """"""

    # Helper function to check if a number is prime
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    # Split the sentence into words
    words = sentence.split()

    # Select only the words that have a prime number of characters
    prime_words = [word for word in words if is_prime(len(word))]

    # Join the words back into a sentence
    result = ' '.join(prime_words)

    return result"
HumanEval/144/en/python/,HumanEval/144,ceb_Latn,python,"
def simplify(x, n):
    """"""Your request was to translate a given sentence into Cebuano. Here is the translation:

Ang imong buluhaton mao ang pag-implementar sa usa ka function nga mopasimple sa expression nga x * n. Ang function mobalik og Tinuod kon ang x * n moresulta og tibuok nga numero ug Bakak kon dili. Ang x ug n kay string representation sa usa ka fraction, ug adunay format nga <numerator>/<denominator> diin ang numerator ug denominator kay positibo nga tibuok nga mga numero.

Makatuo ka nga ang x ug n kay mga balido nga fractions, ug walay zero nga denominator.

simplify = Tinuod
simplify = Bakak
simplify = Bakak
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

",simplify,"def simplify(x, n):
    # Split the fractions into numerator and denominator
    x_numerator, x_denominator = map(int, x.split('/'))
    n_numerator, n_denominator = map(int, n.split('/'))
    
    # Calculate the product's numerator and denominator
    product_numerator = x_numerator * n_numerator
    product_denominator = x_denominator * n_denominator
    
    # Check if the product's numerator is divisible by its denominator
    return product_numerator % product_denominator == 0"
HumanEval/145/en/python/,HumanEval/145,ceb_Latn,python,"
def order_by_points(nums):
    """"""
    Magsulat ug usa ka function nga mag-sort sa gihatag nga lista sa mga integer
    sa pagsaka nga han-ay base sa total sa ilang mga numero.
    Nota: kung adunay daghang mga butang nga parehas ang total sa ilang mga numero,
    i-order sila base sa ilang index sa orihinal nga lista.

    Pananglitan:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",order_by_points,"def order_by_points(nums):
    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))))

# Testing the function with given examples
print(order_by_points([1, 11, -1, -11, -12]))  # Returns: [-1, -11, 1, -12, 11]
print(order_by_points([]))  # Returns: []"
HumanEval/146/en/python/,HumanEval/146,ceb_Latn,python,"
def specialFilter(nums):
    """"""Isulat ang usa ka function nga modawat ug array sa mga numero isip input ug mobalik 
sa gidaghanon sa mga elemento sa array nga mas dako pa sa 10 ug ang una ug katapusan nga mga numero sa usa ka numero kay mga odd.
Pananglitan:
specialFilter => 1 
specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

",specialFilter,"def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':
            count += 1
    return count"
HumanEval/147/en/python/,HumanEval/147,ceb_Latn,python,"
def get_max_triples(n):
    """"""
    Gihatagan ka ug positibong integer n. Kinahanglan ka maghimo ug integer array a nga adunay gitas-on nga n.
        Para sa matag i, ang bili sa a[i] = i * i - i + 1.
        Ibalik ang gidaghanon sa mga triple sa a diin i < j < k,
    ug a[i] + a[j] + a[k] kay multiple sa 3.

    Pananglitan:
        Input: n = 5
        Output: 1
        Pagsaysay:
        a = [1, 3, 7, 13, 21]
        Ang nag-iisang valid nga triple mao ang.
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
",get_max_triples,"def get_max_triples(n):
    # Create the array
    a = [(i * i - i + 1) for i in range(1, n + 1)]
    
    # Store the counts of numbers % 3 == 0, 1, 2 in cnt[0], cnt[1], cnt[2] respectively
    cnt = [0] * 3
    for i in range(n):
        cnt[a[i] % 3] += 1

    # Count the triples
    return cnt[0] * (cnt[0] - 1) * (cnt[0] - 2) // 6 + cnt[0] * cnt[1] * cnt[2]"
HumanEval/148/en/python/,HumanEval/148,ceb_Latn,python,"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

",bf,"def bf(planet1, planet2):
    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
    # Making the process case insensitive by capitalizing the first character of input planets
    planet1, planet2 = planet1.capitalize(), planet2.capitalize() 

    # Validating if the planets exist in our list
    if (planet1 in planets) and (planet2 in planets):
        start = min(planets.index(planet1), planets.index(planet2)) + 1 
        end = max(planets.index(planet1), planets.index(planet2)) 
        return tuple(planets[start:end]) 
    else:
        return tuple()

# Testing the function with provided test cases

print(bf(""Jupiter"", ""Neptune"")) #==> (""Saturn"", ""Uranus"")
print(bf(""Earth"", ""Mercury"")) #==> (""Venus"")
print(bf(""Mercury"", ""Uranus"")) #==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")"
HumanEval/149/en/python/,HumanEval/149,ceb_Latn,python,"
def sorted_list_sum(lst):
    """"""Isulat ang usa ka function nga modawat ug listahan sa mga string isip parameter,
    tangtangon ang mga string nga adunay odd nga gitas-on gikan niini,
    ug ibalik ang resulta nga listahan nga naka-order,
    Ang listahan kanunay nga listahan sa mga string ug dili gyud array sa mga numero,
    ug kini mahimong adunay mga duplicate.
    Ang order sa listahan kinahanglan nga ascending base sa gitas-on sa matag pulong, ug ikaw
    kinahanglan ibalik ang listahan nga gi-sort base niana nga lagda.
    Kung ang duha ka pulong adunay parehas nga gitas-on, i-sort ang listahan alphabetically.
    Ang function kinahanglan magbalik ug listahan sa mga string nga gi-sort nga naka-order.
    Pwede nimo i-assume nga ang tanan nga mga pulong adunay parehas nga gitas-on.
    Pananglitan:
    assert list_sort => [""aa""]
    assert list_sort => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

",sorted_list_sum,"def sorted_list_sum(lst):
    # Filter out strings with odd lengths
    even_len_lst = [word for word in lst if len(word) % 2 == 0]
    
    # Sort list first by length of word, then alphabetically
    sorted_lst = sorted(even_len_lst, key=lambda word: (len(word), word))
    
    return sorted_lst"
HumanEval/150/en/python/,HumanEval/150,ceb_Latn,python,"
def x_or_y(n, x, y):
    """"""Usa ka yano nga programa nga mobalik sa bili sa x kung ang n kay usa ka prime number ug mobalik sa bili sa y kung dili.

Mga Pananglitan:
para sa x_or_y == 34
para sa x_or_y == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

",x_or_y,"def x_or_y(n, x, y):
    if n < 2: 
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
    return x"
HumanEval/151/en/python/,HumanEval/151,ceb_Latn,python,"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

",double_the_difference,"def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    '''

    # Check each number in the list. If it is a positive integer and odd, 
    # calculate the square and add it to the sum.
    # If it is not, ignore it and continue with the next number.
    sum_of_squares = sum(n**2 for n in lst if isinstance(n, int) and n > 0 and n % 2 != 0)

    # Return the sum of squares of odd numbers
    return sum_of_squares

print(double_the_difference([1, 3, 2, 0]))  # Expected output: 10
print(double_the_difference([-1, -2, 0]))  # Expected output: 0
print(double_the_difference([9, -2]))  # Expected output: 81
print(double_the_difference([0]))  # Expected output: 0
print(double_the_difference([]))  # Expected output: 0"
HumanEval/152/en/python/,HumanEval/152,ceb_Latn,python,"
def compare(game,guess):
    """"""Sa akong hunahuna, kita tanan nakahinumdom anang pagbati kung kanus-a nabal-an na gyud ang resulta sa usa ka dugay nang gipaabot nga hitabo. Ang mga pagbati ug mga hunahuna nga imong mabati nianang higayona angay gyud nga isulat ug ikompara.

Ang imong buluhaton mao ang pagdeterminar kung nakatagna ba sa sakto ang usa ka tawo sa mga resulta sa pipila ka mga duwa. Hatagan ka ug duha ka arrays sa mga score ug mga gipanagna nga parehas ug gitas-on, diin ang matag index nagpakita sa usa ka duwa. Ibalik ang usa ka array nga parehas ug gitas-on nga nagpakita kung unsa ka layo ang matag pangagpas. Kung sakto ang ilang pagtagna, ang value kay 0, ug kung dili, ang value kay ang absolute difference tali sa pagtagna ug sa score.

Pananglitan:

compare -> [0,0,0,0,3,3]
compare -> [4,4,1,0,0,6]
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",compare,"def compare(game, guess):
    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]"
HumanEval/153/en/python/,HumanEval/153,ceb_Latn,python,"
def Strongest_Extension(class_name, extensions):
    """"""Ikaw pagahatagan sa ngalan sa usa ka klase ug usa ka lista sa mga ekstensyon.
    Ang mga ekstensyon gigamit aron mag-load og dugang nga mga klase sa klase. Ang 
    kalig-on sa ekstensyon mao ang mosunod: Ang CAP mao ang ihap sa mga uppercase 
    nga mga letra sa ngalan sa ekstensyon, ug ang SM mao ang ihap sa mga lowercase 
    nga mga letra sa ngalan sa ekstensyon, ang kalig-on gihatag pinaagi sa fraction CAP - SM. 
    Kinahanglan nimo pangitaon ang labing kusgan nga ekstensyon ug ibalik usa ka string sa 
    kini nga pormato: ClassName.StrongestExtensionName.
    Kung adunay duha o labaw pa nga ekstensyon nga adunay parehas nga kalig-on, kinahanglan nimo
    pilion ang una nga moabot sa lista.
    Pananglitan, kung ikaw gihatagan og ""Slices"" isip klase ug usa ka lista sa mga 
    ekstensyon: ['SErviNGSliCes', 'Cheese', 'StuFfed'] unya kinahanglan nimo 
    ibalik ang 'Slices.SErviNGSliCes' tungod kay 'SErviNGSliCes' mao ang labing kusgan nga ekstensyon.
    Pananglitan:
    para sa Strongest_Extension == 'my_class.AA'
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
",Strongest_Extension,"def Strongest_Extension(class_name, extensions):
    # Calculate strength for each extension
    strengths = [(sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()), ext) for ext in extensions]
    
    # Get the extension with maximum strength
    strongest_extension = max(strengths, key=lambda x: x[0])[1]
    
    # Return class and extension in required format
    return ""{}.{}"".format(class_name, strongest_extension)"
HumanEval/154/en/python/,HumanEval/154,ceb_Latn,python,"
def cycpattern_check(a , b):
    """"""Gihatagan ka ug 2 ka mga pulong. Kinahanglan nimo nga mobalik ug True kung ang ikaduhang pulong o bisan unsa sa mga rotations niini kay substring sa unang pulong.
    cycpattern_check => False
    cycpattern_check => True
    cycpattern_check => False
    cycpattern_check => True
    cycpattern_check => False
    cycpattern_check => True

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

",cycpattern_check,"def cycpattern_check(a , b):
    len_b = len(b)
    for i in range(len_b):
        # Rotate b by slicing at i and appending the beginning part to the end
        rotated_b = b[i:] + b[:i]
        # Check if this new string is a substring of a
        if rotated_b in a:
            return True
    return False"
HumanEval/155/en/python/,HumanEval/155,ceb_Latn,python,"
def even_odd_count(num):
    """"""Hatagi ug integer. ibalik ang usa ka tuple nga adunay gidaghanon sa even ug odd nga mga numero.

     Pananglitan:
        even_odd_count ==>
        even_odd_count ==>
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

",even_odd_count,"def even_odd_count(num):
    num = abs(num)  # Making sure the number is positive, as we don't count '-' as a digit.
    evens = 0
    odds = 0
    for digit in str(num):
        if int(digit) % 2 == 0:
            evens += 1
        else:
            odds += 1
    return (evens, odds)"
HumanEval/156/en/python/,HumanEval/156,ceb_Latn,python,"
def int_to_mini_roman(number):
    """"""
    Gihatag ang usa ka positibong integer, kuhaa ang katumbas nga roman numeral niini isip usa ka string,
    ug ibalik kini sa lowercase.
    Mga Pagdili: 1 <= num <= 1000

    Mga Pananglitan:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

",int_to_mini_roman,"def int_to_mini_roman(num):
    int_val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    rom_val = [""m"", ""cm"", ""d"", ""cd"", ""c"", ""xc"", ""l"", ""xl"", ""x"", ""ix"", ""v"", ""iv"", ""i""]
    roman_num = ''
    for i in range(len(int_val)):
        count = int(num / int_val[i])
        roman_num += rom_val[i] * count
        num -= int_val[i] * count
    return roman_num"
HumanEval/157/en/python/,HumanEval/157,ceb_Latn,python,"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

",right_angle_triangle,"def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle.
    Return True if the three sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degrees.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    # The idea is to use the Pythagorean theorem where in a right-angled triangle,
    # the square of the hypotenuse (the side opposite the right angle) is equal to the 
    # sum of the squares of the other two sides.
    # Hypotenuse is the maximum side so first we get the maximum of a, b and c.
    sides = sorted([a, b, c])
    
    # Check the condition a^2 + b^2 = c^2
    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2"
HumanEval/158/en/python/,HumanEval/158,ceb_Latn,python,"
def find_max(words):
    """"""Magsulat ug usa ka function nga modawat ug lista sa mga string.
    Ang lista adunay lain-laing mga pulong. Ibalik ang pulong nga adunay labing daghang
    mga talagsaon nga karakter. Kung daghang string ang adunay labing daghang talagsaon nga karakter,
    ibalik ang usa nga una sa lexicographical order.

    find_max == ""string""
    find_max == ""enam""
    find_max == ""aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

",find_max,"def find_max(words):
    words.sort()
    unique_characters_counts = [len(set(word)) for word in words]
    max_unique_count = max(unique_characters_counts)
    for word in words: 
        if len(set(word)) == max_unique_count:
            return word"
HumanEval/159/en/python/,HumanEval/159,ceb_Latn,python,"
def eat(number, need, remaining):
    """"""
    Ikaw usa ka gigutom nga koneho, ug nakakaon ka na ug pipila ka mga karot,
    apan karon kinahanglan ka nga mokaon ug dugang nga mga karot aron makumpleto ang pagkaon sa adlaw.
    kinahanglan nga ibalik nimo ang usa ka array nga [ total nga gidaghanon sa nakakaon nga mga karot human sa imong mga pagkaon,
                                    ang gidaghanon sa nabilin nga mga karot human sa imong mga pagkaon ]
    kung wala na'y igong nabilin nga mga karot, mokaon ka sa tanan nga nabilin nga mga karot, apan magpabilin nga gigutom.

    Pananglitan:
    * eat -> [11, 4]
    * eat -> [12, 1]
    * eat -> [11, 0]
    * eat -> [7, 0]

    Mga Variable:
    @number : integer
        ang gidaghanon sa mga karot nga imong nakakaon.
    @need : integer
        ang gidaghanon sa mga karot nga kinahanglan nimo kaonon.
    @remaining : integer
        ang gidaghanon sa nabilin nga mga karot nga anaa sa stock

    Limitasyon:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Maglipay-lipay :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

",eat,"def eat(number, need, remaining):
    # Calculate how many carrots you will eat
    eaten_carrots = number + min(need, remaining)
    
    # Calculate how many carrots will be left after your meals
    left_carrots = max(0, remaining - need)
    
    # Return the total number of eaten carrots after your meals and the number of carrots left
    return [eaten_carrots, left_carrots]"
HumanEval/160/en/python/,HumanEval/160,ceb_Latn,python,"
def do_algebra(operator, operand):
    """"""
    Gihatag ang duha ka lista: operator, ug operand. Ang unang lista adunay mga batakang algebra nga operasyon, ug ang ikaduhang lista mao ang lista sa mga integer. Gamiton ang duha ka lista aron makatukod ug algebrikong ekspresyon ug ibalik ang resulta sa kini nga ekspresyon.

Ang mga batakang algebra nga operasyon:
Pagdugang 
Pagbawas 
Pagmultiply 
Floor division 
Exponentiation 

Pananglitan:
operator['+', '*', '-']
array = [2, 3, 4, 5]
resulta = 2 + 3 * 4 - 5
=> resulta = 9

Nota:
    Ang gitas-on sa lista sa operator kay parehas sa gitas-on sa lista sa operand minus uno.
    Ang operand kay usa ka lista sa mga dili negatibo nga mga integer.
    Ang lista sa operator adunay labing menos usa ka operator, ug ang lista sa operand adunay labing menos duha ka mga operand.

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",do_algebra,"def do_algebra(operator, operand):
    """"""
    Given two lists operator and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebraic 
    expression and return the evaluation of this expression.

    Args:
    operator (list): list of basic algebra operations
    operand (list): list of integers

    Returns:
    int: the evaluation of the algebraic expression
    """"""    

    # Join operator and operand lists alternatively to create algebraic expression
    expression = """".join(str(op) + str(nb) for op, nb in zip(operator, operand[1:]))
    expression = str(operand[0]) + expression

    # Use eval function to calculate algebraic expression
    result = eval(expression)
    return result"
HumanEval/161/en/python/,HumanEval/161,ceb_Latn,python,"
def solve(s):
    """"""Gihatagan ka og usa ka string nga s.
    kung ang s[i] usa ka letra, ilisdi ang iyang kaso gikan sa gamayng letra ngadto sa dakong letra o baliktad,
    kon dili, biyae ra kini nga ingon niini.
    Kung ang string walay mga letra, balika ang string.
    Ang function kinahanglan nga mobalik sa resulta nga string.
    Mga Pananglitan
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
",solve,"def solve(s):
    # check if any character of s is an alphabet
    if any(ch.isalpha() for ch in s):
        return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in s])
    else:
        return s[::-1]"
HumanEval/162/en/python/,HumanEval/162,ceb_Latn,python,"
def string_to_md5(text):
    """"""
    Gamit ang usa ka string nga 'teksto', ibalik ang md5 hash nga katumbas nga string niini.
    Kung ang 'teksto' kay walay sulod nga string, ibalik ang Wala.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

",string_to_md5,"import hashlib

def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.
    """"""
    if not text:  # return None if text is empty
        return None

    return hashlib.md5(text.encode()).hexdigest()"
HumanEval/163/en/python/,HumanEval/163,ceb_Latn,python,"
def generate_integers(a, b):
    """"""
    Kung adunay duha ka positibo nga integer a ug b, ihatag ang mga even digit taliwala sa a ug b, sa pagsaka nga han-ay.

Pananglitan:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

",generate_integers,"def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.
    """"""
    if a > b:
        a, b = b, a  # swap values so a is always smaller than b

    return [i for i in range(a, b + 1) if i in range(0, 10) and i % 2 == 0]"
