prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" ଦିଆଯାଇଥିବା ସଂଖ୍ୟାର ତାଲିକାରେ ଯଦି କୌଣସି ଦୁଇଟି ସଂଖ୍ୟା ଦିଆଯାଇଥିବା ସୀମା ଠାରୁ ଆଉ ଅଧିକ ନିକଟରେ ଅଛନ୍ତି କି ନାହିଁ ଯାଞ୍ଚ କରନ୍ତୁ। 
    ଉଦାହରଣ:
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" ଏହି ଫଙ୍କସନ୍‌କୁ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍‌ ଦିଆଯାଇଛି ଯାହାରେ ଅନେକ ଗୋଟିଏ ଗୋଟିଏ ନେଷ୍ଟେଡ୍ ପ୍ୟାରେନ୍‌ଥେସିସ୍‌ ଥାଏ। ତୁମର ଲକ୍ଷ୍ୟ ହେଉଛି ସେହି ଗୋଷ୍ଠୀଗୁଡ଼ିକୁ ଅଲଗା ଷ୍ଟ୍ରିଙ୍ଗ୍‌ରେ ବିଭକ୍ତ କରିବା ଏବଂ ସେଗୁଡ଼ିକର ତାଲିକା ଫେରାଇବା। ଅଲଗା ଗୋଷ୍ଠୀଗୁଡ଼ିକ ସମତୁଳିତ ହୋଇଥାଇ ଏବଂ ପରସ୍ପର ପ୍ରବେଶିତ ନୁହେଁ। ଇନପୁଟ୍ ଷ୍ଟ୍ରିଙ୍ଗ୍‌ରେ ଥିବା ସମ୍ପୂର୍ଣ୍ଣ ଖାଲି ସ୍ଥାନକୁ ଅଣଦେଖା କର। ଉଦାହରଣ:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" ଏକ ଧନାତ୍ମକ ଫ୍ଲୋଟିଂ ପଏଣ୍ଟ ସଂଖ୍ୟା ଦିଆଯାଇଥିଲେ, ଏହାକୁ ଏକ ପୂର୍ଣ୍ଣାଙ୍କ ଏବଂ ନିୟମାନ୍ତର ଭାଗକୁ ବିଭାଜିତ କରାଯାଇପାରେ।

ସଂଖ୍ୟାର ନିୟମାନ୍ତର ଭାଗକୁ ପୁନଃପ୍ରାପ୍ତ କରନ୍ତୁ।
ଉଦାହରଣ:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" ତୁମକୁ ଏକ ତାଲିକା ଦିଆଯାଇଛି ଯାହାରେ ଏକ ବ୍ୟାଙ୍କ ଖାତାରେ ଜମା ଏବଂ ନିକାସ ଅପରେସନଗୁଡ଼ିକ ଅଛି ଯାହା ଶୂନ୍ୟ ଶେଷ ତହବିଲରୁ ଆରମ୍ଭ ହୁଏ। ତୁମର କାମ ହେଉଛି ଯଦି କୌଣସି ସମୟରେ ତହବିଲ ଶୂନ୍ୟରୁ କମ୍ ହୋଇଯାଏ, ସେହି ସମୟରେ ଫଙ୍କସନ୍ True ଫେରାଇବାକୁ ଚିହ୍ନଟ କରିବା ଅଟେ। ନାହିଁହେଲେ, ଏହା False ଫେରାଇବ।
ଇଉଦାହରଣ:
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" ଦିଆଯାଇଥିବା ଏକ ତାଲିକା ଇନପୁଟ ସଂଖ୍ୟାଗୁଡିକ ପାଇଁ, ଏହି ଡାଟାସେଟ୍‌ର ମଧ୍ୟରେ ମାନ ସାରାଉଠାରେ ମିନ୍ ଆବସୋଲୁଟ୍ ଡିଭିଏସନ୍ ଗଣନା କରନ୍ତୁ।
ମିନ୍ ଆବସୋଲୁଟ୍ ଡିଭିଏସନ୍ ହେଉଛି ପ୍ରତ୍ୟେକ ଉପାଦାନ ଏବଂ ଏକ କେନ୍ଦ୍ରବିନ୍ଦୁ ମଧ୍ୟରେ ସାଧାରଣ ଆବସୋଲୁଟ୍ ପାର୍ଥକ୍ୟ:
MAD = ସାମାନ୍ୟ | x - x_mean |
ଉଦାହରଣ:
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" ପ୍ରତ୍ୟେକ ଦୁଇଟି ପର୍ଯ୍ୟାୟକ୍ରମିକ ଉପାଦାନର ମଧ୍ୟରେ ଏକ ସଂଖ୍ୟା 'ପ୍ରତୀକ' କୁ ଇନସର୍ଟ କରନ୍ତୁ
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" ଏହି ଫଙ୍କସନ୍‌କୁ ଇନପୁଟ୍ ହେଲା ଏକ ଷ୍ଟ୍ରିଂ ଯାହା ନେଷ୍ଟେଡ୍ ପ୍ୟାରେନ୍ଥେସିସ୍‌ର ଅନେକ ଗ୍ରୁପ୍‌କୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଯାହା ଜଗା ଦ୍ୱାରା ବିଭକ୍ତ ହୋଇଥାଏ।
    ପ୍ରତିଟି ଗ୍ରୁପ୍ ପାଇଁ, ପ୍ୟାରେନ୍ଥେସିସ୍‌ର ସବୁଠାରୁ ଗଭୀର ମାନକୁ ଔଟପୁଟ୍ କର।
    ଉଦାହରଣ ସ୍ୱରୂପ) ଦୁଇ ସ୍ତରର ଗଭୀରତାର ସବୁଠାରୁ ଅଧିକ ଅଛି ଯେଉଁଠାରେ)) ତିନି ସ୍ତରର ଅଛି।

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" ଏକ ଇନପୁଟ୍ ତାଲିକାରୁ ଷ୍ଟ୍ରିଙ୍ଗଗୁଡ଼ିକୁ ଚୟନ କର, ଯାହାକି ନିର୍ଦିଷ୍ଟ ସବ୍‌ଷ୍ଟ୍ରିଙ୍ଗ୍ ଧାରଣ କରେ।
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" ଦିଆଯାଇଥିବା ପୂର୍ଣ୍ଣାଙ୍କ ତାଲିକା ପାଇଁ, ଏକ ଯୁଗ୍ମ ଫେରତ ଦିଅନ୍ତୁ ଯାହା ତାଲିକାର ସମସ୍ତ ପୂର୍ଣ୍ଣାଙ୍କଙ୍କର ଏକ ଯୋଗ ଏବଂ ଏକ ଗୁଣିତ ଥାଏ।
    ଖାଲି ଯୋଗ 0 ସମାନ ହେବା ଉଚିତ ଏବଂ ଖାଲି ଗୁଣିତ 1 ସମାନ ହେବା ଉଚିତ।
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" ଦିଆଯାଇଥିବା ପୂର୍ବରୁ ଥିବା ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ତାଲିକାରୁ, ଏକ ତାଲିକା ତିଆରି କରନ୍ତୁ ଯାହା ଅବଧି ପର୍ଯ୍ୟନ୍ତ ଅଧିକତମ ତତ୍କାଳିକ ତତ୍ତ୍ୱ ପାଇଯାଇଛି।
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" ଦିଆଯାଇଥିବା ସ୍ତ୍ରିଙ୍ଗ ପାଲିନ୍ଡ୍ରୋମ କି ନାହିଁ ତାହା ପରୀକ୍ଷା କରନ୍ତୁ। """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" ଏକାଧିକ ଶୂନ୍ୟ ଏବଂ ଏକ ସହ ହେଉଥିବା ଦୁଇଟି ଷ୍ଟ୍ରିଙ୍ଗ a ଏବଂ b ଦିଆଯାଇଛି।
    ଏହି ଇନପୁଟଗୁଡ଼ିକ ଉପରେ ବାଇନାରୀ XOR କରନ୍ତୁ ଏବଂ ଫଳାଫଳକୁ ମଧ୍ୟ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଭାବରେ ଫେରାନ୍ତୁ।
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" ସବୁ ବଡ଼ ଅକ୍ଷର ମଧ୍ୟରୁ ଜେଉଁଟି ସବୁଠାରୁ ଲମ୍ବା ସେଇଟି ଫେରାନ୍ତୁ। ଯଦି ଏକାଧିକ ଲମ୍ବା ଅକ୍ଷର ଥାଏ, ତାହେଲେ ପ୍ରଥମ ଟାକୁ ଫେରାନ୍ତୁ। ଯଦି ଇନପୁଟ ତାଲିକା ଖାଲି ଥାଏ, ତାହାହେଲେ କିଛି ଫେରାନ୍ତୁନାହିଁ।
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" ଯକ ଓ b ଦୁଇଟି ପୂର୍ଣ୍ଣସଂଖ୍ୟାର ସର୍ବୋତ୍ତମ ମାନକ ଫଳ ଫେରାନ୍ତୁ।
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" ଏହି ଇନପୁଟ ଷ୍ଟ୍ରିଙ୍ଗର ସମସ୍ତ ପ୍ରିଫିକ୍ସଗୁଡ଼ିକୁ ସବୁଠୁ ଛୋଟରୁ ଆରମ୍ଭକରି ସବୁଠାରୁ ବଡ଼କୁ ଫେରାଇ ଦିଅ।
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" ୦ ଠାରୁ n ପର୍ଯ୍ୟନ୍ତ ସମ୍ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାଗୁଡ଼ିକୁ ସ୍ପେସ୍ ଦ୍ୱାରା ବିଭାଜିତ କରି ଏକ ଷ୍ଟ୍ରିଂ ଫେରାଇବେ।
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଦିଆଯାଇଛି, ଏହାରେ କେତେଟି ଅଲଗା ଅକ୍ଷର ଅଛି ତାହା ଖୋଜନ୍ତୁ।
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" ଏହି ଫଙ୍କସନ୍‌ର ଇନ୍‌ପୁଟ୍‌ ହେଉଛି ସଂଗୀତ ଟିପ୍ସ ଦର୍ଶାଉଥିବା ଏକ ଷ୍ଟ୍ରିଂ, ଯାହାକି ବିଶେଷ ASCII ଫର୍ମାଟ୍‌ରେ ଅଛି।
    ଆପଣଙ୍କର କାମ ହେଉଛି ଏହି ଷ୍ଟ୍ରିଂକୁ ପାର୍ସ କରିବା ଏବଂ ଯେତେ ଗୋଟିଏ ଟିପ୍ସ ଦେଖିବାକୁ ଥାଏ, ସେହି ଟିପ୍ସକୁ କେତେ ଗୋଟିଏ ବିଟ୍‌ ରହିଥାଏ ତାହାର ତାଲିକା ଫେରାଇବା।

    ଏଠାରେ ଏକ ଲେଜେଣ୍ଡ ଅଛି:
    'o' - ସମ୍ପୂର୍ଣ୍ଣ ଟିପ୍, ଚାରି ବିଟ୍‌ ରହିଥାଏ
    'o|' - ଅର୍ଧ ଟିପ୍, ଦୁଇ ବିଟ୍‌ ରହିଥାଏ
    '.|' - ପାଦ ଟିପ୍, ଗୋଟିଏ ବିଟ୍‌ ରହିଥାଏ

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" ଏକ ଦିଆଯାଇଥିବା ସବସ୍ଟ୍ରିଙ୍ଗ କେତେଥର ମୂଳ ସ୍ଟ୍ରିଙ୍ଗରେ ପାଇଯାଇପାରେ ଖୋଜନ୍ତୁ। ଓଭରଲ୍ୟାପିଂ କେସ୍‌ଗୁଡ଼ିକୁ ଗଣନ୍ତୁ।
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" ଇନପୁଟ ହେଉଛି 'ଜିରୋ' ଠାରୁ 'ନାଇନ' ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାଗୁଡ଼ିକର ସ୍ପେସ-ଡିଲିମିଟେଡ ଷ୍ଟ୍ରିଂ। ଉପଯୁକ୍ତ ପସନ୍ଦଗୁଡ଼ିକ ହେଉଛି 'ଜିରୋ', 'ଓନ', 'ଟୁ', 'ଥ୍ରି', 'ଫୋର', 'ଫାଇଭ', 'ସିକ୍ସ', 'ସେଭେନ', 'ଏଟ' ଏବଂ 'ନାଇନ'। ସଂଖ୍ୟାଗୁଡ଼ିକୁ ସଂକ୍ରମଣ ଅନୁସାରେ କ୍ରମିକ ଭାବରେ ଷ୍ଟ୍ରିଂ ଫେରାନ୍ତୁ।
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" ଯେକଣସି ଏକ ଦିଆ ହୋଇଥିବା ସଂଖ୍ୟାର ସୂଚୀରୁ ଦୁଇଟି ସଂଖ୍ୟା ବାଛନ୍ତୁ ଯାହାମାନେ ଏକାଅନ୍ୟଙ୍କ ସାଙ୍ଗରେ ସର୍ବାଧିକ ନିକଟ ହୋଇଥାନ୍ତି ଏବଂ ସେଗୁଡ଼ିକୁ ଅନୁକ୍ରମରେ ପ୍ରଦାନ କରନ୍ତୁ।
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" ଦିଆଯାଇଥିବା ସଂଖ୍ୟାଗୁଡ଼ିକର ତାଲିକା, ସେହି ତାଲିକାରେ ଏକ ରେଖିୟ ପରିବର୍ତ୍ତନ ଆରୋପ କରନ୍ତୁ, ଯାହାରେ ସବୁଠାରୁ ଛୋଟ ସଂଖ୍ୟା 0 ହେବ ଏବଂ ସବୁଠାରୁ ବଡ଼ ସଂଖ୍ୟା 1 ହେବ।
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" ପାଇଥନ ମୂଲ୍ୟଗୁଡ଼ିକର ଦିଆଯାଇଥିବା ସୂଚୀକୁ କେବଳ ପୂର୍ଣ୍ଣାଙ୍କ ପାଇଁ ଫିଲ୍ଟର୍ କରନ୍ତୁ।
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" ଦିଆଯାଇଥିବା ସ୍ତର ର ଲମ୍ବ ଫେରାଇବେ।
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ସଂଖ୍ୟା n ପାଇଁ, n ଠାରୁ କମ ଥିବା ଏବଂ n ଅନ୍ୟନ୍ୟ ଭାଗକରି ପାରିବା ଯଥେଷ୍ଟ ପ୍ରମାଣିତ ସଂଖ୍ୟା କୁ ଖୋଜନ୍ତୁ।
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" ଦିଆଯାଇଥିବା ପୂର୍ଣ୍ଣାଙ୍କର ସେମାନଙ୍କର କ୍ରମରେ ସବୁଠାରୁ ଛୋଟଠାରୁ ବଡ଼ ପର୍ଯ୍ୟନ୍ତ ପ୍ରାଇମ ଘଟକମାନଙ୍କର ତାଲିକା ଫେରାନ୍ତୁ। 
    ପ୍ରତ୍ୟେକ ଘଟକକୁ ସେ ଫ୍ୟାକ୍ଟରାଇଜେସନରେ କେତେବେଳେ ଦେଖାଯାଏ ତାହା ଅନୁସାରେ ସଂଖ୍ୟାରେ ତାଲିକାରେ ଥିବା ଉଚିତ।
    ଇନପୁଟ ସଂଖ୍ୟା ସମସ୍ତ ଘଟକମାନଙ୍କର ଗୁଣନର ସମାନ ହେଉଁ।
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ତାଲିକାରୁ, ସମସ୍ତ ତତ୍ତ୍ୱକୁ ପ୍ରତ୍ୟାହାର କରନ୍ତୁ ଯାହା ଏକାଧିକ ଥର ଘଟିଥାଏ।  
ଅବଶିଷ୍ଟ ତତ୍ତ୍ୱଗୁଡ଼ିକର କ୍ରମକୁ ନିମ୍ନରେ ଦିଆ ଯାଇଥିବା ପରି ରଖନ୍ତୁ।
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ଷ୍ଟ୍ରିଙ୍ଗ ପାଇଁ, ସମସ୍ତ ଛୋଟ ଅକ୍ଷରକୁ ବଡ଼ ଅକ୍ଷରରେ ପରିଣତ କରନ୍ତୁ ଏବଂ ସମସ୍ତ ବଡ଼ ଅକ୍ଷରକୁ ଛୋଟ ଅକ୍ଷରରେ ପରିଣତ କରନ୍ତୁ।
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" ସ୍ତରୀକୃତ ସୂଚୀ ର ସୂତ୍ରଗୁଡ଼ିକ ଏକ ସୂତ୍ରରେ ଯୋଡ଼ନ୍ତୁ
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ପ୍ରିଫିକ୍ସ ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗଗୁଡ଼ିକୁ ମାତ୍ର ଏକ ଇନପୁଟ ତାଲିକାରୁ ଫିଲ୍ଟର କର।
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""ତାଲିକାରେ କେବଳ ସକାରାତ୍ମକ ସଂଖ୍ୟାଗୁଡ଼ିକୁ ଫେରାଇବା।
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""ଯଦି ଏକ ଦିଆଯାଇଥିବା ସଂଖ୍ୟା ପ୍ରାଇମ ହୁଏ ତେବେ true ଫେରତ କରନ୍ତୁ, ନହିଁହେଲେ false।
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    ପଦ ଯାଞ୍ଚ କରେ ଯାହାର ଗୁଣାଂକଗୁଡ଼ିକ ଅଛି xs ଏକ ପୈନ୍ଟ x ରେ।
    ଫେରତି ଦେବ xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""ଏହି ଫଙ୍କସନ୍‌ ଏକ ତାଲିକା l ନେଇଥାଏ ଏବଂ ଏକ ତାଲିକା l' ଫେରାଇଥାଏ ଯାହା ଏମିତି ଅଛି:
    l' ଏହି ସବୁ ଇଣ୍ଡେକ୍ସରେ l ସହିତ ସମାନ ଅଛି ଯେଉଁଗୁଡ଼ିକ ତିନିରେ ବିଭାଜ୍ୟ ନୁହେଁ, ଯେଉଁଠାରେ ତାଙ୍କର ମୂଲ୍ୟଗୁଡ଼ିକ ଏହି ସବୁ ଇଣ୍ଡେକ୍ସରେ l ର ମୂଲ୍ୟ ସହିତ ସମାନ ଅଛି,
    କିନ୍ତୁ ଏହାଗୁଡ଼ିକ ଟିକେ ସଜାଯାଇଛି।
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""ଏକ ତାଲିକାରେ ଗୋଟିଏ ଅନୁକ୍ରମିତ ଏବଂ ବିଶିଷ୍ଟ ଉପାଦାନଗୁଡ଼ିକୁ ଫେରାନ୍ତୁ।
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""ସୂଚୀରେ ସବୁଠାରୁ ବଡ଼ ଏଲିମେଣ୍ଟକୁ ଫେରାଅ।
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""ଏହାରେ ୭ ସଂଖ୍ୟାଟି ଯେତେବେଳେ ଦେଖାଯାଏ ତାହା ଫେରାଇବା, ଯେଉଁସବୁ ସଂଖ୍ୟାଗୁଡ଼ିକ ନ ତଳେ ଅଛି ଏବଂ ୧୧ କିମ୍ବା ୧୩ ଦ୍ୱାରା ବିଭାଜ୍ୟ ଅଟେ।
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""ଏହି ଫଂସନ ଏକ ତାଲିକା l ନେଇ ଏକ ତାଲିକା l' ଫେରାଇ ଯାହା ଏପରି ଲିଖାଯାଇଛି,
    l' ଅଜନ୍ତା ସଂକେତସାଗରେ l ସହିତ ଏକେ ହେବ, ଯେଉଁଥିରେ ଏହାର ମୂଲ୍ୟ ଜୋଡ଼ି ନିର୍ଦ୍ଦେଶକଗୁଡ଼ିକରେ l ର ମୂଲ୍ୟଗୁଡ଼ିକ ସମାନ ହେବ, କିନ୍ତୁ ଏହାଗୁଡ଼ିକ ସଜାଯାଇଛି।
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    ତିନିଟି ଅକ୍ଷରର ଗୋଷ୍ଠୀଗୁଡିକୁ ପର୍ଯ୍ୟାୟକ୍ରମେ ପରିବର୍ତ୍ତନ କରି ସଂକେତିତ ଷ୍ଟ୍ରିଙ୍ଗକୁ ଫେରାଇ ଦେଇଥାଏ।
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    prime_fib n-ତମ ସଂଖ୍ୟାକୁ ଫେରାଇ ଯାହା ଏକ ଫିବୋନାଚି ସଂଖ୍ୟା ଓ ସେଥାରେ ମୂଖ୍ୟ ହେବ।
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    ଟ୍ରିପଲସ୍_ସମ୍_ଟୁ_ଜିରୋ ଏକ ସୂଚୀକୁ ଇନ୍ପୁଟ୍ ଭାବେ ନିଏ |
ଯଦି ସୂଚୀରେ ଥିବା ତିନିଟି ଭିନ୍ନ ଉପାଦାନ ଶୂନ୍ୟ ସମାନ ହୁଏ, ତେବେ ଏହା ସତ୍ୟ ଫେରାଏ,
ଓ ନାହିଁହେଲେ ମିଥ୍ୟା ଫେରାଏ |

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    ଏକ ସିଧା ସରଳ ଅସୀମ ଲମ୍ବା ରେଖା ଭାବେ ଏକ ରାସ୍ତାକୁ କଳ୍ପନା କରନ୍ତୁ।
    ନ କାର ଗୁଡ଼ିକ ବାମରୁ ଡାହାଣକୁ ଚାଲିଛି; ସମକାଳୀନ ଭାବରେ, ନ କାର ଗୁଡ଼ିକର ଅଲଗା ସେଟ
    ଡାହାଣରୁ ବାମକୁ ଚାଲିଛି। ଦୁଇ ସେଟର କାର ଗୁଡ଼ିକ ଆରମ୍ଭରେ ଏକାଅପରରୁ ଅନେକ ଦୂରରେ ଅଛନ୍ତି। ସମସ୍ତ କାର ସମାନ ଗତିରେ ଗତି କରୁଛନ୍ତି। ବାମରୁ ଡାହାଣକୁ ଯାଉଥିବା ଗାଡ଼ି ଡାହାଣରୁ ବାମକୁ ଯାଉଥିବା ଗାଡ଼ିକୁ ଧକ୍କା ଦେଇଥିଲେ ଦୁଇଟି ଗାଡ଼ି ଧକ୍କା ଖାଇଛି ବୋଲି କୁହାଯାଏ। 
    ତଥାପି, ଗାଡ଼ିଗୁଡ଼ିକ ଅସୀମ ଦୃଢ଼ ଏବଂ ମଜବୁତ ଅଟନ୍ତି; ଫଳସ୍ୱରୁ, ସେମାନେ ତାଙ୍କର ଗତିପଥରେ ଉଣ୍ଟାଇଯାନ୍ତି ଯେପରି ଯେମିତି ସେମାନେ ଧକ୍କା ଦେଇନଥିଲେ।
    
    ଏହି ଫଙ୍କସନ୍ ଏହିପରି ଧକ୍କାର ସଂଖ୍ୟାକୁ ଆଉଟପୁଟ୍ ଦେଇଥାଏ।
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""ତାଲିକାର ତତ୍ତ୍ୱଗୁଡ଼ିକ 1 କରି ବୃଦ୍ଧି ପାଇଥିବା ଅବସ୍ଥାରେ ପୁନଃ ଫେରାଇବେ।
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    ପେୟାର୍ସ ସମ୍ ଟୁ ଜିରୋ ଏକ ଇନ୍ଟିଜର୍ସ ତାଲିକାକୁ ଇନପୁଟ୍ ଭାବେ ନେଇଥାଏ।
    ଏହା ଏକ ତାଲିକାରେ ଦୁଇଟି ଅଲଗା ଉପାଦାନ ରହିଥିଲେ ଯାହା ଯୋଗ କରି ଶୂନ୍ୟ ହୋଇଯାଏ, ତାହା ଫଳସ୍ୱରୂପ ସତ୍ୟ ଦେଇଥାଏ, ନହେଲେ ମିଥ୍ୟା ଫେରାଇଥାଏ।
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""Here is the translation of the given sentences into Odia:

ନମ୍ବର x ଙ୍କର ନ୍ୟୁମେରିକାଲ ଆଧାରକୁ ବଦଳାନ୍ତୁ।
    ପରିବର୍ତ୍ତନ ପରେ ଷ୍ଟ୍ରିଙ୍ଗ ପ୍ରତିନିଧିତ୍ୱ ଫେରାନ୍ତୁ।
    ଆଧାର ସଂଖ୍ୟାଗୁଡ଼ିକ 10 ରୁ କମ୍।
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""ପ୍ରତି ଏକ ପାର୍ଶ୍ୱର ଲମ୍ବ ଏବଂ ଏକ ତ୍ରିଭୁଜର ଉଚ୍ଚତା ଦିଆଯାଇଥିଲେ ତାହାର ଅଞ୍ଚଳ ଫେରାଇବା।
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""Fib4 ସଂଖ୍ୟା ଅନୁକ୍ରମ ଏକ ଅନୁକ୍ରମ ଯାହା ଫିବୋନାଚି ଅନୁକ୍ରମ ସହିତ ମିଳିତ ହୁଏ ଏବଂ ଏହିପରି ଭାବରେ ପରିଭାଷିତ ହୋଇଛି:
    fib4 -> 0
    fib4 -> 0
    fib4 -> 2
    fib4 -> 0
    fib4 -> fib4 + fib4 + fib4 + fib4.
    ଦୟାକରି ଏକ ଫଙ୍କସନ ଲେଖନ୍ତୁ ଯାହା ଦ୍ୱାରା ଫିବ4 ସଂଖ୍ୟା ଅନୁକ୍ରମର n-ତମ ଉପାଦାନକୁ କୁଶଳତାର ସହ ଗଣନା କରିପାରିବ। ପୁନରାବୃତିକୁ ବ୍ୟବହାର କରନ୍ତୁ ନାହିଁ।
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""ୂଚାନ୍ତୁ ତାଲିକା l ରେ ଥିବା ଉତ୍ତରାଧୁନ୍ତ ମୂଲ୍ୟ।
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    ଏହି ଶବ୍ଦରେ ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗ ପ୍ରତିପ୍ରତି ଅଟେ କି ନା ତାହା ଯାଞ୍ଚ କରନ୍ତୁ
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""2^n ରେ ଶେଷ ରାଶିକୁ p ସହିତ ଫେରାନ୍ତୁ।
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    ପ୍ରତ୍ୟାବର୍ତ୍ତନ କରେ ସମସ୍ତ ଅକ୍ଷରକୁ ଅକ୍ଷରମାଳାରେ ୫ ଅକ୍ଷର ସ୍ଥାନାନ୍ତର କରି ଏକ ସଙ୍କେତିକ ଷ୍ଟ୍ରିଙ୍ଗ୍।
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    remove_vowels ଏକ ଫଙ୍କସନ ଯାହା ଏକ ଷ୍ଟ୍ରିଂକୁ ନେଉଛି ଏବଂ ଷ୍ଟ୍ରିଂକୁ ନିର୍ବଣ୍ଦ କରି ଫେରାଇ ଦେଉଛି।
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""ଯଦି ତାଲିକା l ର ସମସ୍ତ ସଂଖ୍ୟା t ଠାରୁ କମ ଥାଏ, ତେବେ True ଫେରାନ୍ତୁ।
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""ଯୁଗ ଦି ନମ୍ବର x ଏବଂ y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    ଦୁଇଟି ଶବ୍ଦରେ ସମାନ ଅକ୍ଷର ଅଛି କି ନାହିଁ ଯାଞ୍ଚ କରନ୍ତୁ।
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""n-ତମ ଫିବୋନାଚ୍ଚି ସଂଖ୍ୟା ଫେରାନ୍ତୁ।
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" ବ୍ରାକେଟଗୁଡ଼ିକ ""<"" ଓ "">"" ର ଏକ ଷ୍ଟ୍ରିଂ ଅଟେ।
    ପ୍ରତ୍ୟେକ ଖୋଲା ବ୍ରାକେଟକୁ ଯଦି ଏକ ସମ୍ବନ୍ଧିତ ବନ୍ଦ ବ୍ରାକେଟ ମିଳିଥାଏ, ତେବେ True ଫେରାଇବ।

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""ଯଦି ତାଲିକାର ଉପାଦାନଗୁଡ଼ିକ ଏକରୂପ ଭାବରେ ବୃଦ୍ଧି ହେଉଛି କିମ୍ବା କମି ଯାଉଛି, ତେବେ True ଫେରତ ଦିଅ।
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""ଦୁଇଟି ତାଲିକା ପାଇଁ ଷ୍ଟ୍ରକ୍ରିତ ଅନନ୍ୟ ସାଧାରଣ ଉପାଦାନଗୁଡିକ ଫେରାଇବେ।
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""n ର ସର୍ବୋତ୍ତମ ପ୍ରାଥମିକ ଗୁଣିତକ ଫେରାଇ ଦିଅ। ଧାରଣ କରନ୍ତୁ n > 1 ଏବଂ ଏକ ପ୍ରାଥମିକ ସଂଖ୍ୟା ନୁହଁ।
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""sum_to_n ଏକ ଫଙ୍କସନ୍ ଯାହା 1 ରୁ n ପର୍ଯ୍ୟନ୍ତ ମାନକୁ ଯୋଗ କରେ।
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" ବ୍ରାକେଟଗୁଡିକ """" ର ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଅଟେ।
ପ୍ରତ୍ୟେକ ଖୋଲା ବ୍ରାକେଟର ସମ୍ବନ୍ଧିତ ବନ୍ଦ ବ୍ରାକେଟ ଥାଏ କି ନାହିଁ ତାହା ଯଦି ସତ୍ୟ ହୁଏ, ତେବେ True ଫିରାନ୍ତୁ।

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" xs ପ୍ରତିକ ଏକ ପୋଲିନୋମିଆଲର କୋଫିସିଏଣ୍ଟଗୁଡ଼ିକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ।
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     ଏହି ପୋଲିନୋମିଆଲର ଡିରିଭେଟିଭ୍ ସେହି ଆକାରରେ ଫେରାଇବ।
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""FibFib ସଂଖ୍ୟା ଅନୁକ୍ରମ ଏକ ଅନୁକ୍ରମ ଯାହା Fibbonacci ଅନୁକ୍ରମ ସହିତ ସଦୃଶ ଯାହା ନିମ୍ନପ୍ରକାର ବିବରଣୀ ଦେଇ ସଂଜ୍ଞା ହୋଇଛି:
    fibfib == 0
    fibfib == 0
    fibfib == 1
    fibfib == fibfib + fibfib + fibfib
    ଦୟାକରି ଏକ ଫଙ୍କ୍ସନ୍ ଲେଖନ୍ତୁ ଯାହା ଦ୍ୱାରା ଫିବଫିବ ସଂଖ୍ୟା ଅନୁକ୍ରମର ନ-ତମ ଉପାଦାନକୁ କୁଶଳତାର ସହିତ ଗଣନା କରାଯାଇପାରେ।
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
ଅଧିକ ପରୀକ୍ଷା ମାମଲା ଯୋଡନ୍ତୁ।
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""ଏକ ଅବ୍ୟକ୍ତି x ର ସଂଖ୍ୟାଗୁଡ଼ିକ କ୍ଷିର୍ଣ୍ଣାକାରେ ସ୍ଥାନାନ୍ତର କରନ୍ତୁ, ସଂଖ୍ୟାଗୁଡ଼ିକୁ ଡାହାଣ ଦିଗକୁ shift ଦ୍ୱାରା ସ୍ଥାନାନ୍ତର କରନ୍ତୁ ଏବଂ ପରିଣାମ ଉପରେ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ରୂପେ ପ୍ରତ୍ୟାବର୍ତ୍ତନ କରନ୍ତୁ।
ଯଦି shift ର ସଂଖ୍ୟା ସଂଖ୍ୟାଙ୍କର ଦିଗରୁ ବେଶୀ ହୁଏ, ତେବେ ସଂଖ୍ୟାଗୁଡ଼ିକୁ ପଛକୁ ଫେରାନ୍ତୁ।
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""Here is the translation of the given sentence into Odia:

ଏକ ଫଙ୍କ୍ସନ୍ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ କୁ ଇନପୁଟ୍ ଭାବେ ନେଉଛି ଏବଂ କେବଳ ବଡ଼ ଅକ୍ଷରଗୁଡ଼ିକର ଏସ୍‌ସିଆଇ କୋଡ୍‌ଗୁଡ଼ିକର ଆଡ଼କୁ ଫେରାଉଛି।

ଉଦାହରଣ:
    digitSum => 0
    digitSum => 131
    digitSum => 67
    digitSum => 69
    digitSum => 131
    digitSum => 153
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    ଏହି କାର୍ଯ୍ୟରେ, ଆପଣଙ୍କୁ ଏକ ସ୍ତ୍ରିଙ୍ଗ୍ ଦିଆଯିବ ଯାହା ଏକ ନମ୍ବରଙ୍କୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଯାହା ଫଳର ଜାଲିରେ ବଣ୍ଟିତ ହୋଇଥିବା ଆପଲ୍ ଏବଂ କମଳା ଫଳକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ। ଏହି ଜାଲିରେ ଆପଲ୍, କମଳା ଏବଂ ଆମ୍ବ ଦିଆଯାଇଛି। ମୋଟ କେତେ ଫଳ ରହିଛି ତାହାକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ସ୍ତ୍ରିଙ୍ଗ୍ ଏବଂ ଜାଲିରେ ମୋଟ କେତେ ଫଳ ଅଛି ତାକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଥିବା ଏକ ପୂର୍ଣ୍ଣାଙ୍କ ଦିଆଯିବ। ଜାଲିରେ ଥିବା ଆମ୍ବ ଫଳର ସଂଖ୍ୟା ଫେରତି ଦିଅନ୍ତୁ।
ଉଦାହରଣ ସହିତ:
fruit_distribution -> 19 - 5 - 6 = 8
fruit_distribution -> 3 - 0 - 1 = 2
fruit_distribution -> 100 - 2 - 3 = 95
fruit_distribution -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    ଦିଆଯାଇଥିବା ଏକ ଆରେ ଯାହା ଗଛର ଏକ ଶାଖାକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ ଯେଉଁଥିରେ ଅସନ୍ଦିଗ୍ଧ ପୂର୍ଣ୍ଣାଙ୍କ ନୋଡ୍ ଅଛି,
    ତୁମର କାମ ହେଉଛି ଏକ ନୋଡ୍ କୁ ଏଠାରୁ ଚୟନ କରି ଏହାକୁ ଫିରାଇବା।
    ଚୟନ କରାଯାଇଥିବା ନୋଡ୍ ହେଉଛି ସବୁଠାରୁ ଛୋଟ ସମଖ୍ୟା ମୂଲ୍ୟ ଥିବା ନୋଡ୍।
    ଯଦି ସମାନ ଛୋଟ ସମଖ୍ୟା ମୂଲ୍ୟ ଥିବା ଅନେକ ନୋଡ୍ ମିଳିଥାଏ, ତେବେ ଯେଉଁ ନୋଡ୍ ଅନ୍ୟ ସବୁଠାରୁ ଛୋଟ ଇଣ୍ଡେକ୍ସ ରଖିଥାଏ ସେହି ନୋଡ୍ କୁ ଚୟନ କର।

    ଚୟନ କରାଯାଇଥିବା ନୋଡ୍ ଏକ ତାଲିକାରେ ଫିରାଇବା ଯାଏ, [ ସବୁଠାରୁ ଛୋଟ ମୂଲ୍ୟ, ଏହାର ଇଣ୍ଡେକ୍ସ ]।
    ଯଦି କୌଣସି ସମଖ୍ୟା ମୂଲ୍ୟ ନାହିଁ କିମ୍ବା ଦିଆଯାଇଥିବା ଆରେ ଖାଲି ଅଛି, ତେବେ [] ଫିରାଇବା।

    Example1:
        Input: [4,2,3]
        Output: [2, 1]
        ବ୍ୟାଖ୍ୟା: 2 ସବୁଠାରୁ ଛୋଟ ସମଖ୍ୟା ମୂଲ୍ୟ ଅଛି, ଏବଂ 2 ଅଧିକ ସବୁଠାରୁ ଛୋଟ ଇଣ୍ଡେକ୍ସ ରଖିଥାଏ।

    Example2:
        Input: [1,2,3]
        Output: [2, 1]
        ବ୍ୟାଖ୍ୟା: 2 ସବୁଠାରୁ ଛୋଟ ସମଖ୍ୟା ମୂଲ୍ୟ ଅଛି, ଏବଂ 2 ଅଧିକ ସବୁଠାରୁ ଛୋଟ ଇଣ୍ଡେକ୍ସ ରଖିଥାଏ। 

    Example3:
        Input: []
        Output: []

    Example4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        ବ୍ୟାଖ୍ୟା: 0 ସବୁଠାରୁ ଛୋଟ ମୂଲ୍ୟ ଅଛି, କିନ୍ତୁ ଦୁଇଟି ଶୂନ୍ୟ ଅଛି,
                     ତେଣୁ ଆମେ ପ୍ରଥମ ଶୂନ୍ୟ କୁ ଚୟନ କରିବା, ଯାହା ସବୁଠାରୁ ଛୋଟ ଇଣ୍ଡେକ୍ସ ରଖିଥାଏ।

    ନିୟମାବଳୀ:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    ତଥ୍ୟଗୁଡିକ ପାଇଁ ଏକ ଅର୍ର ଆରେ ଇନ୍ଟିଜର୍ସ ର ଆରେ ଆର୍ର ର ସମାନ ରଖିବାକୁ କିଏ କିମିନିମମ ଏଲିମେଣ୍ଟ ଗୁଡିକ ତିଆରି କରାଯାଇ ହେବ | ଏକ ପାଲିନ୍ଡ୍ରୋମିକ ଆରେ ହେଉଛି ଏକ ଆରେ ଯାହାକୁ ପଛକୁ ଏବଂ ଆଗକୁ ପଢାଯାଏ | ଏକ ପରିବର୍ତ୍ତନରେ, ଆପଣ ଏକ ଏଲିମେଣ୍ଟକୁ ଯେକୌଣସି ଅନ୍ୟ ଏଲିମେଣ୍ଟରେ ପରିବର୍ତ୍ତନ କରିପାରିବେ |

ଉଦାହରଣ ସ୍ୱରୂପ:
smallest_change == 4
smallest_change == 1
smallest_change == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""ଦିଆଯାଇଥିବା ସଂଖ୍ୟା 3ଟି ପ୍ରାଇମ ନମ୍ବରର ଗୁଣନ ହେଲେ ସତ୍ୟ ଫେରାଇବା ଏବଂ ନହେଲେ ମିଥ୍ୟା ଫେରାଇବା ଏକ ଫଙ୍କସନ୍ ଲେଖନ୍ତୁ।
    ଜାଣିବାକୁ ଯେ 100 ଠାରୁ କମ୍ ଅଛି।
    ଉଦାହରଣ:
    is_multiply_prime == True
    30 = 2 * 3 * 5
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""ତୁମର କାମ ହେଉଛି ଏକ ଫଙ୍କସନ ଲେଖିବା ଯାହା ଏକ ସଂଖ୍ୟା x ଏକ ସରଳ ଶକ୍ତି n ଅଟେ କି ନାହିଁ ତାହା ଫେରାଇବା।
    ଯଦି n**int=x ତେବେ x ଏକ ସରଳ ଶକ୍ତି n ଅଟେ।
    ଉଦାହରଣ ସୂର୍ଯ୍ୟ:
    is_simple_power => true
    is_simple_power => true
    is_simple_power => true
    is_simple_power => false
    is_simple_power => false
    is_simple_power => false
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""ନିମ୍ନଲିଖିତ ବାକ୍ୟକୁ ଓଡ଼ିଆରେ ଅନୁବାଦ କରନ୍ତୁ:

ଆପଣଙ୍କୁ ଏକ ଫଙ୍କସନ୍ ଲେଖିବାକୁ ଦିଆଯାଇଛି ଯାହା ଗୋଟିଏ ହେକ୍ସା ଡିସିମାଲ୍ ସଂଖ୍ୟାକୁ ଏକ ସ୍ତ୍ରିଙ୍ଗ୍ ଭାବେ ଗ୍ରହଣ କରିଥାଏ ଏବଂ ସେହି ହେକ୍ସା ଡିସିମାଲ୍ ସଂଖ୍ୟାର ପ୍ରାଇମ୍ ହେକ୍ସା ଡିଜିଟ୍ ଗୁଡ଼ିକର ସଂଖ୍ୟା ଗଣନା କରିଥାଏ।
ହେକ୍ସା ଡିଜିଟ୍ ଗୁଡ଼ିକ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F।
ପ୍ରାଇମ୍ ସଂଖ୍ୟାଗୁଡ଼ିକ ହେଉଛି 2, 3, 5, 7, 11, 13, 17, ...
ତେଣୁ ଆପଣଙ୍କୁ ନିମ୍ନଲିଖିତ ଡିଜିଟ୍ ଗୁଡ଼ିକର ସଂଖ୍ୟା ନିର୍ଣ୍ଣୟ କରିବାକୁ ପଡ଼ିବ: 2, 3, 5, 7, B, D।
ନୋଟ୍: ଆପଣ ଧାରଣା କରିପାରିବେ ଯେ ଇନପୁଟ୍ ସବୁବେଳେ ସଠିକ୍ କିମ୍ବା ଖାଲି ରହିଥାଏ, ଏବଂ ପ୍ରତୀକଗୁଡ଼ିକ A, B, C, D, E, F ସବୁବେଳେ ବଡ଼ ଅକ୍ଷରରେ ରହିଥାଏ।
ଉଦାହରଣ:
num = ""AB"" ପାଇଁ ଆଉଟପୁଟ୍ 1 ହେବା ଉଚିତ୍।
num = ""1077E"" ପାଇଁ ଆଉଟପୁଟ୍ 2 ହେବା ଉଚିତ୍।
num = ""ABED1A33"" ପାଇଁ ଆଉଟପୁଟ୍ 4 ହେବା ଉଚିତ୍।
num = ""123456789ABCDEF0"" ପାଇଁ ଆଉଟପୁଟ୍ 6 ହେବା ଉଚିତ୍।
num = ""2020"" ପାଇଁ ଆଉଟପୁଟ୍ 2 ହେବା ଉଚିତ୍।
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""ତୁମକୁ ଏକ ନମ୍ବର ଦশମିକ ରୂପରେ ଦିଆଯିବ ଏବଂ ତୁମର କାମ ହେଉଛି ଏହାକୁ ଦ୍ୱିତୀୟିକ ରୂପକୁ ପରିଣତ କରିବା। ଫଙ୍କସନ୍ ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଫେରତ ଦେବା ଉଚିତ, ଯାହାର ପ୍ରତ୍ୟେକ ଅକ୍ଷର ଏକ ଦ୍ୱିତୀୟିକ ନମ୍ବରକୁ ପ୍ରତିନିଧିତ୍ୱ କରିବ। ଷ୍ଟ୍ରିଙ୍ଗର ପ୍ରତ୍ୟେକ ଅକ୍ଷର '0' କିମ୍ବା '1' ହେବ।

ଷ୍ଟ୍ରିଙ୍ଗର ଆରମ୍ଭରେ ଏବଂ ଶେଷରେ 'db' ନାମକ ଅତିରିକ୍ତ ଦୁଇଟି ଅକ୍ଷର ରହିବ। ଫର୍ମାଟ୍ ସହିତ ସହାୟତା ପାଇଁ ଏହି ଅତିରିକ୍ତ ଅକ୍ଷରଗୁଡିକ ରହିଛି।

ଉଦାହରଣ:
decimal_to_binary   # returns ""db1111db""
decimal_to_binary   # returns ""db100000db""
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""ତୁମକୁ ଗୋଟିଏ ଷ୍ଟ୍ରିଂ s ଦିଆଯାଇଛି।
    ତୁମର କାର୍ଯ୍ୟ ହେଉଛି ଷ୍ଟ୍ରିଂ ଖୁସି ଅଛି କି ନାହିଁ ଯାଞ୍ଚ କରିବା।
    ଏକ ଷ୍ଟ୍ରିଂ ତେବେ ଖୁସି ହୁଏ ଯଦି ତାହାର ଲମ୍ବ ଅତିକମରେ 3 ଅଛି ଏବଂ ମନ୍ତ୍ରଣାର 3ଟି ପ୍ରତ୍ୟେକ ଅକ୍ଷର ଅଲଗା ହୁଏ।
    ଉଦାହରଣ ସ୍ୱରୂପ:
    is_happy => ଭୁଲ
    is_happy => ଭୁଲ
    is_happy => ସତ୍ୟ
    is_happy => ଭୁଲ
    is_happy => ସତ୍ୟ
    is_happy => ଭୁଲ
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""ସେମେଷ୍ଟରର ଶେଷ ସପ୍ତାହ ଓ ଶିକ୍ଷିକାକୁ ଛାତ୍ରଛାତ୍ରୀଙ୍କୁ ଗ୍ରେଡ୍ ଦେବାକୁ ପଡ଼ିବ। ଶିକ୍ଷିକା ଗ୍ରେଡ୍ ଦେବା ପାଇଁ ନିଜର ଏକ ଆଲଗୋରିଦମ୍ ତିଆରି କରୁଛନ୍ତି। ଏକମାତ୍ର ସମସ୍ୟା ହେଉଛି, ସେ ଗ୍ରେଡ୍ ଦେବା ପାଇଁ ବ୍ୟବହାର କରିଥିବା କୋଡ୍ ହରାଇଛନ୍ତି। ସେ ତୁମକୁ କିଛି ଛାତ୍ରଛାତ୍ରୀଙ୍କର GPA ତାଲିକା ଦେଇଛନ୍ତି ଓ ତୁମେ ଏକ ଫଙ୍କସନ୍ ଲେଖିବାକୁ ପଡ଼ିବ ଯାହା ଏହି ସୂଚନା ତାଲିକା ଅନୁସାରେ ଲେଟର୍ ଗ୍ରେଡ୍ କାଢ଼ିପାରିବ:
             
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    ଉଦାହରଣ:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""ଏକ ଫଙ୍କ୍ସନ୍ ଲେଖିବେ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ନେଇଥାଏ ଏବଂ ଯଦି ଷ୍ଟ୍ରିଙ୍ଗ୍‌ର ଲମ୍ବ ପ୍ରାଇମ୍ ନମ୍ବର ହୁଏ ତେବେ True ଫେରାଇ ଦିଏ ନାହିଁ ହେଲେ False ଫେରାଇ ଦିଏ
    ଉଦାହରଣସ୍ୱରୂପ
    prime_length == True
    prime_length == True
    prime_length == True
    prime_length == False
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    ଦିଆଯାଇଥିବା ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦ୍ୱାରା, 1 ରୁ ଆରମ୍ଭ କରୁଥିବା କିମ୍ବା 1 ରେ ଶେଷ ହେଉଥିବା n-ଡିଜିଟ୍ ସକାରାତ୍ମକ ସଂଖ୍ୟାଗୁଡ଼ିକର ଗଣନା ଫେରାନ୍ତୁ।
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା N ଦିଆଯାଇଛି, ଏହାର ଅଙ୍କଗୁଡ଼ିକର ମୋଟ ଯୋଗଫ ଦିଅନ୍ତୁ ଏବଂ ଏହାକୁ ଦ୍ୱିଚାରିକ ରୂପରେ ଫେରାନ୍ତୁ।

    ଉଦାହରଣ
        N = 1000 ନିମନ୍ତେ, ଅଙ୍କଗୁଡ଼ିକର ଯୋଗଫ 1 ହେବ ଏବଂ ତାହାର ଫଳାଫଳ ""1"" ହେବ।
        N = 150 ନିମନ୍ତେ, ଅଙ୍କଗୁଡ଼ିକର ଯୋଗଫ 6 ହେବ ଏବଂ ତାହାର ଫଳାଫଳ ""110"" ହେବ।
        N = 147 ନିମନ୍ତେ, ଅଙ୍କଗୁଡ଼ିକର ଯୋଗଫ 12 ହେବ ଏବଂ ତାହାର ଫଳାଫଳ ""1100"" ହେବ।

    ପରିବର୍ତ୍ତନଶୀଳଗୁଡ଼ିକ:
        @N ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା
             ସୀମା: 0 ≤ N ≤ 10000।
    ଆଉଟପୁଟ:
         ଏକ ଦ୍ୱିଚାରିକ ସଂଖ୍ୟାର ଷ୍ଟ୍ରିଙ୍ଗ
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""ଏକ ଖାଲି ନଥିବା ପୂର୍ଣ୍ଣାଙ୍କ ତାଲିକା lst ଦିଆଯାଇଛି। ବିଷମ ସୂଚୀକ ଠାକୁରେ ଥିବା ସମ ଉପାଦାନଗୁଡ଼ିକୁ ଯୋଗ କରନ୍ତୁ।


    ଉଦାହରଣ:
        add ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    ଏକ ଫଙ୍କ୍ସନ୍ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଗ୍ରହଣ କରେ ଏବଂ ଏହାର ଏକ ବ୍ୟବସ୍ଥିତ ସଂସ୍କରଣ ଫେରାଇଥାଏ।
ଷ୍ଟ୍ରିଙ୍ଗ୍ ର ବ୍ୟବସ୍ଥିତ ସଂସ୍କରଣ ହେଉଛି ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଯେଉଁଠାରେ ସମସ୍ତ ଶବ୍ଦ ଏକ ନୂତନ ଶବ୍ଦରେ ପରିବର୍ତ୍ତିତ ହୋଇଥାଏ ଯେଉଁଠାରେ ସମସ୍ତ ଅକ୍ଷରଗୁଡ଼ିକ ଆସିଆଇ ମୂଲ୍ୟ ଆଧାରରେ ଉର୍ଦ୍ଧ୍ୱଗାମୀ କ୍ରମରେ ସଜାଯାଇଛି।
ଟିପ୍ପଣୀ: ଆପଣଙ୍କୁ ବାକ୍ୟରେ ଶବ୍ଦ ଏବଂ ଖାଲି ଜାଗାର କ୍ରମ ରଖିବା ଉଚିତ।

ଉଦାହରଣ ସ୍ୱରୂପ:
anti_shuffle 'Hi' ପ୍ରତ୍ୟାବର୍ତ୍ତନ କରେ
anti_shuffle 'ehllo' ପ୍ରତ୍ୟାବର୍ତ୍ତନ କରେ
anti_shuffle 'Hello !!!Wdlor' ପ୍ରତ୍ୟାବର୍ତ୍ତନ କରେ
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    ଆପଣଙ୍କୁ ଦୁଇ ମାତ୍ରିକ ତଥ୍ୟ ଦିଆଯାଇଛି, ଯାହା ଗୁଣ୍ଡିତ ତାଲିକା ଭାବରେ ଅଛି,
ଯାହା ଅନେକ ଭଳି ମାଟ୍ରିକସ୍ ଭଳି ଅଟେ, ତେବେ, ମାଟ୍ରିକସ୍ ମାନଙ୍କ ଭଳି ନୁହେଁ,
ପ୍ରତ୍ୟେକ ପଙ୍କ୍ତିରେ ଭିନ୍ନ ସଂଖ୍ୟକ ସମସ୍ତ ଅଂଶ ଥାଇପାରିବ।
ଦିଆଯାଇଥିବା ତାଲିକା lst ଏବଂ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା x ଦିଆଯାଇଛି, ତାଲିକାରେ ସଂଖ୍ୟା x କୁ ଖୋଜନ୍ତୁ,
ଏବଂ ଏକ ତାଲିକା ତିଆରି କରନ୍ତୁ ଯାହା ସମନ୍ବୟ - ଭାବରେ ଥାଇବ,
ଯାହା 0 ରୁ ଆରମ୍ଭ ହୋଇଛି।
ସମନ୍ବୟଗୁଡ଼ିକୁ ପ୍ରାରମ୍ଭରେ ଉର୍ଦ୍ଧ୍ବମୁଖୀ ଅନୁକ୍ରମରେ ପଙ୍କ୍ତି ଦ୍ୱାରା ଗଠନ କରନ୍ତୁ।
ସେହିପରି, ପଙ୍କ୍ତିର ମଧ୍ୟରେ ସମନ୍ବୟଗୁଡ଼ିକୁ ଅଂଶରେ ଅବରୋହମୁଖୀ ଅନୁକ୍ରମରେ ଗଠନ କରନ୍ତୁ।

ଉଦାହରଣଗୁଡ଼ିକ:
get_row([
  [1,2,3,4,5,6],
  [1,2,3,4,1,6],
  [1,2,3,4,5,1]
], 1) == [,,,,]
get_row == []
get_row == []
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    ଏକ ନନ୍ଦିତ ଅଂକର ଅରେ ଦିଆଯାଇଛି, ସଜାଣା ପରେ ଦିଆଯାଇଥିବା ଅରେର ଏକ ପ୍ରତିକୃତି ଫେରାଇବେ,
    ଆପଣ ଦିଆଯାଇଥିବା ଅରେକୁ ଜୋଡ଼ିସ୍ଥାନ ବିମାନ ଦ୍ୱାରା ଅଦ୍ଭୁତ ଥିଲେ ଏହାକୁ ଅର୍ଦ୍ଧମିଠାରେ ସଜାଇବେ,
    କିମ୍ବା ଯଦି ଜୋଡ଼ିସ୍ଥାନ ବିମାନ ସମ ଥିଲେ ଏହାକୁ ଅବରୋହଣ କ୍ରମରେ ସଜାଇବେ।

ନୋଟ:
    * ଦିଆଯାଇଥିବା ଅରେକୁ ପରିବର୍ତ୍ତନ କରନ୍ତୁ ନାହିଁ।

ଉଦାହରଣ:
    * sort_array => []
    * sort_array => [5]
    * sort_array => [0, 1, 2, 3, 4, 5]
    * sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""ଏକ ଫଙ୍କସନ ତିଆରି କରନ୍ତୁ ଯାହାକି ଏକ ସ୍ଟ୍ରିଂ କୁ ଏକ ଆର୍ଗୁମେଣ୍ଟ ଭାବରେ ନେଉଛି ଏବଂ ସ୍ଟ୍ରିଂଟି କୁ ଏକ ସଂକେତ ରୂପେ ଫେରାଇ ଦିଏ । 
    ଅକ୍ଷରମାଳାକୁ ଏହିପରି ଭାବରେ ଘୁମାନ୍ତୁ କି ଅକ୍ଷରଗୁଡ଼ିକ ଦୁଇ ଗୁଣ କରିବାରେ ଦୁଇ ସ୍ଥାନ ତଳକୁ ସରେ । 
    ଉଦାହରଣ ସ୍ୱରୂପ:
    encrypt 'lm' କୁ ଫେରାଇ ଦିଏ
    encrypt 'ewhjklnop' କୁ ଫେରାଇ ଦିଏ
    encrypt 'kj' କୁ ଫେରାଇ ଦିଏ
    encrypt 'ix' କୁ ଫେରାଇ ଦିଏ
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    ତୁମକୁ ଗଣନା ସୂଚୀ ଦିଆଯାଇଛି।
    next_smallest ନାମକ ଏକ ଫଙ୍କସନ୍ ଲେଖ |
    ଏହା ସୂଚୀର 2ରା ଛୋଟ ତତ୍ତ୍ଵକୁ ଫେରାଇବ |
    ଯଦି ସେହି ତତ୍ତ୍ଵ ନାହିଁ ତେବେ କିଛି ଫେରାଇବ ନାହିଁ |
    
    next_smallest == 2
    next_smallest == 2
    next_smallest == କିଛି ନାହିଁ
    next_smallest == କିଛି ନାହିଁ
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    ତୁମକୁ ଏକ ଶବ୍ଦର ଷ୍ଟ୍ରିଙ୍ଗ ଦିଆଯିବ, ଏବଂ ତୁମର କାମ ହେଉଛି ଅଧିକ କ୍ଷୁଦ୍ରତାଗୁଡ଼ିକର ସଂଖ୍ୟା ଗଣନା କରିବା। ଏକ କ୍ଷୁଦ୍ରତା ହେଉଛି ଏକ ବାକ୍ୟ ଯାହା ""ମୁଁ"" ଶବ୍ଦରୁ ଆରମ୍ଭ ହୁଏ। ବାକ୍ୟଗୁଡ଼ିକ '.', '?' କିମ୍ବା '!' ଦ୍ୱାରା ସୀମିତ ହୋଇଥାଏ।

ଉଦାହରଣ ସ୍ୱରୂପ:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    Here's the translation of the given sentence into Odia:

```
ଏକ ଫଙ୍କସନ ଲେଖନ୍ତୁ ଯାହା ଏକ ସନ୍ଦେଶ ନେଇଥାଏ ଏବଂ ଏମିତି ଏକ ପ୍ରକାରରେ କୋଡ୍ କରେ 
ଯେ ଏହା ସମସ୍ତ ଅକ୍ଷରର କେସ୍ ସ୍ୱାପ୍ କରେ, ସନ୍ଦେଶର ସମସ୍ତ ସ୍ୱରକ୍ଷରକୁ ଇଂରାଜୀ ବର୍ଣ୍ଣମାଳାରେ 
ସେହି ସ୍ୱରକ୍ଷରର 2 ସ୍ଥାନ ପରେ ଥିବା ଅକ୍ଷର ସହିତ ପରିବର୍ତ୍ତନ କରେ।
କେବଳ ଅକ୍ଷରଗୁଡ଼ିକୁ ଧାରଣ କରନ୍ତୁ।
```
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""ଆପଣଙ୍କୁ ଇଣ୍ଟିଜର୍ସ ର ଏକ ତାଲିକା ଦିଆଯାଇଛି।
    ଆପଣଙ୍କୁ ସବୁଠାରୁ ବଡ଼ ପ୍ରାଇମ୍ ମୂଲ୍ୟ ଖୋଜିବାକୁ ଓ ଏହାର ଅଙ୍କଗୁଡ଼ିକର ଯୋଗଫଳ ଫେରାଇବାକୁ ପଡ଼ିବ।

    ଉଦାହରଣ:
    ଯଦି lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ତେବେ ଫଳାଫଳ ହେବ 10
    ଯଦି lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ତେବେ ଫଳାଫଳ ହେବ 25
    ଯଦି lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ତେବେ ଫଳାଫଳ ହେବ 13
    ଯଦି lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ତେବେ ଫଳାଫଳ ହେବ 11
    ଯଦି lst = [0,81,12,3,1,21] ତେବେ ଫଳାଫଳ ହେବ 3
    ଯଦି lst = [0,8,1,2,1,7] ତେବେ ଫଳାଫଳ ହେବ 7
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    ଏକ ଡିକ୍ସନରୀ ଦିଆଯାଇଛି, ସମସ୍ତ କି ଲୋଅର କେସ୍ ଅଟେ କି ଉପର କେସ୍ ଅଟେ ତେବେ True ଫେରାଇବା ଉଚିତ, ନାହିଁ ହେଲେ False ଫେରାଇବା ଉଚିତ। ଯଦି ଦିଆଯାଇଥିବା ଡିକ୍ସନରୀ ଖାଲି ଅଛି, ତେବେ ଫଙ୍କଶନ False ଫେରାଇବା ଉଚିତ।
ଉଦାହରଣଗୁଡ଼ିକ:
check_dict_case True ଫେରାଇବା ଉଚିତ।
check_dict_case False ଫେରାଇବା ଉଚିତ।
check_dict_case False ଫେରାଇବା ଉଚିତ।
check_dict_case False ଫେରାଇବା ଉଚିତ।
check_dict_case True ଫେରାଇବା ଉଚିତ।
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""ଏକ ଫଙ୍କସନ୍ ନିଷ୍ପାଦନ କରନ୍ତୁ ଯାହା ଏକ ଅପରିବାହ କର୍ମା ନେଇ ଏବଂ ପ୍ରଥମ n ସଂଖ୍ୟାଗୁଡ଼ିକର ଏକ ଏରେ ଫେରାଇ ଯାହାଗୁଡ଼ିକ ପ୍ରାଇମ ସଂଖ୍ୟା ଏବଂ n ଠାରୁ କମ୍ ଅଟେ।
    ଉଦାହରଣ ସ୍ୱରୂପ:
    count_up_to => [2,3]
    count_up_to => [2,3,5,7]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17,19]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""ସଂପୂର୍ଣ୍ଣ କରନ୍ତୁ ଏହି ଫଙ୍କସନ୍ ଯାହା ଦୁଇଟି ପ୍ରାକୃତିକ ସଂଖ୍ୟା ନେଇଥାଏ ଏବଂ ସେଥିର ଅନ୍ତିମ ଅଙ୍କମାନଙ୍କର ଗୁଣନଫଳ ଫେରାଏ।
    ଧାରଣା ଯେ ଇନପୁଟ୍ ସବୁବେଳେ ବୈଧ ହେବ।
    ଉଦାହରଣସବୁ:
    multiply ଫେରାଇବ 16।
    multiply ଫେରାଇବ 72।
    multiply ଫେରାଇବ 0।
    multiply ଫେରାଇବ 20।
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗ `s` ରେ, ସମ ଇଣ୍ଡିସ୍‌ଗୁଡ଼ିକରେ ଥିବା ବଡ଼ ଅକ୍ଷର ଅଚ୍ଛରଗୁଡ଼ିକର ସଂଖ୍ୟା ଗଣନା କର। 

ଉଦାହରଣ ସ୍ୱରୂପ:
count_upper 1 ଫେରାଇ
count_upper 0 ଫେରାଇ
count_upper 0 ଫେରାଇ
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    ଏକ ସକାରାତ୍ମକ ପୁରା ସଂଖ୍ୟା n ଦିଆଗଲା, ତେବେ ତୁମେ n ସ୍ତରର ପାଥରର ଗୋଡ଼ାଉପରି ତିଆରି କରିବାକୁ ପଡ଼ିବ।
    ପ୍ରଥମ ସ୍ତରରେ nଟି ପାଥର ଅଛି।
    ପରବର୍ତ୍ତୀ ସ୍ତରରେ ପାଥରର ସଂଖ୍ୟା ହେଉଛି:
        - ଯଦି n ବିଷମ ସଂଖ୍ୟା ହୁଏ ତେବେ ପରବର୍ତ୍ତୀ ବିଷମ ସଂଖ୍ୟା।
        - ଯଦି n ସମ ସଂଖ୍ୟା ହୁଏ ତେବେ ପରବର୍ତ୍ତୀ ସମ ସଂଖ୍ୟା।
    ତୁମେ ପ୍ରତ୍ୟେକ ସ୍ତରର ପାଥର ଗଣନାକୁ ଏକ ତାଲିକାରେ ଫେରାଇବା, ଯେଉଁଥିରେ ଇଣ୍ଡେକ୍ସ iରେ ଥିବା ପ୍ରତିଟି ଉପାଦାନ ଥାଏ ସ୍ତର ରେ କେତେ ପାଥର ଅଛି।

    ଉଦାହରଣ:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    ତୁମକୁ କମା ବା ସ୍ପେସ୍‌ ଦ୍ୱାରା ବିଭକ୍ତ ହୋଇଥିବା ଶବ୍ଦଗୁଡ଼ିକ ଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ଦିଆଯିବ। ତୁମର କାମ ହେଉଛି ଷ୍ଟ୍ରିଙ୍ଗ୍‌ଟିକୁ ଶବ୍ଦଗୁଡ଼ିକରେ ବିଭକ୍ତ କରି ଏକ ଆରେର ରୂପରେ ପ୍ରତ୍ୟାବର୍ତ୍ତନ କରିବା।

ଉଦାହରଣ ସ୍ୱରୂପ:
words_string == [""Hi"", ""my"", ""name"", ""is"", ""John""]
words_string == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""ଏହି ସଂକ୍ରିୟା ଦୁଇଟି ସକାରାତ୍ମକ ସଂଖ୍ୟା x ଓ y ନେଇଥାଏ ଏବଂ ଏହା ରେଞ୍ଜ [x, y] ଅନ୍ତର୍ଭୁକ୍ତ ସବୁଠାରୁ ବଡ଼ ସାନ୍ନିଧ୍ୟ ସଂଖ୍ୟାକୁ ଫେରାଏ। ଯଦି ଏହିପରି କୌଣସି ସଂଖ୍ୟା ନଥାଏ, ତେବେ ସଂକ୍ରିୟା -1 ଫେରାଇବ।

ଉଦାହରଣ ସ୍ୱରୂପ:
choose_num = 14
choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""ତୁମକୁ ଦୁଇଟି ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଏବଂ m ଦିଆଯାଇଛି, ଏବଂ ତୁମର କାମ ହେଉଛି n ରୁ m ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାମାନଙ୍କର ଗଡ଼ା ହାରାହାରି ହିସାବ କରିବା। ଉତ୍ତରକୁ ସର୍ବନିକଟ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟାକୁ ରାଉଣ୍ଡ କରି, ସେହିକୁ ଦୁଇତି ଅଧାରରେ ପରିବର୍ତ୍ତନ କର। ଯଦି n, m ଠାରୁ ବଡ଼ ଥାଏ, ତେବେ -1 ଫେରାଇବା।
ଉଦାହରଣ:
rounded_avg => ""0b11""
rounded_avg => -1
rounded_avg => ""0b1111""
rounded_avg => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""ଏକ ସାରଣୀ ରେ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣାଙ୍କ x ଦିଆଯାଇଛି। ସମସ୍ତ ଉପାଦାନଗୁଡ଼ିକୁ ଏକ ସଜାଯାଇଥିବା ସାରଣୀ ରେ ଫେରାଇବେ ଯାହାରେ କୌଣସି ସମ ଅଙ୍କ ନାହିଁ।

ନୋଟ୍: ଫେରାଇଥିବା ସାରଣୀକୁ ବୃଦ୍ଧି କ୍ରମରେ ସଜାଯାଇବା ଉଚିତ।

ଉଦାହରଣ ସ୍ୱରୁ:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    ବିଭିନ୍ନ ପ୍ରକାରର ଇଣ୍ଟିଜର ଥିବା ଗୋଟିଏ ଆରେ ଦିଆଯାଇଛି, ଯେଉଁମାନେ 1 ରୁ 9 ମଧ୍ୟରେ ଅଛି ସେଗୁଡ଼ିକୁ ସର୍ଟ କର, ସେଇଥାର ପରେ ପରିଣତ ଆରେ କୁ ଉଲଟାଅ, ଏବଂ ପରେ ପ୍ରତ୍ୟେକ ଡିଜିଟ କୁ ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"" ର ଉଚିତ ନାମରେ ପରିବର୍ତ୍ତନ କର।

ଉଦାହରଣସ୍ୱରୂପ:
  ଆରେ = [2, 1, 1, 4, 5, 8, 2, 3]
        -> ସର୍ଟ ଆରେ -> [1, 1, 2, 2, 3, 4, 5, 8]
        -> ଉଲଟା ଆରେ -> [8, 5, 4, 3, 2, 2, 1, 1]
  ଫେରାଇବାକୁ -> [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]

  ଯଦି ଆରେ ଖାଲି ଥାଏ, ତେବେ ଖାଲି ଆରେ ଫେରାଇବା:
  ଆରେ = []
  ଫେରାଇବା -> []

  ଯଦି ଆରେ ରେ କୌଣସି ଅଜବ ସଂଖ୍ୟା ଥାଏ, ତେବେ ତାକୁ ଅନଦାନ କର:
  ଆରେ = [1, -1, 55]
        -> ସର୍ଟ ଆରେ -> [-1, 1, 55]
        -> ଉଲଟା ଆରେ -> [55, 1, -1]
  ଫେରାଇବା -> ['One']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" ଫଙ୍କସନ f ର ସମ୍ପାଦନ କରନ୍ତୁ ଯାହା n କୁ ଏକ ପ୍ୟାରାମିଟର ଭାବେ ନିଏ,
    ଏବଂ ଏକ ତାଲିକା ଫେରାଇ ଯାହାର ଆକାର n, ଯାହା ଏପରି ହେଉଛି ଯେ ତାଲିକାର ଇନ୍ଡେକ୍ସ i ରେ ଅଂଶର ମୂଲ୍ୟ ହେଉଛି i ର ଫ୍ୟାକ୍ଟୋରିଆଲ ଯଦି i ସମ ହୁଏ
    କିମ୍ବା ଅନ୍ୟଥା 1 ରୁ i ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାମାନଙ୍କର ଯୋଗଫଳ।
    i 1 ରୁ ଆରମ୍ଭ ହୁଏ।
    i ର ଫ୍ୟାକ୍ଟୋରିଆଲ ହେଉଛି 1 ରୁ i ପର୍ଯ୍ୟନ୍ତ ସଂଖ୍ୟାମାନଙ୍କର ଗୁଣିତ।
    ଉଦାହରଣ:
    f == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଯାଇଛି, ଏକ ଟ୍ୟୁପଲ୍ ଫେରତ କରନ୍ତୁ ଯାହାରେ ଏବେଂ ବିଚିତ୍ର ସଂଖ୍ୟାର ପାଲିନ୍ଡ୍ରୋମ ଗୁଡିକ ଅଛି ସେମାନେ ରେଞ୍ଜ ମଧ୍ୟରେ ପଡ଼ିଥାଏ।

ଉଦାହରଣ1:

    ଇନପୁଟ୍: 3
    ଆଉଟପୁଟ୍:
    ବ୍ୟାଖ୍ୟା: 
    ପାଲିନ୍ଡ୍ରୋମ ସଂଖ୍ୟା ହେଉଛି 1, 2, 3। ସେମାନଙ୍କ ମଧ୍ୟରୁ ଗୋଟିଏ ସଂଖ୍ୟା ସମ ଅଟେ ଏବଂ ଦୁଇଟି ସଂଖ୍ୟା ବିଚିତ୍ର ଅଟେ।

ଉଦାହରଣ2:

    ଇନପୁଟ୍: 12
    ଆଉଟପୁଟ୍:
    ବ୍ୟାଖ୍ୟା: 
    ପାଲିନ୍ଡ୍ରୋମ ସଂଖ୍ୟା ହେଉଛି 1, 2, 3, 4, 5, 6, 7, 8, 9, 11। ସେମାନଙ୍କ ମଧ୍ୟରୁ ଚାରିଟି ସଂଖ୍ୟା ସମ ଅଟେ ଏବଂ 6ଟି ସଂଖ୍ୟା ବିଚିତ୍ର ଅଟେ।

ଟୀକା:
    1. 1 <= n <= 10^3
    2. ଫେରାଯାଇଥିବା ଟ୍ୟୁପଲରେ କ୍ରମଶଃ ସମ ଏବଂ ବିଚିତ୍ର ପାଲିନ୍ଡ୍ରୋମ ସଂଖ୍ୟା ଥିବ।
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    Here is the translation of the given sentence into Odia:

```Odia
count_nums ନାମକ ଏକ function ଲେଖନ୍ତୁ ଯାହା ଗୋଟିଏ ଇନ୍ଟିଜର ଆରେ ନେଇ ଏବଂ ଫେରାଇ ଦେଏ
    ସେତେ ଗୁଡ଼ିକ ଉପାଦାନ ଯେଉଁଥିରେ ଆଙ୍କଗୁଡ଼ିକର ଯୋଗ > 0 ଅଛି।
    ଯଦି ଗୋଟିଏ ସଂଖ୍ୟା ନେଗେଟିଭ୍ ଅଛି, ତାହେଲେ ତାହାର ପ୍ରଥମ ସାଇନ୍ କୃତ ଆଙ୍କ ନେଗେଟିଭ୍ ହେବ:
    ଯେପରିକି -123 ରେ ସାଇନ୍ କୃତ ଆଙ୍କଗୁଡ଼ିକ -1, 2, ଏବଂ 3 ଅଛି।
```
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""ଆମର ଏକ ଅରେ 'arr' ଅଛି ଯେଉଁଥିରେ N ଟି ଇଣ୍ଟିଜର arr[1], arr[2], ..., arr[N] ଅଛି। ଅରେ ରେଥିବା ସଂଖ୍ୟାଗୁଡ଼ିକ ଯାହାହେଉଛି ଏକାଏକା ଅନୁସରଣରେ ଥିବ। ତୁମର କାମ ହେଉଛି ଏହା ନିର୍ଣ୍ଣୟ କରିବା ଯେ ଏକ ଆରେକୁ ଅନୁକ୍ରମେ ବ୍ୟବସ୍ଥିତ କରିବା ସମ୍ଭବ କି ନୂହେଁ ଯଦି ନିମ୍ନଲିଖିତ କାର୍ଯ୍ୟକଳାପ ଏହି ଦିଆଯାଇଥିବା ଅରେ ଉପରେ କରାଯାଏ:

    ତୁମକୁ ଯେକୋଣସି ସଂଖ୍ୟାର ରାଇଟ୍ ସିଫ୍ଟ କାର୍ଯ୍ୟକଳାପ କରିବାକୁ ଅନୁମତି ଅଛି।

    ଏକ ରାଇଟ୍ ସିଫ୍ଟ କାର୍ଯ୍ୟକଳାପର ଅର୍ଥ ହେଉଛି ଅରେର ସମସ୍ତ ଉପାଦାନକୁ ଏକ ସ୍ଥାନ ଅଧିକ ଦକ୍ଷିଣ ଦିଗରେ ସ୍ଥାନାନ୍ତର କରିବା। ଅରେର ଶେଷ ଉପାଦାନକୁ ଅରେର ଆରମ୍ଭ ସ୍ଥାନରେ ଅର୍ଥାତ୍ ଜିରୋଥ ଇଣ୍ଡେକ୍ସକୁ ସ୍ଥାନାନ୍ତର କରାଯିବ।

    ଯଦି ଉପର ତଥ୍ୟକୁ କରିବା ମାଧ୍ୟମରେ ବ୍ୟବସ୍ଥିତ ଅରେକୁ ପାଇବା ସମ୍ଭବ ତାହେଲେ True ଫେରାଅ, ନହେଲେ False ଫେରାଅ।
    ଯଦି ଦିଆଯାଇଥିବା ଅରେ ଖାଲି ଅଛି, ତାହେଲେ True ଫେରାଅ।

    ଟିପ୍ପଣୀ: ଦିଆଯାଇଥିବା ତାଲିକାରେ ଏକାଏକା ଉପାଦାନ ଥିବାକୁ ଗ୍ୟାରାଣ୍ଟି ଅଛି।

    ଉଦାହରଣ ସ୍ୱରୂପ:

    move_one_ball==>True
    ବ୍ୟାଖ୍ୟା: 2ଟି ରାଇଟ୍ ସିଫ୍ଟ କାର୍ଯ୍ୟକଳାପ କରିବା ଦ୍ୱାରା, ଦିଆଯାଇଥିବା ଅରେ ପାଇଁ ଅନୁକ୍ରମେ ବ୍ୟବସ୍ଥିତ କରାଯାଇପାରିବ।
    move_one_ball==>False
    ବ୍ୟାଖ୍ୟା: ଏହା ଉପରେ ଯେକେଉଁସି ସଂଖ୍ୟାର ରାଇଟ୍ ସିଫ୍ଟ କାର୍ଯ୍ୟକଳାପ କରିବା ମାଧ୍ୟମରେ ଅନୁକ୍ରମେ ବ୍ୟବସ୍ଥିତ କରିବା ସମ୍ଭବ ନୁହେଁ।
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""ଏହି ସମସ୍ୟାରେ, ତୁମେ ଏକ ଫଙ୍କସନ୍ ଇମ୍ପ୍ଲିମେଣ୍ଟ କରିବାକୁ ପଡିବା ଯାହା ଦୁଇଟି ସୂଚୀ ନମ୍ବର ନେଇଥାଏ, ଏବଂ ଏହା ନିର୍ଣ୍ଣୟ କରେ କଣ ଏହା ସମ୍ଭବ ଯେ ଦୁଇଟି ସୂଚୀ ମଧ୍ୟରୁ ତତ୍ତ୍ବ ବଦଳ କରି ଏମିତି କରାଯାଉ ଯେ lst1 କେବଳ ସମ ନମ୍ବରର ସୂଚୀ ହୋଇଯାଏ। lst1 ଏବଂ lst2 ମଧ୍ୟରେ ବଦଳ କରାଯାଇଥିବା ତତ୍ତ୍ବର ସଂଖ୍ୟାରେ କୌଣସି ସୀମା ନାହିଁ। ଯଦି ଏହା ସମ୍ଭବ ଯେ lst1 ଏବଂ lst2 ମଧ୍ୟରେ ତତ୍ତ୍ବ ବଦଳ କରି lst1 ର ସମସ୍ତ ତତ୍ତ୍ବ ସମ ହୋଇଯାଉ, ତେବେ ""YES"" ଫେରାନ୍ତୁ। ନହେଲେ, ""NO"" ଫେରାନ୍ତୁ। ଉଦାହରଣ ସ୍ୱରୂପ:
exchange => ""YES""
exchange => ""NO""
ଏହା ଧାରଣା କରାଯାଇଛି ଯେ ଇନପୁଟ୍ ସୂଚୀଗୁଡିକ ଖାଲି ନହୋଇପାରେ।
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""ସ୍ପେସ ସହ ଅଲଗା ଥିବା ସମସ୍ତ ଛୋଟ ଅକ୍ଷର ଦେଖାଯାଇଥିବା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଦିଆଯାଇଥିଲେ, ସେହି ଅକ୍ଷରର ସର୍ବାଧିକ ପୁନରାବୃତ୍ତି ସହିତ ଏକ ଡିକ୍‌ସନେରି ଫେରାଅ।
ସେହି ଅକ୍ଷର ଓ ପୁନରାବୃତ୍ତି ସଂଖ୍ୟା ସହିତ ଥିବା ଡିକ୍‌ସନେରି ଫେରାଅ। 
ଯଦି ଅନେକ ଅକ୍ଷର ସମାନ ସଂଖ୍ୟାରେ ଦେଖାଯାଏ, ତାହେଲେ ସମସ୍ତକୁ ଫେରାଅ।

ଉଦାହରଣ:
histogram == {'a': 1, 'b': 1, 'c': 1}
histogram == {'a': 2, 'b': 2}
histogram == {'a': 2, 'b': 2}
histogram == {'b': 4}
histogram == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""କାର୍ଯ୍ୟ
    ଆମକୁ ଦୁଇଟି ସ୍ଟ୍ରିଙ୍ଗ s ଏବଂ c ଦିଆଯାଇଛି, ଆପଣ s ଅଭ୍ୟନ୍ତରୀଣ ଏମିତି ସମସ୍ତ ଅକ୍ଷରଗୁଡ଼ିକୁ ବ୍ୟାପିତ କରିବାକୁ ପଡ଼ିବ ଯେଉଁଠାରେ କ c ର କ any ଣସି ଅକ୍ଷର ସମାନ ଅଛି
    ତାପରେ ଫଳ ଷ୍ଟ୍ରିଙ୍ଗ ପାଲିନ୍ଡ୍ରୋମ୍ କି ନାହିଁ ଯାଞ୍ଚ କରନ୍ତୁ।
    ଗୋଟିଏ ସ୍ଟ୍ରିଙ୍ଗକୁ ପାଲିନ୍ଡ୍ରୋମ୍ କୁହାଯାଏ ଯଦି ଏହା ପଛକୁ ପଢ଼ିବାକୁ ସମାନ ଭାବେ ପଢ଼ାଯାଏ।
    ଆପଣକୁ ଫଳ ସ୍ଟ୍ରିଙ୍ଗ ଏବଂ ଯାଞ୍ଚ ପାଇଁ True/False ସହିତ ଏକ ଟ୍ୟୁପଲ୍ ଫେରାଇବା ଉଚିତ।
    ଉଦାହରଣ
    s = ""abcde"", c = ""ae"" ପାଇଁ, ଫଳ ହେବା ଉଚିତ
    s = ""abcdef"", c = ""b"" ପାଇଁ, ଫଳ ହେବା ଉଚିତ
    s = ""abcdedcba"", c = ""ab"" ପାଇଁ, ଫଳ ହେବା ଉଚିତ
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""ଏକ ତାଲିକା ଦିଆଯାଇଛି ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ସ୍ତ୍ରିଙ୍ଗ କେବଳ ଅଙ୍କଗୁଡ଼ିକରୁ ଗଠିତ, ଏକ ତାଲିକା ଫେରାନ୍ତୁ ।
    ଆଉଟପୁଟର ପ୍ରତ୍ୟେକ ଧରଣରେ i ଏକ ଉଦ୍ଦେଶ୍ୟ ହେବା ଉଚିତ ""ପ୍ରବେଶର i ସ୍ତ୍ରିଙ୍ଗରେ ଅଶୁଂଖ୍ୟ ତତ୍ତ୍ଵଗୁଡ଼ିକର ସଂଖ୍ୟା"" ଯେଉଁଠାରେ ସମସ୍ତ i ଗୁଡ଼ିକୁ ଇନପୁଟର i'ତମ ସ୍ତ୍ରିଙ୍ଗର ଅଶୁଂଖ୍ୟ ଅଙ୍କର ସଂଖ୍ୟାରେ ପରିବର୍ତ୍ତିତ କରାଯିବା ଉଚିତ।

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    ନିଜେକ ଇଣ୍ଟିଜର ଅରେ ଗୋଟିଏ ଅରେରେ ଥିବା ନମ୍ବରଗୁଡ଼ିକର ମଧ୍ୟରୁ ଯେକୌଣସି ଏକ ଖାଲି ନ ଥିବା ସବ୍-ଅରେର ଲଘୁତମ ଯୋଗଫଳ ଖୋଜନ୍ତୁ।
ଉଦାହରଣ
minSubArraySum == 1
minSubArraySum == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    ତୁମକୁ ଏକ ଆୟତାକାର ଗ୍ରିଡ ଦିଆଯାଇଛି ଯେଉଁଥିରେ ପ୍ରତ୍ୟେକ ଶ୍ରେଣୀ ଏକ ଏକକ କୁଏଁକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ,
    ଏବଂ ଏକ ଶ୍ରେଣୀରେ ପ୍ରତ୍ୟେକ 1 ଏକ ଏକକ ପାଣିକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ।
    ପ୍ରତ୍ୟେକ କୁଏଁରେ ଏକ ସମ୍ବନ୍ଧିତ ବାଲ୍ଟି ଥାଏ ଯାହା ଏଥିରୁ ପାଣି କାଢ଼ିବା ପାଇଁ ବ୍ୟବହାର କରାଯାଇପାରେ, 
    ଏବଂ ସମସ୍ତ ବାଲ୍ଟି ଏକେ ମାପର ସମର୍ଥକ ଥାଏ।
    ତୁମର କାମ ହେଉଛି ବାଲ୍ଟି ବ୍ୟବହାର କରି କୁଏଁଗୁଡ଼ିକୁ ଖାଲି କରିବା।
    ବାଲ୍ଟିଗୁଡ଼ିକୁ ତଳକୁ ନିଅବାର ସଂଖ୍ୟାକୁ ଆଉଟପୁଟ କର।

    ଉଦାହରଣ1:
        ଇନପୁଟ: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        ଆଉଟପୁଟ: 6

    ଉଦାହରଣ2:
        ଇନପୁଟ: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        ଆଉଟପୁଟ: 5
    
    ଉଦାହରଣ3:
        ଇନପୁଟ: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        ଆଉଟପୁଟ: 0

    ନିୟମାବଳୀ:
        * ସମସ୍ତ କୁଏଁ ସମାନ ଲମ୍ବର ହେବ
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    ଏହି କାଟାରେ, ତୁମେ ନନ୍ଦାତ୍ମକ ପୂର୍ଣ୍ଣାଙ୍କ ଏକ ଅାରେକୁ ତାଙ୍କର ଦ୍ୱିତୀୟକ ତୁଳନାରେ ଗଣନା କରି ଏକ ପରିପାଟୀରେ ସଜାଉ ଅଛ।
    ସମାନ ଏକ ଗଣନା ପାଇଁ, ଦଶମିକ ମୂଲ୍ୟ ଆଧାରରେ ସଜାଯିବ।

    ଏହାକୁ ଏଭଳି କାର୍ଯ୍ୟାନ୍ୱୟନ କରିବା ଉଚିତ:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""ଦିଏ ଏକ ଷ୍ଟ୍ରିଂ s ଏବଂ ଏକ ପ୍ରାକୃତିକ ସଂଖ୍ୟା n ଦିଆଯାଇଛି, ତୁମକୁ ଏକ ଗୋଟିଏ ଫଂକ୍ସନ୍ ର ସମ୍ପାଦନ କରିବା ପାଇଁ ଦାୟିତ୍ୱ ଦିଆଯାଇଛି ଯାହା ଷ୍ଟ୍ରିଂ s ରୁ ସମସ୍ତ ଶବ୍ଦଗୁଡ଼ିକର ଏକ ତାଲିକା ଫେରାଇବାକୁ ଯାହାଠାରେ ସଠିକ୍ n ସଂଖ୍ୟାର ସଂଯୋଗକ ଅଛି, ଏହି ଶବ୍ଦଗୁଡ଼ିକ s ରେ ଯେପରିକି ଦେଖାଯାଇଛି। 
    ଯଦି ଷ୍ଟ୍ରିଂ s ଖାଲି ଅଛି ତେବେ ଫଂକ୍ସନ୍ ଏକ ଖାଲି ତାଲିକା ଫେରାଇବା ଉଚିତ।
    ଟିପ୍ପଣୀ: ତୁମେ ଧାରଣା କରିପାରିବ ଯେ ଇନପୁଟ୍ ଷ୍ଟ୍ରିଂ କେବଳ ଅକ୍ଷର ଏବଂ ଖାଲି ସ୍ଥାନ ଧାରଣ କରିଛି।
    ଉଦାହରଣସବୁ:
    select_words ==> [""little""]
    select_words ==> [""Mary"", ""lamb""]
    select_words ==> []
    select_words ==> [""world""]
    select_words ==> [""Uncle""]
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""ତୁମକୁ ଗୋଟିଏ ଶବ୍ଦ ଦିଆଯାଇଛି। ତୁମର କାମ ହେଉଛି ଶବ୍ଦର ଡାହାଣ ପାର୍ଶ୍ବରୁ ଦୁଇଟି ଅଲ୍ପବ୍ୟଞ୍ଜନର ମଧ୍ୟରେ ଥିବା ସର୍ବନାମକୁ ଖୋଜିବା।

    ଆରମ୍ଭ ଏବଂ ଶେଷରେ ଥିବା ସ୍ବରକ୍ଷରଗୁଡିକୁ ଗଣନା କରାଯାଇନାହିଁ। ଯଦି ଉପରୋକ୍ତ ସର୍ବନାମ ମିଳିନାହିଁ ତେବେ ଖାଲି ସତ୍ରିଂ ଫେରାଇବା।

    ତୁମେ ଧାରଣା କରିପାରିବ ଯେ ଦିଆଯାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗରେ କେବଳ ଇଂରାଜୀ ଅକ୍ଷର ରହିଛି।

    ଉଦାହରଣ:
    get_closest_vowel ==> ""u""
    get_closest_vowel ==> ""U""
    get_closest_vowel ==> """"
    get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    ଏକ ଇଣ୍ଟିଜର ଆରେ arr ଏବଂ ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା k ଦିଆଯାଇଥିବା ସ୍ଥିତିରେ, arr ରେ ଅଧିକତମ k ସଂଖ୍ୟାଗୁଡ଼ିକ ସହିତ k ଲମ୍ବରେ ଏକ ସଜା ତାଲିକା ଫେରାଇବାକୁ।

ଉଦାହରଣ1:

    ଇନପୁଟ: arr = [-3, -4, 5], k = 3
    ଆଉଟପୁଟ: [-4, -3, 5]

ଉଦାହରଣ2:

    ଇନପୁଟ: arr = [4, -4, 4], k = 2
    ଆଉଟପୁଟ: [4, 4]

ଉଦାହରଣ3:

    ଇନପୁଟ: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
    ଆଉଟପୁଟ: [2]

ଟିପ୍ପଣୀ:
    1. ଆରେର ଲମ୍ବ [1, 1000] ର ରେଞ୍ଜରେ ରହିବ।
    2. ଆରେର ଉପାଦାନଗୁଡ଼ିକ [-1000, 1000] ର ରେଞ୍ଜରେ ରହିବ।
    3. 0 <= k <= len
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""ଏକ ଖାଲି ନ ଥିବା ପାଲି ସଂଖ୍ୟାଗୁଡ଼ିକ ଦିଆଯାଇଛି, ସେଥିରୁ ସମସ୍ତ ଅଜୀବ ସାଙ୍ଖ୍ୟିକ ସାଧାରଣ ସ୍ଥାନଗୁଡ଼ିକର ସମୁଦାୟ ଫେରାନ୍ତୁ।

ଉଦାହରଣ ସବୁ:
solution ==> 12
solution ==> 9
solution ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    ଏକ ଖାଲି ନ ଥିବା ପୁରା ଅଙ୍କ ଅର୍ରର ଏକ ଅର୍ର ଏବଂ ଗୋଟିଏ ପୁରା ଅଙ୍କକ k ଦିଆଯାଇଛି, ଅର୍ରର ପ୍ରଥମ k ଉପାଦାନରୁ ଦୁଇ ଅଙ୍କ ମାନ ଥିବା ଉପାଦାନମାନଙ୍କର ଯୋଗଫ ଫେରାନ୍ତୁ।

ଉଦାହରଣ:

    ଇନପୁଟ: arr = [111,21,3,4000,5,6,7,8,9], k = 4
    ଆଉଟପୁଟ: 24 # 21 ଏବଂ 3 ର ଯୋଗଫ

ସୀମାବଦ୍ଧତା:
    1. 1 <= len <= 100
    2. 1 <= k <= len
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    ଏକ ବାଛିତ ସଂଖ୍ୟା n ଦିଆଯାଇଛି, ସେହି collatz ଅନୁକ୍ରମରେ ବିଚିତ୍ର ସଂଖ୍ୟାଗୁଡ଼ିକ ରହିଥିବା ଏକ ସଜାଯାଇଥିବା ତାଲିକା ଫେରାନ୍ତୁ।

    Collatz ଅନ୍ଧବିଶ୍ୱାସ ଗଣିତରେ ଏକ ଅନ୍ଧବିଶ୍ୱାସ ଯାହା ଏକ ଅନୁକ୍ରମ ସମ୍ବନ୍ଧରେ ଯାଇଥାଏ ଯାହାକୁ ନିମ୍ନରୁ ବର୍ଣ୍ଣିତ କରାଯାଇଛି: ଯେକୌଣସି ବାଛିତ ସଂଖ୍ୟା n ସହିତ ଆରମ୍ଭ କରନ୍ତୁ। ପରେ ପ୍ରତିଟି ପଦାନ୍ତର ପୂର୍ବ ପଦାନ୍ତରରୁ ନିମ୍ନରେ ପ୍ରାପ୍ତ ହୁଏ: ଯଦି ପୂର୍ବ ପଦାନ୍ତର ସମ ସଂଖ୍ୟା ହୁଏ, ତେବେ ପରବର୍ତ୍ତୀ ପଦାନ୍ତର ପୂର୍ବ ପଦାନ୍ତରର ଆଧା ହୁଏ। ଯଦି ପୂର୍ବ ପଦାନ୍ତର ବିଚିତ୍ର ସଂଖ୍ୟା ହୁଏ, ତେବେ ପରବର୍ତ୍ତୀ ପଦାନ୍ତର ପୂର୍ବ ପଦାନ୍ତରର 3 ଗୁଣା ବଢ଼ି 1 ଯୋଗ କରାଯାଇଥାଏ। ଏହାର ଅନ୍ଧବିଶ୍ୱାସ ହେଉଛି ଯେକୌଣସି n ମୂଲ୍ୟ ରହୁଥିଲେ ମଧ୍ୟ, ଅନୁକ୍ରମ ସବୁବେଳେ 1 ରେ ପହଞ୍ଚିବ।

    ଟିପ୍ପଣୀ:
        1. Collatz ହେଉଛି [1]।
        2. ଫେରାଯାଇଥିବା ତାଲିକା ଉନ୍ନତ କ୍ରମରେ ସଜାଯାଇଥିବ।

    ଉଦାହରଣ ସ୍ୱରୂପ:
    get_odd_collatz [1, 5] କୁ ଫେରାଏ # 5 ପାଇଁ collatz ଅନୁକ୍ରମ [5, 16, 8, 4, 2, 1] ଅଟେ, ସେହିପରି ଏକାମାତ୍ର ବିଚିତ୍ର ସଂଖ୍ୟାଗୁଡ଼ିକ ହେଉଛି 1 ଏବଂ 5।
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""ଏକ ଫଂସନ୍ ଲେଖିବାକୁ ହେବ ଯାହା ଦିଆଯାଇଥିବା ତାରିଖ ସ୍ତ୍ରିଙ୍ଗକୁ ଯାଞ୍ଚ କରେ ଏବଂ ତାରିଖ ସଠିକ୍ କି ନୁହେଁ ତାହା ଫେରାଇ ଦେଇଥାଏ। ଯଦି ତାରିଖ ସଠିକ୍ ଥାଏ ତେବେ ସେଟି ଟ୍ରୁ ଫେରାଇ ଦେବ ନାହିଁହେଲେ ଫଲ୍ସ ଫେରାଇ ଦେବ। ତାରିଖ ସଠିକ୍ କୁହାଯାଏ ଯଦି ସମସ୍ତ ନିମ୍ନଲିଖିତ ନିୟମଗୁଡ଼ିକ ପୂରଣ ହୁଏ:
1. ତାରିଖ ସ୍ତ୍ରିଙ୍ଗ ଖାଲି ନ ଥିବା ଉଚିତ।
2. ଦିନଗୁଡ଼ିକ 1 ରୁ କମ୍ ନ ଥିବା ନାହିଁ ବା ମାସ 1, 3, 5, 7, 8, 10, 12 ପାଇଁ 31 ରୁ ଅଧିକ ନ ହେବା ଉଚିତ। ଏବଂ ଦିନଗୁଡ଼ିକ 1 ରୁ କମ୍ ନ ଥିବା ନାହିଁ ବା ମାସ 4, 6, 9, 11 ପାଇଁ 30 ରୁ ଅଧିକ ନ ହେବା ଉଚିତ। ଏବଂ ଦିନଗୁଡ଼ିକ 1 ରୁ କମ୍ ନ ଥିବା ନାହିଁ ବା ମାସ 2 ପାଇଁ 29 ରୁ ଅଧିକ ନ ହେବା ଉଚିତ।
3. ମାସଗୁଡ଼ିକ 1 କମ୍ ନ ହେବା ନାହିଁ ବା 12 ରୁ ଅଧିକ ନ ହେବା ଉଚିତ।
4. ତାରିଖ ଏହି ଫର୍ମାଟରେ ହେବା ଉଚିତ: mm-dd-yyyy

ଉଦାହରଣ ସହିତ:
valid_date => True

valid_date => False

valid_date => False

valid_date => True

valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""ତୁମକୁ ଦୁଇଟି ଅନ୍ତରାଳ ଦିଆଯାଇଛି,
    ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ଅନ୍ତରାଳ ହେଉଛି ଜୁଡ଼ା ଇଣ୍ଟିଜର। ଉଦାହରଣସ୍ୱରୂପ, ଅନ୍ତରାଳ = =।
    ଦିଆଯାଇଥିବା ଅନ୍ତରାଳଗୁଡ଼ିକ ବନ୍ଦ ଅଟେ ଯାହାର ଅର୍ଥ ହେଉଛି ଯେ ଅନ୍ତରାଳ
    ଆରମ୍ଭ ଏବଂ ସମାପ୍ତ ଉଭୟକୁ ସମାବେଶ କରେ।
    ପ୍ରତ୍ୟେକ ଅନ୍ତରାଳ ପାଇଁ, ଧାରଣା କରାଯାଏ ଯେ ଏହାର ଆରମ୍ଭ ତାହାର ସମାପ୍ତର ସମାନ ବା କମ ହୋଇଥାଏ।
    ତୁମର କାର୍ଯ୍ୟ ହେଉଛି ଏଣେଇ ନିର୍ଣ୍ଣୟ କରିବା ଯେ ଏଇ ଦୁଇଟି ଅନ୍ତରାଳର ଅନ୍ତର୍ଭାଗର ଲମ୍ବ
    ଏକ ପ୍ରାଇମ୍ ସଂଖ୍ୟା ଅଟେ କିନା।
    ଉଦାହରଣ ସ୍ୱରୂପ, ଅନ୍ତରାଳ,ର ଅନ୍ତର୍ଭାଗ ହେଉଛି
    ଯାହାର ଲମ୍ବ ହେଉଛି 1, ଯାହା ପ୍ରାଇମ୍ ସଂଖ୍ୟା ନୁହେଁ।
    ଯଦି ଅନ୍ତର୍ଭାଗର ଲମ୍ବ ଏକ ପ୍ରାଇମ୍ ସଂଖ୍ୟା ଅଟେ, ତେବେ ""ହଁ"" ଫେରାଇବ,
    ନାହିଁ ହେଲେ, ""ନା"" ଫେରାଇବ।
    ଯଦି ଏହି ଦୁଇଟି ଅନ୍ତରାଳ ଅନ୍ତର୍ଭୁକ୍ତ ହୋଇନାହିଁ, ତେବେ ""ନା"" ଫେରାଇବ।


    [input/output] ଦୃଷ୍ଟାନ୍ତଗୁଡ଼ିକ:
    intersection,) ==> ""ନା""
    intersection,) ==> ""ନା""
    intersection,) ==> ""ହଁ""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    ତୁମକୁ ଗୋଟିଏ ଇଣ୍ଟିଜର ଅରେ ଆର୍ର ଦିଆଯାଇଛି ଏବଂ ତୁମକୁ ଏହାର
    ପ୍ରତ୍ୟେକ ସଂଖ୍ୟାର ଆକାର ମୂଲ୍ୟର ଯୋଗଫଳ ଏବଂ ସଂକେତଗୁଡ଼ିକର ଗୁଣିତ ଫଳ
    ଫେରାଇବାକୁ ପଡ଼ିବ, ଯାହା 1, -1 କିମ୍ବା 0 ଦ୍ୱାରା ପ୍ରତିନିଧିତ ହୁଏ।
    ଟିପ୍ପଣୀ: ଖାଲି ଆର୍ର ପାଇଁ କିଛି ଫେରାଇବା ନାହିଁ।

    ଉଦାହରଣ:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    ଏକ ଗ୍ରିଡ୍ ଦିଆଯାଇଛି ଯାହାର ଲମ୍ବ ଏବଂ ପ୍ରସ୍ତ ନ ଅଛି ଏବଂ ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା k ଅଛି, ଗ୍ରିଡର ପ୍ରତ୍ୟେକ ସେଲ୍ରେ ଏକ ମୂଲ୍ୟ ଥାଏ। ଗ୍ରିଡର ପ୍ରତ୍ୟେକ ସେଲ୍ରେ [1, N * N] ରେଞ୍ଜର ମଧ୍ୟରେ ଏକ ସଂଖ୍ୟା ଠିକ୍ ବାର ଥାଏ।

ଆପଣଙ୍କୁ ଗ୍ରିଡରେ l ଦୀର୍ଘତାର ସର୍ବନ୍ୟୁନ ପଥ ଖୋଜିବାକୁ ପଡ଼ିବ। ଆପଣ ଯେକୌଣସି ସେଲ୍ରୁ ଆରମ୍ଭ କରିପାରିବେ, ଏବଂ ପ୍ରତ୍ୟେକ ପଦକ୍ଷେପରେ ଆପଣ ଯେକୌଣସି ପଡ଼ୋଶୀ ସେଲ୍କୁ ଯାଇପାରିବେ, ଅର୍ଥାତ୍ ଆପଣ ଆପଣଙ୍କର ବର୍ତ୍ତମାନ ସେଲ୍ ସହିତ ସୀମାନ୍ତରେ ଅଂଶୀଦାର ହେଉଥିବା ସେଲ୍ଗୁଡ଼ିକୁ ଯାଇପାରିବେ।
ଦୟାକରି ଟିପ୍ପଣୀ ନେବେ ଯେ k ଦୀର୍ଘତାର ଏକ ପଥର ଅର୍ଥ ହେଉଛି ନିଜସ୍ଥାନରେ k ସେଲ୍କୁ ଯାଇବା।
ଆପଣ ଗ୍ରିଡ୍ରୁ ବାହାରକୁ ଯାଇପାରିବେ ନାହିଁ।
ଏକ l ଦୀର୍ଘତାର ପଥ A କୁ ଏକ l ଦୀର୍ଘତାର ପଥ B ଠାରୁ କମ୍ ଭାବରେ ବିଚାର କରାଯାଏ ଯଦି A ଏବଂ B ଦ୍ୱାରା ଯାଇଥିବା ସେଲ୍ର ମୂଲ୍ୟଗୁଡ଼ିକର ଅନୁସରଣ କରି ତାଲିକାଗୁଡ଼ିକ ତିଆରି କରିବା ପରେ, lst_A ଅକ୍ଷରାନୁକ୍ରମିକ ଭାବରେ lst_B ଠାରୁ କମ୍ ହେଉଛି, ଅର୍ଥାତ, ଏକ ସଂଖ୍ୟା ଇଣ୍ଡେକ୍ସ i ଅଛି ଯାହାରେ lst_A[i] < lst_B[i] ଏବଂ ଯେକୌଣସି j ପାଇଁ ଆମେ ପାଉଛୁ lst_A[j] = lst_B[j]।
ଏହା ନିଶ୍ଚିତ ଯେ ଉତ୍ତର ଏକକ ଅଟେ।
ଗ୍ରିଡର ପଥ ଦ୍ୱାରା ଯାଇଥିବା ସେଲ୍ର ମୂଲ୍ୟଗୁଡ
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""ଅନ୍ୟେ ସମସ୍ତେ ଫିବୋନାଚ୍ଚି ସିକ୍ୱେନ୍ସ ଜାଣନ୍ତି, ଏହାକୁ ଗତ କିଛି ଶତାବ୍ଦୀରେ ଗଣିତଜ୍ଞମାନେ ଗଭୀର ଭାବେ ଅଧ୍ୟୟନ କରିଥିଲେ। ତେବେ ଲୋକମାନେ ଯାହା ଜାଣନ୍ତି ନାହିଁ ସେହା ହେଉଛି ଟ୍ରିବୋନାଚ୍ଚି ସିକ୍ୱେନ୍ସ।
ଟ୍ରିବୋନାଚ୍ଚି ସିକ୍ୱେନ୍ସକୁ ଏହି ପୁନରାବୃତ୍ତି ସମୀକରଣ ଦ୍ୱାରା ପରିଭାଷିତ କରାଯାଇଛି:
tri = 3
tri = 1 + n / 2, ଯଦି n ସମ ଥାଏ।
tri =  tri + tri + tri, ଯଦି n ବିସମ ଥାଏ।
ଉଦାହରଣ ସୂଚନା:
tri = 1 + = 2
tri = 3
tri = tri + tri + tri
           = 2 + 3 + 3 = 8 
ତୁମକୁ ଜଣାଗଲା ଯେକୌଣସି ଅ-ନେଗେଟିଭ୍ ସଂଖ୍ୟା n, ତୁମକୁ ଟ୍ରିବୋନାଚ୍ଚି ସିକ୍ୱେନ୍ସର ପ୍ରଥମ n + 1 ସଂଖ୍ୟାମାନଙ୍କର ଏକ ତାଲିକା ଫେରାଇବାକୁ ପଡିବ।
ଉଦାହରଣ:
tri = [1, 3, 2, 8]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣାଙ୍କ n ଦିଆଯାଇଛି, ବିଷମ ଅଙ୍କମାନଙ୍କର ଗୁଣନ ଫଳ ଫେରାଇବାକୁ।
ସମସ୍ତ ଅଙ୍କ ସମ ଥିଲେ 0 ଫେରାଇବା।
ଉଦାହରଣ ସ୍ୱରୂପ:
digits == 1
digits == 0
digits == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""ତୁମକୁ ଏକ ସଂଖ୍ୟାର ତାଲିକା ଦିଆଯାଇଛି।
ତୁମେ ଏହି ତାଲିକାରେ ଥିବା ସଂଖ୍ୟାମାନଙ୍କର ବର୍ଗର ଯୋଗଫ ଫେରାଇବାକୁ ପଡିବ,
ପ୍ରତ୍ୟେକ ତତ୍ତ୍ୱକୁ ପ୍ରଥମେ ଉପର ତରଫକୁ ପୂରଣାଙ୍କ ମାନ କରିବାକୁ ପଡିବ।
ଉଦାହରଣ:
ଲିଷ୍ଟ = [1,2,3] ପାଇଁ ଫଳାଫଳ 14 ହେବା ଉଚିତ।
ଲିଷ୍ଟ = [1,4,9] ପାଇଁ ଫଳାଫଳ 98 ହେବା ଉଚିତ।
ଲିଷ୍ଟ = [1,3,5,7] ପାଇଁ ଫଳାଫଳ 84 ହେବା ଉଚିତ।
ଲିଷ୍ଟ = [1.4,4.2,0] ପାଇଁ ଫଳାଫଳ 29 ହେବା ଉଚିତ।
ଲିଷ୍ଟ = [-2.4,1,1] ପାଇଁ ଫଳାଫଳ 6 ହେବା ଉଚିତ।
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""ଏକ ଫଙ୍କସନ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ସେହି ଉପାଦାନର ସବୁଠାରୁ ବଡ଼ ଇଣ୍ଡେକ୍ସ ଫେରାଇବ ଯାହା ତା'ର ପୂର୍ବବର୍ତ୍ତୀ ଉପାଦାନ ସହିତ ସମାନ କିମ୍ବା ତା'ଠାରୁ ଅଧିକ ନୁହେଁ। ଯଦି ଏମିତି କୌଣସି ଉପାଦାନ ନାହିଁ ତେବେ -1 ଫେରାନ୍ତୁ। ଦିଆଯାଇଥିବା ଆରେ ଡୁପ୍ଲିକେଟ୍ ମୂଲ୍ୟ ନାହିଁ।

ଉଦାହରଣଗୁଡ଼ିକ:
can_arrange = 3
can_arrange = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    ଏକ ଫଂସନ୍ ସୃଷ୍ଟି କରନ୍ତୁ ଯାହା ପୂର୍ଣ୍ଣାଂକ, ତିର୍ୟକ ସଂଖ୍ୟା, କିମ୍ବା ପ୍ରକୃତ ଦେଶୀୟ ସଂଖ୍ୟାଗୁଡ଼ିକୁ ଦର୍ଶାଇଥିବା ଷ୍ଟ୍ରିଙ୍ଗ୍ଗୁଡ଼ିକୁ ନେଇଥାଏ ଏବଂ ତାହାର ଦିଆଯାଇଥିବା ଭେରିଏବଳ ଟାଇପରେ ବଡ଼ ଭେରିଏବଳକୁ ଫେରାଇଥାଏ।
ଯଦି ମୂଲ୍ୟଗୁଡ଼ିକ ସମାନ ଅଛି ତେବେ କୌଣସି ମୂଲ୍ୟକୁ ଫେରାଇବେ ନାହିଁ।
ଟୀପ୍ପଣୀ: ଯଦି ପ୍ରକୃତ ଦେଶୀୟ ସଂଖ୍ୟା ଷ୍ଟ୍ରିଙ୍ଗ୍ ଭାବେ ଦର୍ଶା ହୋଇଛି, ତେବେ ଫ୍ଲୋଟିଂ ପଏଣ୍ଟ . ବା , ହୋଇପାରେ।

compare_one â -> 2.5
compare_one â -> ""2,3""
compare_one â -> ""6""
compare_one â -> None
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""ଏହି ନମ୍ବର n କୁ ଠିକ୍ 4ଟି ସକାରାତ୍ମକ ସମ ନମ୍ବରର ଯୋଗଫଳ ରୂପେ ଲେଖାଯିବ କି ନାହିଁ ବିବେଚନା କରନ୍ତୁ
    ଉଦାହରଣ
    is_equal_to_sum_even == ତିକ୍କତ୍ ନୁହେଁ
    is_equal_to_sum_even == ତିକ୍କତ୍ ନୁହେଁ
    is_equal_to_sum_even == ସତ୍ୟ
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""ବ୍ରାଜିଲିୟ ଫ୍ୟାକ୍ଟୋରିଆଲ୍ ନିର୍ଦ୍ଦିଷ୍ଟ ହେଉଛି:
    brazilian_factorial = n! *! *! * ... * 1!
    ଯେଉଁଠାରେ n > 0

    ଉଦାହରଣ ସ୍ୱରୂପ:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    ଏକ string ଟେକ୍ସଟ୍ ଦିଆଯାଇଛି, ଏଥିରେ ସମସ୍ତ ଖାଲି ସ୍ଥାନକୁ underscores ସହିତ ପ୍ରତିସ୍ଥାପନ କରନ୍ତୁ,
    ଏବଂ ଯଦି ଏକ string ରେ 2 ରୁ ଅଧିକ ସମ୍ପର୍କିତ ଖାଲି ସ୍ଥାନ ଅଛି, 
    ତେବେ ସମସ୍ତ ସମ୍ପର୍କିତ ଖାଲି ସ୍ଥାନକୁ - ସହିତ ପ୍ରତିସ୍ଥାପନ କରନ୍ତୁ।
    
    fix_spaces == ""Example""
    fix_spaces == ""Example_1""
    fix_spaces == ""_Example_2""
    fix_spaces == ""_Example-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""ଏକ ଫଙ୍କସନ୍ ତିଆରି କରନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ୍ ନେଇଥାଏ ଯାହା ଫାଇଲ୍ ନାମକୁ ପ୍ରତିନିଧିତ୍ୱ କରେ, ଏବଂ ଫାଇଲ୍ ନାମ ବୈଧ ହେଲେ 'ହଁ' ଏବଂ ନାହିଁ ହେଲେ 'ନା' ଫେରାଇ ଦେଇଥାଏ।
ଏକ ଫାଇଲ୍ ନାମକୁ ବୈଧ ମନାଯାଏ ଯଦି ଏହି ସବୁ ଶର୍ତ୍ତଗୁଡ଼ିକ ପୂରଣ ହୁଏ:
- ଫାଇଲ୍ ନାମରେ ତିନୋଟି ଅଂକ ଠାରୁ ଅଧିକ ନ ଥିବା ଉଚିତ୍।
- ଫାଇଲ୍ ନାମରେ ଠିକ୍ ଏକ ଡଟ୍ '.' ରହିଥିବା ଉଚିତ୍।
- ଡଟ୍ ପୂର୍ବରୁ ଥିବା ସବୁଦିନ୍ ଖାଲି ନ ହୋଇଥିବା ଉଚିତ୍ ଏବଂ ଏହା ଏକ ଲାଟିନ୍ ଅକ୍ଷର ସହିତ ଆରମ୍ଭ ହୋଇଥିବା ଉଚିତ୍।
- ଡଟ୍ ପରେ ଥିବା ସବୁଦିନ୍ ଏହାର ମଧ୍ୟରୁ ଗୋଟିଏ ହେବା ଉଚିତ୍: ['txt', 'exe', 'dll']
ଉଦାହରଣଗୁଡ଼ିକ:
file_name_check # => 'ହଁ'
file_name_check # => 'ନା'
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""ଏହି ଫଙ୍କସନ୍ ଗୋଟିଏ ଇନ୍ଟିଜର୍ ତାଲିକାକୁ ନେବ। ତାଲିକାର ସମସ୍ତ ଏଣ୍ଟ୍ରିଗୁଡ଼ିକ ପାଇଁ, ଫଙ୍କସନ୍ ତାର ଇଣ୍ଡେକ୍ସ୍ ଯଦି 3 ର ଗୁଣିତକ ହୁଏ ତାହେଲେ ଇନ୍ଟିଜର୍ ଏଣ୍ଟ୍ରିକୁ ବର୍ଗ କରିବ ଏବଂ ତାର ଇଣ୍ଡେକ୍ସ୍ ଯଦି 4 ର ଗୁଣିତକ ହୁଏ ଏବଂ 3 ର ଗୁଣିତକ ନୁହେଁ ତେବେ ଇନ୍ଟିଜର୍ ଏଣ୍ଟ୍ରିକୁ ଘନ କରିବ। ଫଙ୍କସନ୍ ତାଲିକାର ସେଉଁ ସମସ୍ତ ଏଣ୍ଟ୍ରିଗୁଡ଼ିକୁ ପରିବର୍ତ୍ତନ କରିବ ନାହିଁ ଯେଉଁଗୁଡ଼ିକର ଇଣ୍ଡେକ୍ସ୍ 3 କିମ୍ବା 4 ର ଗୁଣିତକ ନୁହେଁ। ଫଙ୍କସନ୍ ତାଲିକାର ସମସ୍ତ ଏଣ୍ଟ୍ରିଗୁଡ଼ିକର ଯୋଗଫଳକୁ ଫେରାଇବ।

ଉଦାହରଣଗୁଡ଼ିକ:
lst = [1,2,3] ପାଇଁ ଫଳାଫଳ 6 ହେବା ଉଚିତ
lst = [] ପାଇଁ ଫଳାଫଳ 0 ହେବା ଉଚିତ
lst = [-1,-5,2,-1,-5] ପାଇଁ ଫଳାଫଳ -126 ହେବା ଉଚିତ
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    ନିମ୍ନଲିଖିତ ବାକ୍ୟକୁ ଓଡ଼ିଆରେ ଅନୁବାଦ କରନ୍ତୁ:

ଆପଣଙ୍କୁ ଏକ ଶୃଙ୍ଖଳା ଦିଆଯାଇଛି ଯାହା ଏକ ବାକ୍ୟକୁ ପ୍ରତିନିଧିତ୍ୱ କରୁଛି, 
ଏହି ବାକ୍ୟରେ କିଛି ଶବ୍ଦ ଅଛି ଯାହା ଏକ ଖାଲି ସ୍ଥାନ ଦ୍ୱାରା ପୃଥକ କରାଯାଇଛି, 
ଏବଂ ଆପଣଙ୍କୁ ଏକ ଶୃଙ୍ଖଳା ଫେରାଇବାକୁ ପଡ଼ିବ ଯାହାରେ ମୂଳ ବାକ୍ୟରୁ ସେହି ଶବ୍ଦଗୁଡ଼ିକ ଥିବା ଜରୁରି ଯାହାର ଲମ୍ବ ମୁଖ୍ୟ ସଂଖ୍ୟା ଅଟେ, 
ନୂତନ ଶୃଙ୍ଖଳାରେ ଶବ୍ଦଗୁଡ଼ିକର ଅନୁକ୍ରମ ମୂଳ ବାକ୍ୟ ପରମାଣିକ ହେବା ଉଚିତ।

ଉଦାହରଣ1:
    ଇନପୁଟ: ବାକ୍ୟ = ""This is a test""
    ଆଉଟପୁଟ: ""is""

ଉଦାହରଣ2:
    ଇନପୁଟ: ବାକ୍ୟ = ""lets go for swimming""
    ଆଉଟପୁଟ: ""go for""

ସୀମାବଧାନଗୁଡ଼ିକ:
    * 1 <= ବାକ୍ୟର ଲମ୍ବ <= 100
    * ବାକ୍ୟରେ କେବଳ ଅକ୍ଷର ରହିଛି
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""Here is a Python function to simplify the given expression `x * n`, where `x` and `n` are fractions represented as strings:

```python
from fractions import Fraction

def simplify:
    # Convert the string representations of fractions to Fraction objects
    frac_x = Fraction
    frac_n = Fraction
    
    # Multiply the two fractions
    result = frac_x * frac_n
    
    # Check if the result is a whole number
    return result.denominator == 1

# Test cases
print)  # Output: True
print)  # Output: False
print) # Output: False
```

### Explanation:
1. **Fraction Conversion**: The `Fraction` class from the `fractions` module is used to convert the string representations of the fractions into `Fraction` objects. This allows for easy manipulation and arithmetic operations with fractions.
2. **Multiplication**: The two fractions are multiplied together.
3. **Whole Number Check**: The result of the multiplication is a `Fraction` object. To determine if this result is a whole number, we check if the denominator of the result is `1`.

#### Example:
- For `simplify`:
  - `frac_x` = `1/5`
  - `frac_n` = `5/1`
  - `result` = `1/5 * 5/1` = `1`
  - Since `1` is a whole number, the function returns `True`.
  
- For `simplify`:
  - `frac_x` = `1/6`
  - `frac_n` = `2/1`
  - `result` = `1/6 * 2/1 = 2/6 = 1/3`
  - Since `1/3` is not a whole number, the function returns `False`.
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    ଦିଆଯାଇଥିବା ପୂର୍ବାନୁକ୍ରମ ଅନୁସାରେ ସମାନ ଅଂକ ସମିତ ସମାନ ସଂଖ୍ୟା ଥିଲେ ଏହାକୁ ସଜାଇବା ପାଇଁ ଏକ ଫଙ୍କ୍ସନ୍ ଲେଖନ୍ତୁ।
    ଦୃଷ୍ଟାନ୍ତ ସ୍ୱରୂପ:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""ଏକ ଫଙ୍କସନ୍ ଲେଖନ୍ତୁ ଯାହା ଏକ ନମ୍ବରର ଆରେକ୍ସ ନେଇଥାଏ ଏବଂ ଫେରାଇ ଦେଇଥାଏ ଆରେକ୍ସର ସେଇ ଏଲେମେଣ୍ଟଗୁଡ଼ିକ ଯେଉଁଗୁଡ଼ିକ 10 ରୁ ବଡ଼ ଏବଂ ଯାହାର ପ୍ରଥମ ଏବଂ ଶେଷ ଡିଜିଟ୍ ଅକ୍କି ଅଟେ।
ଉଦାହରଣ ସ୍ୱରୂପ:
specialFilter => 1 
specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    ତୁମକୁ ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣ ସଂଖ୍ୟା n ଦିଆଯାଇଛି। ତୁମେ ଏକ ଇନ୍ଟିଜର ଆରେ a ତିଆରି କରିବାକୁ ପଡିବ ଯାହାର ଲମ୍ବ n।
        ପ୍ରତ୍ୟେକ i ପାଇଁ, a[i] = i * i - i + 1 ର ମୂଲ୍ୟ ହେବ।
        ଏବଂ ତୁମେ ତିନୋଟି ତ୍ରିମୂର୍ତ୍ତି ଗଣନା କରିବାକୁ ପଡିବ ଯେଉଁଥିରେ i < j < k,
    ଏବଂ a[i] + a[j] + a[k] 3 ର ଗୁଣିତକ ହେବ।

    ଉଦାହରଣ:
        ଇନ୍ପୁଟ୍: n = 5
        ଆଉଟ୍ପୁଟ୍: 1
        ବ୍ୟାଖ୍ୟା:
        a = [1, 3, 7, 13, 21]
        ଏକମାତ୍ର ମାନ୍ୟ ତ୍ରିମୂର୍ତ୍ତି ହେଉଛି।
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""ଏକ ଫଙ୍କସନ ଲେଖନ୍ତୁ ଯାହା ଏକ ତାଲିକାର ଷ୍ଟ୍ରିଙ୍ଗ୍‌ଗୁଡିକୁ ପାରାମିଟର ଭାବରେ ଗ୍ରହଣ କରିବା,
    ସେଥିରୁ ବିଷମ ଲମ୍ବାଇର ଷ୍ଟ୍ରିଙ୍ଗ୍‌ଗୁଡିକୁ ହଟାଇବା,
    ଏବଂ ଫଳିତ ତାଲିକାକୁ ଏକ ଗଠନାବଦ୍ଧ କ୍ରମରେ ଫେରାଇବା,
    ତାଲିକା ସବୁବେଳେ ଷ୍ଟ୍ରିଙ୍ଗ୍‌ଗୁଡିକର ତାଲିକା ହେବ ଏବଂ କେବେଠି ନମ୍ବରର ଏକ ଆର୍ରେ ନୁହଁ,
    ଏବଂ ଏଥିରେ ଦୁଇତି ମିଳିତ ଥାଇପାରେ।
    ତାଲିକାର କ୍ରମ ହେବା ଉଚିତ ପ୍ରତ୍ୟେକ ଶବ୍ଦର ଲମ୍ବାଇ ଅନୁସାରେ ଆରୋହି କ୍ରମରେ,
    ଏବଂ ଆପଣ ତାଲିକାକୁ ସେହି ନୀତି ଅନୁସାରେ ଗଠନାବଦ୍ଧ କ୍ରମରେ ଫେରାଇବା ଉଚିତ।
    ଯଦି ଦୁଇଟି ଶବ୍ଦର ସମାନ ଲମ୍ବାଇ ଥାଏ, ତାଲିକାକୁ ଅକ୍ଷରକ୍ରମ ଅନୁସାରେ କ୍ରମିତ କରନ୍ତୁ।
    ଫଙ୍କସନକୁ ଗଠନାବଦ୍ଧ କ୍ରମରେ ଷ୍ଟ୍ରିଙ୍ଗ୍‌ଗୁଡିକର ଏକ ତାଲିକା ଫେରାଇବା ଉଚିତ।
    ଆପଣ ଧାରଣା କରିପାରିବେ ଯେ ସବୁ ଶବ୍ଦ ସମାନ ଲମ୍ବାଇର ହେବ।
    ଉଦାହରଣ ସ୍ୱରୂପ:
    assert list_sort => [""aa""]
    assert list_sort => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""ଏକ ସରଳ ପ୍ରୋଗ୍ରାମ ଯାହା n ପ୍ରାଇମ ସଂଖ୍ୟା ହେଲେ x ର ମୂଲ୍ୟ ଫେରାଇବ ଏବଂ ଅନ୍ୟଥା y ର ମୂଲ୍ୟ ଫେରାଇବ।

ଉଦାହରଣସ୍ୱରୂପ:
x_or_y == 34
x_or_y == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""ମୁଁ ଭାବୁଛି ଆମେ ସମସ୍ତେ ସେ ଅନୁଭବକୁ ମନେ ପକାଇପାରୁଛୁ ଯେଵେ ଅନେକ ସମୟ ଧରି ଅପେକ୍ଷା କରୁଥିବା କୌଣସି ଘଟଣାର ଫଳାଫଳ ଅବଶେଷରେ ଜଣାପଡ଼େ। ସେ ସମୟରେ ଆପଣଙ୍କର ଥିବା ଭାଵନା ଓ ଚିନ୍ତାଗୁଡ଼ିକ ନିଶ୍ଚିତ ଭାବରେ ଲେଖିବା ଓ ତୁଳନା କରିବା ଯୋଗ୍ୟ। 
ଆପଣଙ୍କର କାମ ହେଉଛି ଜଣାଇବା ଯେ କୌଣସି ବ୍ୟକ୍ତି ମ୍ୟାଚ୍ ଗୁଡ଼ିକର ଫଳାଫଳ ସଠିକ୍ ଭାବରେ ଅନୁମାନ କରିଛି କି ନାହିଁ। ଆପଣଙ୍କୁ ସମାନ ଲମ୍ବ ଥିବା ଦୁଇଟି ସ୍କୋର୍ ଓ ଅନୁମାନର ଆରେ ଦିଆଯାଇଛି, ଯେଉଁଠାରେ ପ୍ରତ୍ୟେକ ଇଣ୍ଡେକ୍ସ ଏକ ମ୍ୟାଚ୍ ଦେଖାଏ। ପ୍ରତ୍ୟେକ ଅନୁମାନ କେତେ ଦୂର ଭୁଲ ଥିଲା ତାହା ଦେଖାଉଥିବା ସମାନ ଲମ୍ବ ଥିବା ଏକ ଆରେ ଫେରାଇବେ। ଯଦି ସେମାନେ ଠିକ୍ ଅନୁମାନ କରିଥିଲେ, ମୂଲ୍ୟ ହେବ 0, ଏବଂ ଯଦି ନୁହେଁ, ମୂଲ୍ୟ ହେବ ଅନୁମାନ ଓ ସ୍କୋରର ଅବସୋଲୁଟ୍ ତାରତମ୍ୟ। 

ଉଦାହରଣ:

compare -> [0,0,0,0,3,3]
compare -> [4,4,1,0,0,6]
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""ଆପଣଙ୍କୁ ଏକ କ୍ଲାସର ନାମ ଏବଂ ଏକ ଗୋଟିଏ ଏକ୍ସଟେଞ୍ସନ୍ସର ତାଲିକା ଦିଆଯିବ।
ଏକ୍ସଟେଞ୍ସନ୍ସଗୁଡିକୁ କ୍ଲାସକୁ ଅତିରିକ୍ତ କ୍ଲାସଗୁଡିକୁ ଲୋଡ୍ କରିବା ପାଇଁ ବ୍ୟବହାର କରାଯିବ। 
ଏକ୍ସଟେଞ୍ସନର ଶକ୍ତି ନିମ୍ନରେ ଦିଆଯାଇଥିବା ପ୍ରକାରେ ହେଉଛି: CAP ଥାଏ ଏକ୍ସଟେଞ୍ସନର ନାମର ମୁଣ୍ଡା କାପିଟାଲ୍ ଅକ୍ଷରଗୁଡ଼ିକର ସଂଖ୍ୟା ଏବଂ SM ଥାଏ ଏକ୍ସଟେଞ୍ସନ୍ସର ନାମର ଛୋଟ ଅକ୍ଷରଗୁଡ଼ିକର ସଂଖ୍ୟା, ଶକ୍ତି ଦିଆଯାଇଛି CAP - SM ଦ୍ୱାରା। 
ଆପଣ ଶକ୍ତିଶାଳୀ ଏକ୍ସଟେଞ୍ସନକୁ ଖୋଜିବା ଉଚିତ୍ ଏବଂ ଏହି ଫର୍ମାଟରେ ଏକ ସ୍ତ୍ରିଙ୍ଗ ଫେରାଇବା ଉଚିତ୍:
ClassName.StrongestExtensionName।
ଯଦି ସେଇ ଏକ୍ସଟେଞ୍ସନର ଶକ୍ତି ସମାନ ଥାଏ, ତେବେ ଆପଣ ପ୍ରଥମେ ତାଲିକାରେ ଆସିଥିବା ଏକ୍ସଟେଞ୍ସନକୁ ବାଛିବା ଉଚିତ୍।
ଉଦାହରଣ ସ୍ୱରୂପ, ଯଦି ଆପଣଙ୍କୁ ""Slices"" କ୍ଲାସ ଏବଂ ଏକ୍ସଟେଞ୍ସନଗୁଡିକର ଏକ ତାଲିକା ଦିଆଯାଇଛି: ['SErviNGSliCes', 'Cheese', 'StuFfed'] ତେବେ ଆପଣକୁ 'Slices.SErviNGSliCes' ଫେରାଇବା ଉଚିତ୍ ଯେହେତୁ 'SErviNGSliCes' ଶକ୍ତିଶାଳୀ ଏକ୍ସଟେଞ୍ସନ। 
ଉଦାହରଣ:
Strongest_Extension == 'my_class.AA'
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""ତୁମକୁ 2ଟି ଶବ୍ଦ ଦିଆଯାଇଛି। ଯଦି ଦ୍ୱିତୀୟ ଶବ୍ଦ କିମ୍ବା ଏହାର କୌଣସି ଘୃଷ୍ଟନ ଦ୍ୱାରା ମୂଳ ଶବ୍ଦର ଉପଶବ୍ଦ ହୋଇଥାଏ, ତେବେ ସତ୍ୟ ଫେରାଇବାକୁ ଆବଶ୍ୟକ।

    cycpattern_check => False
    cycpattern_check => True
    cycpattern_check => False
    cycpattern_check => True
    cycpattern_check => False
    cycpattern_check => True

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""ଏକ ପୂର୍ଣ୍ଣାଂକ ଦିଆଯାଇଛି। ଏକ ଟ୍ୟୁପଲ ଫେରାଇବା ଯାହାରେ କ୍ରମକ୍ରମେ ଯୁଗ୍ମ ଏବଂ ବିଚିତ୍ର ଅଙ୍କମାନଙ୍କର ସଂଖ୍ୟା ଥାଏ।

     ଉଦାହରଣ:
        even_odd_count ==>
        even_odd_count ==>
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    ଏକ ସକାରାତ୍ମକ ପୂର୍ଣ୍ଣାଙ୍କ ଦିଆଯାଇଥିଲେ, ତାର ରୋମାନ୍ ସଂଖ୍ୟାର ସମାନତା ଏକ ଷ୍ଟ୍ରିଙ୍ଗ ଆକାରରେ ପ୍ରାପ୍ତ କରନ୍ତୁ ଏବଂ ଏହାକୁ ଛୋଟ ଅକ୍ଷରରେ ଫେରାନ୍ତୁ।
    ପ୍ରତିବନ୍ଧନା: 1 <= ସଂଖ୍ୟା <= 1000

    ଉଦାହରଣ:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""ନିମ୍ନଲିଖିତ ବାକ୍ୟକୁ ଓଡିଆରେ ଅନୁବାଦ କରନ୍ତୁ:

ଏକ ଫଙ୍କସନ୍ ଲେଖନ୍ତୁ ଯାହା ଏକ ଷ୍ଟ୍ରିଙ୍ଗର ତାଲିକାକୁ ଗ୍ରହଣ କରେ। ଏହି ତାଲିକାରେ ଭିନ୍ନ ଭିନ୍ନ ଶବ୍ଦ ଥାଏ। ସ୍ୱତନ୍ତ୍ର ଅକ୍ଷରର ସର୍ବାଧିକ ସଂଖ୍ୟା ଥିବା ଶବ୍ଦକୁ ଫେରାନ୍ତୁ। ଯଦି ଅନେକ ଷ୍ଟ୍ରିଙ୍ଗରେ ସର୍ବାଧିକ ସଂଖ୍ୟାର ସ୍ୱତନ୍ତ୍ର ଅକ୍ଷର ରହିଥାଏ, ତେବେ ଯିଏ ଧାଡ଼ାନୁସାରେ ପ୍ରଥମେ ଆସେ ତାହାକୁ ଫେରାନ୍ତୁ।

find_max == ""string""
find_max == ""enam""
find_max == ""aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    ତୁମେ ଜଣେ ଭୋକା ଖରାଗୋଶ, ଏବଂ ତୁମେ ଏକ ନିର୍ଦ୍ଦିଷ୍ଟ ସଂଖ୍ୟକ ଗାଜର ଖାଇଚ, 
    କିନ୍ତୁ ଏବେ ତୁମେ ଦିନର ଭୋଜନ ସମ୍ପୂର୍ଣ୍ଣ କରିବା ପାଇଁ ଅଧିକ ଗାଜର ଖାଇବାକୁ ଆବଶ୍ୟକ |
    ତୁମେ ଏକ ଆରେକ ଫେରାଇବା ଉଚିତ [ ତୁମର ଭୋଜନ ପରେ ଖାଇଥିବା ମୋଟ ଗାଜର ସଂଖ୍ୟା,
                                    ତୁମର ଭୋଜନ ପରେ ଅବଶିଷ୍ଟ ଗାଜର ସଂଖ୍ୟା ]
    ଯଦି ପର୍ଯ୍ୟାପ୍ତ ଅବଶିଷ୍ଟ ଗାଜର ନାହିଁ, ତେବେ ତୁମେ ସମସ୍ତ ଅବଶିଷ୍ଟ ଗାଜର ଖାଇଦିବ, କିନ୍ତୁ ତୁମେ ଏବେ ସୁଦ୍ଧା ଭୋକା ରହିବ |

    ଉଦାହରଣ:
    * eat -> [11, 4]
    * eat -> [12, 1]
    * eat -> [11, 0]
    * eat -> [7, 0]

    ଭେରିଏବଲ୍‌ସ:
    @number : ପୂର୍ବାଦୃଶ୍ୟ
        ତୁମେ ଏତେ ଗାଜର ଖାଇଥିଲ |
    @need : ପୂର୍ବାଦୃଶ୍ୟ
        ତୁମେ ଏତେ ଗାଜର ଖାଇବାକୁ ଆବଶ୍ୟକ |
    @remaining : ପୂର୍ବାଦୃଶ୍ୟ
        ଅବଶିଷ୍ଟ ଗାଜର ଯାହା ଷ୍ଟକରେ ଅଛି |

    ନିୟମ:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    ଆନନ୍ଦ କର :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    ଏହି ବାକ୍ୟଟିକୁ ଓଡ଼ିଆ ଭାଷାରେ ଅନୁବାଦ କରନ୍ତୁ:

ଦୁଇଟି ତାଲିକା ଦିଆଯାଇଛି ଓପାରେଟର ଏବଂ ଓପାରେଣ୍ଡ। ପ୍ରଥମ ତାଲିକାରେ ମୂଳ ଗଣିତ ଅଭିକ୍ରିୟା ଅଛି, ଏବଂ ଦ୍ୱିତୀୟ ତାଲିକାଟି ହେଉଛି ପୂର୍ଣ୍ଣାଙ୍କ ସୂଚୀ। ଏହି ଦୁଇଟି ତାଲିକାକୁ ବ୍ୟବହାର କରି ଗଣିତ ଅଭିକ୍ରିୟା ତିଆରି କରନ୍ତୁ ଏବଂ ଏହି ଅଭିକ୍ରିୟାର ପରୀକ୍ଷା ଫଳ ଫେରାନ୍ତୁ।

ମୂଳ ଗଣିତ ଅଭିକ୍ରିୟାଗୁଡ଼ିକ:
ଯୋଗ 
ବିୟୋଗ 
ଗୁଣନ 
ତଳ ବିଭାଜନ 
ଘାତ 

ଉଦାହରଣ:
operator['+', '*', '-']
array = [2, 3, 4, 5]
result = 2 + 3 * 4 - 5
=> result = 9

ଟିପ୍ପଣୀ:
    ଓପାରେଟର ସୂଚୀର ଲମ୍ବ ଓପାରେଣ୍ଡ ସୂଚୀର ଲମ୍ବ ମାଇନସ ଏକ ସମାନ।
    ଓପାରେଣ୍ଡ ହେଉଛି ଅସନ୍ଦିଗ୍ଧ ପୂର୍ଣ୍ଣାଙ୍କମାନଙ୍କର ସୂଚୀ।
    ଓପାରେଟର ସୂଚୀରେ କମ୍ ସେ କମ୍ ଗୋଟିଏ ଓପାରେଟର ଅଛି, ଏବଂ ଓପାରେଣ୍ଡ ସୂଚୀରେ କମ୍ ସେ କମ୍ ଦୁଇଟି ଓପାରେଣ୍ଡ ଅଛି।

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""ତୁମକୁ ଗୋଟିଏ ସ୍ତ୍ରିଙ୍ଗ୍ s ଦିଆଯାଇଛି।
    ଯଦି s[i] ଗୋଟିଏ ଅକ୍ଷର ହୁଏ, ତାହେଲେ ତାହାର ଖଣ୍ଡକୁ ନିମ୍ନ ରୁ ଉପରକୁ କିମ୍ବା ଉପର ରୁ ନିମ୍ନକୁ ପଲଟ, 
    ନହେଲେ ଏହାକୁ ଯେମିତି ଅଛି ସେମିତି ରଖ।
    ଯଦି ସ୍ତ୍ରିଙ୍ଗ୍ ରେ କୌଣସି ଅକ୍ଷର ନଥାଏ, ସ୍ତ୍ରିଙ୍ଗ୍ କୁ ପଛୁଆଁ ରୁ ପୁରୁଣାଁ ରେ ପଲଟ।
    ଫଙ୍କସନଟି ଫଳରେ ଥିବା ସ୍ତ୍ରିଙ୍ଗ୍ ରେଟର୍ନ କରିବା ଉଚିତ।
    ଉଦାହରଣ
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    ଏକ ଷ୍ଟ୍ରିଂ 'text' ଦିଆଯାଇଛି, ଏହାର md5 ହାଶ ସମାନ ଷ୍ଟ୍ରିଂ ଫେରତ ଦିଅ।
    ଯଦି 'text' ଏକ ଖାଲି ଷ୍ଟ୍ରିଂ ଅଟେ, ତେବେ None ଫେରତ ଦିଅ।

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    ଦୁଇଟି ସକାରାତ୍ମକ ପୁରା ସଂଖ୍ୟା a ଏବଂ b ଦିଆଯାଇଥିଲେ, ଅନୁକ୍ରମିକ ଅନୁସାରେ a ଏବଂ b ମଧ୍ୟରେ ଥିବା ଜୋଡ଼ ସଂଖ୍ୟାଗୁଡ଼ିକୁ ଫେରାଇବାକୁ।

ଉଦାହରଣ ସୂଚନା:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
