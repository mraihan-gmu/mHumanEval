prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" ກວດເບິ່ງວ່າໃນລາຍຊື່ຂອງຕົວເລກທີ່ໄດ້ໃຫ້ມາ, ມີຕົວເລກສອງຕົວໃດໃກ້ກັນຫຼາຍກວ່າຄ່າທີ່ກຳນົດໄວ້ບໍ່.
ຕົວຢ່າງ:
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" ຂໍ້ມູນປ້ອນໃນຟັງຊັນນີ້ແມ່ນສະໄຕຣິງທີ່ປະກອບມີກຸ່ມຂອງວົງເລັບທີ່ຊ້ອນກັນຫຼາຍກຸ່ມ. ເປົ້າໝາຍຂອງທ່ານແມ່ນແຢກກຸ່ມເຫຼົ່ານັ້ນອອກເປັນສະໄຕຣິງທີ່ຕ່າງກັນແລະສົ່ງຄືນລາຍການຂອງເຫຼົ່ານັ້ນ.
ກຸ່ມທີ່ແຢກອອກມາແມ່ນສົມດຸນ ແລະບໍ່ໄດ້ຊ້ອນກັນຢູ່ພາຍໃນແຕ່ລະກຸ່ມ.
ມອບຄວາມເຫັນຄືນໃຫ້ຄວາມວ່າງໃນສະໄຕຣິງປ້ອນ.
ຕົວຢ່າງ:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    an integer part and decimals.

    Return the decimal part of the number.
    Example:

ໃຫ້ເລກຈຸດລອຍບວກ, ມັນສາມາດແຍກອອກເປັນສ່ວນຂອງເລກເຕັມ ແລະສ່ວນທົ່ວ.

ໃຫ້ຄືນສ່ວນທົ່ວຂອງເລກທີ່ໃຫ້ມາ.
ຕົວຢ່າງ:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" Here's the translation of the given sentence into Lao:

ທ່ານໄດ້ຮັບລາຍການການເພີ່ມເງິນແລະການຖອນເງິນໃນບັນຊີທີ່ເລີ່ມຕົ້ນດ້ວຍຍອດເງິນສູນ. ໜ້າທີ່ຂອງທ່ານແມ່ນການກວດສອບວ່າທີ່ໃດກໍ່ຕາມທີ່ຍອດເງິນຕົວຂອງບັນຊີຕົກຫຼຸດໃຕ້ສູນ, ແລະໃນຈຸດນັ້ນຟັງຊັນຄວນສົ່ງຄືນຄ່າ True. ຖ້າບໍ່ຊັ້ນຄວນສົ່ງຄືນຄ່າ False.
ໂຕຢ່າງ:
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" ສໍາລັບລາຍຊື່ຂອງຕົວເລກທີ່ໃຫ້ມາ, ຄໍານວນ Mean Absolute Deviation ຮອບຈຸດກາງ ຂອງຂໍ້ມູນນີ້.
    Mean Absolute Deviation ແມ່ນຄ່າເຉິ່ງສະເລ່ຍຂອງຄ່າຄວາມແຕກຕ່າງແບບສົມບູນລະໝະລຽດລະວ່າງແຕ່ລະອົງປະກອບແລະຈຸດກາງ:
    MAD = average | x - x_mean |
    ຕົວຢ່າງ:
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
ສອມເອົາຕົວເລກ 'delimeter' ລະຫວ່າງທຸກສອງອົງປະກອບທີ່ຕ່ຳຫຼັງຂອງລາຍຊື່ປ້ອນຂໍ້ມູນ `numbers`
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" ຂໍ້ມູນປ້ອນເຂົ້າໃນຟັງຊັນນີ້ແມ່ນສະຫຼອງສາຍອັກສອນທີ່ແທນດ້ວຍກຸ່ມຫຼາຍໆສໍາລັບວົງເຂົ້າກັນເປັນຊັ້ນໆທີ່ແຍກກັນໂດຍຊ້ອງຫວ່າງ.
    ສໍາລັບແຕ່ລະກຸ່ມ, ຜົນລັບຄືລະດັບທີ່ລຶກທີ່ສຸດຂອງການວົງເຂົ້າກັນເປັນຊັ້ນໆຂອງວົງເດືອນ.
    ຕົວຢ່າງ:) ມີສູງສຸດສອງລະດັບຂອງການວົງເຂົ້າກັນເປັນຊັ້ນໆ ໃນຂະນະທີ່)) ມີສາມ.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" ກັ່ນລາຍການປ້ອນຂໍ້ມູນຂອງສາຍອັກສອນພຽງແຕ່ສິ່ງທີ່ມີສາຍອັກສອນທີ່ໃຫ້ມາ
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" ສໍາລັບລາຍການທີ່ໃຫ້ມາຂອງຈໍານວນເຕັມ, ໃຫ້ສົ່ງຄືນແບບຄູ່ທີ່ປະກອບດ້ວຍຜົນບວກແລະຜົນຄູນຂອງຈໍານວນເຕັມທັງໝົດໃນລາຍການ. 
    ຜົນບວກທີ່ຫວ່າງຄວນຈະເທົ່າກັບ 0 ແລະຜົນຄູນທີ່ຫວ່າງຄວນຈະເທົ່າກັບ 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" ໃນບັນດາລາຍຊື່ເລກສະເພາະ, ສ້າງລາຍຊື່ຂອງຄ່າສູງສຸດໃນແຕ່ລະເວລາທີ່ພົບເຫັນໃນລຳດັບ.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" ທົດສອບວ່າສອຍທີ່ໄດ້ຮັບແມ່ນຄຳທີ່ອ່ານຊ້ອນໄດ້ ຫຼືບໍ່ """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" ໃສ່ຂໍ້ມູນເປັນສອງສາຍອັກສອນ a ແລະ b ທີ່ປະກອບດ້ວຍ 1 ແລະ 0 ເທົ່ານັ້ນ.
    ປະຕິບັດການ XOR ອັກສອນສອງຕົວນີ້ແລະສົ່ງຄືນຜົນລັບກໍເປັນສາຍອັກສອນ.
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" ຈາກລາຍຊື່ຂອງຂໍ້ຄວາມ, ສົ່ງຄືນຂໍ້ຄວາມທີ່ຍາວທີ່ສຸດ. ສົ່ງຄືນຂໍ້ຄວາມອັນດັບທຳອິດໃນກໍລະນີທີ່ມີຫຼາຍຂໍ້ຄວາມທີ່ມີຄວາມຍາວທຽບກັນ. ສົ່ງຄືນຄ່າ None ໃນກໍລະນີທີ່ລາຍຊື່ປ້ອນເປັນຄ່າຫວ່າງ.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" ສົ່ງຄືນຕົວຫານີຍົກຂອງຈໍານວນເຕັມສອງຈຳນວນ a ແລະ b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" ສົ່ງຄືນລາຍຊື່ຂອງຄຳນຳທັງໝົດຈາກສັ້ນທີ່ສຸດໄປຫາຍາວທີ່ສຸດຂອງສາຍອັກສອນທີ່ປ້ອນເຂົ້າ
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" ສົ່ງຄືນສາຍເຊືອກທີ່ມີຕົວເລກທີ່ແບ່ງເປັນຊ່ອງວ່າງເລີ່ມຈາກ 0 ຫາ n ຮວມທັງໝົດ.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" ນຳໃຫ້ string ຫນຶ່ງ, ຊອກຫາວ່າມີຕົວອັກສອນທີ່ແຕກຕ່າງກັນ ຢູ່ຈຳນວນທ່າຍໃດ
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" ຂໍ້ມູນເຂົ້າສູ່ຟັງຊັນນີ້ແມ່ນລະຫັດທີ່ແທນໂນ໊ດດົນຕຣີໃນຮູບແບບ ASCII ພິເສດ.
ວຽກຂອງເຈົ້າແມ່ນການວິເຄາະລະຫັດນີ້ແລະສົ່ງຄືນລາຍຊື່ຂອງໂຕເລກທີ່ຕົງກັບຈໍານວນຈັງຫວະທີ່ແຕ່ລະໂນ໊ດມີອາຍຸ.

ນີ້ແມ່ນຕໍ່ໄປນີ້:
'o' - ໂນ໊ດເຕັມ, ມີອາຍຸສີ່ຈັງຫວະ
'o|' - ໂນ໊ດຄື່ງ, ມີອາຍຸສອງຈັງຫວະ
'.|' - ໂນ໊ດໜຶ່ງສ່ວນສີ່, ມີອາຍຸຫນຶ່ງຈັງຫວະ

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" ຊອກຫາວ່າມີຊັບສະຕຣິງທີ່ກຳນົດໄວ້ປາກົດຢູ່ໃນສະຕຣິງຕົ້ນສະບັບກີ່ຄັ້ງ. ນັບກໍລະນີທີ່ຄາບກັນ.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" ຂໍ້ມູນເຂົ້າເປັນສາກແບ່ງໂດຍຊ່ອງຫວ່າງຂອງຕົວເລກຈາກ 'zero' ຫາ 'nine'.
ທາງເລືອກທີ່ຖືກຕ້ອງແມ່ນ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' ແລະ 'nine'.
ສົ່ງຄືນສາຍອັກຄະລັກທີ່ມີຕົວເລກຈັດລຽງຈາກນ້ອຍຫາໃຫຍ່.
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" ເລືອກແລະສົ່ງຄືນຕົວເລກສອງຕົວທີ່ໃກ້ກັນທີ່ສຸດຈາກລາຍຊື່ເລກທີ່ໃຫ້ມາ ແລະສົ່ງຄືນມັນໃນລຳດັບ.
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" ເນື່ອງຈາກລາຍຊື່ຂອງຕົວເລກ, ປະຍຸກຕົວແປລິເນຍພາບໄປຫາລາຍຊື່ນັ້ນ,
    ເພື່ອໃຫ້ຕົວເລກທີ່ນ້ອຍທີ່ສຸດກາຍເປັນ 0 ແລະຕົວເລກທີ່ໃຫຍ່ທີ່ສຸດກາຍເປັນ 1.
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" กรองรายชื่อที่กำหนดของค่า Python ให้อยู่เฉพาะค่าจำนวนเต็มเท่านั้น
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" Length ການກັບຄືນຂອງສາຍທີ່ໄດ້ຮັບ
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" ສໍາລັບຕົວເລກ n ທີ່ໃຫ້ມາ, ຈົ່ງຫາຕົວເລກທີ່ໃຫຍ່ທີ່ສຸດທີ່ຫາ n ແບ່ງໄດ້ພ້ອມກັນ, ທີ່ໜ້ອຍກວ່າ n.
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" ສົ່ງຄືນລາຍຊື່ຂອງປັດເຈັ້ນທີ່ເປັນປັດເຈັ້ນຂອງຈຳນວນທີ່ໃຫ້ໃນຄຳສັ່ງຈາກນ້ອຍສຸດໄປຫາໃຫຍ່ສຸດ.
    ປັດເຈັ້ນແຕ່ລະອັນຄວນຖືກລາຍຊື່ຈຳນວນເທົາກັບຄວາມຄຽງຄຽງທີ່ມັນປາກົດໃນການແຍກໂຄມ.
    ຈຳນວນປ້ອນຄວນເປັນພຽງພໍກັບຜະລິດຕະພັນຂອງທຸກປັດເຈັ້ນ.
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" ຈາກລາຍຊື່ຕົວເລກທັງໝົດ, ນໍາອອກທຸກອົງປະກອບທີ່ເກີດຂຶ້ນຫຼາຍກວ່າໜຶ່ງຄັ້ງ.
    ຮັກສາລຳດັບຂອງອົງປະກອບທີ່ເຫຼືອຢູ່ໃຫ້ເຫມືອນກັບທີ່ໄດ້ຮັບຂໍ້ມູນເຂົ້າ.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" สำหັບສາຍທີ່ກຳນົດໄວ້, ສະບັບອັກສອນຕົວນ້ອຍເປັນຕົວໃຫຍ່ ແລະຕົວໃຫຍ່ເປັນຕົວນ້ອຍ.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" ປະສານລາຍຊື່ສາຍຂໍ້ຄວາມເຂົ້າຫາກັນໃຫ້ເປັນຂໍ້ຄວາມເສັ້ນດຽວ
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" กรองรายการป้อนข้อมูลของสตริงที่มีเฉพาะสตริงที่ขึ้นต้นด้วยคำนำหน้าที่กำหนด
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""ໃຫ້ສົ່ງກັບຄືນພຽງແຕ່ເລກບວກໃນລາຍຊື່.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""ສົບຜົນກັບຄວາມຈິງຖ້າຕົວເລກທີ່ໃຫ້ມາເປັນຈຳນວນເລກທີ່ຫາອອກຍາກ, ແລະຜົນກັບຄວາມເທັດຖ້າບໍ່ແມ່ນ.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    ຄິດໄລ່ຄ່າຂອງພຣະຫຍາດທີ່ມີຄ່າສະເລ່ຍ xs ໃນຈຸດ x.
    ຜົນຄື xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""ຟັງຊັນນີ້ຮັບລາຍການ l ແລະສົ່ງຄືນລາຍການ l' ດຸດດັ່ງນີ້:
    l' ເປັນລາຍການທີ່ມີຄວາມເຫມືອນກັບ l ຢູ່ບ່ອນທີ່ບໍ່ແບ່ງໄດ້ດ້ວຍສາມ, ໃນຂະນະທີ່ຄ່າຂອງມັນຢູ່ບ່ອນທີ່ແບ່ງໄດ້ດ້ວຍສາມຈະເທົ່າກັບຄ່າຂອງບ່ອນທີ່ກ່ຽວຂ້ອງຂອງ l, ແຕ່ໄດ້ຖືກຈັດລຽງແລ້ວ.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""ສົ່ງຄືນອົງປະກອບທີ່ບໍ່ຊໍ້ກັນແລະຖືກຈັດລຽງໃນລາຍການ
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""ສົ່ງຄືນອົງປະກອບທີ່ມີຄ່າຫຼາຍທີ່ສຸດໃນລາຍການ.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""ສົ່ງຄືນຈຳນວນເທົາໃດທີ່ເລກທີ່ 7 ປາກົດຢູ່ໃນຈຳນວນເຕັມທີ່ນ້ອຍກວ່າ n ແລະຖືກຫານໄດ້ດ້ວຍ 11 ຫຼື 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""ຟັງຊັນນີ້ຮັບລາຍຊື່ l ແລະສົ່ງຄືນລາຍຊື່ l' ເຊັ່ນວ່າ
    l' ຄືກັນກັບ l ໃນຕົວຊີ້ວັດຄີ່, ໃນຂະນະທີ່ຄ່າຂອງມັນຢູ່ຕົວຊີ້ວັດຄູ່ເທົ່າກັບ
    ຄ່າຂອງຕົວຊີ້ວັດຄູ່ຂອງ l, ແຕ່ຖືກລຽງລຳດັບ.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    ສົ່ງຄືນສາຍອັກສອນທີ່ໄດ້ຮັບການເຂົ້າລະຫັດໂດຍການສັບປຽນກຸ່ມຂອງຕົວອັກສອນສາມຕົວ.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    prime_fib ສົ່ງຄືນໝາຍເລກທີ n ທີ່ເປັນໝາຍເລກ Fibonacci ແລະມັນກໍ່ເປັນໝາຍເລກຂອງປົວຫຍ້າ.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    `triples_sum_to_zero` ໃຊ້ລາຍການຂອງຕົວເລກທັງຫມົດເປັນຂໍ້ມູນໃສ່.
    ມັນຈະສົ່ງຄືນ `True` ຖ້າມີສາມອົງປະກອບທີ່ແຕກຕ່າງກັນໃນລາຍການທີ່
    ມີຜົນບວກກັນເທົ່າກັບສູນ, ແລະ `False` ຖ້າບໍ່ມີ.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    ຈິນຕະນາການຖະໜົນຫນຶ່ງທີ່ເປັນເສັ້ນຕົງແມ່ນເສັ້ນທີ່ຍາວໄປຢ່າງບໍ່ມີທີ່ສິ້ນສຸດ. ມີລົດ n ຄັນກຳລັງຂັບຈາກຊ້າຍໄປຂວາ; ໃນເວລາດຽວກັນ, ມີຊຸດລົດ n ຄັນທີ່ຕ່າງກຳລັງຂັບຈາກຂວາໄປຊ້າຍ. ລົດສອງຊຸດເລີ່ມຕົ້ນຢູ່ຫ່າງກັນຫຼາຍ. ລົດທຸກຄັນເຄື່ອນຕົວດ້ວຍຄວາມໄວທີ່ເທົ່າກັນ. ລົດສອງຄັນຖືກເວົ້າວ່າປະທະກັນເມື່ອລົດທີ່ກຳລັງຂັບຈາກຊ້າຍໄປຂວາປະທະກັບລົດທີ່ກຳລັງຂັບຈາກຂວາໄປຊ້າຍ. ແຕ່ຢ່າງໃດກໍຕາມ, ລົດແມ່ນແຂງແຮງຢ່າງບໍ່ມີທີ່ສິ້ນສຸດ; ຜົນທີ່ໄດ້ມາ, ພວກເຂົາຈະຍັງຄົງເຄື່ອນຕົວໃນເສັ້ນທາງຂອງພວກເຂົາເຫມືອນວ່າບໍ່ມີການປະທະກັນ.

ຟັງຊັນນີ້ຈະໃຫ້ຜົນລັບເປັນຈຳນວນຂອງການປະທະທີ່ເກີດຂຶ້ນ.
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""ກັບຄືນລາຍການດ້ວຍອົງປະກອບໃຫ້ເພີ່ມຂຶ້ນ 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero ຮັບລາຍການຈຳນວນເຕັມເປັນຕົວເຂົ້າ.
    ມັນຈະສົ່ງຄືນຄ່າ True ຖ້າມີອົງປະກອບທີ່ແຕກຕ່າງກັນສອງຕົວໃນລາຍການທີ່ມີຜົນລວມເທົ່າກັບສູນ, ແລະ False ຖ້າບໍ່ມີ.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""ປ່ຽນຖານເລກຂອງເລກປ້ອນ x ເປັນຖານທີ່ກຳນົດ.
    ສົ່ງຄືນຕົວແທນໂຕໜັງສືຫຼັງຈາກການປ່ຽນແປງ.
    ຖານເລກຕ່າກວ່າ 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""ໃຫ້ຄວາມຍາວຂອງດ້ານໜຶ່ງແລະຄວາມສູງ, ຈະຄືນພື້ນທີ່ຂອງສາມຫຼ່ຽມ.
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""ລຳດັບເລກ Fib4 ແມ່ນລຳດັບທີ່ຄ້າຍຄືກັບລຳດັບ Fibonacci ເຊິ່ງຖືກກຳນົດໄວ້ດັ່ງນີ້:
    fib4 -> 0
    fib4 -> 0
    fib4 -> 2
    fib4 -> 0
    fib4 -> fib4 + fib4 + fib4 + fib4.
    ກະລຸນາຂຽນຟັງຊັນເພື່ອຄຳນວນອົງປະກອບທີ n ຂອງລຳດັບເລກ fib4 ຢ່າງມີປະສິດທິພາບ. ຢ່າໃຊ້ຟັງຊັນທີ່ມີຄວາມຍ້ອນກັນ.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""ສົ່ງຄືນຄ່າກາງຂອງອົງປະກອບໃນລາຍການ l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    ກວດສອບວ່າສາຍອັກສອນທີ່ໄດ້ໃຫ້ເປັນຄຳທີ່ອ່ານກົງກັນກັບຄຳເພື່ອນ
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""ສົ່ງຄືນ 2^n ຫາງດ້ວຍ p.
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    ກັບຄືນສາຍຂໍ້ມູນທີ່ຖືກລະຫັດໂດຍການເລື່ອນທຸກຕົວອັກສອນໂດຍ 5 ໃນຕົວອັກສອນ.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    remove_vowels ເປັນຟັງຊັນທີ່ເອົາຂໍ້ຄວາມມາແລະສົ່ງຄືນຂໍ້ຄວາມທີ່ບໍ່ມີສະຫລະ.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""ສົ່ງຄືນ True ຖ້າຫາກວ່າຕົວເລກທັງໝົດໃນລາຍຊື່ l ຢູ່ພາຍລຸ່ມຄ່າທີ່ກໍານົດ t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""ເພີ່ມຕົວເລກສອງໂຕ x ແລະ y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    ກວດເບິ່ງວ່າສອງຄໍານີ້ມີຕົວອັກສອນດຽວກັນຫຼືບໍ່.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""ສົ່ງກັບເລກ Fibonacci ລຳດັບທີ n.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" วงเล็บคือสตริงของ ""<"" และ "">"".
    ສົມຄວນ return True ຖ້າທຸກວົງເປີດມີຄູ່ປິດທີ່ຕອງກັນ.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""ສົ່ງຄືນຄວາມຈິງຖ້າສ່ວນປະກອບຂອງລາຍຊື່ເພີ່ມຂຶ້ນຫຼືລົງຢ່າງຕໍ່ເນື່ອງ.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""ສົ່ງຄືນອົງປະກອບທີ່ມີລຳດັບ ແລະ ມີຄ່າແຕກຕ່າງກັນ ທີ່ມີຮ່ວມກັນສຳຫຼັບລາຍການສອງລາຍການ.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""ສົ່ງຄືນປັດໃຫຍ່ທີ່ສຸດຂອງ n. ສົງໄສວ່າ n > 1 ແລະບໍ່ແມ່ນຈຳນວນປັດ.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""sum_to_n ແມ່ນຟັງຊັນທີ່ບວກຕົວເລກຈາກ 1 ຫາ n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" วงเล็บเป็นสตริงของ """".
    คืนค่า True หากทุกวงเล็บเปิดมีวงเล็บปิดที่ตรงกัน.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" xs ແທນຄ່າສະເພາະຂອງພຣາຊະນີເອກ.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     ສົ່ງຄືນອະນຸພົບຂອງພຣາຊະນີເອກນີ້ໃນຮູບແບບດຽວກັນ.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""ລໍາດັບຈໍານວນ FibFib ແມ່ນລໍາດັບທີ່ເໝືອນກັບລໍາດັບ Fibonacci ທີ່ຖືກກໍານົດໄວ້ດັ່ງນີ້:
    fibfib == 0
    fibfib == 0
    fibfib == 1
    fibfib == fibfib + fibfib + fibfib.
    ກະລຸນາຂຽນຟັງຊັນເພື່ອຄໍານວນອົງປະກອບທີ n ຂອງລໍາດັບຈໍານວນ fibfib ຢ່າງມີປະສິດທິພາບ.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
ເພີ່ມກໍລະນີທົດສອບເພີ່ມເຕີມ.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""ເລື່ອນວົງມົນໄປຂວາໃຫ້ສະໝັດຂອງ x, ປ່ຽນຕົວເລກໄປຂວາໂດຍ shift ແລະສົ່ງຄືນຜົນທີ່ເປັນ string.
    ຖ້າ shift ຫຼາຍກວ່າຈຳນວນຕົວເລກ, ສົ່ງຄືນຕົວເລກທີ່ກັບຄືນ.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""ວຽກ
    ຂຽນຟັງຊັນທີ່ຮັບສາຍອັກສອນເປັນຂໍ້ມູນເຂົ້າ ແລະສົ່ງຄືນຜົນບວກຂອງລະຫັດ ASCII ຂອງອັກສອນຕົວໃຫຍ່ເທົ່ານັ້ນ.

    ໂຕຢ່າງ:
        digitSum => 0
        digitSum => 131
        digitSum => 67
        digitSum => 69
        digitSum => 131
        digitSum => 153
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    ສຳລັບວຽກງານນີ້, ເຈົ້າຈະໄດ້ຮັບສາຍຂໍ້ຄວາມທີ່ແທນດ້ວຍຈໍານວນແອັບເປິ້ນແລະສົ້ມທີ່ຖືກແບ່ງຢູ່ໃນກະຕ່າພື້ນເມືອງນີ້. ກະຕ່ານີ້ປະກອບດ້ວຍກ້ອນແອັບເປິ້ນ, ສົ້ມ, ແລະໝາກມັງໂກ. ສົມມຸດເຖິງສາຍຂໍ້ຄວາມທີ່ແທນດ້ວຍຈໍານວນລວມຂອງສົ້ມແລະແອັບເປິ້ນແລະເລກຈໍານວນທັງໝົດຂອງຜົນໄມ້ທັງໝົດຢູ່ໃນກະຕ່າ, ກັບຄືນຈໍານວນຂອງຫມາກມັງໂກຢູ່ໃນກະຕ່າ.

ຕົວຢ່າງ:
- fruit_distribution -> 19 - 5 - 6 = 8
- fruit_distribution -> 3 - 0 - 1 = 2
- fruit_distribution -> 100 - 2 - 3 = 95
- fruit_distribution -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    ""ເນື່ອງໃຫ້ມີອາເຣເຢເຊີບັບບັນຫະຂອງຕົ້ນໄມ້ທີ່ມີເລກທີ່ບໍ່ເປັນຄ່າລົບ
    ຫມູ່ຂອງທ່ານແມ່ນຕ້ອງເລືອກເອົາເອງຂອງຄ່າເລກໜຶ່ງແລະກັບຄືນມາມັນ.
    ຄ່າເລກທີ່ເລືອກອອກມາແມ່ນເປັນເລກຄູ່ທີ່ມີຄ່າໜ້ອຍທີ່ສຸດ.
    ຖ້າຫາກວ່າພົບຫຼາຍຕົວທີ່ມີຄ່າເລກຄູ່ທີ່ໜ້ອຍທີ່ສຸດເດັດການໃຫ້ເລືອກອອກມາທີ່ມີດັດຊີ້ທີ່ຫນ້ອຍທີ່ສຸດ.

    ຄ່າເລກທີ່ເລືອກອອກມາຄວນຈະກັບຄືນໃຫ້ຢູ່ໃນຮູບແບບລາຍຊື່, [ ຄ່າໜ້ອຍທີ່ສຸດ, ດັດຊີ້ຂອງມັນ ],
    ຖ້າບໍ່ມີຄ່າເລກຄູ່ຫລືອາເຣເຢເປັນຫວ່າງ, ກັບຄືນມາ [].

    ຕົວຢ່າງ1:
        ອິນພຸດ: [4,2,3]
        ອອກພຸດ: [2, 1]
        ຄຳອະທິບາຍ: 2 ມີຄ່າເລກຄູ່ທີ່ຫນ້ອຍທີ່ສຸດ, ແລະ 2 ມີດັດຊີ້ທີ່ຫນ້ອຍທີ່ສຸດ.

    ຕົວຢ່າງ2:
        ອິນພຸດ: [1,2,3]
        ອອກພຸດ: [2, 1]
        ຄຳອະທິ
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    ທີ່ໃຫ້ອາເລເຢ໌ arr ຂອງຈຳນວນເຕັມ, ຈົ່ງຫາຈຳນວນຕ່ຳທີ່ສຸດຂອງອົງປະກອບທີ່ຕ້ອງປ່ຽນແປງເພື່ອໃຫ້ອາເລເຢ໌ນັ້ນເປັນອາເລເຢ໌ພາລານທຣີມິກ. ອາເລເຢ໌ພາລານທຣີມິກແມ່ນອາເລເຢ໌ທີ່ອ່ານໄດ້ເຫມືອນກັນບໍ່ວ່າຈະອ່ານຈາກຊ້າຍໄປຂວາຫຼືຈາກຂວາໄປຊ້າຍ. ໃນການປ່ຽນແປງເທື່ອດຽວ, ທ່ານສາມາດປ່ຽນອົງປະກອບໜຶ່ງເປັນອົງປະກອບອື່ນໃດກໍໄດ້.

ຕົວຢ່າງ:
smallest_change == 4
smallest_change == 1
smallest_change == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""ຂຽນຟັງຊັນເພື່ອສົ່ງຄືນຄ່າ true ຖ້າເລກທີ່ໃຫ້ມາເປັນການຄູນກັນຂອງເລກຄ່າສາມປະຈຳ
ຖ້າບໍ່ແມ່ນຄືນຄ່າ false.
ຮູ້ວ່າ ມີຄ່ານ້ອຍກວ່າ 100.
ຕົວຢ່າງ:
is_multiply_prime == True
30 = 2 * 3 * 5
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""ວຽກຂອງທ່ານແມ່ນການຂຽນຟັງຊັນທີ່ສົ່ງຄືນຄ່າຈິງຖ້າເລກ x ແມ່ນການຍົກກຳລັງງ່າຍຂອງ n ແລະປອມໃນກໍລະນີອື່ນ.
x ແມ່ນການຍົກກຳລັງງ່າຍຂອງ n ຖ້າ n**int=x
ຕົວຢ່າງ:
is_simple_power => ຈິງ
is_simple_power => ຈິງ
is_simple_power => ຈິງ
is_simple_power => ປອມ
is_simple_power => ປອມ
is_simple_power => ປອມ
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""ເຈົ້າໄດ້ຖືກມອບໝາຍໃຫ້ຂຽນຟັງຊັນທີ່ຮັບເລກສະໜອງແບບຮູບແບບເປັນ string ແລະນັບຈໍານວນເລກສະໜອງທີ່ເປັນເລກປຣາຍ໌. 
ເລກສະໜອງແມ່ນ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
ເລກປຣາຍ໌ແມ່ນ 2, 3, 5, 7, 11, 13, 17,...
ດັ່ງນັ້ນເຈົ້າຕ້ອງພິຈາລະນາເລກຕໍ່ໄປນີ້: 2, 3, 5, 7, B, D.
ໝາຍເຫດ: ເຈົ້າອາດຈະສັນນິຖານໄດ້ວ່າການປ້ອນເຂົ້າເປັນຕໍ່າຫລືເປັນ string ວ່າງ, ແລະສັນຍານ A, B, C, D, E, F ແມ່ນເລກທີ່ຕັ້ງຕົ້ນເປັນຕົ້ນເຕີມ.
ຕົວຢ່າງ:
ສໍາລັບ num = ""AB"" ຜົນລັບຄວນຈະເປັນ 1.
ສໍາລັບ num = ""1077E"" ຜົນລັບຄວນຈະເປັນ 2.
ສໍາລັບ num = ""ABED1A33"" ຜົນລັບຄວນຈະເປັນ 4.
ສໍາລັບ num = ""123456789ABCDEF0"" ຜົນລັບຄວນຈະເປັນ 6.
ສໍາລັບ num = ""2020"" ຜົນລັບຄວນຈ
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""ທ່ານຈະໄດ້ຮັບເລກເປັນຮູບແບບທົດສະນິຍົມ ແລະ ຫນ້າທີຂອງທ່ານແມ່ນແປມັນເປັນຮູບແບບບິນາຣີ. ຫນ້າທີຂອງຟັງຊັງຄວນຈະສົ່ງຄືນເປັນສາຍໂຕອັກສອນ, ເຫມືອນແຕ່ລະຕົວອັກສອນທີ່ສະແດງເລກບິນາຣີ. ແຕ່ລະຕົວອັກສອນໃນສາຍຈະເປັນ '0' ຫຼື '1'.

ຈະມີຕົວອັກສອນພິເສດສອງຕົວ 'db' ຢູ່ຕົ້ນແລະທ້າຍຂອງສາຍ. ຕົວອັກສອນພິເສດເຫຼົ່ານັ້ນມີໄວ້ເພື່ອຊ່ວຍໃນການຈັດຮູບແບບ.

ຕົວຢ່າງ:
decimal_to_binary   # returns ""db1111db""
decimal_to_binary   # returns ""db100000db""
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""ທ່ານໄດ້ຮັບ string s.
ຫນ້າທີ່ຂອງທ່ານແມ່ນການກວດສອບວ່າ string ນັ້ນມີຄວາມສຸກຫຼືບໍ່.
string ບໍ່ທຳໃຫ້ມີຄວາມສຸກຖ້າມັນມີຄວາມຍາວຢ່າງຫນ້ອຍ 3 ແລະທຸກ 3 ຕົວໜັງສືຕິດຕໍ່ກັນບໍ່ເຫມືອນກັນ
ຕົວຢ່າງ:
is_happy => False
is_happy => False
is_happy => True
is_happy => False
is_happy => True
is_happy => False
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""Here's the translation of the given sentence into Lao:

ເປັນອາທິດສຸດທ້າຍຂອງພາກຮຽນແລະຄູຈະຕ້ອງໃຫ້ຄະແນນແກ່ນັກຮຽນ. ຄູໄດ້ສ້າງອັລກອຣິທຶມຂອງຕົນເອງສຳລັບການໃຫ້ຄະແນນ. ບັນຫາດຽວຄືວ່າ, ລາວເສຍລະຫັດທີ່ລາວໃຊ້ສຳລັບການໃຫ້ຄະແນນ. ລາວໄດ້ໃຫ້ລາຍຊື່ GPA ຂອງນັກຮຽນບາງຄົນແລະເຈົ້າຕ້ອງຂຽນຟັງຊັນທີ່ສາມາດໃຫ້ລາຍຊື່ຄະແນນໂດຍໃຊ້ຕາຕະລາງຕໍ່ໄປນີ້:
             GPA       |    ໃຫ້ຄະແນນໂດຍຕົວອັກສອນ
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    ຕົວຢ່າງ:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""ຂຽນຟັງຊັນທີ່ຮັບສາຍຂໍ້ຄວາມແລະສົ່ງຄືນຄ່າ True ຖ້າຄວາມຍາວຂອງສາຍຂໍ້ຄວາມເປັນຈຳນວນເລກຄູ່ຫຼື False ຖ້າບໍ່ແມ່ນ
ຕົວຢ່າງ
prime_length == True
prime_length == True
prime_length == True
prime_length == False
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    ໃຫ້ຄ່າບວກຂອງຈຳນວນເຕັມ n, ກັບຄືນຈຳນວນຂອງຕົວເລກ n ທີ່ເລີ່ມຕົ້ນ ຫຼື ສິ້ນສຸດດ້ວຍ 1.
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""ຖ້າໄດ້ຮັບຕົວເລກທີ່ເປັນບວກ N, ໃຫ້ສົ່ງຄືນຍອດລວມຂອງຫມົດຕົວເລກຂອງມັນໃນຮູບແບບຖານສອງ.

    ຕົວຢ່າງ
        ສໍາລັບ N = 1000, ຍອດລວມຂອງຕົວເລກຈະເປັນ 1 ຜົນລັບຄວນຈະເປັນ ""1"".
        ສໍາລັບ N = 150, ຍອດລວມຂອງຕົວເລກຈະເປັນ 6 ຜົນລັບຄວນຈະເປັນ ""110"".
        ສໍາລັບ N = 147, ຍອດລວມຂອງຕົວເລກຈະເປັນ 12 ຜົນລັບຄວນຈະເປັນ ""1100"".

    ຕົວແປ:
        @N ຕົວເລກທີ່ເປັນຈໍານວນເຕັມ
             ຂໍ້ຈໍາກັດ: 0 ≤ N ≤ 10000.
    ຜົນລັບ:
         ເປັນສາຍຂໍ້ຄວາມຂອງຕົວເລກຖານສອງ
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""ຖ້າມີລາຍຊື່ຂອງເລກຈຳນວນເຕັມ lst ທີ່ບໍ່ຫວ່າງ. ເພີ່ມອົງປະກອບທີ່ເປັນເລກຄູ່ທີ່ຢູ່ດັດຊນີທີ່ເປັນເລກຄີ່.

    ຕົວຢ່າງ:
        add ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    Here's the translation of the given text into Lao:

ຂຽນຟັງຊັນທີ່ຮັບ string ແລະສົ່ງຄືນເປັນສະບັບຮຽງລຽງຂອງ string ນັ້ນ.
ສະບັບຮຽງລຽງຂອງ string ແມ່ນ string ທີ່ມີຄຳທັງຫມົດ
ຖືກແທນທີ່ດ້ວຍຄຳໃໝ່ທີ່ມີຕົວອັກສອນທັງຫມົດຖືກຈັດລຽງ
ຕາມລຳດັບທີ່ເຮັດອີງຕໍ່ຄ່າ ascii.
ໝາຍເຫດ: ເຈົ້າຄວນຮັກສາລຳດັບຂອງຄຳ ແລະຊ່ອງວ່າງໃນປະໂຫຍກ.

ຕົວຢ່າງ:
anti_shuffle ສົ່ງຄືນ 'Hi'
anti_shuffle ສົ່ງຄືນ 'ehllo'
anti_shuffle ສົ່ງຄືນ 'Hello !!!Wdlor'
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    ທ່ານໄດ້ຮັບຂໍ້ມູນສອງມິຕິ, ເປັນລາຍການທີ່ສອດແຊກກັນ, ຊຶ່ງຄ້າຍຄືກັບແມັດຕຣິກ, ແຕ່ຢ່າງໃດກໍຕາມ, ແຕ່ລະແຖວອາດມີຈໍານວນຄໍລຳນ໌ທີ່ແຕກຕ່າງກັນ. ໃຫ້ lst, ແລະ x ເປັນຈໍານວນເຕັມ, ຄົ້ນຫາຈໍານວນ x ໃນລາຍຊື່, ແລະສົ່ງຄືນລາຍຊື່ຂອງຄູ່, [, ...] ເພື່ອໃຫ້ແຕ່ລະຄູ່ເປັນພິລະເມດ -, ເລີ່ມຕົ້ນດ້ວຍ 0. ຈັດລຽງພິລະເມດແຕ່ລະແຖວໂດຍລໍາດັບເພີ່ມຂຶ້ນ. ນອກຈາກນັ້ນ, ຈັດລຽງພິລະເມດແຕ່ລະແຖວໂດຍຄໍລຳນ໌ໃນລໍາດັບລົງ.

ຕົວຢ່າງ:
get_row([
  [1,2,3,4,5,6],
  [1,2,3,4,1,6],
  [1,2,3,4,5,1]
], 1) == [,,,,]
get_row == []
get_row == []
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
you will sort the given array in ascending order if the sum is odd,
or sort it in descending order if the sum is even.

Note:
* don't change the given array.

Examples:
* sort_array => []
* sort_array => [5]
* sort_array => [0, 1, 2, 3, 4, 5]
* sort_array => [6, 5, 4, 3, 2, 1, 0]

ອີງຕາມອາເລຍທີ່ບໍ່ມີຄ່າລົບ, ສົ່ງຄືນສຳເນົາຂອງອາເລຍທີ່ໃຫ້ຫຼັງຈາກການຈັດລຽງ,
ເຈົ້າຈະຈັດລຽງອາເລຍທີ່ໃຫ້ໃນລະດັບທີ່ເພີ່ມຂຶ້ນຖ້າຜົນບວກ ເປັນຄີການ,
ຫຼືຈັດລຽງໃນລະດັບທີ່ລົງຖ້າຜົນບວກ ເປັນຄູ່.

ໝາຍເຫດ:
* ຢ່າແກ້ໄຂອາເລຍທີ່ໃຫ້.

ຕົວຢ່າງ:
* sort_array => []
* sort_array => [5]
* sort_array => [0, 1, 2, 3, 4, 5]
* sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""ສ້າງຟັງຊັນ `encrypt` ທີ່ຮັບສະຕຣິງເປັນອາກິວເມັນແລະ ສົ່ງຄືນສະຕຣິງທີ່ເຂົ້າລະຫັດດ້ວຍພາສາອັງກິດທີ່ຖູກຫມູນ. ພາສາອັງກິດຄວນຖືກຫມູນໃນລັກສະນະທີ່ຕົວອັກສອນເລື່ອນລົງໂດຍສອງຄູນກັບສອງຕຳແໜ່ງ. ຕົວຢ່າງເຊັ່ນ:
```python
encrypt returns 'lm'
encrypt returns 'ewhjklnop'
encrypt returns 'kj'
encrypt returns 'ix'
```
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    ເຈົ້າໄດ້ຮັບບັນຊີລາຍຊື່ຂອງຕົວເລກຈຳນວນເຕັມ.
ຂຽນຟັງຊັນ next_smallest ທີ່ສົ່ງຄືນສະເພາະອົງປະກອບທີ 2 ທີ່ເລັກທີ່ສຸດຂອງບັນຊີ.
ສົ່ງຄືນເປັນ None ຖ້າບໍ່ມີອົງປະກອບນັ້ນ.

next_smallest == 2
next_smallest == 2
next_smallest == None
next_smallest == None
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    ທ່ານຈະໄດ້ຮັບສາຍຂໍ້ຄວາມຂອງຄໍາພູດ, ແລະຫນ້າທີ່ຂອງທ່ານຄືການນັບຈໍານວນຄວາມຫນ້າເບື່ອ. ຄວາມຫນ້າເບື່ອຄືປະໂຫຍກທີ່ເລີ່ມຕົ້ນດ້ວຍຄໍາວ່າ ""ຂ້ອຍ"". ປະໂຫຍກຈະແຍກກັນໂດຍ '.', '?' ຫຼື '!'.

ຕົວຢ່າງ:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    Here is the translation of the given sentence into Lao:

ຂຽນຟັງຊັນທີ່ຮັບຂໍ້ຄວາມ ແລະເຂົ້າລະຫັດໃນລັກສະນະແມ່ນປ່ຽນກຳມະນານຂອງຕົວອັກສອນທັງຫມົດ, ແທນທີ່ຈະແທນທີ່ສະຫຼອງທັງຫມົດໃນຂໍ້ຄວາມດ້ວຍຕົວອັກສອນທີ່ປາກົດ 2 ບ່ອນຂ້າງໜ້າຂອງສະຫຼອງນັ້ນໃນອັງກິດ. 
ສົມມຸດວ່າມີແຕ່ຕົວອັກສອນພຽງຢ່າງດຽວ.

ເຊັ່ນ:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""ທ່ານໄດ້ຮັບລາຍຊື່ຂອງຕົວເລກທີ່ເປັນຈໍານວນເຕັມ.
    ທ່ານຈໍາເປັນຕ້ອງຫາຄ່າຈໍານວນເຕັມທີ່ໃຫຍ່ທີ່ສຸດແລະຄືນຄ່າຜົນບວກຂອງຫົວເລກຂອງມັນ.

    ຕົວຢ່າງ:
    ສໍາລັບ lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ຜົນທີ່ໄດ້ຄື 10
    ສໍາລັບ lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ຜົນທີ່ໄດ້ຄື 25
    ສໍາລັບ lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ຜົນທີ່ໄດ້ຄື 13
    ສໍາລັບ lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ຜົນທີ່ໄດ້ຄື 11
    ສໍາລັບ lst = [0,81,12,3,1,21] ຜົນທີ່ໄດ້ຄື 3
    ສໍາລັບ lst = [0,8,1,2,1,7] ຜົນທີ່ໄດ້ຄື 7
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    ໃຫ້ຄຳອະທິບາຍ, ຟັງຊັນຄືນຄ່າ True ຖ້າວ່າກຸນແມ່ນທັງໝົດເປັນຕົວອັກສອນນ້ອຍ ຫຼືທັງໝົດເປັນຕົວອັກສອນໃຫຍ່, ມິດລຶ້ນຄືນຄ່າ False. ຟັງຊັນຄວນຄືນຄ່າ False ຖ້າວ່າເອີ້ນຄຳອະທິບາຍເປັນຄ່າວ່າງ.

ຕົວຢ່າງ:
check_dict_case ຄວນຄືນຄ່າ True.
check_dict_case ຄວນຄືນຄ່າ False.
check_dict_case ຄວນຄືນຄ່າ False.
check_dict_case ຄວນຄືນຄ່າ False.
check_dict_case ຄວນຄືນຄ່າ True.
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""ນຳໃຊ້ຟັງຊັນທີ່ຮັບຄ່າເປັນຕົວເລກບໍ່ລົບແລະສົ່ງຄືນອາເຣເທີທີ່ມີຕົວເລກທີ່ເປັນຈຳນວນເລກທີ່ສະໝັກໃຫ້ເທົ່າ ແລະ ນ້ອຍກວ່າ n.
    ຕົວຢ່າງ:
    count_up_to => [2,3]
    count_up_to => [2,3,5,7]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17,19]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""ສໍາເລັດຟັງຊັນທີ່ໄດ້ຮັບສອງເລກຈໍານວນເຕັມແລະສົ່ງຄືນ
    ຜົນຄູນຂອງຫົວໜ່ວຍຂອງພວກເຂົາ.
    ໄດ້ສັນດານວ່າຂໍ້ມູນທີ່ໄດ້ຮັບເຂົ້າມາມີຄວາມຖືກຕ້ອງເສມອມເຫມື່ອນເກົ່າ.
    ຕົວຢ່າງ:
    multiply ຄວນສົ່ງຄືນ 16.
    multiply ຄວນສົ່ງຄືນ 72.
    multiply ຄວນສົ່ງຄືນ 0.
    multiply ຄວນສົ່ງຄືນ 20.
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    ໃຫ້ສາຍຂໍ້ຄວາມ s, ນັບຈໍານວນຂອງສະຫົວໂຕໃຫຍ່ທີ່ເປັນສະຫລະໃນຕໍ່າແຫນ່ງເລກຄູ່.

    ຕົວຢ່າງ:
    count_upper ຄື 1
    count_upper ຄື 0
    count_upper ຄື 0
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level.

    Examples:

ໃຫ້ແມ່ນຈຳນວນເຕັມບວກ n, ເຈົ້າຕ້ອງສ້າງກອນຫີນທີ່ມີ  n ລະດັບ.
    ລະດັບທຳອິດມີ n ຫີນ.
    ຈຳນວນຂອງຫີນຢູ່ລະດັບຕໍ່ໄປແມ່ນ:
        - ຕົວເລກຄູ່ຖັດໄປຖ້າ n ແມ່ນຄູ່.
        - ຕົວເລກຄີກຖັດໄປຖ້າ n ແມ່ນຄີກ.
    ໃຫ້ສົ່ງຄືນຈຳນວນຂອງຫີນໃນແຕ່ລະລະດັບໃນຮູບແບບລາຍຊື່, ທີ່ເອກະສານທີ່ຢູ່ອິນເດັກ i ແມ່ນຕົວແທນຂອງຈຳນວນຫີນໃນລະດັບ.

    ຕົວຢ່າງ:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    ທ່ານຈະໄດ້ຮັບສາຍຂໍ້ຄວາມທີ່ປະກອບດ້ວຍຄຳທີ່ແບ່ງດ້ວຍຈຸດຄັ້ນຫລືຊ່ອງວ່າງ. ຫນ້າທີ່ຂອງທ່ານຄືການແຍກສາຍຂໍ້ຄວາມນັ້ນເປັນຄຳແລະສົ່ງຄືນເປັນອາເລຍຂອງຄຳນັ້ນ.

ຕົວຢ່າງ:
words_string == [""Hi"", ""my"", ""name"", ""is"", ""John""]
words_string == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""ຟັງຊັນນີ້ຮັບຕົວເລກບວກສອງຕົວ x ແລະ y ແລະສົ່ງຄືນຕົວເລກຄູ່ທີ່ໃຫຍ່ທີ່ສຸດທີ່ຢູ່ໃນຊ່ວງ [x, y] ລວມທັງ. ຖ້າບໍ່ມີຕົວເລກຄູ່ດັ່ງກ່າວ, ຟັງຊັນຄວນສົ່ງຄືນເລກ -1.

    ຕົວຢ່າງ:
    choose_num = 14
    choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""ນີ້ແມ່ນການແປພາສາລາວຂອງປະໂຫຍກ:

ທ່ານໄດ້ຮັບຕົວເລກຈຳນວນບວກສອງຄື n ແລະ m, ແລະໜ້າທີ່ຂອງທ່ານຄືການຄິດໄລ່
ຄ່າສະເລ່ຍຂອງຕົວເລກຈາກ n ເຖິງ m.
ປັບຄ່າຄຳຕອບໃຫ້ໃກ້ຄຽງທີ່ສຸດແລະແປງນັ້ນເປັນຖານສອງ.
ຖ້າ n ໃຫຍ່ກວ່າ m, ສົ່ງກັບ -1.
ຕົວຢ່າງ:
rounded_avg => ""0b11""
rounded_avg => -1
rounded_avg => ""0b1111""
rounded_avg => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""ຕາມລາຍຊື່ຂອງຈຳນວນເຕັມບວກ x. ໃຫ້ສົ່ງຄືນລາຍຊື່ທີ່ຖືກຈັດລຽງຂອງທຸກລາຍການ 
    ທີ່ບໍ່ມີຕົວເລກຄູ່ໃດໆ.

    ໝາຍເຫດ: ລາຍຊື່ທີ່ສົ່ງຄືນຄວນຈະຖືກຈັດລຽງໃນລະດັບທີ່ສູງຂຶ້ນເລື້ອຍໆ.

    ຕົວຢ່າງ:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
reverse the resulting array, and then replace each digit by its corresponding name from
""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

For example:
arr = [2, 1, 1, 4, 5, 8, 2, 3]   
-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]

If the array is empty, return an empty array:
arr = []
return []

If the array has any strange number ignore it:
arr = [1, -1 , 55] 
-> sort arr -> [-1, 1, 55]
-> reverse arr -> [55, 1, -1]
return = ['One']

ໃຫ້ຂໍ້ມູນຊຸດໜຶ່ງຂອງຈຳນວນເຕັມ, ຈັດລຽງຈຳນວນເຕັມທີ່ຢູ່ລະຫວ່າງ 1 ແລະ 9 ລວມມື້,
ກັບກັນລຽງໄດ້, ແລະເອົາຫຼັງຈາກນັ້ນແທນດ້ວຍຊື່ທີ່ສົມພັນທີ່ມີຢູ່ໃນ
""ໜຶ່ງ"", ""ສອງ"", ""ສາມ"", ""ສີ່"", ""ຫ້າ"", ""ຫົກ"", ""ເຈັດ"", ""ແປດ"", ""ເກົ້າ"".

ຕົວຢ່າງ:
arr = [2, 1, 1, 4, 5, 8, 2, 3]   
-> ຈັດລຽງ arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
-> ກັບກັນ arr -> [8, 5, 4, 3, 2, 2, 1, 1]
ຜົນຄື [""ແປດ"", ""ຫ້າ"", ""ສີ່"", ""ສາມ"", ""ສອງ"", ""ສອງ"", ""ໜຶ່ງ"", ""ໜຶ່ງ""]

ຖ້າ array ເປັນຫວ່າງ, ສົ່ງກັບຄື array ທີ່ຫວ່າງ:
arr = []
ສົ່ງກັບ []

ຖ້າ array ມີຈຳນວນແປກປະຫຼາດກໍລະເວັ້ນໄວ້:
arr = [1, -1 , 55] 
-> ຈັດລຽງ arr -> [-1, 1, 55]
-> ກັບກັນ arr -> [55, 1, -1]
ສົ່ງກັບ = ['ໜຶ່ງ']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" ນໍາໃຊ້ຟັງຊັນ f ທີ່ໃຊ້ n ເປັນພາລາເມຕີ,
    ແລະສົ່ງຄືນລາຍຊື່ຂະໜາດ n, ດັ່ງນັ້ນຄ່າຂອງອົງປະກອບທີ່ຕໍ່າແຫນ່ງ i ແມ່ນຄ່າທົດສະນິຍົມຂອງ i ຖ້າ i ເປັນຄູ່
    ຫຼືຄ່າຜົນບວກຂອງຕົວເລກຈາກ 1 ຫາ i ຖ້າຫາກວ່າ i ເປັນຄີ.
    i ເລີ່ມຈາກ 1.
    ຄ່າທົດສະນິຍົມຂອງ i ແມ່ນການຄູນຂອງຕົວເລກຈາກ 1 ຫາ i.
    ຕົວຢ່າງ:
    f == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    ໃຫ້ຕົວເລກທີ່ເປັນບວກ n, ສົ່ງຄືນເປັນຄູ່ທີ່ມີຈຳນວນຂອງຕົວເລກຄູແລະຂີ້ກະລ່ອນ
ທີ່ເປັນປາລິນໂດມທີ່ຕົກຢູ່ໃນເຂດ, ລວມທັງ.

ຕົວຢ່າງ1:

ອິນພຸດ: 3
ຜົນອອກ:
ອະທິບາຍ:
ປາລິນໂດມທີ່ເປັນຕົວເລກຄື 1, 2, 3. ໜຶ່ງໃນພວກມັນເປັນຕົວເລກຄູ, ແລະສອງໃນພວກມັນເປັນຕົວເລກຂີ້ກະລ່ອນ.

ຕົວຢ່າງ2:

ອິນພຸດ: 12
ຜົນອອກ:
ອະທິບາຍ:
ປາລິນໂດມທີ່ເປັນຕົວເລກຄື 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ສີ່ໃນພວກມັນເປັນຕົວເລກຄູ, ແລະ 6 ໃນພວກມັນເປັນຕົວເລກຂີ້ກະລ່ອນ.

ໝາຍເຫດ:
1. 1 <= n <= 10^3
2. ຄູ່ທີ່ສົ່ງຄືນມີຈຳນວນຂອງປາລິນໂດມທີ່ເປັນຕົວເລກຄູແລະຕົວເລກຂີ້ກະລ່ອນຕາມລຳດັບ.
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    ຂຽນຟັງຊັນ count_nums ທີ່ຮັບອາເຣເອະຂອງຈຳນວນເຕັມແລະສົ່ງຄືນຈຳນວນອົງປະກອບທີ່ມີຜົນບວກຂອງຕົວເລກໃນໂຕເລກຫຼາຍກວ່າ 0.
ຖ້າຕົວເລກເປັນລົບ, ຕົວເລກເລກແລກທີ່ມີເຄື່ອງໝາຍລົບຈະເປັນລົບ:
ຕົວຢ່າງ: -123 ມີເລກແລກຄື -1, 2, ແລະ 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""ພວກເຮົາມີອາເລ 'arr' ທີ່ມີຄ່າຈຳນວນເຕັມ N ຕົວ arr[1], arr[2], ..., arr[N]. ຕົວເລກໃນອາເລຈະຖືກສຸ່ມໃຫ້ຢູ່ໃນລຳດັບທີ່ແຕກຕ່າງກັນ. ຫນ້າທີ່ຂອງທ່ານຄືການກວດເບິ່ງວ່າ ມັນເປັນໄປໄດ້ຫຼືບໍ່ ທີ່ຈະໄດ້ອາເລທີ່ຈັດລຽງໃນລຳດັບທີ່ບໍ່ຫຼຸ້ນລົງໂດຍການປະຕິບັດການດັ່ງຕໍ່ໄປນີ້ກັບອາເລທີ່ໃຫ້ໄວ້:
        ທ່ານສາມາດປະຕິບັດການເລື່ອນຂວາໄດ້ເທົ່າໃດກໍໄດ້.
    
    ການເລື່ອນຂວາໜຶ່ງຄັ້ງ ໝາຍເຖິງການເລື່ອນທຸກຕໍ່າແຫນ່ງຢູ່ໃນອາເລໄປທາງຂວາໜຶ່ງຕໍ່າແຫນ່ງ. ຕົວສຸດທ້າຍຂອງອາເລຈະຖືກເລື່ອນໄປຢູ່ຕຳແໜ່ງເລີ່ມຕົ້ນ ຫມາຍເຖິງຕຳແໜ່ງທີ່ 0.

    ຖ້າມັນເປັນໄປໄດ້ທີ່ຈະໄດ້ອາເລທີ່ຈັດລຽງໃນລຳດັບທີ່ບໍ່ຫຼຸ້ນລົງໂດຍການປະຕິບັດການດັ່ງກ່າວ, ກໍໃຫ້ສົ່ງຄືນ True, ຖ້າບໍ່ແມ່ນເຊັ່ນນັ້ນກໍໃຫ
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""ໃນບັນຫານີ້, ເຈົ້າຈະຕ້ອງສ້າງຟັງຊັນໜຶ່ງທີ່ຮັບລາຍການຈຳນວນສອງລາຍການ, ແລະກຳນົດວ່າມັນເປັນໄປໄດ້ບໍ່ທີ່ຈະປຽນແປງອົງປະກອບລະຫວ່າງພວກເຂົາເພື່ອໃຫ້ lst1 ເປັນລາຍການທີ່ມີແຕ່ຈຳນວນຄູ່. ບໍ່ມີຂໍ້ຈຳກັດໃນຈຳນວນອົງປະກອບທີ່ປ່ຽນແປງລະຫວ່າງ lst1 ແລະ lst2. ຖ້າມັນເປັນໄປໄດ້ທີ່ຈະປຽນແປງອົງປະກອບລະຫວ່າງ lst1 ແລະ lst2 ເພື່ອໃຫ້ທຸກອົງປະກອບຂອງ lst1 ເປັນຈຳນວນຄູ່, ໃຫ້ສົ່ງຄືນ ""YES"". ມິດຊະນັ້ນ, ສົ່ງຄືນ ""NO"". ຕົວຢ່າງ:
exchange => ""YES""
exchange => ""NO""
ເຊິ່ງເອົາວ່າລາຍການທີ່ປ້ອນເຂົ້າຈະບໍ່ຫວ່າງ.
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.

Example:
histogram == {'a': 1, 'b': 1, 'c': 1}
histogram == {'a': 2, 'b': 2}
histogram == {'a': 2, 'b': 2}
histogram == {'b': 4}
histogram == {}

ການໃຫ້ຂໍ້ຄວາມທີ່ແທນດ້ວຍອັກສອນຕໍ່ເນື່ອງທີ່ມີການແຍກດ້ວຍຊ່ອງວ່າງ, ສົ່ງຄືນພາສາທີ່ມີອັກສອນທີ່ມີການເຮັດເຊິ່ງສຸດແລະມີການນັບແມ່ນຄວາມຄິດເຫັນ. ຖ້າອັກສອນຫຼາຍມີຄວາມສະບັບຜົນເຫມືອນກັນ, ສົ່ງຄືນທຸກຄົນ.

ຕົວຢ່າງ:
histogram == {'a': 1, 'b': 1, 'c': 1}
histogram == {'a': 2, 'b': 2}
histogram == {'a': 2, 'b': 2}
histogram == {'b': 4}
histogram == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""ວຽກເຮັດ
    ພວກເຮົາໄດ້ຮັບສອງ string s ແລະ c, ເຈົ້າຕ້ອງລຶບຕົວອັກສອນທັງຫມົດໃນ s ທີ່ມີຄ່າເທົ່າກັບຕົວອັກສອນໃດໜຶ່ງໃນ c
    ແລ້ວກວດສອບວ່າ string ຜົນລັບເປັນ palindrome ຫຼືບໍ່.
    string ຖືກເອີ້ນວ່າ palindrome ຖ້າມັນອ່ານເຫັນເຫມືອນກັນທຸກຄັ້ງທີ່ອ່ານຖອຍຫຼັງ.
    ເຈົ້າຄວນສົ່ງຄືນ tuple ທີ່ປະກອບດ້ວຍ string ຜົນລັບ ແລະ True/False ສຳລັບການກວດສອບ.
    ຕົວຢ່າງ
    ສຳລັບ s = ""abcde"", c = ""ae"", ຜົນຄວນເປັນ
    ສຳລັບ s = ""abcdef"", c = ""b""  ຜົນຄວນເປັນ
    ສຳລັບ s = ""abcdedcba"", c = ""ab"", ຜົນຄວນເປັນ
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""ໃຫ້ລາຍການຂອງສາຍຂໍ້ຄວາມ, ທີ່ແຕ່ລະສາຍຂໍ້ຄວາມປະກອບດ້ວຍເລກດຽວໆ, ສົ່ງຄືນລາຍການໜຶ່ງ.
    ແຕ່ລະອົງປະກອບທີ່ i ຂອງຜົນລັບຄວນເປັນ ""ຈຳນວນຂອງອົງປະກອບຂີ້ຄູກ່າງໆໃນສາຍຂໍ້ຄວາມ i ຂອງຂໍ້ມູນເຂົ້າ."" ທີ່ທຸກວັນຂອງ i ຄວນໄດ້ຮັບການແທນທີ່ໂດຍຈຳນວນຂອງເລກຂີ້ຄູກ່າງໆໃນສາຍຂໍ້ຄວາມທີ່ i ຂອງຂໍ້ມູນເຂົ້າ.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    ໃນການໃຫ້ອາເລ ຂອງໂຕເລກທີ່ເປັນຈຳນວນເຕັມ nums, ຄົ້ນຫາຜົນລວມທີ່ຕ່ຳທີ່ສຸດຂອງອາເລໃດໆທີ່ບໍ່ວ່າຈະສວນຫຍ້ອຍໃນ nums.

ຕົວຢ່າງ
minSubArraySum == 1
minSubArraySum == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    Here's the translation of the given sentence into Lao:

ທ່ານໄດ້ຮັບຕາຕະລາງສີ່ແຈກຂອງບໍ່ນໍ້າ. ແຖວໃດແຖວໜຶ່ງສະແດງເຖິງບໍ່ນໍ້າຫນຶ່ງລູກ, 
ແລະແຕ່ລະ 1 ໃນແຖວສະແດງເຖິງຫນ່ວຍນໍ້າຫນຶ່ງ. 
ແຕ່ລະບໍ່ນໍ້າມີຖັງທີ່ສາມາດໃຊ້ໃນການຕັກນໍ້າອອກຈາກມັນ, 
ແລະຖັງທັງໝົດມີຄວາມຈຸເທົ່າກັນ. 
ວຽກຂອງທ່ານແມ່ນໃຊ້ຖັງເພື່ອເຮັດໃຫ້ບໍ່ນໍ້າໂຫຼດ. 
ເລົາຜົນລັບຈຳນວນເທື່ອທີ່ທ່ານຕ້ອງໃຊ້ຖັງຕັກນໍ້າລົງ.

ຕົວຢ່າງ1:
    ຂໍ້ມູນທີ່ໃສ່: 
        grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
        bucket_capacity : 1
    ຜົນລັບ: 6

ຕົວຢ່າງ2:
    ຂໍ້ມູນທີ່ໃສ່: 
        grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
        bucket_capacity : 2
    ຜົນລັບ: 5

ຕົວຢ່າງ3:
    ຂໍ້ມູນທີ່ໃສ່: 
        grid : [[0,0,0], [0,0,0]]
        bucket_capacity : 5
    ຜົນລັບ: 0

ຂໍ້ຈຳກັດ:
    * ບໍ່ນໍ້າທັງໝົດມີຄວາມຍາວທຽບກັນ
    * 1 <= grid.length <= 10^2
    * 1 <= grid[:,1].length <= 10^2
    * grid[i][j] -> 0 | 1
    * 1 <= capacity <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    ໃນບົດຝຶກນີ້, ທ່ານຈະຕ້ອງຈັດລຽງອາເລຍຂອງຕົວເລກທີ່ບໍ່ເປັນລົບຕາມຈຳນວນເອກທີ່ມີໃນການຕົວແທນເປັນຖັນສອງໃນລຳດັບເພີ່ມຂຶ້ນ. ສຳລັບຈຳນວນເອກທີ່ຄ້າຍຄືກັນ, ຈະຕ້ອງຈັດລຽງຕາມຄ່າສິບປະສິດ.

ມັນຕ້ອງຖືກນຳໃຊ້ແບບນີ້:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words ==> [""little""]
    select_words ==> [""Mary"", ""lamb""]
    select_words ==> []
    select_words ==> [""world""]
    select_words ==> [""Uncle""]

ຕາມທີ່ໄດ້ກໍານົດໄວ້ ໃຫ້ມີສາຍເສັ້ນໜຶ່ງ s ແລະຕົວເລກທຳມະຊາດ n, ທ່ານໄດ້ຮັບໝາຍໃຫ້ສ້າງຟັງຊັນທີ່ສົ່ງຄືນລາຍຊື່ຂອງຄໍາທັງໝົດຈາກສາຍເສັ້ນ s ທີ່ມີຕົວອັກສອນສະຫຼະຄືກັນ n, ໃນລຳດັບທີ່ຄໍາເຫຼົ່ານັ້ນປາກົດໃນສາຍເສັ້ນ s.
    ຖ້າສາຍເສັ້ນ s ຫວ່າງ ຟັງຊັນຄວນສົ່ງຄືນລາຍຊື່ຫວ່າງ.
    ໝາຍເຫດ: ທ່ານອາດສົມມູດໄດ້ວ່າຂໍ້ຄວາມນີ້ມີແຕ່ຕົວອັກສອນແລະຊ່ອງຫວ່າງເທົ່ານັ້ນ.
    ຕົວຢ່າງ:
    select_words ==> [""little""]
    select_words ==> [""Mary"", ""lamb""]
    select_words ==> []
    select_words ==> [""world""]
    select_words ==> [""Uncle""]
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""Here is the translation of the given sentence into Lao:

ເຈົ້າໄດ້ຮັບຄຳຫນຶ່ງ. ຫນ້າທີ່ຂອງເຈົ້າແມ່ນຫາສະຫລະຂະຫນາງທີ່ຢູ່ລະຫວ່າງ 
    ພຍັງຊະນະສອງຕົວຈາກດ້ານຂວາຂອງຄຳ.
    
    ສະຫລະທີ່ຢູ່ຕົ້ນແລະທ້າຍບໍ່ນັບ. ສົ່ງຄືນເປັນສາຍຫວ່າງຖ້າຫາກວ່າເຈົ້າບໍ່ພົບສະຫລະທີ່ຕອບສິ່ງທີ່ກ່າວຂ້າງເທິງນີ້.

    ເຈົ້າອາດສັນນິຖານວ່າສະຫນອງໃຫ້ເປັນອັກສອນພາສາອັງກິດເທົ່ານັ້ນ.

    ຕົວຢ່າງ:
    get_closest_vowel ==> ""u""
    get_closest_vowel ==> ""U""
    get_closest_vowel ==> """"
    get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len

ໃຫ້ອາເຣ arr ຂອງຈຳນວນເຕັມແລະຈຳນວນ k ບວກທີ່ເປັນບວກ, ຄືນລາຍການທີ່ຕຽງຂັ້ນດ້ວຍຄວາມຍາວ k ທີ່ມີເລກສູງສຸດ k ໃນ arr.

    ຕົວຢ່າງ1:

        ປ້ອນ: arr = [-3, -4, 5], k = 3
        ຜົນລັບ: [-4, -3, 5]

    ຕົວຢ່າງ2:

        ປ້ອນ: arr = [4, -4, 4], k = 2
        ຜົນລັບ: [4, 4]

    ຕົວຢ່າງ3:

        ປ້ອນ: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        ຜົນລັບ: [2]

    ຫມາຍເຫດ:
        1. ຄວາມຍາວຂອງອາເຣຈະຢູ່ໃນຊ່ວງ [1, 1000].
        2. ອົງປະກອບໃນອາເຣຈະຢູ່ໃນຊ່ວງ [-1000, 1000].
        3. 0 <= k <= len
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""ໃຫ້ລາຍການບໍ່ຫວ່າງເປັນຈຳນວນຕົວເລກທັງຫມົດ, ໃຫ້ສົ່ງຄືນຜົນບວກຂອງທຸກຕົວເລກຄີກທີ່ຢູ່ຕຳແຫນ່ງຄູ່.

    ຕົວຢ່າງ
    solution ==> 12
    solution ==> 9
    solution ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    ໃຫ້ອາເລ ທີ່ບໍ່ເປັນວ່າງຂອງຈຳນວນເຕັມ arr ແລະ ຈຳນວນເຕັມ k, ສົ່ງຄືນ

    ຜົນລວມຂອງອົງປະກອບທີ່ມີຢ່າງຫລາຍສອງຕົວເລກ ຈາກອົງປະກອບ k ອັນດັບໃນຕົວ arr.

    ຕົວຢ່າງ:

        ຂໍ້ມູນເຂົ້າ: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        ຜົນລວມທີ່ອອກ: 24 # ຜົນລວມຂອງ 21 + 3

    ຂໍ້ກຳຫນົດ:
        1. 1 <= ຄວາມຍາວຂອງ arr <= 100
        2. 1 <= k <= ຄວາມຍາວຂອງ arr
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

ຄຳກັນ Collatz ແມ່ນຄຳກັນທາງຄະນິດສາດທີ່ກ່ຽວຂ້ອງກັບລຳດັບທີ່ກຳນົດດັ່ງນີ້: ເລີ່ມຕົ້ນດ້ວຍຄ່າບວກຂອງຈຳນວນເຕັມ n. ຫຼັງຈາກນັ້ນແຕ່ລະຄຳເວົ້າຖືກຮັບມາຈາກຄຳເວົ້າກ່ອນດັ່ງນີ້: ຖ້າຄຳເວົ້າກ່ອນເປັນຄູ່, ຄຳເວົ້າຕໍ່ໄປແມ່ນຄ່າຫຍ້ອຍກ່ວາຄຳເວົ້າກ່ອນຄື່ງໜຶ່ງ. ຖ້າຄຳເວົ້າກ່ອນເປັນຄີ່, ຄຳເວົ້າຕໍ່ໄປແມ່ນ 3 ເທົ່າຂອງຄຳເວົ້າກ່ອນບວກ 1. ຄຳກັນຄືວ່າບໍ່ວ່າຄ່າຂອງ n ຈະເປັນຫຍັງ, ລຳດັບຈະມາເຖິງ 1 ສະເໝີ.

ໝາຍເຫດ:
    1. Collatz ແມ່ນ [1].
    2. ລາຍຊື່ທີ່ຖືກສົ່ງຄືນຕ້ອງຖືກຈັດໃຫ້ເປັນລຳດັບເພີ່ມຂຶ້ນ.

ຕົວຢ່າງ:
get_odd_collatz returns [1, 5] # ລຳດັບ collatz ສຳລັບ 5 ແມ່ນ [5, 16, 8, 4, 2, 1], ດັ່ງນັ້ນພຽງແຕ່ແພງຄີ່ແມ່ນ 1 ແລະ 5.
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""ທ່ານຕ້ອງຂຽນຟັງຊັນທີ່ກວດສອບຄ່າຂອງວັນທີເທື່ອນື່ງ ແລະ ຄືນຄ່າ True ຖ້າວັນທີນັ້ນຖືກຕ້ອງ ມິຊະນັ້ນຄືນ False.
ວັນທີນັ້ນຈະຖືກຕ້ອງຖ້າຕົວກວດສອບທັງໝົດນີ້ຖືກຕ້ອງ:
1. ສາຍຂໍ້ຄວາມວັນທີບໍ່ໃຊ້ສາຍທີ່ຫວ່າງເປົ່າ.
2. ຈຳນວນວັນບໍ່ໜ້ອຍກວ່າ 1 ຫຼືຫຼາຍກວ່າ 31 ວັນ ສຳລັບເດືອນ 1, 3, 5, 7, 8, 10, 12. ແລະ ຈຳນວນວັນບໍ່ໜ້ອຍກວ່າ 1 ຫຼືຫຼາຍກວ່າ 30 ວັນ ສຳລັບເດືອນ 4, 6, 9, 11. ແລະ ຈຳນວນວັນບໍ່ໜ້ອຍກວ່າ 1 ຫຼືຫຼາຍກວ່າ 29 ສຳລັບເດືອນ 2.
3. ເດືອນບໍ່ໜ້ອຍກວ່າ 1 ຫຼືຫຼາຍກວ່າ 12.
4. ວັນທີຄວນຢູ່ໃນຮູບແບບ: mm-dd-yyyy

ຕົວຢ່າງ:
valid_date => True

valid_date => False

valid_date => False

valid_date => True

valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""ທ່ານໄດ້ຮັບຊ່ວງເວລາສອງຊ່ວງ,
    ເຊິ່ງແຕ່ລະຊ່ວງເວລາເປັນຄູ່ຂອງຕົວເລກຈຳນວນເຕັມ. ຕົວຢ່າງ, interval = =.
    ຊ່ວງເວລາທີ່ໄດ້ຮັບມາເປັນຊ່ວງເວລາປິດ ເຊິ່ງໝາຍຄວາມວ່າຊ່ວງເວລາ
    ລວມທັງ start ແລະ end.
    ສຳລັບແຕ່ລະຊ່ວງເວລາທີ່ໄດ້ຮັບ, ສົມມຸດວ່າເວລາເລີ່ມຕົ້ນຂອງມັນນ້ອຍກວ່າຫຼືເທົ່າກັບເວລາສິ້ນສຸດຂອງມັນ.
    ໜ້າທີ່ຂອງທ່ານແມ່ນກຳນົດວ່າຄວາມຍາວຂອງການຕັດກັນຂອງຊ່ວງເວລາສອງຊ່ວງນີ້ແມ່ນເປັນຕົວເລກຈຳນວນເຕັມທີ່ເປັນຈຳນວນເບື້ອງຫຼືບໍ່.
    ຕົວຢ່າງ, ການຕັດກັນຂອງຊ່ວງເວລາ, ແມ່ນ
    ເຊິ່ງຄວາມຍາວຂອງມັນແມ່ນ 1, ເຊິ່ງບໍ່ແມ່ນຕົວເລກຈຳນວນເບື້ອງ.
    ຖ້າຄວາມຍາວຂອງການຕັດກັນແມ່ນຕົວເລກຈຳນວນເບື້ອງ, ສົ່ງຄືນ ""YES"",
    ມິ່ນໄດ້ນັ້ນ, ສົ່ງຄືນ ""NO"".
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    Here is the translation of the given sentence into Lao:

ເຈົ້າໄດ້ຮັບອາເຣເອ arr ທີ່ມີຈຳນວນເຕັມ ແລະເຈົ້າຕ້ອງການສົ່ງຄືນ
ຜົນລວມຂອງຄ່າຂອງຈຳນວນເຕັມ ທີ່ຖືກຄູນດ້ວຍຜົນຄູນຂອງທຸກສັນຍານ
ຂອງແຕ່ລະຕົວເລກໃນອາເຣ, ແທນດ້ວຍ 1, -1 ຫຼື 0.
ຫມາຍເຫດ: ສົ່ງຄືນ None ສຳລັບ arr ທີ່ຫວ່າງເປົ່າ.

ຕົວຢ່າງ:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns and a positive integer k, 
    ແຕ່ລະຊ່ອງຂອງຕາຕະລາງມີຄ່າ. ທຸກໆເລກຕັ້ງແຕ່ [1, N * N]
    ປະກອບມີຢູ່ເທົ່ານັ້ນໃນຊ່ອງຂອງຕາຕະລາງ.

    ເຈົ້າຕ້ອງຫາເສັ້ນທາງທີ່ສັ້ນທີ່ສຸດຂອງຄວາມຍາວ k ໃນຕາຕະລາງ. ເຈົ້າສາມາດເລີ່ມຕົ້ນຈາກຊ່ອງໃດກໍ່ໄດ້, ແລະທຸກໆກ້າວເຈົ້າສາມາດເດີນໄປທີ່ຊ່ອງທີ່ຢູ່ຂ້າງໆໄດ້, ໃນອື່ນໆຄື, ເຈົ້າສາມາດໄປທີ່ຊ່ອງທີ່ແບ່ງປີນກັບເຈົ້າໃນປະຈຸບັນໄດ້.
    ກະລຸນາຊາບວ່າເສັ້ນທາງຄວາມຍາວ k ໝາຍເຖິງການໄປຢ້ຽມຊົມຊ່ອງ k ຊ່ອງແມ່ນວ່າຈະບໍ່ຈຳເປັນຕ້ອງເປັນຊ່ອງທີ່ແຕກຕ່າງກັນ.
    ເຈົ້າບໍ່ສາມາດໄປນອກຕາຕະລາງໄດ້.
    ເສັ້ນທາງ A ເຖິງວ່າຈະມີຄ່າໜ້ອຍກວ່າເສັ້ນທາງ B ຖ້າຫາກວ່າໃນການບັນຊີລາຍການຄ່າທີ່ໃສ່ໃນຊ່ອງທີ່ A ແລະ B ໄປຜ່ານ (ເຮົາເອີ້ນວ່າ lst_A
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""ທຸກຄົນຮູ້ຈັກລຳດັບ Fibonacci, ມັນໄດ້ຖືກສຶກສາຢ່າງລຶກເລິກໂດຍນັກຄະນິດສາດໃນສອງສາດວັດທີ່ຜ່ານມາ. ແຕ່ຢ່າງໃດກໍຕາມ, ສິ່ງທີ່ຜູ້ຄົນບໍ່ຮູ້ຄື ລຳດັບ Tribonacci. ລຳດັບ Tribonacci ຖືກກຳນົດໂດຍການຄືນຮອດ:
tri = 3
tri = 1 + n / 2, ຖ້າ n ເປັນຄູ່.
tri = tri + tri + tri, ຖ້າ n ເປັນຄີ.
ຕົວຢ່າງ:
tri = 1 + = 2
tri = 3
tri = tri + tri + tri
        = 2 + 3 + 3 = 8
ເຈົ້າໄດ້ຮັບຕົວເລກຈຳນວນເຕັມບໍ່ລົບ n, ເຈົ້າຕ້ອງຕອບກັບລາຍຊື່ຂອງຕົວເລກ n + 1 ລຳດັບ Tribonacci ເທົ່ານັ້ນ.
ຕົວຢ່າງ:
tri = [1, 3, 2, 8]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""ຕາມທີ່ໄດ້ໃຫ້ຕົວເລກທີ່ເປັນບວກ n, ຈົ່ງສົ່ງຄືນຜົນຄູນຂອງຕົວເລກທີ່ເປັນຄີ່.
    ຈົ່ງສົ່ງຄືນ 0 ຖ້າທຸກຕົວເລກເປັນຄູ່.
    ຕົວຢ່າງ:
    digits == 1
    digits == 0
    digits == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""ນີ້ແມ່ນບົດບາດທີ່ທ່ານໄດ້ຮັບ: 
    ທ່ານຈະໄດ້ຮັບບັນຊີຂອງຕົວເລກ.
    ທ່ານຕ້ອງສົ່ງຄືນຜົນລວມຂອງການຍົກກຳລັງສອງຂອງຕົວເລກໃນບັນຊີທີ່ໄດ້ຮັບ,
    ກ່ອນເຊິ່ງແຕ່ລະອັນໃນບັນຊີໃຫ້ເປັນຕົວເລກເຕັມທີ່ໃຫຍ່ຂຶ້ນ.
    ຕົວຢ່າງ:
    ສຳລັບ lst = [1,2,3] ຜົນລວມຄວນເປັນ 14
    ສຳລັບ lst = [1,4,9] ຜົນລວມຄວນເປັນ 98
    ສຳລັບ lst = [1,3,5,7] ຜົນລວມຄວນເປັນ 84
    ສຳລັບ lst = [1.4,4.2,0] ຜົນລວມຄວນເປັນ 29
    ສຳລັບ lst = [-2.4,1,1] ຜົນລວມຄວນເປັນ 6
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""Here's the translation of the given sentence into Lao:

ສ້າງຟັງຊັນທີ່ຄືນຄ່າສຸດຂອງອິນເດັກທີ່ບໍ່ໃຫຍ່ກວ່າຫຼືເທົ່າກັບອິນເດັກທີ່ຢູ່ກ່ອນໜ້າມັນ. ຖ້າບໍ່ມີອົງປະກອບດັ່ງກ່າວກໍໃຫ້ຄືນຄ່າ -1. ອາເລຍທີ່ກໍາຫນົດຈະບໍ່ມີຄ່າທີ່ຊ້ໍາກັນ.

ຕົວຢ່າງ:
can_arrange = 3
can_arrange = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    ສ້າງຟັງຊັນທີ່ຮັບຄ່າຈຳນວນເຕັມ, ຈຳນວນທົດສະນິຍົມ, ຫຼື ສະຫະນາມທີ່ແທນຈຳນວນທີ່ເປັນຈິງ, ແລະສົ່ງຄືນຄ່າທີ່ມີຄ່າຫຼາຍກວ່າໃນປະເພດຂອງຕົວແປທີ່ເຫມາະສົມ. ສົ່ງຄືນ None ຖ້າຄ່າເທົ່າກັນ.
ໝາຍເຫດ: ຖ້າຈຳນວນທີ່ເປັນຈິງຖືກຕົວແທນເປັນສະຫະນາມ, ຈຸດທົດສະນິຍົມອາດຈະເປັນ . ຫຼື ,

compare_one â -> 2.5
compare_one â -> ""2,3""
compare_one â -> ""6""
compare_one â -> None
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""ປະເມີນວ່າຕົວເລກທີ່ກໍານົດ n ສາມາດຖືກຂຽນເປັນຜົນລວມຂອງຈໍານວນຄູ່ບວກ 4 ຕົວຢ່າງຢ່າງຢືນ
    ຕົວຢ່າງ
    is_equal_to_sum_even == ຜິດ
    is_equal_to_sum_even == ຜິດ
    is_equal_to_sum_even == ຖືກ
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""ແຟັກໂຕຣີອານຂອງບຣາຊິວເອລີນຖືກກຳນົດໄວ້ວ່າ:
    brazilian_factorial = n! *! *! * ... * 1!
    ທີ່ທີ່ n > 0

    ຕົວຢ່າງ:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    ຕາມທີ່ໄດ້ກໍານົດໃຫ້, ຖ້າມີຂໍ້ຄວາມທີ່ມີຂໍ້ຄວາມຫຼາຍກວ່າ 2 ວ່າງຕິດຕໍ່ກັນ, ຈະແທນທຸກວ່າງທີ່ຕິດຕໍ່ກັນນັ້ນດ້ວຍ ""-""

    fix_spaces == ""Example""
    fix_spaces == ""Example_1""
    fix_spaces == ""_Example_2""
    fix_spaces == ""_Example-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""Here is the translated version of the sentence in Lao:

```python
ສ້າງຟັງຊັນທີ່ຮັບຄ່າ string ທີ່ລາຍງານຊື່ຂອງໄຟລ໌, ແລະສົ່ງຄືນ
    'ໃຊ່' ຖ້າວ່າຊື່ຂອງໄຟລ໌ເປັນຊື່ທີ່ໃຊ້ໄດ້, ແລະສົ່ງຄືນ 'ບໍ່' ຖ້າບໍ່ແມ່ນ.
    ຊື່ຂອງໄຟລ໌ເຫັນວ່າເປັນຊື່ທີ່ໃຊ້ໄດ້ຖ້າແລະເທົ່ານັ້ນຖ້າສະຫຼອງນີ້ຄື:
    - ບໍ່ຄວນມີຕົວເລກ ມາກກວ່າສາມໃນຊື່ຂອງໄຟລ໌.
    - ຊື່ຂອງໄຟລ໌ຄວນມີຈຸດ '.' ເທົ່ານັ້ນໜຶ່ງຂຸນ.
    - ຊື່ທີ່ຢູ່ກ່ອນຈຸດບໍ່ຄວນເປັນຄ່າວ່າງ, ແລະມັນຄວນເລີ່ມດ້ວຍຕົວອັກສອນຈາກອັກສອນລາຕິນ.
    - ຊື່ທີ່ຢູ່ຫຼັງຈຸດຄວນເປັນໜຶ່ງໃນບັນດານີ້: ['txt', 'exe', 'dll']
    ຕົວຢ່າງ:
    file_name_check # => 'ໃຊ່'
    file_name_check # => 'ບໍ່'
```
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""ຟັງຊັນນີ້ຈະຮັບລາຍຊື່ຂອງເລກທີ່ເປັນຈໍານວນເຕັມ. ສໍາລັບທຸກລາຍການໃນລາຍຊື່, ຟັງຊັນຈະຍົກກຳລັງສອງຂອງເລກທີ່ເປັນຈໍານວນເຕັມຖ້າດັດຊະນີຂອງມັນເປັນຈໍານວນຄູນຂອງ 3 ແລະຈະຍົກກຳລັງສາມຂອງເລກທີ່ເປັນຈໍານວນເຕັມຖ້າດັດຊະນີຂອງມັນເປັນຈໍານວນຄູນຂອງ 4 ແລະບໍ່ເປັນຈໍານວນຄູນຂອງ 3. ຟັງຊັນຈະບໍ່ປ່ຽນແປງລາຍການໃນລາຍຊື່ທີ່ດັດຊະນີບໍ່ເປັນຈໍານວນຄູນຂອງ 3 ຫຼື 4. ຟັງຊັນຈະຄືນຄ່າຜົນບວກຂອງທຸກລາຍການ.

ຕົວຢ່າງ:
ສໍາລັບ lst = [1,2,3] ຜົນທີ່ຄວນໄດ້ແມ່ນ 6
ສໍາລັບ lst = [] ຜົນທີ່ຄວນໄດ້ແມ່ນ 0
ສໍາລັບ lst = [-1,-5,2,-1,-5] ຜົນທີ່ຄວນໄດ້ແມ່ນ -126
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    ນີ້ແມ່ນປະໂຫຍກເປັນພາສາລາວ:

ທ່ານໄດ້ຮັບສະຕຣິງທີ່ແທນດ້ວຍປະໂຫຍກ,
ປະໂຫຍກນັ້ນມີບາງຄໍາທີ່ແຍກຈາກກັນໂດຍຂໍ້ຫວ່າງ,
ແລະທ່ານຕ້ອງສົ່ງຄືນສະຕຣິງທີ່ມີຄໍາຈາກປະໂຫຍກຕົ້ນສະບັບ,
ທີ່ຄວາມຍາວເປັນຕົວເລກທີ່ເປັນຈໍານວນເພາະ,
ລຳດັບຂອງຄໍາໃນສະຕຣິງໃໝ່ຄວນຈະເປັນຄືດຽວກັບຕົ້ນສະບັບ.

ຕົວຢ່າງ1:
    ໃສ່ຂໍ້ມູນ: sentence = ""This is a test""
    ຜົນລັບ: ""is""

ຕົວຢ່າງ2:
    ໃສ່ຂໍ້ມູນ: sentence = ""lets go for swimming""
    ຜົນລັບ: ""go for""

ເງື່ອນໄຂ:
    * 1 <= ຄວາມຍາວຂອງປະໂຫຍກ <= 100
    * ປະໂຫຍກມີແຕ່ຕົວອັກສອນເທົ່ານັ້ນ
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""To implement the function that simplifies the expression \ and checks whether it evaluates to a whole number, we can follow these steps:

1. Parse the input strings to extract the numerators and denominators.
2. Multiply the numerators together to get the new numerator.
3. Multiply the denominators together to get the new denominator.
4. Check if the resultant fraction is a whole number.

Here is the Python code to achieve this:

```python
from math import gcd

def simplify:
    # Helper function to parse the fraction string and return numerator and denominator as integers
    def parse_fraction:
        numerator, denominator = map)
        return numerator, denominator
    
    # Parse the fractions
    x_num, x_den = parse_fraction
    n_num, n_den = parse_fraction
    
    # Calculate the resultant fraction
    result_num = x_num * n_num
    result_den = x_den * n_den
    
    # Simplify the fraction by dividing both numerator and denominator by their GCD
    common_divisor = gcd
    simplified_num = result_num // common_divisor
    simplified_den = result_den // common_divisor
    
    # Check if the simplified denominator is 1
    return simplified_den == 1

# Test cases
print)  # True
print)  # False
print)  # False
```

### Explanation:
1. **Parsing the fractions**: The function `parse_fraction` takes a string representation of a fraction and splits it into the numerator and denominator, converting them to integers.

2. **Multiplying the fractions**: We multiply the numerators and the denominators separately to get the new numerator and denominator of the resultant fraction.

3. **Simplifying the fraction**: We use the greatest common divisor to simplify the fraction. By dividing both the numerator and the denominator by their GCD, we get the simplest form of the fraction.

4. **Checking for whole number**: If the simplified denominator is 1, then the fraction represents a whole number, and we return `True`. Otherwise, we return `False`.

This approach ensures that we correctly handle the multiplication and simplification of fractions, and accurately determine if the result is a whole number.
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    Here's the translated sentence in Lao:

ຂຽນຟັງຊັນທີ່ຈະຈັດ ລຽງລາຍຊື່ຂອງເລກທີ່ໃຫ້ໃນ ໃຫ້ເປັນລຳດັບເພີ່ມຂຶ້ນ ຕາມການບວກຂອງ ຕົວເລກຂອງເຂົາເຈົ້າ.
ໝາຍເຫດ: ຖ້າມີລາຍການທີ່ມີການບວກຂອງຕົວເລກເຫມືອນກັນ ໃຫ້ຈັດລຽງຕາມດັດສະນີໃນລາຍຊື່ເດີມ.

ຕົວຢ່າງ:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""Here is the translated sentence into Lao:

ຂຽນຟັງຊັນທີ່ໃຊ້ຮັບອາເລຍຂອງຕົວເລກເປັນຂໍ້ມູນເຂົ້າແລະສົ່ງຄືນຈຳນວນຂອງສ່ວນປະກອບໃນອາເລຍທີ່ມີຄ່າຫຼາຍກວ່າ 10 ແລະທັງຕົວເລກຫົວແລະຕົວເລກສຸດທ້າຍຂອງເລກນັ້ນເປັນຄູ່ຄີ.
ຕົວຢ່າງ:
specialFilter => 1 
specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    ທ່ານໄດ້ຮັບຄ່າຈຳນວນເຕັມບວກ n. ທ່ານຕ້ອງສ້າງອາເຣເຕັມ a ທີ່ມີຄວາມຍາວ n.
        ສຳລັບແຕ່ລະ i, ຄ່າຂອງ a[i] = i * i - i + 1.
        ສົ່ງຄືນຈຳນວນອັນໃດໜຶ່ງ ຂອງ a ທີ່ i < j < k,
    ແລະ a[i] + a[j] + a[k] ເປັນຜົນຄູນຂອງ 3.

    ຕົວຢ່າງ:
        ອິນພຸດ: n = 5
        ຜົນລັບ: 1
        ອະທິບາຍ: 
        a = [1, 3, 7, 13, 21]
        ສາມສິ່ງທີ່ຖືກຕ້ອງມີແຕ່.
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""ຂຽນຟັງຊັນທີ່ຮັບລາຍການຂອງຄຳສັບເປັນພາລາມິເຕີ,
ລຶບຄຳທີ່ມີຄວາມຍາວແບບຄູ່ອອກໄປ,
ແລະຄືນລາຍການທີ່ໄດ້ຜົນລັບທີ່ມີລຽງລຳດັບແລ້ວ,
ລາຍການເປັນລາຍການຂອງຄຳສັບເສມອະນຸມັດແລະບໍ່ເປັນລາຍການຂອງໂຕເລກ,
ແລະອາດຈະມີຄຳທີ່ຊ້ຳກັນ.
ລຳດັບຂອງລາຍການຄວນຈະເປັນຂຶ້ນເພື່ອຄວາມຍາວຂອງຄຳແຕ່ລະຄຳ, ແລະທ່ານ
ຄວນຄືນລາຍການທີ່ລຽງລຳດັບຕາມກົດນີ້.
ຖ້າສອງຄຳມີຄວາມຍາວທີ່ເທົ່າກັນ, ລຽງລຳດັບລາຍການໃຫ້ມີລຽງຕາມອັກສອນ.
ຟັງຊັນຄວນຈະຄືນລາຍການຂອງຄຳສັບໃນລຽງລຳດັບທີ່ສົມບູນ.
ທ່ານອາດສັນຊາດວ່າຄຳທັງໝົດຈະມີຄວາມຍາວເທົ່າກັນ.
ຕົວຢ່າງ:
assert list_sort => [""aa""]
assert list_sort => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""ນີ້ແມ່ນໂປຣແກຣມງ່າຍໆ ທີ່ຄວນຈະສົ່ງຄືນຄ່າຂອງ x ຖ້າ n ແມ່ນເລກປັດຈຸບັນ ແລະຄວນສົ່ງຄືນຄ່າຂອງ y ຖ້າບໍ່ແມ່ນ.

ຕົວຢ່າງ:
ສຳລັບ x_or_y == 34
ສຳລັບ x_or_y == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""ຂ້ອຍຄິດວ່າພວກເຮົາທຸກຄົນຈົນຈໍາຄວາມຮູ້ສຶກນັ້ນໄດ້ເມື່ອຜົນຂອງເຫດການທີ່ລໍຖ້າມາດົນໄດ້ຮັບຮູ້ແລ້ວ. ຄວາມຮູ້ສຶກແລະຄວາມຄິດທີ່ເຈົ້າມີໃນເວລານັ້ນຄືແນ່ນອນຄວນຈົບແລະຂຽນລົງໄປເພື່ອພິຈາລະນາແລະເປັນການປຽບທຽບ.
ໜ້າທີ່ຂອງເຈົ້າແມ່ນການກຳນົດວ່າບຸກຄົນໄດ້ເດົາຜົນຂອງຈຳນວນແມັດຖືກຕ້ອງຫຼືບໍ່.
ເຈົ້າໄດ້ຮັບສອງອາເລຍຂອງຄະແນນແລະການຄາດການທີ່ມີຄວາມຍາວທຽບກັນ, ເຮັດໃຫ້ແຕ່ລະດັດສະແດງແມັດ.
ສົ່ງຄືນອາເລຍທີ່ມີຄວາມຍາວທຽບກັນເພື່ອສະແດງລະດັບຄວາມຜິດພາດຂອງແຕ່ລະການຄາດການ. ຖ້າເຂົາໄດ້ເດົາຖືກ, ຄ່ານັ້ນແມ່ນ 0, ແລະຖ້າບໍ່ແມ່ນ, ຄ່ານັ້ນແມ່ນຄວາມແຕກຕ່າງທີ່ແທ້ຈິງລະຫວ່າງການຄາດການແລະຄະແນນ.

ຕົວຢ່າງ:

compare -> [0,0,0,0,3,3]
compare([0,5,0,0,0,4],[4
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""ທ່ານຈະໄດ້ຮັບຊື່ຂອງຄາສ ແລະລາຍຊື່ຂອງການຕື່ມເຕີມ. 
    ການຕື່ມເຕີມເຫຼົ່ານັ້ນຈະໃຊ້ເພື່ອໂຫຼດຄາສເພີ່ມເຕີມຕໍ່ຄາສນັ້ນ. 
    ແຮງຂອງການຕື່ມເຕີມເປັນດັ່ງນີ້: ໃຫ້ CAP ແມ່ນຈຳນວນຂອງຕົວອັກສອນຕົວໃຫຍ່ໃນຊື່ຂອງການຕື່ມເຕີມ, ແລະໃຫ້ SM ແມ່ນຈຳນວນຂອງຕົວອັກສອນຕົວນ້ອຍ 
    ໃນຊື່ຂອງການຕື່ມເຕີມ, ແຮງດັ່ງກ່າວແມ່ນໄດ້ຈາກສ່ວນ CAP - SM. 
    ທ່ານຄວນຫາການຕື່ມເຕີມທີ່ແຂງແກ່ວທີ່ສຸດແລະສົ່ງຄືນຕົວອັກສອນໃນຮູບແບບນີ້: ClassName.StrongestExtensionName. 
    ຖ້າມີການຕື່ມເຕີມສອງຫຼືຫຼາຍກວ່າທີ່ມີແຮງດຽວກັນ, ທ່ານຄວນ 
    ເລືອກອັນນື່ງທີ່ມາກ່ອນໃນລາຍຊື່. 
    ຕົວຢ່າງ, ຖ້າທ່ານໄດ້ຮັບ ""Slices"" ເປັນຄາສແລະລາຍຊື່ຂອງການ 
    ຕື່ມເຕີມ: ['SErviNGSliCes', 'Cheese', 'StuFfed'] ກໍຄວນສົ່ງຄືນ 'Slices.SErviNGSliCes' ເພາະວ່າ 'SErviNGSliCes' ແມ່
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""ເຈົ້າໄດ້ຮັບ 2 ຄຳ. ເຈົ້າຕ້ອງຄືນຄ່າ True ຖ້າຄຳທີສອງ ຫຼືການໝຸນຂອງມັນເປັນຕອນຍ່ອຍຂອງຄຳທຳອິດ.

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""ໃຫ້ຄ່າຈຳນວນເຕັມ. ສົ່ງຄືນເປັນຄູ່ຂອງຈຳນວນທີ່ມີຕົວເລກຄູ່ແລະຕົວເລກຄີກົງຕາມລຳດັບ.

     ຕົວຢ່າງ:
        even_odd_count ==>
        even_odd_count ==>
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    เมื่อได้รับจำนวนเต็มบวก จงหาค่าที่เทียบเท่าของมันในรูปแบบตัวเลขโรมันและส่งคืนในรูปแบบตัวอักษรเล็ก
ข้อจำกัด: 1 <= num <= 1000

ตัวอย่าง:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""ຂຽນຟັງຊັນ ທີ່ຮັບລາຍຊື່ຂອງສະຫລັບຂໍ້ຄວາມ.
ລາຍຊື່ນີ້ປະກອບດ້ວຍຄຳຕ່າງໆ. ່ຄືນຄໍາທີ່ມີຈຳນວນຕົວອັກສອນທີ່ເປັນເອກະລັກຫຼາຍທີ່ສຸດ. ຖ້າມີຄຳຫຼາຍຄຳທີ່ມີຈຳນວນຕົວອັກສອນທີ່ເປັນເອກະລັກສູງສຸດ, ່ຄືນຄຳທີ່ມາກ່ອນໃນລຳດັບຕົວອັກສອນ.

find_max == ""string""
find_max == ""enam""
find_max == ""aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    ທ່ານເປັນກະຕ່າຍຫິວ, ແລະທ່ານໄດ້ກິນແຄຣອດຈຳນວນໜຶ່ງແລ້ວ,
ແຕ່ດຽວນີ້ທ່ານຕ້ອງກິນແຄຣອດເພີ່ມເພື່ອສຳເລັດມື້ອາຫານຂອງວັນນີ້.
ທ່ານຄວນກັບຄືນອາເລໂລກຂອງ [ ຈຳນວນແຄຣອດທີ່ກິນແລ້ວທັງໝົດຫຼັງມື້ອາຫານຂອງທ່ານ,
                                    ຈຳນວນແຄຣອດຍັງເຫລືອຢູ່ຫຼັງມື້ອາຫານຂອງທ່ານ ]
ຖ້າບໍ່ມີແຄຣອດຍັງເຫລືອພຽງພໍ, ທ່ານຈະກິນແຄຣອດທີ່ຍັງເຫລືອທັງໝົດ, ແຕ່ທ່ານຈະຍັງຄົງຫິວຢູ່.

ຕົວຢ່າງ:
* eat -> [11, 4]
* eat -> [12, 1]
* eat -> [11, 0]
* eat -> [7, 0]

ຕົວແປ:
@number : integer
    ຈຳນວນແຄຣອດທີ່ທ່ານໄດ້ກິນແລ້ວ.
@need : integer
    ຈຳນວນແຄຣອດທີ່ທ່ານຕ້ອງກິນ.
@remaining : integer
    ຈຳນວນແຄຣອດທີ່ເຫລືອຢູ່ໃນສະຕອກ

ຂໍ້ຈຳກັດ:
* 0 <= number <= 1000
* 0 <= need <= 1000
* 0 <= remaining <= 1000

ສນຸກນະ :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    ໃຫ້ສອງລາຍຊື່ operator ແລະ operand. ລາຍຊື່ທຳອິດມີການດຳເນີນງານພື້ນຖານຂອງພິຊິດາສາດ, ແລະລາຍຊື່ທີສອງເປັນລາຍຊື່ເລກທັງຫມົດ. ໃຊ້ສອງລາຍຊື່ທີ່ໄດ້ມາເພື່ອສ້າງສູດພິຊິດາສາດ ແລະສົ່ງຄືນການປະເມີນຜົນຂອງສູດນັ້ນ.

ການດຳເນີນງານພື້ນຖານຂອງພິຊິດາສາດ:
ການບວກ
ການຫັກ
ການຄູນ
ການແບ່ງປັນແບບປື້ນ
ການຍົກກຳລັງ

ຕົວຢ່າງ:
operator['+', '*', '-']
array = [2, 3, 4, 5]
result = 2 + 3 * 4 - 5
=> result = 9

ໝາຍເຫດ:
ຄວາມຍາວຂອງລາຍຊື່ operator ເທົ່າກັບຄວາມຍາວຂອງລາຍຊື່ operand ລົບດ້ວຍໜຶ່ງ.
Operand ເປັນລາຍຊື່ຂອງເລກທີ່ບໍ່ເປັນລົບ.
Operator ເປັນລາຍຊື່ທີ່ມີຢ່າງນ້ອຍຫນຶ່ງການດຳເນີນງານ, ແລະ operand ເປັນລາຍຊື່ທີ່ມີຢ່າງນ້ອຍສອງເລກ.

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""Here's the translation of the given sentence into Lao:

```
ເຈົ້າໄດ້ຮັບ string s.
    ຖ້າ s[i] ເປັນຕົວອັກສອນ, ສົມມຸດການປ່ຽນສະກຸນຂອງມັນຈາກໃຫຍ່ເປັນນ້ອຍ ຫຼື ນ້ອຍເປັນໃຫຍ່,
    ມິເຊັ່ນນັ້ນໃຫ້ມັນຢູ່ເຫມືອນເກົ່າ.
    ຖ້າ string ບໍ່ມີຕົວອັກສອນໃດໆ, ກັບຄືນ string.
    ຟັງຊັນຄວນສົ່ງຄືນ string ທີ່ໄດ້ຜົນ.
    ຕົວຢ່າງ
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
```
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    ຕາມທີ່ໄດ້ມີການກຳນົດໄວ້, ຖ້າ 'text' ເປັນຂໍ້ຄວາມຫຍັງກໍຕາມ, ເອົາ md5 hash ຂອງມັນມາ. 
ຖ້າ 'text' ເປັນຂໍ້ຄວາມຫວ່າງ, ກັບຄືນ None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    ຖ້າໄດ້ຕົວເລກຈຳນວນເຕັມເປັນບວກ 2 ຕົວ a ແລະ b, ໃຫ້ສົ່ງຄືນຕົວເລກຄູ່ລະຫວ່າງ a ແລະ b, ໃນລຽງລຳດັບເພີ່ມຂຶ້ນ.

ຕົວຢ່າງ:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
