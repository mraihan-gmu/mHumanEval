prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" ಕೊಟ್ಟಿರುವ ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯಲ್ಲಿ, ಯಾವುದೇ ಎರಡು ಸಂಖ್ಯೆಗಳು ನೀಡಿದ ಮಿತಿಯಡಿಯಲ್ಲಿ ಇರುತ್ತವೆ ಎಂಬುದನ್ನು ಪರಿಶೀಲಿಸಿ.
    ಉದಾಹರಣೆ:
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" ಈ ಫಂಕ್ಷನ್‌ಗೆ ಇನ್‌ಪುಟ್ ಎಂಬುದು ಹಲವಾರು ಗುಂಪುಗಳ ನಸ್ಟೆಡ್ ಪೇರನ್ಥೆಸಿಸ್‌ಗಳನ್ನು ಹೊಂದಿರುವ ಸ್ಟ್ರಿಂಗ್ ಆಗಿದೆ. ನಿಮ್ಮ ಗುರಿ ಅಂದರೆ ಆ ಗುಂಪುಗಳನ್ನು ಪ್ರತ್ಯೇಕ ಸ್ಟ್ರಿಂಗ್‌ಗಳಲ್ಲಿ ವಿಭಜಿಸಲು ಮತ್ತು ಆ ಗುಂಪುಗಳ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಲು.
ಪ್ರತ್ಯೇಕ ಗುಂಪುಗಳು ಸಮತೋಲನ ಆಗಿವೆ ಮತ್ತು ಪರಸ್ಪರ ನಸ್ಟೆಡ್ ಆಗಿಲ್ಲ
ಇನ್‌ಪುಟ್ ಸ್ಟ್ರಿಂಗ್‌ನಲ್ಲಿರುವ ಯಾವುದೇ ಖಾಲಿ ಸ್ಥಳಗಳನ್ನು ನಿರ್ಲಕ್ಷಿಸಿ.
ಉದಾಹರಣೆ:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" ಧನಾತ್ಮಕ ತೇಲುವ ಬಿಂದು ಸಂಖ್ಯೆಯನ್ನು ನೀಡಿದಾಗ, ಅದನ್ನು ಪೂರ್ಣಾಂಕ ಭಾಗ ಮತ್ತು ದಶಾಂಶಗಳಾಗಿ ಅಳೆಯಬಹುದು.

ಸಂಖ್ಯೆಯ ದಶಾಂಶ ಭಾಗವನ್ನು ಹಿಂತಿರುಗಿಸಿ.
ಉದಾಹರಣೆ:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" ನೀವು ಶೂನ್ಯ ಬಾಲೆನ್ಸ್‌ನಿಂದ ಪ್ರಾರಂಭವಾಗುವ ಬ್ಯಾಂಕ್ ಖಾತೆಯ ಠೇವಣಿ ಮತ್ತು ಹಿಂಪಡೆಯುವ ಕಾರ್ಯಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಲಾಗುತ್ತದೆ. ನಿಮ್ಮ ಕಾರ್ಯವು ಖಾತೆಯ ಬಾಕಿ ಶೂನ್ಯಕ್ಕಿಂತ ಕಡಿಮೆಯಾಗುವಾಗ ಅದನ್ನು ಪತ್ತೆಹಚ್ಚುವುದು, ಮತ್ತು ಆ ಸಂದರ್ಭದಲ್ಲಿ ಕಾರ್ಯವು True ಅನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು. ಇಲ್ಲದಿದ್ದರೆ, False ಅನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು.
ಉದಾಹರಣೆ:
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" ಕೊಟ್ಟಿರುವ ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಗಾಗಿ, ಈ ಡೇಟಾಸೆಟ್‌ನ ಸರಾಸರಿ ಸುತ್ತ Mean Absolute Deviation ಅನ್ನು ಲೆಕ್ಕ ಹಾಕಿ.
Mean Absolute Deviation ಎಂದರೆ ಪ್ರತಿ ಅಂಗ ಮತ್ತು ಕೇಂದ್ರಬಿಂದುವಿನ ನಡುವಿನ ಸರಾಸರಿ ಪರಮ ಅಂತರ:
MAD = ಸರಾಸರಿ | x - x_mean |
ಉದಾಹರಣೆ:
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" ಪ್ರತಿಯೊಂದು ಕ್ರಮವಾಗಿ ಇರುವ `numbers` ಪಟ್ಟಿಯ ನಡುವಿನ ಎರಡು ನಿರಂತರ ಅಂಶಗಳ ನಡುವೆ 'delimeter' ಸಂಖ್ಯೆಯನ್ನು ಸೇರಿಸಿ.
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" ಈ ಫಂಕ್ಷನ್‌ಗೆ ಇನ್‌ಪುಟ್ ಎಂದರೆ ಸ್ಪೇಸ್‌ಗಳಿಂದ ಪ್ರತ್ಯೇಕಿಸಿದ ಅಡಕಿತ್ತಲೆಗಳ ಗುಂಪುಗಳನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್. 
    ಪ್ರತಿ ಗುಂಪಿಗಾಗಿ, ಅಡಕಿತ್ತಲೆಗಳ ಆಳವಾದ ಮಟ್ಟವನ್ನು ಔಟ್‌ಪುಟ್ ಮಾಡಬೇಕು.
    ಉದಾ:) ಗರಿಷ್ಠ ಎರಡು ಮಟ್ಟಗಳಲ್ಲಿ ಅಡಕಿತ್ತಲೆ ಹೊಂದಿದೆ,)) ಮೂರು ಮಟ್ಟಗಳಲ್ಲಿ ಅಡಕಿತ್ತಲೆ ಹೊಂದಿದೆ.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" ಕೊಟ್ಟಿರುವ ಉಪಸತ್ರವನ್ನು ಒಳಗೊಂಡಿರುವ ಪಟ್ಯಗಳ ಒಳಪಟ್ಟಿಯನ್ನು ಮಾತ್ರ ಫಿಲ್ಟರ್ ಮಾಡಿ.
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" ಕೊಟ್ಟಿರುವ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಗಾಗಿ, ಪಟ್ಟಿಯಲ್ಲಿರುವ ಎಲ್ಲಾ ಪೂರ್ಣಾಂಕಗಳ ಮೊತ್ತ ಮತ್ತು ಗುಣಲಬ್ಧವನ್ನು ಹೊಂದಿದ ಟ್ಯೂಪಲ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    ಖಾಲಿ ಮೊತ್ತ 0 ಗೆ ಸಮವಾಗಿರಬೇಕು ಮತ್ತು ಖಾಲಿ ಗುಣಲಬ್ಧ 1 ಗೆ ಸಮವಾಗಿರಬೇಕು.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" ಕೊಟ್ಟಿರುವ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯಿಂದ, ಇತರ ಪಟ್ಟಿಯನ್ನು ರಚಿಸಿ, ಇದರಲ್ಲಿರುವ ಪ್ರತಿಯೊಂದು ತಕ್ಷಣದವರೆಗೂ ಕಂಡುಬರುವ ಗರಿಷ್ಠ ತತ್ವಾಂಶವನ್ನು ಹೊಂದಿರುತ್ತದೆ.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" ಕೊಟ್ಟಿರುವ ಸ್ಟ್ರಿಂಗ್ ಪ್ಯಾಲಿಂಡ್ರೋಮ್ ಆಗಿದೆಯೇ ಎಂದು ಪರೀಕ್ಷಿಸಿ """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" ಇನ್‌ಪುಟ್‌ಗಳಲ್ಲಿ ಎರಡು ಸ್ಟ್ರಿಂಗ್‌ಗಳು a ಮತ್ತು b ಇರುತ್ತವೆ, ಅವುಗಳಲ್ಲಿರುವುದು ಕೇವಲ 1 ಮತ್ತು 0ಗಳು.
    ಈ ಇನ್‌ಪುಟ್‌ಗಳ ಮೇಲೆ ಬೈನರಿ XOR ಅನ್ನು ನಿರ್ವಹಿಸಿ ಮತ್ತು ಫಲಿತಾಂಶವನ್ನು ಸ್ಟ್ರಿಂಗ್ ರೂಪದಲ್ಲೇ ಹಿಂತಿರುಗಿಸಿ.
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" ಪಟ್ಟಿಯಲ್ಲಿರುವ ಸ್ಟ್ರಿಂಗ್‌ಗಳಲ್ಲಿ, ಉದ್ದವಾದದನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಒಂದೇ ಉದ್ದದ ಹಲವಾರು ಸ್ಟ್ರಿಂಗ್‌ಗಳು ಇದ್ದರೆ ಮೊದಲನೆಯದನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಪಟ್ಟಿಯು ಖಾಲಿಯಿದ್ದರೆ None ಹಿಂತಿರುಗಿಸಿ.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" ಎರಡು ಪೂರ್ಣಾಂಕಗಳು ಎ ಮತ್ತು ಬಿ ಗಳಿಗಿರುವ ಮಹತ್ತರ ಸಾಮಾನ್ಯ ಹಂತರವನ್ನು ಹಿಂತಿರುಗಿಸಿ
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" ಇನ್ಪುಟ್ ಸ್ಟ್ರಿಂಗ್‌ನ ಎಲ್ಲಾ ಪೂರ್ವಪ್ರತ್ಯಯಗಳ ಪಟ್ಟಿಯನ್ನು ಚಿಕ್ಕದುದಿಂದ ದೊಡ್ಡದುವರೆಗೆ ಮರಳಿ.
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" 0 ರಿಂದ n ಒಳಗೊಂಡಂತೆ ಅಂಕಿಗಳನ್ನು ಅಂತರವಿಲ್ಲದಂತೆ ಹೊಂದಿರುವ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" ಕೊಟ್ಟಿರುವ ಸ್ಟ್ರಿಂಗ್‌ನಲ್ಲಿ ಎಷ್ಟು ವಿಭಿನ್ನ ಅಕ್ಷರಗಳಿವೆ ಎಂದು ಕಂಡುಹಿಡಿಯಿರಿ
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" ಈ ಫಂಕ್ಷನ್‌ಗೆ ಇನ್‌ಪುಟ್ ಎಂದರೆ ಒಂದು ವಿಶೇಷ ASCII ಫಾರ್ಮ್ಯಾಟ್‌ನಲ್ಲಿ ಸಂಗೀತ ನೋಟ್ಸ್ ಅನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್.
    ನಿಮ್ಮ ಕಾರ್ಯವೆಂದರೆ ಈ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಪಾರ್ಸ್ ಮಾಡಿ ಮತ್ತು ಪ್ರತಿಯೊಂದು ನೋಟ್ಸ್ ಎಷ್ಟು ಬೀಟ್ಸ್ ಹೊತ್ತಿದೆ ಎಂಬುದನ್ನು ಸೂಚಿಸುವ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿ ಅನ್ನು ಹಿಂತಿರುಗಿಸುವುದು.

    ಇಲ್ಲಿ ಒಂದು ಲೆಜೆಂಡ್ ಇದೆ:
    'o' - ಪೂರ್ಣ ನೋಟ್ಸ್, ನಾಲ್ಕು ಬೀಟ್ಸ್ ಇರುತ್ತದೆ
    'o|' - ಅರ್ಧ ನೋಟ್ಸ್, ಎರಡು ಬೀಟ್ಸ್ ಇರುತ್ತದೆ
    '.|' - ಕ್ವಾಟರ್ ನೋಟ್ಸ್, ಒಂದು ಬೀಟ್ ಇರುತ್ತದೆ

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" ಕೊಟ್ಟಿರುವ ಉಪಸೂತ್ರವನ್ನು ಮೂಲ ಸ್ಟ್ರಿಂಗ್ನಲ್ಲಿ ಎಷ್ಟು ಬಾರಿ ಕಂಡುಹಿಡಿಯಬಹುದು ಎಂಬುದನ್ನು ಕಂಡುಹಿಡಿಯಿರಿ. ಓವರ್ಲಾಪ್ ಆಗುವ ಸಂದರ್ಭಗಳನ್ನು ಕೂಡ ಎಣಿಸಿ.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" ಎನ್ಪುಟ್ 'ಶೂನ್ಯ' ರಿಂದ 'ಒಂದು' ಗಳವರೆಗೆ ಸಂಖ್ಯೆಗಳ ಅಂತರಾಲದಿಂದ ವಿಭಜಿತ ಸ್ಟ್ರಿಂಗ್ ಆಗಿದೆ.
    ಮಾನ್ಯ ಆಯ್ಕೆಗಳು 'ಶೂನ್ಯ', 'ಒಂದು', 'ಎರಡು', 'ಮೂರು', 'ನಾಲ್ಕು', 'ಐದು', 'ಆರು', 'ಏಳು', 'ಎಂಟು' ಮತ್ತು 'ಒಂಬತ್ತು' .
    ಸಂಖ್ಯೆಗಳು ಕಿರಿಯದಿಂದ ದೊಡ್ಡದಿನವರೆಗೆ ಸಜ್ಜುಗೊಳಿಸಿದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" ಕೊಟ್ಟಲಾದ ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯಿಂದ ಪರಸ್ಪರ ಹತ್ತಿರವಾಗಿರುವ ಎರಡು ಸಂಖ್ಯೆಗಳ ಆಯ್ಕೆ ಮಾಡಿ, ಅವನ್ನು ಕ್ರಮದಲ್ಲಿ ಹಿಂತಿರುಗಿಸಿ.
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" ಕೊಟ್ಟಿರುವ ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿ, ಆ ಪಟ್ಟಿಗೆ ರೇಖೀಯ ಪರಿವರ್ತನೆಯನ್ನು ಅನ್ವಯಿಸಿ, 
    ಅತಿ ಚಿಕ್ಕ ಸಂಖ್ಯೆ 0 ಆಗುತ್ತದೆ ಮತ್ತು ಅತಿ ದೊಡ್ಡದು 1 ಆಗುತ್ತದೆ
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" ಕೊಟ್ಟಿರುವ ಪೈಥಾನ್ ಮೌಲ್ಯಗಳ ಪಟ್ಟಿಯನ್ನು ಕೇವಲ ಪೂರ್ಣಾಂಕಗಳಿಗಾಗಿ ಶೋಧಿಸಿ.
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" ಕೊಟ್ಟ ಸ್ಟ್ರಿಂಗ್‌ನ ಉದ್ದವನ್ನು ಹಿಂತಿರುಗಿಸಿ
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" ನೀಡಲಾದ ಸಂಖ್ಯೆ n ಗೆ, n ಅನ್ನು ಸಮಪ್ರಮಾಣದಲ್ಲಿ ಭಾಗಿಸುವ, nಕ್ಕಿಂತ ಚಿಕ್ಕದಾದ ದೊಡ್ಡ ಸಂಖ್ಯೆಯನ್ನು ಕಂಡುಹಿಡಿಯಿರಿ
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" ಕೊಟ್ಟಿರುವ ಪೂರ್ಣಾಂಕದ ಅಲ್ಪಾಂಶಾಂಶಕಗಳ ಪಟ್ಟಿಯನ್ನು ಅಲ್ಪಾಂಶಾಂಶಕಗಳು ಅಲ್ಪದಿಂದ ಮಹತ್ತರವಾದ ಕ್ರಮದಲ್ಲಿ ಹಿಂತಿರುಗಿಸಿ.
    ಪ್ರತಿಯೊಂದು ಅಲ್ಪಾಂಶಾಂಶಕವೂ ಅನೇಕ ಬಾರಿ ಹಿಂತಿರುಗಿಸಬೇಕು, ಅದು ಎಷ್ಟು ಬಾರಿ ಅಲ್ಪಾಂಶಾಂಶಕದಲ್ಲಿ ಕಾಣಿಸುತ್ತದೆ ಎಂದು.
    ನೀಡಿದ ಸಂಖ್ಯೆಯು ಎಲ್ಲಾ ಅಲ್ಪಾಂಶಾಂಶಕಗಳ ಗುಣಾಕಾರದ ಸಮಾನವಾಗಿರಬೇಕು.
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" ಒಂದು ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯಿಂದ, ಒಂದಕ್ಕಿಂತ ಹೆಚ್ಚು ಬಾರಿ ಸಂಭವಿಸುವ ಎಲ್ಲಾ ಅಂಶಗಳನ್ನು ತೆಗೆದುಹಾಕಿ. ಉಳಿದ ಅಂಶಗಳ ಕ್ರಮವನ್ನು ಇನ್ಪುಟ್‌ನಲ್ಲಿರುವಂತೆ ಉಳಿಸಿ.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" ನೀಡಲಾದ ಸ್ಟ್ರಿಂಗ್‌ಗಾಗಿ, ಸಣ್ಣ ಅಕ್ಷರಗಳನ್ನು ದೊಡ್ಡ ಅಕ್ಷರಗಳಿಗೆ ಮತ್ತು ದೊಡ್ಡ ಅಕ್ಷರಗಳನ್ನು ಸಣ್ಣ ಅಕ್ಷರಗಳಿಗೆ ತಿರುಗಿಸಿ.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" ಸೂಚಿಯಲ್ಲಿರುವ ಸ್ಟ್ರಿಂಗ್ಗಳನ್ನು ಸಮಾನವಾದ ಒಂದು ಸ್ಟ್ರಿಂಗಾಗಿ ಸೇರಿಸಿ
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" ಕೊಟ್ಟಿರುವ ಪೂರ್ವಪ್ರತ್ಯಯದಿಂದ ಪ್ರಾರಂಭವಾಗುವ ಸ್ಟ್ರಿಂಗ್‌ಗಳ ಇನ್‌ಪುಟ್ ಪಟ್ಟಿಯನ್ನು ಮಾತ್ರ ಫಿಲ್ಟರ್ ಮಾಡಿ.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""ಪಟ್ಟಿಯಲ್ಲಿನ ಐತರೆ ಮಾತ್ರ ಸಕಾರಾತ್ಮಕ ಸಂಖ್ಯೆಗಳನ್ನೇ ಹಿಂತಿರುಗಿಸಿ.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""ನೀಡಿದ ಸಂಖ್ಯೆಯು ಅಂಕಿಯಾಗಿದ್ದರೆ true ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ, ಇಲ್ಲದಿದ್ದರೆ false ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    ಪಾಲಿನೋಮಿಯಲ್ ಅನ್ನು ಗುಣಾಂಕಗಳುಳ್ಳ xs ಅನ್ನು x ಬಿಂದುದಲ್ಲಿ ಮೌಲ್ಯಮಾಪನ ಮಾಡುತ್ತದೆ.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""ಈ ಕಾರ್ಯವು ಪಟ್ಟಿಯನ್ನು l ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ ಮತ್ತು ಪಟ್ಟಿಯನ್ನು l' ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ, ಹಾಗೆಯೇ
    l' ಪಟ್ಟಿಯಲ್ಲಿರುವ ಪದಗಳು ಮೂರುಗೆ ಭಾಗವಾಗದ ಸೂಚ್ಯಂಕಗಳಲ್ಲಿ l ಪಟ್ಟಿಗೆ ಸಮಾನವಾಗಿರುತ್ತವೆ, ಆದರೆ ಮೂರುಗೆ ಭಾಗವಾಗುವ ಸೂಚ್ಯಂಕಗಳಲ್ಲಿ ಅದರ ಮೌಲ್ಯಗಳು
    l ಪಟ್ಟಿಯ ಸಮಾನ ಸೂಚ್ಯಂಕಗಳ ಮೌಲ್ಯಗಳಿಗೆ ಸಮಾನವಾಗಿರುತ್ತವೆ, ಆದರೆ ಅವುಗಳನ್ನು ವರ್ಗೀಕರಿಸಲಾಗುತ್ತದೆ.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""ಪಟ್ಟಿಯಲ್ಲಿರುವ ಅನನ್ಯ ಅಂಶಗಳನ್ನು ವಿಂಗಡಿಸಿ ಹಿಂತಿರುಗಿಸಿ
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""ಪಟ್ಟಿಯಲ್ಲಿರುವ ಗರಿಷ್ಠ ಅಂಶವನ್ನು ಮರುಕಳಿಸಿ.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""ಅಂಕೆ 7 ಎಷ್ಟು ಬಾರಿ ಬರುತ್ತದೆ ಎಂಬುದನ್ನು n ಕ್ಕಿಂತ ಕಡಿಮೆ ಇರುವ ಮತ್ತು 11 ಅಥವಾ 13 ರಿಂದ ಭಾಗಿಸಬಹುದಾದ ಪೂರ್ಣಾಂಕಗಳಲ್ಲಿ ಹಿಂತಿರುಗಿಸಿ.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""ಈ ಫಂಕ್ಷನ್ ಒಂದು ಪಟ್ಟಿ `l` ಅನ್ನು ತೆಗೆದು, ಪಟ್ಟಿ `l'` ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ, ಅದು `l` ನ ಆದಿಸಂಖ್ಯೆಯ ಸ್ಥಾನಗಳಲ್ಲಿ ಒಂದೇ ಆಗಿರುತ್ತದೆ, ಆದರೆ `l` ನ ಸಮಸಂಖ್ಯೆಯ ಸ್ಥಾನಗಳ ಮೌಲ್ಯಗಳನ್ನು ವರ್ಗೀಕರಿಸಿ ಹೊಂದಿರುತ್ತದೆ.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    ಮೂರು ಅಕ್ಷರಗಳ ಗುಂಪುಗಳನ್ನು ಚಕ್ರಾಕಾರವಾಗಿ ಪರಿವರ್ತಿಸುವ ಮೂಲಕ ಸಂಕೇತಿತ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಮರಳಿ ನೀಡುತ್ತದೆ.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    prime_fib n-ನೆಂબર್ನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ ಅದು ಫೀಬೊನಾಚಿ ಸಂಖ್ಯೆ ಮತ್ತು ಅದು ಪ್ರಧಾನ ಸಂಖ್ಯೆ ಕೂಡ ಆಗಿರುತ್ತದೆ.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero ಒಂದು ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ಒಳಕೊಳ್ಳುತ್ತದೆ.
    ಪಟ್ಟಿಯಲ್ಲಿ ಮೂರು ವಿಭಿನ್ನ ಅಂಶಗಳು ಶೂನ್ಯಕ್ಕೆ ಮೊತ್ತವಾಗಿದ್ದರೆ ಅದು True ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ, ಇಲ್ಲದಿದ್ದರೆ False ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    ಕಾಲ್ಪನಿಕವಾಗಿ ಒಂದು ರಸ್ತೆ, ಇದು ಸಂಪೂರ್ಣವಾಗಿ ಸೀಧಾ ಅಂತಹದ್ದಾಗಿದೆ ಮತ್ತು ಅನಂತವಾಗಿ ಉದ್ದವಾಗಿದೆ ಎಂದು ಊಹಿಸಿ.
n ಕಾರುಗಳು ಎಡದಿಂದ ಬಲಕ್ಕೆ ಚಲಿಸುತ್ತಿವೆ;  ಅದೇ ಸಮಯದಲ್ಲಿ, n ಕಾರುಗಳ ವಿಭಿನ್ನ ಸಮೂಹವು ಬಲದಿಂದ ಎಡಕ್ಕೆ ಚಲಿಸುತ್ತಿವೆ. ಈ ಎರಡು ಕಾರುಗಳ ಸಮೂಹಗಳು ಪರಸ್ಪರದಿಂದ ತುಂಬಾ ದೂರದಲ್ಲಿ ಪ್ರಾರಂಭಿಸುತ್ತವೆ. ಎಲ್ಲಾ ಕಾರುಗಳು ಒಂದೇ ವೇಗದಲ್ಲಿ ಚಲಿಸುತ್ತವೆ. ಎಡದಿಂದ ಬಲಕ್ಕೆ ಚಲಿಸುತ್ತಿರುವ ಕಾರು ಬಲದಿಂದ ಎಡಕ್ಕೆ ಚಲಿಸುತ್ತಿರುವ ಕಾರಿನಿಂದ ಡಿಕ್ಕಿ ಹೊಡೆಯುವಾಗ, ಅವು ಡಿಕ್ಕಿ ಹೊಡೆಯುತ್ತವೆ ಎಂದು ಹೇಳಲಾಗುತ್ತದೆ. ಆದರೆ, ಕಾರುಗಳು ಅನಂತವಾಗಿ ಬಲಿಷ್ಠವಾಗಿವೆ ಮತ್ತು ಶಕ್ತಿವೆ; ಫಲस्वರೂಪ, ಅವು ಡಿಕ್ಕಿ ಹೊಡೆದಿಲ್ಲವೆಂದು ತೋರಿ ತಮ್ಮ ಪಥದಲ್ಲಿ ಮುಂದುವರಿಯುತ್ತವೆ.

ಈ ಕಾರ್ಯವು ಇಂತಹ ಡಿಕ್ಕಿಗಳ ಸಂಖ್ಯೆಯನ್ನು ಔಟ್‌ಪುಟ್ ಮಾಡುತ್ತದೆ.
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""ಮತ್ತೆ ನೀಡಿದ ಪಟ್ಟಿಯ ಎಲ್ಲಾ ಅಂಶಗಳನ್ನು 1 ರಷ್ಟು ಹೆಚ್ಚಿಸಿ.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero ಎಂಬುದು ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ಇನ್‌ಪುಟ್‌ನಂತೆ ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ.
    ಪಟ್ಟಿಯಲ್ಲಿರುವ ಎರಡು ವಿಭಿನ್ನ ಅಂಶಗಳು ಶೂನ್ಯಕ್ಕೆ ಮೊತ್ತ ಹೊಂದಿದರೆ, ಇದು True ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ,
    ಇಲ್ಲದಿದ್ದರೆ, False ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""ಇನ್‌ಪುಟ್ ಸಂಖ್ಯೆಯ x ನ ಸಂಖ್ಯಾ ಆಧಾರವನ್ನು ಬದಲಾಯಿಸಿ.
    ಪರಿವರ್ತನೆಯ ನಂತರದ ಸ್ಟ್ರಿಂಗ್ ಪ್ರತಿನಿಧಿಯನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    ಆಧಾರ ಸಂಖ್ಯೆಗಳು 10 ಕ್ಕಿಂತ ಕಡಿಮೆ.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""ಒಂದು ತ್ರಿಭುಜದ ಬದಿಯ ಉದ್ದ ಮತ್ತು ಎತ್ತರವನ್ನು ನೀಡಿದರೆ, ಪ್ರದೇಶವನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""Fib4 ಸಂಖ್ಯೆ ಕ್ರಮವು ಕೆಳಗಿನಂತೆ ವ್ಯಾಖ್ಯಾನಿಸಲಾದ ಫಿಬೋನಾಚಿ ಕ್ರಮದಂತೆ ಹೊಂದಿರುವ ಕ್ರಮವಾಗಿದೆ:
    fib4 -> 0
    fib4 -> 0
    fib4 -> 2
    fib4 -> 0
    fib4 -> fib4 + fib4 + fib4 + fib4.
    ದಯವಿಟ್ಟು fib4 ಸಂಖ್ಯೆ ಕ್ರಮದ n-ನೇ ಅಂಶವನ್ನು ಪರಿಣಾಮಕಾರಿವಾಗಿ ಗಣನೆ ಮಾಡುವ ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. ಪುನರಾವೃತ್ತಿಯನ್ನು ಬಳಸುಬೇಡಿ.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""ಪಟ್ಟಿಯಲ್ಲಿರುವ ಅಂಶಗಳ ಮಧ್ಯಮದ ಮೌಲ್ಯವನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    ಕೊಟ್ಟಿರುವ ಸ್ಟ್ರಿಂಗ್ ಪಲಿಂಡ್ರೋಮ್ ಆಗಿದೆಯೇ ಎಂದು ಪರಿಶೀಲಿಸುತ್ತದೆ
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""2^n ಅನ್ನು p ನಲ್ಲಿ ಭಾಗಿಸಿದ ಉಳಿತಾಯವನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    ಪ್ರತಿ ಅಕ್ಷರವನ್ನು ಅಕ್ಷರಮಾಲೆಯಲ್ಲಿನ 5 ಅಕ್ಷರಗಳಷ್ಟು ಸ್ಲೈಡ್ ಮಾಡುವ ಮೂಲಕ ಎನ್ಕೋಡ್ ಮಾಡಲಾದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಮರಳಿಸುತ್ತದೆ.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    remove_vowels ಒಂದು ಫಂಕ್ಷನ್ ಆಗಿದ್ದು, ಇದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ತೆಗೆದುಕೊಂಡು ಸ್ವರಗಳನ್ನು ಬಿಟ್ಟುಕೊಂಡು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""ಯಾದರೆ ಎಲ್ಲಾ ಸಂಖ್ಯೆಗಳು ಪಟ್ಟಿ l ನಲ್ಲಿ ತಹತಾನ್ t ಗಿಂತ ಕಡಿಮೆ ಇದ್ದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""ಎರಡು ಸಂಖ್ಯೆಗಳಾದ x ಮತ್ತು y ಅನ್ನು ಸೇರಿಸಿ
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    ಎರಡು ಪದಗಳಲ್ಲಿ ಒಂದೇ ಅಕ್ಷರಗಳಿವೆ ಎಂಬುದನ್ನು ಪರಿಶೀಲಿಸಿ.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""nನೆಯ ಫಿಬೊನಾಚಿ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" ಬ್ರಾಕೆಟ್‌ಗಳು ""<"" ಮತ್ತು "">"" ಅಕ್ಷರಗಳ ಸರಣಿಯಾಗಿದೆ.
    ಪ್ರತಿಯೊಂದು ಆರಂಭಿಕ ಬ್ರಾಕೆಟ್‌ಗೆ ಹೊಂದಾಣಿಕೆಯ ಮುಚ್ಚಿದ ಬ್ರಾಕೆಟ್ ಇದ್ದರೆ ನಿಜ ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""ಪಟ್ಟಿಯ ಅಂಶಗಳು ಏಕಾಂತರವಾಗಿ ಹೆಚ್ಚಾಗುತ್ತಾ ಅಥವಾ ಕಡಿಮೆಯಾಗುತ್ತಾ ಇದ್ದರೆ ಸತ್ಯವನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""ಎರಡು ಪಟ್ಟಿಗಳ sorted unique ಸಾಮಾನ್ಯ ಅಂಶಗಳನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""n ಗರಿಷ್ಠ ಪ್ರೈಮ್ ಘಟಕವನ್ನು ಹಿಂತಿರುಗಿಸಿ. n > 1 ಮತ್ತು ಪ್ರೈಮ್ ಅಲ್ಲ ಎಂದು ನಿರ್ಧರಿಸಿ.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""sum_to_n ಎಂಬುದು 1 ರಿಂದ n ವರೆಗೆ ಸಂಖ್ಯೆಗಳ ಮೊತ್ತವನ್ನು ಸೇರಿಸುವ ಫಂಕ್ಷನ್.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" ಕೋಶಗಳು """" ನ ಸರಣಿಯಾಗಿದೆ.
    ಪ್ರತಿಯೊಂದು ತೆರೆಯುವ ಕೋಶಕ್ಕೂ ಹೊಂದಾಣಿಕೆಯಾಗುವ ಮುಚ್ಚುವ ಕೋಶವಿರುವುದಾದರೆ True ಅನ್ನು ಹಿಂದಿರುಗಿಸಿ.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" xs ಪ್ಲೀನೋಮಿಯಲ್‌ನ ಗుణಾಂಕಗಳನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತವೆ.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     ಈ ಪ್ಲೀನೋಮಿಯಲ್‌ನ ವ್ಯುತ್ಪನ್ನವನ್ನು ಅದೇ ರೂಪದಲ್ಲಿ ಹಿಂತಿರುಗಿಸಿ.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""ಈ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಅನುವಾದಿಸಿ:

ಫಿಬ್‌ಫಿಬ್ ಸಂಖ್ಯೆ ಕ್ರಮವು ಫಿಬೊನಾಚಿ ಕ್ರಮದಂತಹ ಕ್ರಮವಾಗಿದೆ, ಇದು ಈ ಕೆಳಗಿನಂತೆಯೇ ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿದೆ:
    fibfib == 0
    fibfib == 0
    fibfib == 1
    fibfib == fibfib + fibfib + fibfib.
    ದಯವಿಟ್ಟು ಫಿಬ್‌ಫಿಬ್ ಸಂಖ್ಯೆ ಕ್ರಮದ n-ನೇ ಅಂಶವನ್ನು ಪರಿಣಾಮಕಾರಿಯಾಗಿ ಲೆಕ್ಕಹಾಕಲು ಒಂದು ಫಂಕ್ಷನ್ ಬರೆಯಿರಿ.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
ಹೆಚ್ಚು ಪರೀಕ್ಷಾ ಪ್ರಕರಣಗಳನ್ನು ಸೇರಿಸಿ.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""ಪೂರ್ಣಾಂಕ x ನ ಅಂಕೆಗಳನ್ನು ವೃತ್ತಾಕಾರದವಾಗಿ ಸರಿಸಿ, ಅಂಕೆಗಳನ್ನು ಬಲಕ್ಕೆ shift ಮೂಲಕ ಸರಿಸಿ ಮತ್ತು ಫಲಿತಾಂಶವನ್ನು ಸ್ಟ್ರಿಂಗ್ ರೂಪದಲ್ಲಿ ಹಿಂತಿರುಗಿಸಿ.
shift > ಅಂಕೆಗಳ ಸಂಖ್ಯೆಯಾದರೆ, ಅಂಕೆಗಳನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""ಈ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಅನುವಾದಿಸಿ:

ಕಾರ್ಯ
    ಪಾಠವನ್ನು ಇನ್‌ಪುಟ್ ಆಗಿ ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಮೇಲಿನ ಅಕ್ಷರಗಳ ASCII ಕೋಡ್‌ಗಳ ಮೊತ್ತವನ್ನು ಮಾತ್ರ ಹಿಂತಿರುಗಿಸುವ ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ.

    ಉದಾಹರಣೆಗಳು:
        digitSum => 0
        digitSum => 131
        digitSum => 67
        digitSum => 69
        digitSum => 131
        digitSum => 153
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    ಈ ಕಾರ್ಯದಲ್ಲಿ, ನಿಮಗೆ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ನೀಡಲಾಗುತ್ತದೆ, ಅದು ಒಂದು ಫಲದ ಬುಟ್ಟಿಯಲ್ಲಿ ಹಂಚಲ್ಪಟ್ಟ ಸೇಬುಗಳು ಮತ್ತು ಕಿತ್ತಳೆಗಳನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ. ಈ ಬುಟ್ಟಿಯಲ್ಲಿ ಸೇಬುಗಳು, ಕಿತ್ತಳೆಗಳು ಮತ್ತು ಮಾವಿನ ಹಣ್ಣುಗಳು ಇವೆ. 
ಒಟ್ಟು ಕಿತ್ತಳೆಗಳು ಮತ್ತು ಸೇಬುಗಳ ಸಂಖ್ಯೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್ ಮತ್ತು ಬುಟ್ಟಿಯಲ್ಲಿ ಒಟ್ಟು ಹಣ್ಣುಗಳ ಸಂಖ್ಯೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಪೂರ್ಣಾಂಕವನ್ನು ನೀಡಿದಾಗ, 
ಬುಟ್ಟಿಯಲ್ಲಿ ಇರುವ ಮಾವಿನ ಹಣ್ಣುಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿಸಿ.
ಉದಾಹರಣೆಗೆ:
fruit_distribution ->19 - 5 - 6 = 8
fruit_distribution -> 3 - 0 - 1 = 2
fruit_distribution -> 100 - 2 - 3 = 95
fruit_distribution -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    ಕನ್ನಡಕ್ಕೆ ಈ ವಾಕ್ಯವನ್ನು ಅನುವಾದಿಸಿ:

""ಒಂದು ಮರದ ಶಾಖೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಶ್ರೇಣಿಯನ್ನು ನೀಡಿದರೆ

ನಿಮ್ಮ ಕಾರ್ಯವು ಶ್ರೇಣಿಯಲ್ಲಿರುವ ಶೂನ್ಯಕ್ಕಿಂತ ದೊಡ್ಡ ಅಂಕಿಗಳ ಶ್ರೇಣಿಯಲ್ಲಿರುವ ಅಂಕಿಯನ್ನು ತೆಗೆದು ಅನುವಾದಿಸುವುದು.

ಅನುಕೂಲಿತ ಅಂಕಿಯು ಅತ್ಯಂತ ಕಡಿಮೆ ಸಮ ಸಂಖ್ಯೆಯೊಂದಿಗೆ ಇರಬೇಕು.

ಅದೇ ಸಮ ಸಂಖ್ಯೆಯುಳ್ಳ ಅನೇಕ ಅಂಕಿಗಳನ್ನು ಕಂಡುಹಿಡಿದರೆ, ಅತಿ ಕಡಿಮೆ ಸೂಚ್ಯಂಕ ಹೊಂದಿರುವ ಅಂಕಿಯನ್ನು ಮರಳಿ ನೀಡಿರಿ.

ಅನುವಾದಿಸಲಾದ ಅಂಕಿಯನ್ನು ಪಟ್ಟಿಯ ರೂಪದಲ್ಲಿ ಮರಳಿ ನೀಡಬೇಕು [ಅತ್ಯಂತ ಕಡಿಮೆ ಮೌಲ್ಯ, ಅದರ ಸೂಚ್ಯಂಕ],

ಯಾವುದೇ ಸಮ ಸಂಖ್ಯೆಗಳಿಲ್ಲ ಅಥವಾ ಶ್ರೇಣಿಯನ್ನು ಖಾಲಿ ನೀಡಿದರೆ, [] ಅನ್ನು ಮರಳಿ ನೀಡಿರಿ.

ಉದಾಹರಣೆ1:
    ಇನ್‌ಪುಟ್: [4,2,3]
    ಔಟ್‌ಪುಟ್: [2, 1]
    ವಿವರಣೆ: 2 ಅತಿ ಕಡಿಮೆ ಸಮ ಸಂಖ್ಯೆ ಹೊಂದಿದೆ, ಮತ್ತು 2 ಅತಿ ಕಡಿಮೆ ಸೂಚ್ಯಂಕ ಹೊಂದಿದೆ.

ಉದಾಹರಣೆ2:
    ಇನ್‌ಪುಟ್: [1,2,3]
    ಔಟ್‌ಪುಟ್: [2, 1]
    ವಿವರಣೆ: 2 ಅತಿ ಕಡಿಮೆ ಸಮ ಸಂಖ್ಯೆ ಹೊಂದಿದೆ, ಮತ್ತು 2 ಅತಿ ಕಡಿಮೆ ಸೂಚ್ಯಂಕ ಹೊಂದಿದೆ.

ಉದಾಹರಣೆ3:
    ಇನ್‌ಪುಟ್: []
    ಔಟ್‌ಪುಟ್: []

ಉದಾಹರಣೆ4:
    ಇನ್‌ಪುಟ್: [5, 0, 3, 0, 4, 2]
    ಔಟ್‌ಪುಟ್: [0, 1]
    ವಿವರಣೆ: 0 ಅತಿ ಕಡಿಮೆ ಮೌಲ್ಯ ಹೊಂದಿದೆ, ಆದರೆ ಎರಡು ಶೂನ್ಯಗಳಿವೆ,
                 ಆದ್ದರಿಂದ ನಾವು ಮೊದಲ ಶೂನ್ಯವನ್ನು ಆಯ್ಕೆ ಮಾಡುತ್ತೇವೆ, ಇದರಲ್ಲಿ ಅತಿ ಕಡಿಮೆ ಸೂಚ್ಯಂಕವಿದೆ.

ನಿಯಮಗಳು:
    * 1 <= nodes.length <= 10000
    * 0 <= node.value""
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    ಇಂಟಿಜರ್‌ಗಳ ಅರೆ `arr` ಅನ್ನು ನೀಡಿದಾಗ, ಅರೆ ಪಲಿಂಡ್ರೋಮಿಕ್ ಆಗಲು ಅರೆ ಬದಲಾಯಿಸಬೇಕಾದ ಕನಿಷ್ಟ ಅಂಶಗಳ ಸಂಖ್ಯೆಯನ್ನು ಕಂಡುಹಿಡಿಯಿರಿ. ಪಲಿಂಡ್ರೋಮಿಕ್ ಅರೆ ಅಂದರೆ ಹಿಂದುಮುಂದಾಗಿ ಓದಿದಾಗ ಒಂದೇ ರೀತಿ ಇರುವ ಅರೆ. ಒಂದು ಬದಲಾವಣೆಯಲ್ಲಿ, ನೀವು ಒಂದು ಅಂಶವನ್ನು ಬೇರೆ ಯಾವುದಾದರೂ ಅಂಶಕ್ಕೆ ಬದಲಾಯಿಸಬಹುದು.

ಉದಾಹರಣೆಗೆ:
```python
smallest_change == 4
smallest_change == 1
smallest_change == 0
```
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""ನೀವು ನೀಡಿದ ಸಂಖ್ಯೆಯು 3 ಪ್ರೈಮ್ ಸಂಖ್ಯೆಗಳ ಗುಣಲಬ್ಧವಾಗಿದ್ದರೆ ನಿಜವನ್ನು ಹಿಂತಿರುಗಿಸುವ ಮತ್ತು ಇಲ್ಲದಿದ್ದರೆ ಸುಳ್ಳನ್ನು ಹಿಂತಿರುಗಿಸುವ ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ. 100 ಕ್ಕಿಂತ ಕಡಿಮೆ ಎಂದು ತಿಳಿದುಕೊಳ್ಳಿ.
ಉದಾಹರಣೆ:
is_multiply_prime == True
30 = 2 * 3 * 5
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""ನಿಮ್ಮ ಕೆಲಸವು ಒಂದು ಫಂಕ್ಷನ್ ಅನ್ನು ಬರೆಯುವುದು, ಅದು ಸಂಖ್ಯೆ x ಒಂದು ಸರಳ ಶಕ್ತಿಯ n ಆಗಿದೆಯೇ ಎಂದು ತೋರಿಸುತ್ತದೆ ಅಥವಾ ಬೇರೆ ಸಂದರ್ಭಗಳಲ್ಲಿ ತೋರಿಸದು.
    x n**int=x ಆದಾಗ x n ನ ಸರಳ ಶಕ್ತಿಯಾಗಿದೆ.
    ಉದಾಹರಣೆಗೆ:
    is_simple_power => true
    is_simple_power => true
    is_simple_power => true
    is_simple_power => false
    is_simple_power => false
    is_simple_power => false
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""ನೀವು ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯುವ ಕೆಲಸವನ್ನು ಪಡೆದಿದ್ದೀರಿ, ಅದು 
    ಹೆಕ್ಸಾಡೆಸಿಮಲ್ ಸಂಖ್ಯೆಯನ್ನು ಸ್ಟ್ರಿಂಗ್ ರೂಪದಲ್ಲಿ ಸ್ವೀಕರಿಸುತ್ತದೆ 
    ಮತ್ತು ಹೆಕ್ಸಾಡೆಸಿಮಲ್ ಅಂಕಿಗಳಲ್ಲಿ ಪ್ರೈಮ್ ಅಂಕಿಗಳ ಸಂಖ್ಯೆಯನ್ನು ಎಣಿಸುತ್ತದೆ 
    (ಪ್ರೈಮ್ ಸಂಖ್ಯೆ ಅಥವಾ ಪ್ರೈಮ್ ಒಂದು ನೈಸರ್ಗಿಕ ಸಂಖ್ಯೆ, ಅದು 1ಕ್ಕಿಂತ ದೊಡ್ಡದು ಮತ್ತು 
    ಎರಡು ಚಿಕ್ಕ ನೈಸರ್ಗಿಕ ಸಂಖ್ಯೆಗಳ ಗುಣಲಬ್ಧವಲ್ಲ).
    ಹೆಕ್ಸಾಡೆಸಿಮಲ್ ಅಂಕಿಗಳು 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    ಪ್ರೈಮ್ ಸಂಖ್ಯೆಗಳು 2, 3, 5, 7, 11, 13, 17,...
    ಆದ್ದರಿಂದ ನೀವು ಈ ಕೆಳಗಿನ ಅಂಕಿಗಳ ಸಂಖ್ಯೆಯನ್ನು ನಿರ್ಧರಿಸಬೇಕು: 2, 3, 5, 7, 
    B, D.
    ಗಮನಿಸಿ: ನೀವು ಇನ್ಪುಟ್ ಸರಿಯಾದ ಅಥವಾ ಖಾಲಿ ಸ್ಟ್ರಿಂಗ್ ಎಂದು ಊಹಿಸಬಹುದು, 
    ಮತ್ತು ಚಿಹ್ನೆಗಳು A, B, C, D, E, F ಎಂದೆಂದಿಗೂ ದೊಡ್ಡಕ್ಷರದಲ್ಲಿರುತ್ತವೆ.
    ಉದಾಹರಣೆಗಳು:
    num = ""AB"" ಆದರೆ ಔಟ್‌ಪುಟ್ 1 ಆಗಿರಬೇಕು.
    num = ""1077E"" ಆದರೆ ಔಟ್‌ಪುಟ್ 2 ಆಗಿರಬೇಕು.
    num = ""ABED1A33"" ಆದರೆ ಔಟ್‌ಪುಟ್ 4 ಆಗಿರಬೇಕು.
    num = ""123456789ABCDEF0"" ಆದರೆ ಔಟ್‌ಪುಟ್ 6 ಆಗಿರಬೇಕು.
    num = ""2020"" ಆದರೆ ಔಟ್‌ಪುಟ್ 2 ಆಗಿರಬೇಕು.
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""ನಿಮಗೆ ಡೆಸಿಮಲ್ ರೂಪದಲ್ಲಿ ಒಂದು ಸಂಖ್ಯೆಯನ್ನು ನೀಡಲಾಗುತ್ತದೆ ಮತ್ತು ಅದನ್ನು ಬೈನರಿ ಫಾರ್ಮ್ಯಾಟ್ ಗೆ ಪರಿವರ್ತಿಸಲು ನಿಮ್ಮ ಕಾರ್ಯವಾಗಿದೆ. ಫಂಕ್ಷನ್ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು, ಪ್ರತಿಯೊಂದು ಅಕ್ಷರವು ಬೈನರಿ ಸಂಖ್ಯೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ. ಸ್ಟ್ರಿಂಗ್‌ನ ಪ್ರತಿಯೊಂದು ಅಕ್ಷರವೂ '0' ಅಥವಾ '1' ಆಗಿರುತ್ತದೆ.

ಸ್ಟ್ರಿಂಗ್‌ನ ಆರಂಭದಲ್ಲಿ ಮತ್ತು ಅಂತ್ಯದಲ್ಲಿ 'db' ಎಂಬ ಹೆಚ್ಚುವರಿ ಎರಡು ಅಕ್ಷರಗಳು ಇರುತ್ತವೆ. ಫಾರ್ಮ್ಯಾಟ್ ಗೆ ಸಹಾಯ ಮಾಡಲು ಹೆಚ್ಚುವರಿ ಅಕ್ಷರಗಳು ಅಲ್ಲಿ ಇರುತ್ತವೆ.

ಉದಾಹರಣೆಗಳು:
decimal_to_binary   # ""db1111db"" ಹಿಂತಿರುಗಿಸುತ್ತದೆ
decimal_to_binary   # ""db100000db"" ಹಿಂತಿರುಗಿಸುತ್ತದೆ
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""ನಿಮಗೆ ಒಂದು ಸ್ಟ್ರಿಂಗ್ s ನೀಡಲಾಗಿದೆ.
ನಿಮ್ಮ ಕಾರ್ಯವು ಸ್ಟ್ರಿಂಗ್ ಸಂತೋಷಕರವಾಗಿದೆಯೇ ಅಥವಾ ಇಲ್ಲವೇ ಎಂಬುದನ್ನು ಪರಿಶೀಲಿಸುವುದಾಗಿದೆ.
ಸ್ಟ್ರಿಂಗ್ ಕನಿಷ್ಠ 3 ಅಕ್ಷರಗಳ ಉದ್ದವಿರುವ ಮತ್ತು ಪ್ರತಿಯೊಂದು 3 ನಿರಂತರ ಅಕ್ಷರಗಳು ವಿಭಿನ್ನವಾಗಿರುವಾಗ ಸಂತೋಷಕರವೆಂದು ಪರಿಗಣಿಸಲಾಗುತ್ತದೆ.
ಉದಾಹರಣೆಗೆ:
is_happy => ಸುಳ್ಳು
is_happy => ಸುಳ್ಳು
is_happy => ಸತ್ಯ
is_happy => ಸುಳ್ಳು
is_happy => ಸತ್ಯ
is_happy => ಸುಳ್ಳು
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""ಇದು ಸೆಮಿಸ್ಟರ್‌ನ ಕೊನೆಯ ವಾರ ಮತ್ತು ಶಿಕ್ಷಕನು ವಿದ್ಯಾರ್ಥಿಗಳಿಗೆ ಗ್ರೇಡ್‌ಗಳನ್ನು ನೀಡಬೇಕು. ಶಿಕ್ಷಕನು ಗ್ರೇಡಿಂಗ್‌ಗಾಗಿ ತನ್ನದೇ ಆದ ಅಲ್ಗಾರಿಥಮ್ ಅನ್ನು ಮಾಡುತ್ತಿದ್ದಾಳೆ. ಏಕೈಕ ಸಮಸ್ಯೆ ಎಂದರೆ, ಅವಳು ಗ್ರೇಡಿಂಗ್‌ಗೆ ಬಳಸಿದ ಕೋಡ್ ಅನ್ನು ಕಳೆದುಕೊಂಡಿದ್ದಾಳೆ. ಅವಳು ನಿಮಗೆ ಕೆಲವು ವಿದ್ಯಾರ್ಥಿಗಳ GPA ಗಳು ಇರುವ ಪಟ್ಟಿಯನ್ನು ಕೊಟ್ಟಿದ್ದಾಳೆ ಮತ್ತು ನೀವು ಈ ಕೆಳಗಿನ ಟೇಬಲ್ ಬಳಸಿ ಲೆಟರ್ ಗ್ರೇಡ್‌ಗಳ ಪಟ್ಟಿಯನ್ನು ಔಟ್‌ಪುಟ್ ಮಾಡುವ ಒಂದು ಫಂಕ್ಷನ್ ಅನ್ನು ಬರೆಯಬೇಕು:

             GPA       |    ಲೆಟರ್ ಗ್ರೇಡ್
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    ಉದಾಹರಣೆ:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""ಹೆಸರುಗಳನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಸ್ಟ್ರಿಂಗ್ ಉದ್ದವು ಮೂಲ ಸಂಖ್ಯೆಯಾದರೆ True ಅನ್ನು ಅಥವಾ ಇಲ್ಲದಿದ್ದರೆ False ಅನ್ನು ಹಿಂದಿರುಗಿಸುವ ಫಂಕ್ಷನ್ ಅನ್ನು ಬರೆಯಿರಿ
ಉದಾಹರಣೆಗಳು
prime_length == True
prime_length == True
prime_length == True
prime_length == False
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೀಡಿದರೆ, 1 ರಿಂದ ಪ್ರಾರಂಭವಾಗುವ ಅಥವಾ 1 ನಿಂದ ಅಂತ್ಯಗೊಳ್ಳುವ n-ಅಂಕಿಯ ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳ ಸಂಖ್ಯೆಯನ್ನು ಮರಳಿ ನೀಡಿ.
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""ಸಕಾರಾತ್ಮಕ ಪೂರ್ಣಾಂಕ N ನೀಡಿದಲ್ಲಿ, ಅದರ ಅಂಕೆಗಳ ಒಟ್ಟು ಮೊತ್ತವನ್ನು ದ್ವಿಮಾನದಲ್ಲಿ ಹಿಂತಿರುಗಿಸಿ.

    ಉದಾಹರಣೆ
        N = 1000 ಇದ್ದರೆ, ಅಂಕೆಗಳ ಮೊತ್ತವು 1 ಆಗಿರುತ್ತದೆ, ಆದ್ದರಿಂದ ಫಲಿತಾಂಶ ""1"" ಆಗಿರಬೇಕು.
        N = 150 ಇದ್ದರೆ, ಅಂಕೆಗಳ ಮೊತ್ತವು 6 ಆಗಿರುತ್ತದೆ, ಆದ್ದರಿಂದ ಫಲಿತಾಂಶ ""110"" ಆಗಿರಬೇಕು.
        N = 147 ಇದ್ದರೆ, ಅಂಕೆಗಳ ಮೊತ್ತವು 12 ಆಗಿರುತ್ತದೆ, ಆದ್ದರಿಂದ ಫಲಿತಾಂಶ ""1100"" ಆಗಿರಬೇಕು.

    ಚರಗಳು:
        @N ಪೂರ್ಣಾಂಕ
             ನಿರ್ಬಂಧಗಳು: 0 ≤ N ≤ 10000.
    ಔಟ್‌ಪುಟ್:
         ದ್ವಿಮಾನ ಸಂಖ್ಯೆಯ ಒಂದು ಸ್ಟ್ರಿಂಗ್
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""ಕೊಟ್ಟಿರುವ ಖಾಲಿಯಲ್ಲದ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯಲ್ಲಿ lst. ಬೆಸೆಯಿರುವ ಸ್ಥಾನದ ಮೇಲೆ ಇರುವ ಜೋಡ ಸಂಖ್ಯೆಗಳನ್ನು ಸೇರಿಸಿ..

    ಉದಾಹರಣೆಗಳು:
        add ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    ಈ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಅನುವಾದಿಸಿ.

```python
string ಅನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಅದರ ಕ್ರಮಿತ ಆವೃತ್ತಿಯನ್ನು 반환ಿಸುವ ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ.
    ಸ್ಟ್ರಿಂಗ್‌ನ ಕ್ರಮಿತ ಆವೃತ್ತಿ ಎಂದರೆ ಎಲ್ಲಾ ಪದಗಳು
    ಹೊಸ ಪದದಿಂದ ಬದಲಾಯಿಸಲ್ಪಡುತ್ತದೆ, ಎಲ್ಲ ಅಕ್ಷರಗಳು ಏರಿಕೆ ಕ್ರಮದಲ್ಲಿ
    ಅಸ್ಕಿ ಮೌಲ್ಯದ ಆಧಾರದ ಮೇಲೆ ಸರಿಹೊಂದಿಸಲಾಗುತ್ತದೆ.
    ಟಿಪ್ಪಣಿ: ನೀವು ವಾಕ್ಯದಲ್ಲಿ ಪದಗಳ ಮತ್ತು ಖಾಲಿ ಜಾಗಗಳ ಕ್ರಮವನ್ನು ಕಾಪಾಡಬೇಕು.

    ಉದಾಹರಣೆಗೆ:
    anti_shuffle 'Hi' ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ
    anti_shuffle 'ehllo' ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ
    anti_shuffle 'Hello !!!Wdlor' ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ
```
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    ನೀವು ಎರಡು ಡೈಮೆನ್ಷನಲ್ ಡೇಟಾವನ್ನು ಕೊಟ್ಟಿದ್ದೀರಿ, ಇದು ನೆಸ್ಟೆಡ್ ಲಿಸ್ಟ್ಸ್ ರೂಪದಲ್ಲಿದೆ, ಇದು ಮ್ಯಾಟ್ರಿಕ್ಸ್‌ಗೆ ಹೋಲುತ್ತದೆ, ಆದಾಗ್ಯೂ, ಮ್ಯಾಟ್ರಿಕ್ಸ್ಗಳಿಗೆ ಬೇರೆಯಾಗಿಯೂ, ಪ್ರತಿ ಸಾಲು ವಿಭಿನ್ನ ಸಂಖ್ಯೆಯ ಕಾಲಮ್ಗಳನ್ನು ಹೊಂದಿರಬಹುದು. lst ಮತ್ತು ಪೂರ್ಣಾಂಕ x ನೀಡಲಾಗಿದೆ, ಪಟ್ಟಿಯಲ್ಲಿರುವ x ಪೂರ್ಣಾಂಕಗಳನ್ನು ಹುಡುಕಿ, ಮತ್ತು tuple ಗಳ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಿ, [, ...] ಆದ್ದರಿಂದ ಪ್ರತಿ tuple ಒಂದು ಸಂಯೋಜನೆ -, 0 ರಿಂದ ಪ್ರಾರಂಭವಾಗುತ್ತದೆ. ಸಂಯೋಜನೆಗಳನ್ನು ಆರಂಭದಲ್ಲಿ ಸಾಲುಗಳ ಮೂಲಕ ಏರಿಕೆ ಕ್ರಮದಲ್ಲಿ ಸರಿಸಿ. ಇನ್ನೂ, ಸಾಲು ಕಾಲಮ್ಗಳ ಸಂಯೋಜನೆಗಳನ್ನು ಇಳಿಕೆ ಕ್ರಮದಲ್ಲಿ ಸರಿಸಿ.

ಉದಾಹರಣೆಗಳು:
get_row([
  [1, 2, 3, 4, 5, 6],
  [1, 2, 3, 4, 1, 6],
  [1, 2, 3, 4, 5, 1]
], 1) == [,,,,]
get_row == []
get_row == []
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    ಕೊಟ್ಟಿರುವ ಬಾಹ್ಯಾವಳಿಯಲ್ಲಿ ಶೂನ್ಯಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳನ್ನು ಹೊಂದಿದ್ದು, ಬಾಹ್ಯಾವಳಿಯನ್ನು ವಿಂಗಡಿಸಿದ ನಂತರದ ನಕಲನ್ನು ಹಿಂತಿರುಗಿಸಿ,
    ಮೊದಲ ಸೂಚ್ಯಂಕದ ಮೌಲ್ಯ ಮತ್ತು ಕೊನೆಯ ಸೂಚ್ಯಂಕದ ಮೌಲ್ಯದ ಮೊತ್ತವು ವಿರೋಧ ಇದ್ದರೆ, ಬಾಹ್ಯಾವಳಿಯನ್ನು ಏರಿಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಿ,
    ಅಥವಾ ಮೊತ್ತವು ಸಮ ಇದ್ದರೆ, ಬಾಹ್ಯಾವಳಿಯನ್ನು ಇಳಿಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಿ.

    ಟಿಪ್ಪಣಿ:
    * ಕೊಟ್ಟಿರುವ ಬಾಹ್ಯಾವಳಿಯನ್ನು ಬದಲಾಯಿಸಬೇಡಿ.

    ಉದಾಹರಣೆಗಳು:
    * sort_array => []
    * sort_array => [5]
    * sort_array => [0, 1, 2, 3, 4, 5]
    * sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""ಈ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಅನುವಾದಿಸಿ: ""encrypt ಎಂಬ ಒಂದು ಫಂಕ್ಷನ್ ಅನ್ನು ರಚಿಸಿ, ಅದು ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಆರ್ಗ್ಯುಮೆಂಟ್ ಆಗಿ ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ ಮತ್ತು ವರ್ಣಮಾಲೆಯನ್ನು ತಿರುಗಿಸುವ ಮೂಲಕ ಎನ್ಕ್ರಿಪ್ಟ್ ಮಾಡಿದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಮರಳಿಸುತ್ತದೆ. ವರ್ಣಮಾಲೆಯನ್ನು ತಿರುಗಿಸುವ ರೀತಿ, ಅಕ್ಷರಗಳು ಎರಡು ಗುಣಿತ ಎರಡು ಸ್ಥಾನಗಳ ಮೂಲಕ ಕೆಳಕ್ಕೆ ಸರಿಯುವಂತೆ ಮಾಡಬೇಕು. ಉದಾಹರಣೆಗೆ: encrypt 'lm' ಅನ್ನು ಮರಳಿಸುತ್ತದೆ encrypt 'ewhjklnop' ಅನ್ನು ಮರಳಿಸುತ್ತದೆ encrypt 'kj' ಅನ್ನು ಮರಳಿಸುತ್ತದೆ encrypt 'ix' ಅನ್ನು ಮರಳಿಸುತ್ತದೆ""
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    ನಿಮಗೆ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಲಾಗಿದೆ.
    ಪಟ್ಟಿಯ 2ನೇ ಅತಿ ಚಿಕ್ಕ ಅಂಶವನ್ನು ಹಿಂದಿರುಗಿಸುವ next_smallest ಎಂಬ ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ.
    ಅಂತಹ ಅಂಶವಿಲ್ಲದಿದ್ದರೆ None ಅನ್ನು ಹಿಂದಿರುಗಿಸಿ.

    next_smallest == 2
    next_smallest == 2
    next_smallest == None
    next_smallest == None
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    ನಿಮಗೆ ಪದಗಳ ಸರಮಾಲೆಯನ್ನು ನೀಡಲಾಗುತ್ತದೆ, ಮತ್ತು ನಿಮ್ಮ ಕಾರ್ಯವು ಬೋರ್ಡಮ್‌ಗಳ ಸಂಖ್ಯೆಯನ್ನು ಎಣಿಸುವುದಾಗಿದೆ. ಬೋರ್ಡಮ್ ಎನ್ನುವುದು ""ನಾನು"" ಶಬ್ದದಿಂದ ಪ್ರಾರಂಭವಾಗುವ ವಾಕ್ಯವಾಗಿದೆ. ವಾಕ್ಯಗಳನ್ನು '.' '?' ಅಥವಾ '!' ಮೂಲಕ ವಿಭಜಿಸಲಾಗುತ್ತದೆ.

ಉದಾಹರಣೆಗೆ:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    ನಿಮ್ಮ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಅನುವಾದಿಸಲು ಇಲ್ಲಿದೆ:

""ಹೆಸರು ಬರೆಯುವ ಒಂದು ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ, ಅದು ಒಂದು ಸಂದೇಶವನ್ನು ತೆಗೆದು, ಎಲ್ಲಾ ಅಕ್ಷರಗಳ ತಲೆಯ ಅಕ್ಷರವನ್ನು ಬದಲಿಸಿ, ಸಂದೇಶದಲ್ಲಿರುವ ಎಲ್ಲಾ ಸ್ವರಗಳನ್ನು ಆ ಸ್ವರದ 2 ಸ್ಥಾನಗಳ ಮುಂದೆ ಇದ್ದ ಅಕ್ಷರದಿಂದ ಬದಲಿಸುತ್ತದೆ. 
ಅಕ್ಷರಗಳನ್ನು ಮಾತ್ರ ಪರಿಗಣಿಸಿ.

ಉದಾಹರಣೆಗಳು:""
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""ನೀವು ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಲಾಗುತ್ತದೆ.
ನೀವು ದೊಡ್ಡ ಪ್ರೈಮ್ ಮೌಲ್ಯವನ್ನು ಹುಡುಕಿ ಅದರ ಅಂಕಿಗಳ ಮೊತ್ತವನ್ನು ಮರಳಿಸಬೇಕು.

ಉದಾಹರಣೆಗಳು:
lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] ಎಂದು ಕೊಟ್ಟಾಗ ಔಟ್‌ಪುಟ್ 10 ಆಗಿರಬೇಕು
lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] ಎಂದು ಕೊಟ್ಟಾಗ ಔಟ್‌ಪುಟ್ 25 ಆಗಿರಬೇಕು
lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ಎಂದು ಕೊಟ್ಟಾಗ ಔಟ್‌ಪುಟ್ 13 ಆಗಿರಬೇಕು
lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] ಎಂದು ಕೊಟ್ಟಾಗ ಔಟ್‌ಪುಟ್ 11 ಆಗಿರಬೇಕು
lst = [0,81,12,3,1,21] ಎಂದು ಕೊಟ್ಟಾಗ ಔಟ್‌ಪುಟ್ 3 ಆಗಿರಬೇಕು
lst = [0,8,1,2,1,7] ಎಂದು ಕೊಟ್ಟಾಗ ಔಟ್‌ಪುಟ್ 7 ಆಗಿರಬೇಕು
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    ಕೊಟ್ಟಿರುವ ನಿಘಂಟುವನ್ನು ಪರಿಗಣಿಸಿ, ಎಲ್ಲಾ ಕೀಲಿಗಳು ಕಡಿಮೆ ಅಕ್ಷರಗಳಲ್ಲಿ ಅಥವಾ ಎಲ್ಲಾ ಕೀಲಿಗಳು ದೊಡ್ಡ ಅಕ್ಷರಗಳಲ್ಲಿ ಇದ್ದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ, ಇಲ್ಲದಿದ್ದರೆ False ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.
 ಕೊಟ್ಟಿರುವ ನಿಘಂಟು ಖಾಲಿ ಇದ್ದರೆ ಫಂಕ್ಷನ್ False ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.
 ಉದಾಹರಣೆಗಳು:
 check_dict_case True ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.
 check_dict_case False ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.
 check_dict_case False ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.
 check_dict_case False ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.
 check_dict_case True ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""ಏನು ಮಾಡಿದರೆ ಒಂದು ಫಂಕ್ಷನ್ ಅನ್ನು ಅನುಷ್ಠಾನಗೊಳಿಸಿ ಇದು ಶೂನ್ಯಕ್ಕಿಂತ ಕಡಿಮೆ ಇಲ್ಲದ ಪೂರ್ಣಾಂಕವನ್ನು ಪಡೆದು ಮೊದಲ n ಅಂಕಿಯ ಸರಣಿಯನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ
    ಪ್ರೈಮ್ ಸಂಖ್ಯೆಗಳು ಮತ್ತು n ಕ್ಕಿಂತ ಕಡಿಮೆ.
    ಉದಾಹರಣೆಗೆ:
    count_up_to => [2,3]
    count_up_to => [2,3,5,7]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17,19]
    count_up_to => []
    count_up_to => [2,3,5,7,11,13,17]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""ಈ ಕಾರ್ಯವನ್ನು ಪೂರ್ಣಗೊಳಿಸಿ ಅದು ಎರಡು ಪೂರ್ಣಾಂಕಗಳನ್ನು ತೆಗೆದುಕೊಂಡು ಅವುಗಳ ಏಕಕ ಅಂಕೆಗಳಿಗೆಉತ್ಪನ್ನವನ್ನು ಹಿಂದಿರುಗಿಸುತ್ತದೆ.
    ಇನ್ಪುಟ್ ಯಾವಾಗಲೂ ಮಾನ್ಯವಾಗಿರುತ್ತದೆ ಎಂದು ಊಹಿಸಿ.
    ಉದಾಹರಣೆಗಳು:
    multiply 16 ಅನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು.
    multiply 72 ಅನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು.
    multiply 0 ಅನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು.
    multiply 20 ಅನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕು.
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    ನೀಡಲಾದ ಸ್ಟ್ರಿಂಗ್ s ಇದರೆಂದರೆ, ಜೋಡ ಸಂಖ್ಯೆಗಳಿಂದ ಕೂಡಿದ ಸೂಚ್ಯಂಕಗಳಲ್ಲಿ ಎಷ್ಟು ದೊಡ್ಡಕ್ಷರದ ಸ್ವರಗಳು ಇದ್ದವೆ ಎಂದು ಎಣಿಸು.

    ಉದಾಹರಣೆಗೆ:
    count_upper 1 ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ
    count_upper 0 ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ
    count_upper 0 ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    ಯಾವುದೇ ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೀಡಿದಾಗ, ನೀವು n ಮಟ್ಟಗಳ ಕಲ್ಲುಗಳ ರಾಶಿಯನ್ನು ಮಾಡಬೇಕು.
    ಮೊದಲ ಮಟ್ಟದಲ್ಲಿ n ಕಲ್ಲುಗಳಿವೆ.
    ಮುಂದಿನ ಮಟ್ಟದಲ್ಲಿ ಕಲ್ಲುಗಳ ಸಂಖ್ಯೆಯು:
        - n ಗಮನಿಸು, n विषಮ ಸಂಖ್ಯೆ ಆದರೆ ಮುಂದಿನ विषಮ ಸಂಖ್ಯೆ.
        - n ಸಮ ಸಂಖ್ಯೆ ಆದರೆ ಮುಂದಿನ ಸಮ ಸಂಖ್ಯೆ.
    ಪ್ರತಿಯೊಂದು ಮಟ್ಟದಲ್ಲಿ ಕಲ್ಲುಗಳ ಸಂಖ್ಯೆಯನ್ನು ಪಟ್ಟಿಯ ರೂಪದಲ್ಲಿ ಹಿಂದಿರುಗಿಸಿ, ಇಲ್ಲಿ ಸೂಚಿಯಲ್ಲಿನ ತತ್ವ ಮಟ್ಟದಲ್ಲಿ ಕಲ್ಲುಗಳ ಸಂಖ್ಯೆಯನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ.

    ಉದಾಹರಣೆಗಳು:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    ನಿಮಗೆ ವಿರಾಮಚಿಹ್ನೆಗಳು ಅಥವಾ ಸ್ಥಳಗಳಿಂದ ವಿಭಜಿಸಲಾದ ಪದಗಳ ಸರಣಿ ನೀಡಲಾಗುತ್ತದೆ. ನಿಮ್ಮ ಕಾರ್ಯವು 
    ಸರಣಿಯನ್ನು ಪದಗಳಿಗೆ ವಿಭಜಿಸಿ ಪದಗಳ ಶ್ರೇಣಿಯನ್ನು ಹಿಂತಿರುಗಿಸುವುದು.
    
    ಉದಾಹರಣೆಗೆ:
    words_string == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""ಈ ಫಂಕ್ಷನ್ ಎರಡು ಧನಾತ್ಮಕ ಸಂಖ್ಯೆಗಳಾದ x ಮತ್ತು y ಅನ್ನು ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ ಮತ್ತು [x, y] ವ್ಯಾಪ್ತಿಯಲ್ಲಿರುವ ದೊಡ್ಡ ಸಮ ಪೂರ್ಣಾಂಕ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. ಇಂತಹ ಸಂಖ್ಯೆ ಇಲ್ಲದಿದ್ದರೆ, ಫಂಕ್ಷನ್ -1 ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.

ಉದಾಹರಣೆಗೆ:
choose_num = 14
choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""ನಿಮಗೆ ಎರಡು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳು n ಮತ್ತು m ನೀಡಲಾಗಿವೆ, ಮತ್ತು ನಿಮ್ಮ ಕಾರ್ಯವು n ರಿಂದ m ಸಂಖ್ಯೆಗಳ ಸರಾಸರಿಯನ್ನು ಗಣನೆ ಮಾಡುವುದು.
ಉತ್ತರವನ್ನು ಹತ್ತಿರದ ಪೂರ್ಣಾಂಕಕ್ಕೆ ಚುಕ್ಕಾಣಿ ಮಾಡಿ ಮತ್ತು ಅದನ್ನು ದ್ವಿಮಾನಕ್ಕೆ ಪರಿವರ್ತಿಸಿ.
n m ಗಿಂತ ದೊಡ್ಡದಾದರೆ, -1 ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.
ಉದಾಹರಣೆ:
rounded_avg => ""0b11""
rounded_avg => -1
rounded_avg => ""0b1111""
rounded_avg => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಿದರೆ, ಯಾವ ಅಂಚೆಯಲ್ಲಿಯೂ ಜೋಡಿತ ಸಂಖ್ಯೆ ಇಲ್ಲದ ಎಲ್ಲಾ ಅಂಶಗಳನ್ನು ವಿಂಗಡಿಸಿದ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.

ಗಮನಿಸಿ: ಹಿಂತಿರುಗಿಸಿದ ಪಟ್ಟಿಯನ್ನು ಏರಿಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಬೇಕು.

ಉದಾಹರಣೆಗೆ:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    ದಿಯಲಾಗಿರುವ ಪೂರ್ಣಾಂಕಗಳ ಸರಣಿಯನ್ನು ನೀಡಿದಾಗ, 1 ಮತ್ತು 9 ನಡುವಿನ ಪೂರ್ಣಾಂಕಗಳನ್ನು ವಿಂಗಡಿಸಿ, ಫಲಿತಾಂಶದ ಸರಣಿಯನ್ನು ಹಿಮ್ಮುಖವಾಗಿ ಮಾಡಿ, ನಂತರ ಪ್ರತಿ ಅಂಕೆಯನ್ನು ""ಒನ್"", ""ಟೂ"", ""ಥ್ರೀ"", ""ಫೋರ್"", ""ಫೈವ್"", ""ಸಿಕ್ಸ್"", ""ಸೆವನ್"", ""ಎಯ್ಟ್"", ""ನೈನ್"" ಎಂಬ ಪದಗಳ ಮೂಲಕ ಬದಲಾಯಿಸಿ.

ಉದಾಹರಣೆಗೆ:
  arr = [2, 1, 1, 4, 5, 8, 2, 3]   
        -> arr ಅನ್ನು ವಿಂಗಡಿಸಿ -> [1, 1, 2, 2, 3, 4, 5, 8] 
        -> arr ಅನ್ನು ಹಿಮ್ಮುಖವಾಗಿ ಮಾಡಿ -> [8, 5, 4, 3, 2, 2, 1, 1]
  return [""ಎಯ್ಟ್"", ""ಫೈವ್"", ""ಫೋರ್"", ""ಥ್ರೀ"", ""ಟೂ"", ""ಟೂ"", ""ಒನ್"", ""ಒನ್""]
  
  ಸರಣಿಯು ಖಾಲಿ ಇದ್ದರೆ, ಖಾಲಿ ಸರಣಿಯನ್ನು ಹಿಂತಿರುಗಿಸಿ:
  arr = []
  return []

  ಸರಣಿಯು ಯಾವುದೇ ಅನ್ಯಸಾಮಾನ್ಯ ಸಂಖ್ಯೆಯನ್ನು ಹೊಂದಿದ್ದರೆ ಅದನ್ನು ನಿರ್ಲಕ್ಷಿಸಿ:
  arr = [1, -1, 55] 
        -> arr ಅನ್ನು ವಿಂಗಡಿಸಿ -> [-1, 1, 55]
        -> arr ಅನ್ನು ಹಿಮ್ಮುಖವಾಗಿ ಮಾಡಿ -> [55, 1, -1]
  return = ['ಒನ್']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" n ಅನ್ನು ಮಾನದಂಡವಾಗಿ ತೆಗೆದುಕೊಳ್ಳುವ ಕಾರ್ಯ f ಅನ್ನು ಜಾರಿಗೆ ತರಲು,
    ಮತ್ತು n ಗಾತ್ರದ ಪಟ್ಟಿ ಹಿಂತಿರುಗಿಸಲು, ಆದ್ದರಿಂದ i ಸೂಚ್ಯಂಕದ ಅಂಶದ ಮೌಲ್ಯವು i ಸಮಾನವಾದರೆ i ನ ಫ್ಯಾಕ್ಟೋರಿಯಲ್ ಆಗಿರುತ್ತದೆ
    ಅಥವಾ ಇಲ್ಲದಿದ್ದರೆ 1 ರಿಂದ i ರವರೆಗೆ ಸಂಖ್ಯೆಗಳ ಮೊತ್ತ.
    i 1 ರಿಂದ ಪ್ರಾರಂಭವಾಗುತ್ತದೆ.
    i ನ ಫ್ಯಾಕ್ಟೋರಿಯಲ್ ಎಂದರೆ 1 ರಿಂದ i ವರೆಗಿನ ಸಂಖ್ಯೆಗಳ ಗುಣಾಕಾರ.
    ಉದಾಹರಣೆ:
    f == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೀಡಿದರೆ, n ರೆಂಜ್ನಲ್ಲಿ ಒಳಗೊಂಡಿರುವ ಸಮ ಮತ್ತು ಬೆಸ ಪೂರ್ಣಾಂಕ ಪಲಿಂಡ್ರೋಮ್ಸ್ ಸಂಖ್ಯೆ ಹೊಂದಿರುವ ಟ್ಯೂಪಲ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.

ಉದಾಹರಣೆ 1:

    ಇನ್‌ಪುಟ್: 3
    ಔಟ್‌ಪುಟ್:
    ವಿವರಣೆ:
    ಪೂರ್ಣಾಂಕ ಪಲಿಂಡ್ರೋಮ್ಸ್ 1, 2, 3. ಇವುಗಳಲ್ಲಿ ಒಂದು ಸಮ, ಮತ್ತು ಎರಡು ಬೆಸವಾಗಿದೆ.

ಉದಾಹರಣೆ 2:

    ಇನ್‌ಪುಟ್: 12
    ಔಟ್‌ಪುಟ್:
    ವಿವರಣೆ:
    ಪೂರ್ಣಾಂಕ ಪಲಿಂಡ್ರೋಮ್ಸ್ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. ಇವುಗಳಲ್ಲಿ ನಾಲ್ಕು ಸಮ, ಮತ್ತು ಆರು ಬೆಸವಾಗಿದೆ.

ಸೂಚನೆಗಳು:
    1. 1 <= n <= 10^3
    2. ಹಿಂತಿರುಗಿದ ಟ್ಯೂಪಲ್ ಕ್ರಮವಾಗಿ ಸಮ ಮತ್ತು ಬೆಸ ಪೂರ್ಣಾಂಕ ಪಲಿಂಡ್ರೋಮ್ಸ್ ಸಂಖ್ಯೆ ಹೊಂದಿರುತ್ತದೆ.
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    ಈ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಅನುವಾದಿಸಿ:

ಎರೆಯು ಕಾರ್ಯದ count_nums ಬರೆದು, ಇದು ಪೂರ್ಣಾಂಕಗಳ ಅರೆವನ್ನು ತೆಗೆದು, ಅಂಕೆಗಳ ಮೊತ್ತವು 0ಕ್ಕಿಂತ ಹೆಚ್ಚು ಇರುವ ಅಂಶಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ.
ಯಾವುದೇ ಸಂಖ್ಯೆ ಋಣಾತ್ಮಕವಾಗಿದ್ದರೆ, ಅದರ ಮೊದಲ ಚಿಹ್ನಿತ ಅಂಕೆ ಋಣಾತ್ಮಕವಾಗಿರುತ್ತದೆ:
ಉದಾ. -123 ರಲ್ಲಿದೆ ಚಿಹ್ನಿತ ಅಂಕೆಗಳು -1, 2, ಮತ್ತು 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""ನಾವು N ಪೂರ್ಣಾಂಕಗಳ 'arr' ಎಂಬ ಅರೆವನ್ನು ಹೊಂದಿದ್ದೇವೆ arr[1], arr[2], ..., arr[N]. ಅರೆಯಲ್ಲಿರುವ ಸಂಖ್ಯೆಗಳು ಯಾದೃಚ್ಛಿಕವಾಗಿ ಕ್ರಮಬದ್ಧವಾಗಿಲ್ಲ. ನೀಡಲಾದ ಅರೆ ಮೇಲೆ ಈ ಕಾರ್ಯಾಚರಣೆಯನ್ನು ನಿರ್ವಹಿಸುವ ಮೂಲಕ ಅರೆವನ್ನು ಅಕ್ರಮಣೀಯ ಕ್ರಮದಲ್ಲಿ ಸ sorted ೋರ್ಟೆಡ್ ಮಾಡುವ ಸಾಧ್ಯತೆಯುಂಟೆಂದು ನಿರ್ಧರಿಸುವುದು ನಿಮ್ಮ ಕೆಲಸ:
    ನೀವು ಯಾವುದೇ ಸಂಖ್ಯೆಯ ಬಾರಿ ಬಲ ಶಿಫ್ಟ್ ಕಾರ್ಯಾಚರಣೆಯನ್ನು ನಿರ್ವಹಿಸಲು ಅನುಮತಿಸಲಾಗಿದೆ.

    ಒಂದು ಬಲ ಶಿಫ್ಟ್ ಕಾರ್ಯಾಚರಣೆ ಎಂದರೆ ಎಲ್ಲಾ ಅರೆ ಅಂಶಗಳನ್ನು ಬಲ ದಿಕ್ಕಿನಲ್ಲಿ ಒಂದು ಸ್ಥಾನವನ್ನು ಶಿಫ್ಟ್ ಮಾಡುವುದು. ಅರೆಯ ಕೊನೆಯ ಅಂಶವನ್ನು ಅರೆಯ ಆರಂಭಿಕ ಸ್ಥಾನಕ್ಕೆ ಸ್ಥಳಾಂತರಿಸಲಾಗುತ್ತದೆ.

    ಮೇಲಿನ ಕಾರ್ಯಾಚರಣೆಯನ್ನು ನಿರ್ವಹಿಸುವ ಮೂಲಕ ಸ sorted ೋರ್ಟೆಡ್ ಅರೆ ಪಡೆಯುವುದು ಸಾಧ್ಯವಾದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ ಇಲ್ಲದಿದ್ದರೆ False ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    ನೀಡಲಾದ ಅರೆ ಖಾಲಿ ಇದ್ದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.

    ಟಿಪ್ಪಣಿ: ನೀಡಲಾದ ಪಟ್ಟಿ ಅನನ್ಯ ಅಂಶಗಳನ್ನು ಹೊಂದಿರುವುದು ಖಚಿತವಾಗಿದೆ.

    ಉದಾಹರಣೆಗೆ:

    move_one_ball==>True
    ವಿವರಣೆ: 2 ಬಲ ಶಿಫ್ಟ್ ಕಾರ್ಯಾಚರಣೆಗಳನ್ನು ನಿರ್ವಹಿಸುವ ಮೂಲಕ, ನೀಡಲಾದ ಅರೆಗೆ ಅಕ್ರಮಣೀಯ ಕ್ರಮವನ್ನು ಸಾಧಿಸಬಹುದು.
    move_one_ball==>False
    ವಿವರಣೆ: ಯಾವುದೇ ಸಂಖ್ಯೆಯ ಬಲ ಶಿಫ್ಟ್ ಕಾರ್ಯಾಚರಣೆಗಳನ್ನು ನಿರ್ವಹಿಸುವ ಮೂಲಕ ಅರೆಗಾಗಿ ಅಕ್ರಮಣೀಯ ಕ್ರಮವನ್ನು ಪಡೆಯುವುದು ಸಾಧ್ಯವಿಲ್ಲ.
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""ಈ ಸಮಸ್ಯೆಯಲ್ಲಿ, ನೀವು ಎರಡು ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಗಳನ್ನು ಸ್ವೀಕರಿಸುವ, ಮತ್ತು lst1 ಅನ್ನು ಮಾತ್ರ ಸಮ ಸಂಖ್ಯೆಗಳನ್ನು ಹೊಂದಿರುವ ಪಟ್ಟಿಯನ್ನಾಗಿ ಮಾಡುವುದು ಸಾಧ್ಯವೇ ಎಂದು ನಿರ್ಧರಿಸುವ ಫಂಕ್ಷನ್ ಅನ್ನು ಅನುಷ್ಠಾನಗೊಳಿಸುತ್ತೀರಿ. lst1 ಮತ್ತು lst2 ನಡುವೆ ವಿನಿಮಯಗೊಂಡ ಅಂಶಗಳ ಸಂಖ್ಯೆಗೆ ಯಾವುದೇ ಮಿತಿ ಇಲ್ಲ. lst1 ಮತ್ತು lst2 ನಡುವಿನ ಅಂಶಗಳನ್ನು ವಿನಿಮಯಿಸುವ ಮೂಲಕ lst1 ನ ಎಲ್ಲಾ ಅಂಶಗಳನ್ನು ಸಮ ಸಂಖ್ಯೆಗಳಾಗಿಸುವುದು ಸಾಧ್ಯವಾದರೆ, ""ಹೌದು"" ಅನ್ನು ಹಿಂದಿರುಗಿಸಿ. ಇಲ್ಲವಾದರೆ ""ಇಲ್ಲ"" ಅನ್ನು ಹಿಂದಿರುಗಿಸಿ. ಉದಾಹರಣೆಗೆ:
exchange => ""ಹೌದು""
exchange => ""ಇಲ್ಲ""
ಒಳಹಾಕುವ ಪಟ್ಟಿಗಳು ಖಾಲಿಯಾದುದಿಲ್ಲ ಎಂದು ಅನುನಯಿಸಲಾಗಿದೆ.
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""ನಿಗದಿತ ಅಕ್ಷರಗಳನ್ನು ಹೊಂದಿರುವ ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಕೊಟ್ಟಾಗ, ಅಕ್ಷರಗಳ ಅತ್ಯಧಿಕ ಪುನರಾವೃತ್ತಿಯೊಂದಿಗೆ ಅಕ್ಷರಗಳ ಡಿಕ್ಷನರಿಯನ್ನು ಮತ್ತು ಸಂಬಂಧಿತ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತೆಗೆದುಕೊಳ್ಳಿ.
ಹಲವು ಅಕ್ಷರಗಳು ಒಂದೇ ಪ್ರಮಾಣದಲ್ಲಿ ಪುನರಾವೃತ್ತಿಯಾಗಿದ್ದರೆ, ಅವುಗಳನ್ನೆಲ್ಲಾ ಹಿಂತೆಗೆದುಕೊಳ್ಳಿ.

ಉದಾಹರಣೆ:
histogram == {'a': 1, 'b': 1, 'c': 1}
histogram == {'a': 2, 'b': 2}
histogram == {'a': 2, 'b': 2}
histogram == {'b': 4}
histogram == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""ಕೊಟ್ಟಿರುವ ಎರಡು ಸ್ಟ್ರಿಂಗ್‌ಗಳು s ಮತ್ತು c ಇವೆ, ನೀವು s ನಲ್ಲಿ ಇರುವ ಎಲ್ಲಾ ಅಕ್ಷರಗಳನ್ನು, c ನಲ್ಲಿ ಇರುವ ಯಾವುದೇ ಅಕ್ಷರಗಳಿಗೆ ಸಮಾನವಾದ ಅಕ್ಷರಗಳನ್ನು ಅಳಿಸಬೇಕು. ನಂತರ ಫಲಿತಾಂಶದ ಸ್ಟ್ರಿಂಗ್ ಪ್ಯಾಲಿಂಡ್ರೋಮ್ ಆಗಿದೆಯೇ ಎಂದು ಪರಿಶೀಲಿಸಬೇಕು.
ಒಂದು ಸ್ಟ್ರಿಂಗ್ ಪ್ಯಾಲಿಂಡ್ರೋಮ್ ಎಂದು ಕರೆಯಲ್ಪಡುತ್ತದೆ, ಅದು ಹಿಂದಿನಿಂದ ಮುಂದೆ ಓದಿದಾಗ ಸಹ ಅದೇ ರೀತಿ ಓದುತ್ತದೆ.
ನೀವು ಫಲಿತಾಂಶದ ಸ್ಟ್ರಿಂಗ್ ಮತ್ತು ಪರಿಶೀಲನೆಗಾಗಿ True/False ಅನ್ನು ಹೊಂದಿರುವ tuple ಅನ್ನು ಮರಳಿಸಬೇಕು.
ಉದಾಹರಣೆ
s = ""abcde"", c = ""ae"" ಇದ್ದಾಗ, ಫಲಿತಾಂಶ ಆಗಿರುತ್ತದೆ
s = ""abcdef"", c = ""b"" ಇದ್ದಾಗ, ಫಲಿತಾಂಶ ಆಗಿರುತ್ತದೆ
s = ""abcdedcba"", c = ""ab"" ಇದ್ದಾಗ, ಫಲಿತಾಂಶ ಆಗಿರುತ್ತದೆ
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""ಸಂಖ್ಯೆಗಳಷ್ಟೇ ಹೊಂದಿರುವ ಸ್ಟ್ರಿಂಗ್‌ಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಿದರೆ, ಒಂದು ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಿ.
ಪ್ರತಿ ಔಟ್‌ಪುಟ್‌ನ ತತ್ವಾಂಶ i ""ಇನ್‌ಪುಟ್‌ನ ಸ್ಟ್ರಿಂಗ್ i ನಲ್ಲಿ ಅತಿಪರಿಮಾಣದ ಅಂಶಗಳ ಸಂಖ್ಯೆ"" ಆಗಿರಬೇಕು. ಎಲ್ಲಾ i ಗಳನ್ನು ಇನ್‌ಪುಟ್‌ನ iನೇ ಸ್ಟ್ರಿಂಗ್‌ನ ಅತಿಪರಿಮಾಣದ ಅಂಕೆಗಳ ಸಂಖ್ಯೆಯಿಂದ ಬದಲಾಯಿಸಬೇಕು.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    ಇಂಟಿಜರ್‌ಗಳ ಅರೆನ್ನು ನೀಡಿ, nums, nums ನ ಯಾವುದೇ ಖಾಲಿ ಅಲ್ಲದ ಉಪ-ಅರೆಯ ಕನಿಷ್ಠ ಮೊತ್ತವನ್ನು ಕಂಡುಹಿಡಿಯಿರಿ.
ಉದಾಹರಣೆ
minSubArraySum == 1
minSubArraySum == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    ನೀವು ಕೊನೆಗೆ ನೀಡಿದ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಅನುವಾದಿಸುತ್ತಿದ್ದೇನೆ:

```
ನೀವು ಚತುಷ್ಕೋನ ಬಾವಿಗಳ ಗ್ರೀಡ್ ಅನ್ನು ನೀಡಲಾಗಿದೆ. ಪ್ರತಿ ಸಾಲು ಒಂದು ಬಾವಿಯನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ, ಮತ್ತು ಪ್ರತಿ ಸಾಲಿನ 1 ಒಂದು ಘಟಕದ ನೀರನ್ನು ಪ್ರತಿನಿಧಿಸುತ್ತದೆ. ಪ್ರತಿ ಬಾವಿಗೆ ಹೊಂದುವ ಬಕೆಟ್ಟು ಇದೆ, ಮತ್ತು ಎಲ್ಲಾ ಬಕೆಟ್ಟುಗಳ ಸಾಮರ್ಥ್ಯ ಒಂದೇ. ನಿಮ್ಮ ಕಾರ್ಯ ಬಾವಿಗಳನ್ನು ಖಾಲಿ ಮಾಡಲು ಬಕೆಟ್ಟುಗಳನ್ನು ಬಳಸುವುದಾಗಿದೆ. ಬಕೆಟ್ಟುಗಳನ್ನು ತಗ್ಗಿಸಲು ನೀವು ಎಷ್ಟು ಬಾರಿ ಬೇಕಾಗುತ್ತದೆ ಎಂಬುದನ್ನು ಔಟ್‌ಪುಟ್ ಮಾಡಿರಿ.

ಉದಾಹರಣೆ1:
    ಇನ್‌ಪುಟ್: 
        ಗ್ರೀಡ್ : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
        ಬಕೆಟ್ಟು ಸಾಮರ್ಥ್ಯ : 1
    ಔಟ್‌ಪುಟ್: 6

ಉದಾಹರಣೆ2:
    ಇನ್‌ಪುಟ್: 
        ಗ್ರೀಡ್ : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
        ಬಕೆಟ್ಟು ಸಾಮರ್ಥ್ಯ : 2
    ಔಟ್‌ಪುಟ್: 5

ಉದಾಹರಣೆ3:
    ಇನ್‌ಪುಟ್: 
        ಗ್ರೀಡ್ : [[0,0,0], [0,0,0]]
        ಬಕೆಟ್ಟು ಸಾಮರ್ಥ್ಯ : 5
    ಔಟ್‌ಪುಟ್: 0

ನಿಯಮಗಳು:
    * ಎಲ್ಲಾ ಬಾವಿಗಳಿಗೆ ಒಂದೇ ಉದ್ದವಿದೆ
    * 1 <= ಗ್ರೀಡ್.ದೈರ್ಘ್ಯ <= 10^2
    * 1 <= ಗ್ರೀಡ್[:,1].ದೈರ್ಘ್ಯ <= 10^2
    * ಗ್ರೀಡ್[i][j] -> 0 | 1
    * 1 <= ಸಾಮರ್ಥ್ಯ <= 10
```
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    ಈ ಕಟಾದಲ್ಲಿ, ನೀವು ಶೂನ್ಯಕ್ಕಿಂತ ಕಡಿಮೆಯಿಲ್ಲದ ಪೂರ್ಣಾಂಕಗಳ ಅರೆವನ್ನು ಅವುಗಳ ದ್ವಿಮಾನ ಪ್ರತಿನಿಧನೆಯಲ್ಲಿ ಇರುವ ಒನ್‌ಗಳ ಸಂಖ್ಯೆಯ ಪ್ರಕಾರ ಏರಿಮುಖವಾಗಿ ಜೋಡಿಸಬೇಕು.
    ಸಮಾನ ಸಂಖ್ಯೆಯ ಒನ್‌ಗಳಿಗಾಗಿ, ದಶಮಾನ ಮೌಲ್ಯದ ಆಧಾರದ ಮೇಲೆ ಜೋಡಿಸಬೇಕು.

    ಇದು ಈ ರೀತಿಯಾಗಿ ಅನುಷ್ಠಾನಗೊಳಿಸಬೇಕು:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""ಗiven a string s ಮತ್ತು a natural number n, ನೀವು implement ಮಾಡಲು
    function tasked ಮಾಡಲಾಗಿದೆ 
    that returns a list of ಎಲ್ಲಾ words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: ನೀವು assume ಮಾಡಬಹುದು the input string contains only letters and spaces.
    Examples:
    select_words ==> [""little""]
    select_words ==> [""Mary"", ""lamb""]
    select_words ==> []
    select_words ==> [""world""]
    select_words ==> [""Uncle""]
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""ನಿಮಗೆ ಒಂದು ಪದವನ್ನು ನೀಡಲಾಗಿದೆ. ನಿಮ್ಮ ಕಾರ್ಯವೆಂದರೆ, ಪದದ ಬಲಭಾಗದಿಂದ ಎರಡು ವ್ಯಂಜನೆಗಳ ನಡುವೆ ಇರುವ ಸಮೀಪದ ಸ್ವರವನ್ನು ಹುಡುಕುವುದು.

ಆರಂಭದಲ್ಲಿ ಮತ್ತು ಕೊನೆಯಲ್ಲಿ ಇರುವ ಸ್ವರಗಳನ್ನು ಲೆಕ್ಕಹಾಕಬೇಡಿ. ಮೇಲಿನ ಷರತ್ತುಗಳನ್ನು ಪೂರೈಸುವ ಯಾವುದೇ ಸ್ವರವನ್ನು ಹುಡುಕದಿದ್ದರೆ, ಖಾಲಿ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.

ನೀವು ನೀಡಿದ ಸ್ಟ್ರಿಂಗ್ ಇಂಗ್ಲೀಷ್ ಅಕ್ಷರಗಳನ್ನು ಮಾತ್ರ ಹೊಂದಿದೆ ಎಂದು ಊಹಿಸಬಹುದು.

ಉದಾಹರಣೆ:
get_closest_vowel ==> ""u""
get_closest_vowel ==> ""U""
get_closest_vowel ==> """"
get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    ಇಲ್ಲಿನ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಭಾಷಾಂತರಿಸಿ.

ಇಂಟಿಜರ್‌ಗಳ ಅರೆ arr ಮತ್ತು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ k ನೀಡಿದಾಗ, arr ನಲ್ಲಿ ಗರಿಷ್ಠ k ಸಂಖ್ಯೆಗಳ sorted list ಅನ್ನು k ಉದ್ದದ sorted list ಹಿಂತಿರುಗಿಸಿ.

ಉದಾಹರಣೆ1:

    ಇನ್‌ಪುಟ್: arr = [-3, -4, 5], k = 3
    ಔಟ್‌ಪುಟ್: [-4, -3, 5]

ಉದಾಹರಣೆ2:

    ಇನ್‌ಪುಟ್: arr = [4, -4, 4], k = 2
    ಔಟ್‌ಪುಟ್: [4, 4]

ಉದಾಹರಣೆ3:

    ಇನ್‌ಪುಟ್: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
    ಔಟ್‌ಪುಟ್: [2]

ಸೂಚನೆ:
    1. ಅರೆ ಉದ್ದವು [1, 1000] ಶ್ರೇಣಿಯಲ್ಲಿರುತ್ತದೆ.
    2. ಅರೆಯಲ್ಲಿನ ಅಂಶಗಳು [-1000, 1000] ಶ್ರೇಣಿಯಲ್ಲಿರುತ್ತವೆ.
    3. 0 <= k <= len
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""ಒಂದು ಖಾಲಿ ಇಲ್ಲದ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿ ನೀಡಿದಾಗ, ಸಮ ಸ್ಥಾನಗಳಲ್ಲಿ ಇರುವ ಎಲ್ಲಾ ಬೆಸಪುರುಷ ಅಂಶಗಳ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸಿ.

ಉದಾಹರಣೆಗಳು:
solution ==> 12
solution ==> 9
solution ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    ಒಂದು ಖಾಲಿ ಇಲ್ಲದ ಪೂರ್ಣಾಂಕಗಳ ಅರೆ arr ಮತ್ತು ಒಂದು ಪೂರ್ಣಾಂಕ k ನೀಡಿದರೆ, arr ನ ಮೊದಲ k ಅಂಶಗಳಿಂದ ಗರಿಷ್ಠ ಎರಡು ಅಂಕಿಗಳ ಅಂಶಗಳ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸಿ.

ಉದಾಹರಣೆ:

    ಇನ್‌ಪುಟ್: arr = [111,21,3,4000,5,6,7,8,9], k = 4
    ಔಟ್‌ಪುಟ್: 24 # 21 + 3 ಗಳು

ನಿಯಮಾವಳಿ:
    1. 1 <= len <= 100
    2. 1 <= k <= len
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೀಡಿದಾಗ, ಕೋಲಾಟ್ಜ್ ಶೃಂಖಲೆಯಲ್ಲಿ 있는 ಬೆಸುಗಳ ಪಟ್ಟಿಯನ್ನು ವರ್ಗೀಕರಿಸಿ.

    ಕೋಲಾಟ್ಜ್ ಅಭಿಪ್ರಾಯವು ಗಣಿತದಲ್ಲಿ ಒಂದು ಅಭಿಪ್ರಾಯವಾಗಿದೆ, ಇದು ಹೀಗೆ ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿದೆ: ಯಾವುದೇ ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನಿಂದ ಪ್ರಾರಂಭಿಸಿ. ನಂತರ ಪ್ರತಿಯೊಂದು ಪದವು ಹಿಂದಿನ ಪದದಿಂದ ಹೀಗೆ ದೊರೆಯುತ್ತದೆ: ಹಿಂದಿನ ಪದವು ಸಮಸಂಖ್ಯೆಯಾದರೆ, ಮುಂದಿನ ಪದವು ಹಿಂದಿನ ಪದದ ಅರ್ಧವಾಗಿರುತ್ತದೆ. ಹಿಂದಿನ ಪದವು ಬೆಸಾದರೆ, ಮುಂದಿನ ಪದವು ಹಿಂದಿನ ಪದಕ್ಕಿಂತ 3 ಪಟ್ಟು ಮತ್ತು 1 ಹೆಚ್ಚಾಗಿರುತ್ತದೆ. ಅಭಿಪ್ರಾಯವು n ಯ ಯಾವ ಮೌಲ್ಯವಿದ್ದರೂ, ಶೃಂಖಲೆ ಯಾವಾಗಲೂ 1 ತಲುಪುತ್ತದೆ ಎಂಬುದಾಗಿದೆ.

    ಗಮನಿಸಿ:
        1. ಕೊಲಾಟ್ಜ್ [1] ಆಗಿದೆ.
        2. ಹಿಂತಿರುಗಿಸಿದ ಪಟ್ಟಿಯನ್ನು ಏರಿಕೆಯ ಕ್ರಮದಲ್ಲಿ ವರ್ಗೀಕರಿಸಲಾಗಿದೆ.

    ಉದಾಹರಣೆಗೆ:
    get_odd_collatz [1, 5] ಅನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ # 5 ನ ಕಾಲಾಟ್ಜ್ ಶೃಂಖಲೆ [5, 16, 8, 4, 2, 1] ಆಗಿದೆ, ಆದ್ದರಿಂದ ಬೆಸುಗಳು ಕೇವಲ 1 ಮತ್ತು 5.
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""ನೀವು ನೀಡಿದ ದಿನಾಂಕ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಪರಿಶೀಲಿಸುವ ಮತ್ತು ದಿನಾಂಕ ಸರಿಯಾಗಿದ್ದರೆ True ಅನ್ನು ಹಿಂತಿರುಗಿಸುವ, ಇಲ್ಲವಾದರೆ False ಅನ್ನು ಹಿಂತಿರುಗಿಸುವ ಕಾರ್ಯವನ್ನು ಬರೆಯಬೇಕು.
ದಿನಾಂಕ ಸರಿಯಾಗಿರಬೇಕಾದರೆ ಈ ಕೆಳಗಿನ ನಿಯಮಗಳು ಅನುಸರಿಸಬೇಕಾಗಿವೆ:
1. ದಿನಾಂಕ ಸ್ಟ್ರಿಂಗ್ ಖಾಲಿಯಲ್ಲಿರಬೇಕು.
2. ತಿಂಗಳು 1, 3, 5, 7, 8, 10, 12 ನಲ್ಲಿ ದಿನಗಳ ಸಂಖ್ಯೆ 1 ಕ್ಕಿಂತ ಕಡಿಮೆ ಅಥವಾ 31 ದಿನಗಳಿಗಿಂತ ಹೆಚ್ಚು ಇರಬಾರದು. ಮತ್ತು ತಿಂಗಳು 4, 6, 9, 11 ನಲ್ಲಿ ದಿನಗಳ ಸಂಖ್ಯೆ 1 ಕ್ಕಿಂತ ಕಡಿಮೆ ಅಥವಾ 30 ದಿನಗಳಿಗಿಂತ ಹೆಚ್ಚು ಇರಬಾರದು. ಮತ್ತು, ತಿಂಗಳು 2 ನಲ್ಲಿ ದಿನಗಳ ಸಂಖ್ಯೆ 1 ಕ್ಕಿಂತ ಕಡಿಮೆ ಅಥವಾ 29 ದಿನಗಳಿಗಿಂತ ಹೆಚ್ಚು ಇರಬಾರದು.
3. ತಿಂಗಳುಗಳನ್ನು 1 ಕ್ಕಿಂತ ಕಡಿಮೆ ಅಥವಾ 12 ಕ್ಕಿಂತ ಹೆಚ್ಚು ಇರಬಾರದು.
4. ದಿನಾಂಕದ ರೂಪವು: mm-dd-yyyy ಆಗಿರಬೇಕು.

ಉದಾಹರಣೆಗೆ: 
valid_date => True

valid_date => False

valid_date => False

valid_date => True

valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""ನೀವು ಎರಡು ಅವಧಿಗಳನ್ನು ನೀಡಲಾಗಿದೆ,
    ಪ್ರತಿಯೊಂದು ಅವಧಿ ಎರಡು ಪೂರ್ಣಾಂಕಗಳ ಜೋಡಿಯಾಗಿರುತ್ತದೆ. ಉದಾಹರಣೆಗೆ, ಅವಧಿ = =.
    ನೀಡಿದ ಅವಧಿಗಳು ಮುಚ್ಚಲ್ಪಟ್ಟಿವೆ, ಅಂದರೆ ಅವಧಿ
    ಆರಂಭ ಮತ್ತು ಅಂತ್ಯವನ್ನು ಸೇರಿಸುತ್ತದೆ.
    ಪ್ರತಿಯೊಂದು ನೀಡಿದ ಅವಧಿಗೆ, ಅದರ ಆರಂಭವು ಅಂತ್ಯದ ಸಮಾನ ಅಥವಾ ಕಡಿಮೆ ಎಂದು ಊಹಿಸಲಾಗಿದೆ.
    ನಿಮ್ಮ ಕೆಲಸವು ಈ ಎರಡು ಅವಧಿಗಳ ಅಂತರದ ಉದ್ದವು ಪ್ರೈಮ್ ಸಂಖ್ಯೆಯಾದೆಯೇ ಎಂದು ನಿರ್ಧರಿಸುವುದಾಗಿದೆ.
    ಉದಾಹರಣೆ, ಅವಧಿಗಳ, ಅಂತರವು ಆಗಿದ್ದು
    ಇದರ ಉದ್ದ 1, ಇದು ಪ್ರೈಮ್ ಸಂಖ್ಯೆ ಅಲ್ಲ.
    ಅಂತರದ ಉದ್ದವು ಪ್ರೈಮ್ ಸಂಖ್ಯೆ ಆಗಿದ್ದರೆ, ""ಹೌದು"" ಎಂದು ಹಿಂದಿರುಗಿಸಿ,
    ಇಲ್ಲದಿದ್ದರೆ, ""ಇಲ್ಲ"" ಎಂದು ಹಿಂದಿರುಗಿಸಿ.
    ಎರಡು ಅವಧಿಗಳು ಅಂತರಿಸುವುದಿಲ್ಲದಿದ್ದರೆ, ""ಇಲ್ಲ"" ಎಂದು ಹಿಂದಿರುಗಿಸಿ.

    [ಇನ್‌ಪುಟ್/ಔಟ್‌ಪುಟ್] ಮಾದರಿಗಳು:
    intersection,) ==> ""ಇಲ್ಲ""
    intersection,) ==> ""ಇಲ್ಲ""
    intersection,) ==> ""ಹೌದು""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    ನಿಮಗೆ ಪೂರ್ಣಾಂಕಗಳ `arr` ಎಂಬ ಸಮೂಹ ನೀಡಲಾಗಿದೆ ಮತ್ತು ನೀವು ಪ್ರತಿಯೊಂದು ಸಂಖ್ಯೆಯ ಗುರುತಿನ ಉತ್ಪನ್ನದಿಂದ ಗುಣಿಸಲ್ಪಟ್ಟ ಪೂರ್ಣಾಂಕಗಳ ಪರಿಮಾಣಗಳ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕಾಗಿದೆ.
    ಪ್ರತಿಯೊಂದು ಸಂಖ್ಯೆಯ ಗುರುತನ್ನು 1, -1 ಅಥವಾ 0 ರಿಂದ ಪ್ರತಿನಿಧಿಸಲಾಗುತ್ತದೆ.
    ವಿವರ: `arr` ಖಾಲಿಯಿದ್ದರೆ None ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.

    ಉದಾಹರಣೆ:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    ನೀವು ನೀಡಿದ ಗ್ರಿಡ್‌ನಲ್ಲಿ N ಸಾಲುಗಳು ಮತ್ತು N ತೊಡೆಗಳು ಮತ್ತು ಹೌದು ಸಕಾರಾತ್ಮಕ ಪೂರ್ಣಾಂಕ k ಇದೆ, 
    ಗ್ರಿಡ್‌ನ ಪ್ರತಿಯೊಂದು ಕೋಶವು ಒಂದು ಮೌಲ್ಯವನ್ನು ಹೊಂದಿರುತ್ತದೆ. [1, N * N] ವ್ಯಾಪ್ತಿಯಲ್ಲಿರುವ ಪ್ರತಿಯೊಂದು ಪೂರ್ಣಾಂಕವು
    ಗ್ರಿಡ್‌ನ ಕೋಶಗಳಲ್ಲಿ ನಿಖರವಾಗಿ ಒಮ್ಮೆ ಕಾಣಿಸುತ್ತದೆ.

    ನೀವು ಗ್ರಿಡ್‌ನಲ್ಲಿ k ಉದ್ದದ ಕನಿಷ್ಠ ಮಾರ್ಗವನ್ನು ಹುಡುಕಬೇಕು. ನೀವು ಯಾವುದೇ ಕೋಶದಿಂದ ಪ್ರಾರಂಭಿಸಬಹುದು,
    ಮತ್ತು ಪ್ರತಿ ಹಂತದಲ್ಲಿ ನೀವು ನಿಮ್ಮ ಪ್ರಸ್ತುತ ಕೋಶದೊಂದಿಗೆ ಅಂಚನ್ನು ಹಂಚಿಕೊಳ್ಳುವ ಯಾವುದೇ ನೆರೆಹತ್ತಿದ ಕೋಶಗಳಿಗೆ ಹೋಗಬಹುದು.
    ದಯವಿಟ್ಟು ಗಮನಿಸಿ k ಉದ್ದದ ಮಾರ್ಗವೆಂದರೆ ನಿಖರವಾಗಿ k ಕೋಶಗಳನ್ನು ಭೇಟಿ ಮಾಡುವುದು.
    ನೀವು ಗ್ರಿಡ್‌ನ ಹೊರಗೆ ಹೋಗಲು ಸಾಧ್ಯವಿಲ್ಲ.
    ಮಾರ್ಗ A ಮಾರ್ಗ B ಗಿಂತ ಕಡಿಮೆ ಎಂದು ಪರಿಗಣಿಸಲಾಗುತ್ತದೆ
    A ಮತ್ತು B ಹೋಗುವ ಕೋಶಗಳ ಮೇಲೆ ಮೌಲ್ಯಗಳ ಆದೇಶಿತ ಪಟ್ಟಿಗಳನ್ನು ಮಾಡಿದ ನಂತರ, lst_A ಅಕ್ಷರಕ್ರಮದಲ್ಲಿ lst_B ಯಿಂದ ಕಡಿಮೆ,
    ಇತರರಂತೆ, lst_A[i] < lst_B[i] ಇಂತಹ ಪೂರ್ಣಾಂಕ ಸೂಚ್ಯಂಕ i ಇರುತ್ತದೆ ಮತ್ತು ಯಾವುದೇ j ಗೆ ನಾವು ಹೊಂದಿದ್ದೇವೆ lst_A[j] = lst_B[j].
    ಉತ್ತರವು ಅನೇಕವಾಗಿದೆ ಎಂದು ಖಚಿತಪಡಿಸಲಾಗಿದೆ.
    ಕನಿಷ್ಠ ಮಾರ್ಗವು ಹೋಗುವ ಕೋಶಗಳ ಮೇಲೆ ಮೌಲ್ಯಗಳ ಆದೇಶಿತ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಿ.

    ಉದಾಹರಣೆಗಳು:

        ಇನ್‌ಪುಟ್: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        ಔಟ್‌ಪುಟ್: [1, 2, 1]

        ಇನ್‌ಪುಟ್: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        ಔಟ್‌ಪುಟ್: [1]
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""ಪ್ರತಿಯೊಬ್ಬರೂ ಫಿಬೊನಾಚಿ ಶ್ರೇಣಿಯನ್ನು ತಿಳಿದಿದ್ದಾರೆ, ಕಳೆದ ಕೆಲ ಶತಮಾನಗಳಲ್ಲಿ ಗಣಿತಜ್ಞರು ಇದನ್ನು ಆಳವಾಗಿ ಅಧ್ಯಯನ ಮಾಡಿದ್ದಾರೆ. ಆದರೆ, ಜನರು ತಿಳಿಯದದ್ದು ಟ್ರಿಬೊನಾಚಿ ಶ್ರೇಣಿ. ಟ್ರಿಬೊನಾಚಿ ಶ್ರೇಣಿಯನ್ನು ಹೀಗೆ ವ್ಯಾಖ್ಯಾನಿಸಲಾಗಿದೆ:
tri = 3
tri = 1 + n / 2, n ಸಮಸಂಖ್ಯೆಯಾಗಿದ್ದರೆ.
tri = tri + tri + tri, n ಬೆಸಸಂಖ್ಯೆಯಾಗಿದ್ದರೆ.
ಉದಾಹರಣೆಗೆ:
tri = 1 + = 2
tri = 3
tri = tri + tri + tri
         = 2 + 3 + 3 = 8 
ನಿಮ್ಮಿಗೆ ಒಂದು ಋಣಾತ್ಮಕವಲ್ಲದ ಪೂರ್ಣಾಂಕ ಸಂಖ್ಯೆ n ನೀಡಲಾಗಿದೆ, ನಿಮಗೆ ಟ್ರಿಬೊನಾಚಿ ಶ್ರೇಣಿಯ ಮೊದಲ n + 1 ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.
ಉದಾಹರಣೆಗಳು:
tri = [1, 3, 2, 8]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""ನೀಡಲಾದ ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ಇರುವುದಾದರೆ, ಬೆಸೆಯ ಸಂಖ್ಯೆಗಳನ್ನು ಗುಣನೆ ಮಾಡಿ.
    ಎಲ್ಲಾ ಅಂಕೆಗಳು ಸೇರುವಿಕೆಯಾಗಿದ್ದರೆ 0 ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.
    ಉದಾಹರಣೆಗಾಗಿ:
    digits == 1
    digits == 0
    digits == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""ನೀವು ಸಂಖ್ಯೆಗಳ ಪಟ್ಟಿಯನ್ನು ನೀಡಲಾಗಿದೆ.
ನೀವು ನೀಡಲಾದ ಪಟ್ಟಿಯಲ್ಲಿನ ಸಂಖ್ಯೆಗಳ ಚದರದ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು,
ಮೊದಲು ಪಟ್ಟಿಯ ಪ್ರತಿಯೊಂದು ಅಂಶವನ್ನು ಮೇಲಿನ ಪೂರ್ಣಾಂಕಕ್ಕೆ ಸುತ್ತಿಸಿ.
ಉದಾಹರಣೆಗಳು:
lst = [1,2,3] ಇದ್ದರೆ ಔಟ್‌ಪುಟ್ 14 ಆಗಿರಬೇಕು
lst = [1,4,9] ಇದ್ದರೆ ಔಟ್‌ಪುಟ್ 98 ಆಗಿರಬೇಕು
lst = [1,3,5,7] ಇದ್ದರೆ ಔಟ್‌ಪುಟ್ 84 ಆಗಿರಬೇಕು
lst = [1.4,4.2,0] ಇದ್ದರೆ ಔಟ್‌ಪುಟ್ 29 ಆಗಿರಬೇಕು
lst = [-2.4,1,1] ಇದ್ದರೆ ಔಟ್‌ಪುಟ್ 6 ಆಗಿರಬೇಕು
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""ಕೆಳಗಿನ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಅನುವಾದಿಸಿ:

ಫಂಕ್ಷನ್ ರಚಿಸಿ, ಇದು ಹಿಂತಿರುಗಿಸುವ ಅಂಶದ ಅತಿ ದೊಡ್ಡ ಸೂಚ್ಯಂಕವನ್ನು ಹಿಂದಿನ ಅಂಶಕ್ಕಿಂತ ಕಡಿಮೆಯಾದ ಅಥವಾ ಸಮಾನವಾದ ಅಂಶವನ್ನು ತೋರಿಸುತ್ತದೆ. ಅಂತಹ ಅಂಶ ಇಲ್ಲದಿದ್ದರೆ -1 ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಕೊಟ್ಟಿರುವ ಅರೆ ಅಥವಾ ಸಾಲಿನಲ್ಲಿ ಪ್ರತಿಕೃತಿಯ ಅಂಶಗಳು ಇರುವುದಿಲ್ಲ.

ಉದಾಹರಣೆಗಳು:
can_arrange = 3
can_arrange = -1
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    ವಾಸ್ತವ ಸಂಖ್ಯೆಗಳನ್ನಾಗಿ ಪ್ರತಿನಿಧಿಸುವ ಪೂರ್ಣಾಂಕಗಳು, ತೇಲುವ ಅಂಕೆಗಳು ಅಥವಾ ಸ್ಟ್ರಿಂಗ್‌ಗಳನ್ನು ಸ್ವೀಕರಿಸುವ ಮತ್ತು ನೀಡಲಾದ ಚರದ ಪ್ರಕಾರದಲ್ಲಿ ದೊಡ್ಡ ಚರವನ್ನು ಹಿಂತಿರುಗಿಸುವ ಕಾರ್ಯವನ್ನು ರಚಿಸಿ.
ಮೌಲ್ಯಗಳು ಸಮಾನವಾಗಿದ್ದರೆ None ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.
ಗಮನಿಸಿ: ಒಂದು ವಾಸ್ತವ ಸಂಖ್ಯೆಯನ್ನು ಸ್ಟ್ರಿಂಗ್ ಆಗಿ ಪ್ರತಿನಿಧಿಸಿದರೆ, ತೇಲುವ ಬಿಂದುವು . ಅಥವಾ , ಆಗಿರಬಹುದು.

compare_one -> 2.5
compare_one -> ""2,3""
compare_one -> ""6""
compare_one -> None
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""ಕೊಟ್ಟಿರುವ ಸಂಖ್ಯೆ n ಅನ್ನು ನಿಖರವಾಗಿ 4 ಧನಾತ್ಮಕ ಸಮ ಸಂಖ್ಯೆಗಳ ಮೊತ್ತವಾಗಿ ಬರೆದಿರಬಹುದೇ ಎಂಬುದನ್ನು ಮೌಲ್ಯಮಾಪನ ಮಾಡಿ
    ಉದಾಹರಣೆ
    is_equal_to_sum_even == ತಪ್ಪು
    is_equal_to_sum_even == ತಪ್ಪು
    is_equal_to_sum_even == ಸರಿ
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""ಬ್ರೆಜಿಲಿಯನ್ ಫ್ಯಾಕ್ಟೋರಿಯಲ್ ಅನ್ನು ಹೀಗೇ ವ್ಯಾಖ್ಯಾನಿಸಲಾಗುತ್ತದೆ:
    brazilian_factorial = n! *! *! * ... * 1!
    ಇಲ್ಲಿ n > 0

    ಉದಾಹರಣೆಗೆ:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    ಹೆಚ್ಚುವರಿ ಸ್ಥಳಗಳನ್ನು ಹೊಂದಿದ ಪಠ್ಯವನ್ನು ನೀಡಿದಾಗ, ಎಲ್ಲಾ ಸ್ಥಳಗಳನ್ನು ಅಂಡರ್ಸ್ಕೋರ್‌ಗಳೊಂದಿಗೆ ಬದಲಾಯಿಸಿ, ಮತ್ತು 2 ಕ್ಕಿಂತ ಹೆಚ್ಚು ನಿರಂತರ ಸ್ಥಳಗಳನ್ನು ಹೊಂದಿದ ಪಠ್ಯವನ್ನು ಬದಲಾಯಿಸಿ, ಎಲ್ಲಾ ನಿರಂತರ ಸ್ಥಳಗಳನ್ನು - ನೊಂದಿಗೆ ಬದಲಾಯಿಸು.

fix_spaces == ""Example""
fix_spaces == ""Example_1""
fix_spaces == ""_Example_2""
fix_spaces == ""_Example-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""ಹೆಸರು ಹೊಂದಿರುವ ಒಂದು ಫೈಲ್‌ ಅನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್‌ ಅನ್ನು ತೆಗೆದುಕೊಳ್ಳುವ, ಮತ್ತು ಫೈಲ್‌ ಹೆಸರು ಮಾನ್ಯವಾದರೆ 'ಹೌದು' ಅನ್ನು ಮತ್ತು ಅಲ್ಲದಿದ್ದರೆ 'ಇಲ್ಲ' ಅನ್ನು ಹಿಂತಿರುಗಿಸುವ ಕಾರ್ಯವನ್ನು ರಚಿಸಿ.
ಫೈಲ್‌ ಹೆಸರು ಮಾನ್ಯವಾಗಿರುತ್ತದೆ ಎಂದು ಪರಿಗಣಿಸಲಾಗುತ್ತದೆ, ಆದರೆ ಮತ್ತು ಈ ಕೆಳಗಿನ ಎಲ್ಲ ಶರತ್ತುಗಳನ್ನು ಪೂರೈಸಿದಾಗ ಮಾತ್ರ:
- ಫೈಲ್‌ ಹೆಸರಿನಲ್ಲಿ ಮೂರಕ್ಕಿಂತ ಹೆಚ್ಚು ಅಂಕೆಗಳು ಇರಬಾರದು.
- ಫೈಲ್‌ ಹೆಸರಿನಲ್ಲಿ ಕಡ್ಡಾಯವಾಗಿ ಒಂದೇ ಒಂದು ಬಿಂದು '.' ಇರಬೇಕು.
- ಬಿಂದುಗೂ ಮುಂಚಿನ ಉಪಸ್ಟ್ರಿಂಗ್ ಖಾಲಿಯಾಗಿರಬಾರದು, ಮತ್ತು ಅದು ಲ್ಯಾಟಿನ್ ಅಕ್ಷರಮಾಲೆಯ ಅಕ್ಷರದಿಂದ ಪ್ರಾರಂಭವಾಗಬೇಕು.
- ಬಿಂದುಗೂ ನಂತರದ ಉಪಸ್ಟ್ರಿಂಗ್ ಈವುಗಳಲ್ಲಿ ಒಂದಾಗಿರಬೇಕು: ['txt', 'exe', 'dll']
ಉದಾಹರಣೆಗಳು:
file_name_check # => 'ಹೌದು'
file_name_check # => 'ಇಲ್ಲ'
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""ಈ ಕಾರ್ಯವು ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ತೆಗೆದುಕೊಳ್ಳುತ್ತದೆ. ಪಟ್ಟಿಯಲ್ಲಿನ ಎಲ್ಲಾ ನಮೂದುಗಳಿಗೆ, ಕಾರ್ಯವು ಅದರ ಸೂಚ್ಯಂಕವು 3ರ ಗುಣಾಕಾರದಾಗಿದ್ದರೆ ಪೂರ್ಣಾಂಕದ ನಮೂದನ್ನು ಚದರಗೊಳಿಸುತ್ತದೆ ಮತ್ತು ಅದರ ಸೂಚ್ಯಂಕವು 4ರ ಗುಣಾಕಾರದಾಗಿದ್ದು 3ರ ಗುಣಾಕಾರದಲ್ಲದಿದ್ದರೆ ಪೂರ್ಣಾಂಕದ ನಮೂದನ್ನು ಘನಗೊಳಿಸುತ್ತದೆ. 3 ಅಥವಾ 4ರ ಗುಣಾಕಾರದಲ್ಲದ ಸೂಚ್ಯಂಕಗಳ ಪಟ್ಟಿಯಲ್ಲಿನ ನಮೂದುಗಳನ್ನು ಕಾರ್ಯವು ಬದಲಾಯಿಸುವುದಿಲ್ಲ. ನಂತರ ಕಾರ್ಯವು ಎಲ್ಲಾ ನಮೂದುಗಳ ಮೊತ್ತವನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ.

ಉದಾಹರಣೆಗಳು:
lst = [1, 2, 3] ಆದಾಗ ಔಟ್‌ಪುಟ್ 6 ಆಗಿರಬೇಕು.
lst = [] ಆದಾಗ ಔಟ್‌ಪುಟ್ 0 ಆಗಿರಬೇಕು.
lst = [-1, -5, 2, -1, -5] ಆದಾಗ ಔಟ್‌ಪುಟ್ -126 ಆಗಿರಬೇಕು.
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    ನಿಮಗೆ ವಾಕ್ಯವನ್ನು ಪ್ರತಿನಿಧಿಸುವ ಸ್ಟ್ರಿಂಗ್ ನೀಡಲಾಗಿದೆ,
    ವಾಕ್ಯವು ಕೆಲವು ಶಬ್ದಗಳನ್ನು ಹೊಂದಿದ್ದು ಅವುಗಳನ್ನು ಖಾಲಿ ಸ್ಥಳದಿಂದ ವಿಭಜಿಸಲಾಗಿದೆ,
    ಮತ್ತು ನೀವು ಮೂಲ ವಾಕ್ಯದಿಂದ ಶಬ್ದಗಳನ್ನು ಹೊಂದಿರುವ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಮರಳಿಸಬೇಕು,
    ಅವುಗಳ ಉದ್ದವು ಅಂಶ ಸಂಖ್ಯೆಗಳಾಗಿರಬೇಕು,
    ಹೊಸ ಸ್ಟ್ರಿಂಗ್‌ನಲ್ಲಿ ಶಬ್ದಗಳ ಕ್ರಮವು ಮೂಲ ವಾಕ್ಯದಲ್ಲಿ ಇರುವಂತೆಯೇ ಇರಬೇಕು.

    ಉದಾಹರಣೆ1:
        ಇನ್‌ಪುಟ್: ವಾಕ್ಯ = ""This is a test""
        ಔಟ್‌ಪುಟ್: ""is""

    ಉದಾಹರಣೆ2:
        ಇನ್‌ಪುಟ್: ವಾಕ್ಯ = ""lets go for swimming""
        ಔಟ್‌ಪುಟ್: ""go for""

    ನಿಯಮಗಳು:
        * 1 <= len <= 100
        * ವಾಕ್ಯವು ಅಕ್ಷರಗಳನ್ನು ಮಾತ್ರ ಹೊಂದಿರುತ್ತದೆ
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""```kannada
ನಿಮ್ಮ ಕೆಲಸವು x * n ವ್ಯಾಖ್ಯಾನವನ್ನು ಸರಳಗೊಳಿಸುವ ಕಾರ್ಯವನ್ನು ಅನುಷ್ಠಾನಗೊಳಿಸಲು ಆಗಿದೆ. ಕಾರ್ಯವು x * n ಸಂಪೂರ್ಣ ಸಂಖ್ಯೆಗೆ ಮೌಲ್ಯ ನೀಡಿದರೆ ಸತ್ಯವನ್ನು ಮತ್ತು ಇಲ್ಲದಿದ್ದರೆ ಸುಳ್ಳನ್ನು ಹಿಂತಿರುಗಿಸುತ್ತದೆ. x ಮತ್ತು n ಎರಡೂ ಒಂದು ಭಾಜಕದ ಪಾಠವಾಗಿದ್ದು, ಹೀಗಿರುತ್ತದೆ <ಅಂಕಿ>/<ಹರಕ> ಅಲ್ಲಿ ಅಂಕಿ ಮತ್ತು ಹರಕ ಎರಡೂ ಧನಾತ್ಮಕ ಪೂರ್ಣಸಂಖ್ಯೆಗಳಾಗಿವೆ.

ನೀವು ಊಹಿಸಬಹುದು x ಮತ್ತು n ಮಾನ್ಯವಾದ ಭಾಜಕಗಳಾಗಿದ್ದು, ಶೂನ್ಯವನ್ನು ಹರಕವಾಗಿ ಹೊಂದಿಲ್ಲ.

simplify = ಸತ್ಯ
simplify = ಸುಳ್ಳು
simplify = ಸುಳ್ಳು
```
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    ಕೊಟ್ಟಿರುವ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯನ್ನು ಅವರ ಅಂಕಿಯ ಮೊತ್ತದ ಆಧಾರದ ಮೇಲೆ ಏರುಮಟ್ಟದಲ್ಲಿ ವಿಂಗಡಿಸುವ ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ.
ಗಮನಿಸಿ: ಕೆಲವು ಅಂಶಗಳ ಅಂಕಿಯ ಮೊತ್ತ ಸಮಾನವಾಗಿದ್ದರೆ, ಅವುಗಳನ್ನು ಮೂಲಪಟ್ಟಿಯಲ್ಲಿನ ಅವರ ಕ್ರಮಾಂಕದ ಆಧಾರದ ಮೇಲೆ ಕ್ರಮಗೊಳಿಸಿ.

ಉದಾಹರಣೆಗೆ:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""ನಿರ್ದಿಷ್ಟ ನಿಲುವಳಿಯನ್ನು ಕನ್ನಡದಲ್ಲಿ ಅನುವಾದಿಸಲು, ಈ ಕೆಳಗಿನಂತೆ ಬರೆದರೆ ಸರಿಯಾಗಿದೆ:

ಸಂಖ್ಯೆಗಳ ಶ್ರೇಣಿಯನ್ನು ಇನ್‌ಪುಟ್ ಆಗಿ ತೆಗೆದುಕೊಳ್ಳುವ ಮತ್ತು ಶ್ರೇಣಿಯಲ್ಲಿರುವ ಅಂಶಗಳ ಸಂಖ್ಯೆಯನ್ನು ಹಿಂತಿರುಗಿಸುವ ಫಂಕ್ಷನ್ ಅನ್ನು ಬರೆಯಿರಿ, 
ಅವು 10ಕ್ಕಿಂತ ಹೆಚ್ಚಾಗಿದ್ದು, ಎರಡೂ ಮೊದಲ ಮತ್ತು ಕೊನೆಯ ಅಂಕಿಗಳು ಬೆಸ ಆಗಿರಬೇಕು. 
ಉದಾಹರಣೆ:
specialFilter => 1 
specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    ನಿಮಗೆ ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕ n ನೀಡಲಾಗಿದೆ. ನೀವು n ಉದ್ದದ ಪೂರ್ಣಾಂಕ ಶ್ರೇಣಿಯನ್ನು a ಸೃಷ್ಟಿಸಬೇಕು.
        ಪ್ರತಿ iಗಾಗಿ, a[i] = i * i - i + 1.
        i < j < k ಆಗಿರುವ aಯ ತ್ರಯಗಳನ್ನು ಕಂಡುಹಿಡಿಯಿರಿ, 
    ಮತ್ತು a[i] + a[j] + a[k] 3 ಕ್ಕೆ ಹಂಚಲ್ಪಡುವ ಮೊತ್ತವಾಗಿರಬೇಕು.

    ಉದಾಹರಣೆ:
        ಇನ್ಪುಟ್: n = 5
        ಔಟ್‌ಪುಟ್: 1
        ವಿವರಣೆ: 
        a = [1, 3, 7, 13, 21]
        ಏಕೈಕ ಮಾನ್ಯ ತ್ರಯ ಇದೆ.
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""ಸೂಚನೆಯ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಅನುವಾದಿಸಿ:

ಪರಿಮಾಣವಾಗಿ ಸ್ಟ್ರಿಂಗ್‌ಗಳ ಪಟ್ಟಿಯನ್ನು ಸ್ವೀಕರಿಸುವ, 
ಅದರಲ್ಲಿನ ಬಿಸಾಡಿದ ಉದ್ದಗಳನ್ನು ಹೊಂದಿರುವ ಸ್ಟ್ರಿಂಗ್‌ಗಳನ್ನು ಅಳಿಸುವ, 
ಮತ್ತು ಫಲಿತಾಂಶ ಪಟ್ಟಿಯನ್ನು ಸಜ್ಜುಮಾಡಿದ ಕ್ರಮದಲ್ಲಿ ಹಿಂತಿರುಗಿಸುವ ಕಾರ್ಯವನ್ನು ಬರೆಯಿರಿ.
ಪಟ್ಟಿ ಯಾವಾಗಲೂ ಸ್ಟ್ರಿಂಗ್‌ಗಳ ಪಟ್ಟಿಯೇ ಮತ್ತು ಎಂದಿಗೂ ಸಂಖ್ಯೆಗಳ ಶ್ರೇಣಿಯಲ್ಲ.
ಮತ್ತು ಇದರಲ್ಲಿ ನಕಲುಗಳು ಇರಬಹುದು.
ಪಟ್ಟಿಯ ಕ್ರಮವು ಪ್ರತಿಯೊಂದು ಪದದ ಉದ್ದದ ಮೂಲಕ ಏರಿಕೆ ಕ್ರಮದಲ್ಲಿರಬೇಕು, 
ಮತ್ತು ನೀವು ಆ ನಿಯಮದಿಂದ ಪಟ್ಟಿಯನ್ನು ವಿಂಗಡಿಸಬೇಕು.
ರెಂಡು ಪದಗಳು ಒಂದೇ ಉದ್ದವನ್ನು ಹೊಂದಿದ್ದರೆ, ಪಟ್ಟಿಯನ್ನು ವರ್ಣಮಾಲೆಯ ಕ್ರಮದಲ್ಲಿ ವಿಂಗಡಿಸಿ.
ಕಾರ್ಯವು ಸರಿಯಾದ ಕ್ರಮದಲ್ಲಿ ಸ್ಟ್ರಿಂಗ್‌ಗಳ ಪಟ್ಟಿಯನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.
ಎಲ್ಲಾ ಪದಗಳು ಒಂದೇ ಉದ್ದವನ್ನು ಹೊಂದಿವೆ ಎಂದು ನೀವು ಊಹಿಸಬಹುದು.
ಉದಾಹರಣೆಗೆ:
assert list_sort => [""aa""]
assert list_sort => [""ab"", ""cd""]
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""n ಪ್ರೈಮ್ ಸಂಖ್ಯೆ ಆಗಿದ್ದರೆ x ಮೌಲ್ಯವನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕಾದ ಸರಳ ಕಾರ್ಯಕ್ರಮವು, ಇಲ್ಲದಿದ್ದರೆ y ಮೌಲ್ಯವನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.

ಉದಾಹರಣೆಗಳು:
x_or_y == 34
x_or_y == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""ನಾನು ಯೋಚಿಸುತ್ತೇನೆ, ನಾವು ಎಲ್ಲರೂ ಆ ಭಾವನೆಯನ್ನು ನೆನಪಿಸುತ್ತೇವೆ, ಕೆಲವು ಬಹುಕಾಲದ ನಿರೀಕ್ಷಿತ ಘಟನೆಗಳ ಫಲಿತಾಂಶವನ್ನು ಕೊನೆಯಲ್ಲಿ ತಿಳಿದುಕೊಳ್ಳುವಾಗ. ನೀವು ಆ ಕ್ಷಣದಲ್ಲಿ ಹೊಂದಿರುವ ಭಾವನೆಗಳು ಮತ್ತು ಚಿಂತನೆಗಳು ಖಂಡಿತವಾಗಿಯೂ ದಾಖಲೆಯಲ್ಲಿಟ್ಟುಕೊಳ್ಳುವ ಮತ್ತು ಹೋಲಿಸುವಂಥವು. ನಿಮ್ಮ ಕಾರ್ಯವು ವ್ಯಕ್ತಿಯು ಪಂದ್ಯಗಳ ಫಲಿತಾಂಶವನ್ನು ಸರಿಯಾಗಿ ಊಹಿಸಿದ್ದಾರೆಯೇ ಎಂಬುದನ್ನು ನಿರ್ಧರಿಸುವುದು. ನೀವು ಸಮಾನ ಉದ್ದದ ಅಂಕಗಳು ಮತ್ತು ಊಹೆಗಳ ಎರಡು ಶ್ರೇಣಿಗಳನ್ನು ಹೊಂದಿದ್ದೀರಿ, ಅಲ್ಲಿ ಪ್ರತಿ ಸೂಚ್ಯಂಕವು ಒಂದು ಪಂದ್ಯವನ್ನು ತೋರಿಸುತ್ತದೆ. ಪ್ರತಿ ಊಹೆಯು ಎಷ್ಟು ದೂರವಿದೆ ಎಂಬುದನ್ನು ಸೂಚಿಸುವ ಸಮಾನ ಉದ್ದದ ಶ್ರೇಣಿಯನ್ನು ಹಿಂತಿರುಗಿಸಿ. ಅವರು ಸರಿಯಾಗಿ ಊಹಿಸಿದ್ದರೆ, ಮೌಲ್ಯವು 0 ಆಗಿರುತ್ತದೆ, ಮತ್ತು ಹಾಗಿಲ್ಲದಿದ್ದರೆ, ಮೌಲ್ಯವು ಊಹೆ ಮತ್ತು ಅಂಕದ ನಡುವಿನ ಪರಮ ಪ್ರಮಾಣದ ವ್ಯತ್ಯಾಸವಾಗಿರುತ್ತದೆ.

ಉದಾಹರಣೆ:

compare -> [0,0,0,0,3,3]
compare -> [4,4,1,0,0,6]
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""ನೀವು ಒಂದು ತರಗತಿಯ ಹೆಸರನ್ನು ಮತ್ತು ವಿಸ್ತರಣೆಗಳ ಪಟ್ಟಿಯನ್ನು ಪಡೆದಿರುತ್ತೀರಿ. ವಿಸ್ತರಣೆಗಳನ್ನು ತರಗತಿಗೆ ಹೆಚ್ಚುವರಿ ತರಗತಿಗಳನ್ನು ಲೋಡ್ ಮಾಡಲು ಬಳಸಲಾಗುತ್ತದೆ. ವಿಸ್ತರಣೆಯ ಶಕ್ತಿ ಹೀಗಿದೆ: CAP ವಿಸ್ತರಣೆಯ ಹೆಸರಿನ ದೊಡ್ಡ ಅಕ್ಷರಗಳ ಸಂಖ್ಯೆಯಾಗಿದೆ, ಮತ್ತು SM ವಿಸ್ತರಣೆಯ ಹೆಸರಿನ ಸಣ್ಣ ಅಕ್ಷರಗಳ ಸಂಖ್ಯೆಯಾಗಿದೆ, ಶಕ್ತಿ CAP - SMfrac_frac_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_frac_fraction_fracfraction_fraction_fraction_fraction_frac_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""ನೀವು 2 ಪದಗಳನ್ನು ನೀಡಲಾಗುತ್ತದೆ. ನೀವು ಮೊದಲ ಪದದಲ್ಲಿ ಎರಡನೇ ಪದ ಅಥವಾ ಅದರ ಯಾವುದೇ ತಿರುಗಾಟವು ಉಪಪದವಾಗಿದ್ದರೆ True ಅನ್ನು ಹಿಂದಿರುಗಿಸಬೇಕಾಗಿದೆ.
    cycpattern_check => ಸುಳ್ಳು
    cycpattern_check => ಸತ್ಯ
    cycpattern_check => ಸುಳ್ಳು
    cycpattern_check => ಸತ್ಯ
    cycpattern_check => ಸುಳ್ಳು
    cycpattern_check => ಸತ್ಯ

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""ಒಂದು ಪೂರ್ಣಾಂಕವನ್ನು ಕೊಡಿ. ಸಮ ಹಾಗೂ ಬೆಸ ಸಂಖ್ಯೆಗಳ ಸಂಖ್ಯೆಯನ್ನು ಕ್ರಮವಾಗಿ ಹೊಂದಿರುವ ಒಂದು ಟ್ಯೂಪಲ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಿ.

     ಉದಾಹರಣೆ:
        even_odd_count ==>
        even_odd_count ==>
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    ನೀಡಲಾದ ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕವನ್ನು ರೋಮನ್ ಅಂಕೆಗಳಿಗೆ ಸಮಾನವಾದ ಸ್ಟ್ರಿಂಗ್ ಆಗಿ ಪರಿವರ್ತಿಸಿ,
    ಮತ್ತು ಅದನ್ನು ಸಣ್ಣ ಅಕ್ಷರಗಳಲ್ಲಿ ಮರಳಿಸಿ.
    ನಿರ್ಬಂಧಗಳು: 1 <= ಸಂಖ್ಯೆ <= 1000

    ಉದಾಹರಣೆಗಳು:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""ಸ್ಟ್ರಿಂಗ್‌ಗಳ ಪಟ್ಟಿಯನ್ನು ಸ್ವೀಕರಿಸುವ ಫಂಕ್ಷನ್ ಅನ್ನು ಬರೆಯಿರಿ.
ಪಟ್ಟಿಯಲ್ಲಿ ವಿಭಿನ್ನ ಪದಗಳಿರುತ್ತವೆ. ಅತಿ ಹೆಚ್ಚು ವಿಭಿನ್ನ ಅಕ್ಷರಗಳನ್ನು ಹೊಂದಿರುವ ಪದವನ್ನು ಹಿಂತಿರುಗಿಸಿ. 
ಬಹಳಷ್ಟು ಸ್ಟ್ರಿಂಗ್‌ಗಳು ಅತಿ ಹೆಚ್ಚು ವಿಭಿನ್ನ ಅಕ್ಷರಗಳನ್ನು ಹೊಂದಿದ್ದರೆ, ಅಕ್ಷರಮಾಲೆಯ ಕ್ರಮದಲ್ಲಿ ಮೊದಲನೇಯದನ್ನು ಹಿಂತಿರುಗಿಸಿ.

find_max == ""string""
find_max == ""enam""
find_max == ""aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    ನೀವು ಒಂದು ಹಸಿದ ಮೊಲ, ಮತ್ತು ನೀವು ಈಗಾಗಲೇ ಕೆಲವು ಗಾಜರಿಗಳನ್ನು ತಿಂದಿದ್ದೀರಿ, 
    ಆದರೆ ಈಗ ದಿನದ ಊಟಗಳನ್ನು ಪೂರ್ಣಗೊಳಿಸಲು ಹೆಚ್ಚು ಗಾಜರಿಗಳನ್ನು ತಿನ್ನಬೇಕಾಗಿದೆ.
    ನೀವು [ಒಟ್ಟು ತಿಂದ ಗಾಜರಿಗಳ ಸಂಖ್ಯೆಯನ್ನು ನಿಮ್ಮ ಊಟದ ಬಳಿಕ, 
          ನಿಮ್ಮ ಊಟದ ನಂತರ ಉಳಿದಿರುವ ಗಾಜರಿಗಳ ಸಂಖ್ಯೆಯನ್ನು] 
    ಮರುಪಠಿಸಬೇಕು.
    
    ಉಳಿದಿರುವ ಗಾಜರಿಗಳು ಸಾಕಷ್ಟು ಇಲ್ಲದಿದ್ದರೆ, ನೀವು ಉಳಿದಿರುವ ಎಲ್ಲಾ ಗಾಜರಿಗಳನ್ನು ತಿನ್ನುತ್ತೀರಿ, ಆದರೆ ಇನ್ನೂ ಹಸಿದೇ ಇರುತ್ತೀರಿ.
    
    ಉದಾಹರಣೆ:
    * eat -> [11, 4]
    * eat -> [12, 1]
    * eat -> [11, 0]
    * eat -> [7, 0]
    
    ಚರಗಳು:
    @number : ಪೂರ್ಣಾಂಕ
        ನೀವು ತಿಂದಿರುವ ಗಾಜರಿಗಳ ಸಂಖ್ಯೆ.
    @need : ಪೂರ್ಣಾಂಕ
        ನೀವು ತಿನ್ನಬೇಕಾದ ಗಾಜರಿಗಳ ಸಂಖ್ಯೆ.
    @remaining : ಪೂರ್ಣಾಂಕ
        ಮಿಕ್ಕಿರುವ ಗಾಜರಿಗಳ ಸಂಖ್ಯೆ
    
    ನಿರ್ಬಂಧ:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    ಮೋಜು ಮಾಡಿ :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    ಇಲ್ಲಿರುವ ವಾಕ್ಯವನ್ನು ಕನ್ನಡಕ್ಕೆ ಅನುವಾದಿಸಿ:

ಕೊಟ್ಟಿರುವ ಎರಡು ಪಟ್ಟಿಗಳು ಆಪರೇಟರ್ ಮತ್ತು ಆಪರ್ಯಾಂಡ್. ಮೊದಲ ಪಟ್ಟಿಯಲ್ಲಿ ಮೂಲ ಅಲ್ಜೀಬ್ರಾ ಕಾರ್ಯಗಳು ಇವೆ, ಮತ್ತು 
ಎರಡನೇ ಪಟ್ಟಿಯು ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯಾಗಿದೆ. ಈ ಎರಡು ಪಟ್ಟಿಗಳನ್ನು ಬಳಸಿ ಅಲ್ಜೀಬ್ರಾ ಅನುಕ್ರಮವನ್ನು ನಿರ್ಮಿಸಿ 
ಈ ಅನುಕ್ರಮದ ಮೌಲ್ಯವನ್ನು ಹಿಂತಿರುಗಿಸು.

ಮೂಲ ಅಲ್ಜೀಬ್ರಾ ಕಾರ್ಯಗಳು:
ಹೆಚ್ಚುಮಾತು 
ಕಡಿಮೆಮಾತು 
ಗುಣಕ 
ಮಹಡಿ ವಿಭಾಗ 
ಘಾತಾಂಕ 

ಉದಾಹರಣೆ:
operator['+', '*', '-']
array = [2, 3, 4, 5]
result = 2 + 3 * 4 - 5
=> result = 9

ಸ್ವಲ್ಪ ಮಾಹಿತಿ:
ಆಪರೇಟರ್ ಪಟ್ಟಿಯ ಉದ್ದವು ಆಪರ್ಯಾಂಡ್ ಪಟ್ಟಿಯ ಉದ್ದಕ್ಕಿಂತ ಒಂದು ಕಡಿಮೆ. 
ಆಪರ್ಯಾಂಡ್ ಪಟ್ಟಿಯು ಶೂನ್ಯೇತರ ಪೂರ್ಣಾಂಕಗಳ ಪಟ್ಟಿಯಾಗಿದೆ.
ಆಪರೇಟರ್ ಪಟ್ಟಿಯಲ್ಲಿ ಕನಿಷ್ಟ ಒಂದು ಆಪರೇಟರ್ ಇರುತ್ತದೆ, ಹಾಗೂ ಆಪರ್ಯಾಂಡ್ ಪಟ್ಟಿಯಲ್ಲಿ ಕನಿಷ್ಟ ಎರಡು ಆಪರ್ಯಾಂಡ್ಗಳು ಇರುತ್ತವೆ.

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""ನೀವು ಒಂದು ಸ್ಟ್ರಿಂಗ್ s ಅನ್ನು ನೀಡಲಾಗಿದೆ.
    s[i] ಒಂದು ಅಕ್ಷರವಾದರೆ, ಅದರ ಕೇಸ್ ಅನ್ನು ಸಣ್ಣ ಅಕ್ಷರದಿಂದ ದೊಡ್ಡ ಅಕ್ಷರಕ್ಕೆ ಅಥವಾ ದೊಡ್ಡ ಅಕ್ಷರದಿಂದ ಸಣ್ಣ ಅಕ್ಷರಕ್ಕೆ ತಿರುಗಿಸಿ,
    ಇಲ್ಲವಾದರೆ ಅದನ್ನು ಹಾಗೆಯೇ ಇಟ್ಟುಕೊಳ್ಳಿ.
    ಸ್ಟ್ರಿಂಗ್‌ನಲ್ಲಿ ಯಾವುದೇ ಅಕ್ಷರಗಳು ಇಲ್ಲದಿದ್ದರೆ, ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ತಿರುಗಿಸಿ.
    ಫಂಕ್ಷನ್ ತಿರುಗಿದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಹಿಂತಿರುಗಿಸಬೇಕು.
    ಉದಾಹರಣೆಗಳು
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    ದಯವಿಟ್ಟು 'text' ಎಂಬ ಸ್ಟ್ರಿಂಗ್‌ಗೆ ಅದರ md5 ಹ್ಯಾಶ್ ಸಮಾನವಾದ ಸ್ಟ್ರಿಂಗ್ ಅನ್ನು ಮರಳಿ. 
    'text' ಖಾಲಿ ಸ್ಟ್ರಿಂಗ್ ಆಗಿದ್ದರೆ, None ಅನ್ನು ಮರಳಿ.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    ಎರಡು ಧನಾತ್ಮಕ ಪೂರ್ಣಾಂಕಗಳು a ಮತ್ತು b ನೀಡಿದಾಗ, a ಮತ್ತು b ನಡುವಿನ ಸಮ ಸಂಖ್ಯೆಗಳನ್ನು ಏರಿಕ್ರಮದಲ್ಲಿ ಹಿಂತಿರುಗಿಸಿ.

ಉದಾಹರಣೆಗೆ:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
