prompt,canonical_solution,test
"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" සපයා ඇති සංඛ්‍යා ලැයිස්තුවේ, කිසිදු සංඛ්‍යාවක් එකිනෙකට දී ඇති සීමාවට වඩා ආසන්නදැයි පරීක්ෂා කරන්න.
    උදාහරණයක්:
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True
return False
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

"
"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" මෙම ක්‍රියාවලියට පාරිභෝගික පරාසයක කණ්ඩායම් රැසක් අඩංගු පරාසයක් ඇතුළත් වේ. ඔබේ ලක්ෂ්‍යය වන්නේ එම කණ්ඩායම් වෙන් කර වෙන වෙනම පරාසයන් ලෙස ප්‍රතිලාභ ලබාදීමයි. වෙන් කරන ලද කණ්ඩායම් සාමන්‍යයෙන් සතුටින් හා සමබර වේ සහ එකිනෙකට වසා නොමැත. ආදාන පරාසයේ ඇති හෝඩුවල කිසිඳු අවධානයක් නොදෙන්න.
උදාහරණයක්:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
"
"

def truncate_number(number: float) -> float:
    """""" ඔබට දෙන ලද ඕනෑම ධනාත්මක පහසු සංඛ්‍යාවක්, එය integer කොටසකට සහ දශම කොටසකට විහිදවිය හැක.

දශම කොටස ආපසු ලබා දෙන්න.
උදාහරණයක්:
    >>> truncate_number(3.5)
    0.5
    """"""
","    return number % 1.0
","def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
"
"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" ඔබට ආරම්භයේ ශුන්‍ය ශේෂයක් ඇති බැංකු ගිණුමක තැන්පතු සහ මුදල් ඇදීමේ මෙහෙයුම් ලැයිස්තුවක් ලබා දී ඇත. ඔබේ කාර්යය වන්නේ ගිණුමේ ශේෂය කිසිඳු අවස්ථාවක ශුන්‍යයට අඩු වන්නේද යන්න හඳුනා ගැනීමයි. එවක් වූ අවස්ථාවක, කාර්යය සාර්ථකව අවසන් වන්නේ True ප්‍රතිලාභ කිරීමෙනි. වෙනත් අවස්ථාවලදී, එය False ප්‍රතිලාභ කරයි. උදාහරණයක්:
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
"
"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" දෙන ලද අංක ලැයිස්තුවක, මෙම දත්ත කට්ටලයේ සාමාන්‍යය වටා සාමාන්‍යම අමතර සම්ප්‍රේෂණය ගණනය කරන්න.
සාමාන්‍යම අමතර සම්ප්‍රේෂණය යනු එක් එක් මූලද්‍රව්‍යයක් සහ මැදබැසුව අතර සාමාන්‍යම පරතරය වේ:
MAD = සාමාන්‍ය | x - x_mean |
උදාහරණය:
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

"
"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" ආදාන ලැයිස්තුවේ 'numbers' යන දෙඅංකවල් අතර සෑම දෙකක්ම අතරතුර ද්විත්වය 'delimeter' එකක් ඇතුළත් කරන්න.
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
"
"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" මෙම කාර්යයට ඇතුළත් කරන්නේ පද පෙලක් වන අතර එය ඉදිරිපත් කරන්නේ විවිධ කණ්ඩායම් ලෙස වන අතර ඒවා අතර ඉදිරිපත් කරන්නේ අවකාශ වලින් වෙන් කරමින් ගෙන යන පරිදි වන්නේය.
    එක් එක් කණ්ඩායම සඳහා, අතුල්‍ය තැන්පත් කිරීමේ උසම මට්ටම ප්‍රතිදානය වන්නේය.
    උදාහරණයක් වශයෙන්) හට උපරිම තැන්පත් කිරීමේ මට්ටම දෙකක් වන අතර)) හට තුනක් වේ.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
"
"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" ඇතුළත් ලැයිස්තුවේ ඇති පේළිවලින් දෙන ලද උපපදය අන්තර්ගත වන පේළි පමණක් පෙරහන් කරන්න.
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","    return [x for x in strings if substring in x]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
"
"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" එකක් දී ඇති පටිපාටියක පවතින පූර්ණ සංඛ්‍යා වල එකතුවක් සහ ගුණනයක් සමන්විත ත්‍යකයක් ලබා දෙන්න.
    හිස් එකතුව 0 ට සමාන විය යුතු අතර හිස් ගුණනය 1 ට සමාන විය යුතුය.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
"
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" එක් ලැයිස්තුවක් අඩංගු පූර්ණ සංඛ්‍යා වලින්, දක්වා ඇති ක්‍රමයේ දක්වා ඇති අවස්ථාව දක්වා සොයාගත් ගමන් ඇති උපරිම අංගයක් අඩංගු ලැයිස්තුවක් ජනනය කරන්න.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
"
"

def is_palindrome(string: str) -> bool:
    """""" දී ඇති පේළිය පලින්ඩ්‍රෝම් එකක් ද යන්න පරීක්ෂා කරන්න """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
"
"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" ආදානය වන්නේ 1 සහ 0 පමණක් අඩංගු a සහ b යන ඉරියව් දෙකකි.
    මෙම ආදානවලට ද්විතියික XOR ක්‍රියාවලිය කළ යුතු අතර ප්‍රතිඵලය ද ඉරියව්වක් ලෙසම ලබා දෙන්න.
    >>> string_xor('010', '110')
    '100'
    """"""
","    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
"
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" ස්ත්‍රින්ගේ ලැයිස්තුවෙන් දිගින්ම දිගු එක ලබා දෙන්න. එකම දිගක ස්ත්‍රිං කිහිපයක් ඇත්නම් මුල් එක ලබා දෙන්න. ඇතුළත් ලැයිස්තුව හිස් නම් කිසිවක් ලබා දෙන්න.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
"
"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" අංක දෙකක් වන a සහ b හි උපරිම පොදු බහුලකාරය නැවත ලබා දෙන්න.
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","    while b:
        a, b = b, a % b
    return a
","def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
"
"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" ආදාන පාඨ රැසෙහි කෙටිම සිට දිගුම දක්වා සියළුම පෙරනිමි ලැයිස්තුව ප්‍රතිලාභ කරන්න.
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
"
"

def string_sequence(n: int) -> str:
    """""" ශූන්‍යය සිට n දක්වා අන්තර්ගත සංඛ්‍යා සහිත ඉඩකඩින් වෙන්කළ ඉලක්කම් අඩංගු පේළියක් ආපසු ලබාදෙන්න.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","    return ' '.join([str(x) for x in range(n + 1)])
","def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
"
"

def count_distinct_characters(string: str) -> int:
    """""" ලබා දී ඇති පදයක, එය සමන්විත වෙනස් අක්ෂර ගණන කිහිපද කියා සොයාගන්න.
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","    return len(set(string.lower()))
","def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
"
"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" මෙම ක්‍රියාකාරකමට ඇතුළු කරන ලද අගය යනු විශේෂ ASCII ආකෘතික සංගීත සටහන් නියෝජනය කරන පේළියකි.
    ඔබේ කාර්යය වන්නේ මෙම පේළිය විග්‍රහ කර සටහන් එකිනෙකට බීට් ගණනක් පවතින ආකාරයට පරිවර්තනය කිරීමයි.

    මෙන්න කේතය:
    'o' - සම්පූර්ණ සටහන, බීට් හතරක් පවතී
    'o|' - අර්ධ සටහන, බීට් දෙකක් පවතී
    '.|' - සවසර සටහන, බීට් එකක් පවතී

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
"
"

def how_many_times(string: str, substring: str) -> int:
    """""" සෑදිය යුතුය.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
"
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" ආදානය වන්නේ 'zero' සිට 'nine' දක්වා අංක නාමයන්ගෙන් සමන්විත ඉඩකඩ-වෙන් කරන ලද රැසකි.
    වලංගු තේරීම් 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' සහ 'nine' වේ.
    කුඩාම අංකයෙන් විශාලම අංකයට අංක සකසන ලද රැසක් සමඟ පද පෙළ ආපසු ලබා දෙන්න.
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
"
"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" අපූරුවෙන් ලබා දී ඇති සංඛ්‍යා ලේඛනයකින් එකිනෙකට ආසන්නම දෙකක් තෝරා විවෘත කර පිළිවෙලින් විවෘත කරන්න.
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

"
"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" ලබා දී ඇති සංඛ්‍යා ලැයිස්තුව සඳහා රේඛීය පරිවර්තනයක් යෙදවන්න,
    කුඩාම සංඛ්‍යාව 0 වන අතර විශාලතම සංඛ්‍යාව 1 වන පරිදි.
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
"
"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" දෙන ලද ලැයිස්තුවෙහි පමණක් පුරනකරු සම්බන්ධව ඇති අගයන් සඳහා පමණක් පිරික්සන්න.
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","    return [x for x in values if isinstance(x, int)]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
"
"

def strlen(string: str) -> int:
    """""" දෙන ලද සෙවෙලේ දිග තැරවීම.
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","    return len(string)
","def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
"
"

def largest_divisor(n: int) -> int:
    """""" නියමිත n ගණනක් සඳහා, n ට සමානව බෙදන, n ට වඩා කුඩාම විශාලතම ගණන සොයා ගන්න.
    >>> largest_divisor(15)
    5
    """"""
","    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
"
"from typing import List


def factorize(n: int) -> List[int]:
    """""" දී ඇති පූර්ණ සංඛ්‍යාතයේ ප්‍රාථමික සාධක කුඩාම සිට විශාලතම දක්වා පිළිවෙලින් ආපසු ලබා දෙන්න.
    සැම සාධකයම සාධක ව්‍යුහීකරණයේ පෙනෙන ප්‍රමාණයට සමාන වාර ගණනක් ලැයිස්තුගත කළ යුතුය.
    ඇතුල් කළ සංඛ්‍යාව සියලු සාධකවල ගුණිතය සමඟ සමාන විය යුතුය.
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
"
"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" ඉන්ටිජර් ලැයිස්තුවකින්, එකට වැඩි වාර ගණනක් ඇති සියලුම අංග ඉවත් කරන්න. 
    ඉතිරි අංගයන්ගේ පිළිවෙල ආදානයේ පරිදිම තබා ගන්න.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
"
"

def flip_case(string: str) -> str:
    """""" දී ඇති දඟරයක් සඳහා, කුඩා අකුරු විශාල අකුරු බවට සහ විශාල අකුරු කුඩා අකුරු බවට වෙනස් කරන්න.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","    return string.swapcase()
","def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
"
"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" ස්ත්‍රීන්ගේ ලැයිස්තුවක් එක් වචනයක් ලෙස එකට එක් කරන්න.
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","    return ''.join(strings)
","def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
"
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" ඇතුල් කිරීම් ලැයිස්තුවේ පවතින පද පෙළවලින් දී ඇති පූර්වපදයෙන් ආරම්භ වන ඒවා පමණක් පෙරහන් කරන්න.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","    return [x for x in strings if x.startswith(prefix)]
","def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
"
"

def get_positive(l: list):
    """"""පැහැදිලිවම ධනාත්මක සංඛ්‍යා පමණක් ලයිස්තුවේ පැමිණෙන්න.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","    return [e for e in l if e > 0]
","def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

"
"

def is_prime(n):
    """"""තවත් ලබා දී ඇති සංඛ්‍යාව ප්‍රාථමික නම්, සත්‍යය ප්‍රතිලාභ කරන්න, නැතහොත් අසත්‍යය.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

"
"import math


def poly(xs: list, x: float):
    """"""
    ස්ථාන x දී xs සන්යුක්තයන් සමඟ පොලිනොමියල් අගය තක්සේරු කරයි.
    xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n ලෙස ප්‍රතිඵලය ලබා ගනී.
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

"
"

def sort_third(l: list):
    """"""මෙම ක්‍රියාව ලැයිස්තුවක් වන l ලබා ගනී සහ ලැයිස්තුවක් වන l' ආපසු ලබා දේ, එසේ නැත්නම් l' හි අගයන් l හි තුනෙන් බෙදී නොයන දර්ශකවලදී සමාන වේ, එනමුත් තුනෙන් බෙදෙන දර්ශකවලදී එහි අගයන් l හි සමාන දර්ශකවල අගයන් සමග සමාන වේ, නමුත් සෝඩා කර ඇත.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

"
"

def unique(l: list):
    """"""ලැයිස්තුවක පවතින අනන්‍ය විලක්‍ෂණ මූලද්‍රව්‍ය අනුපිළිවෙලින් ආපසු ලබාදෙන්න
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","    return sorted(list(set(l)))
","def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

"
"

def max_element(l: list):
    """"""ලැයිස්තුවේ ඇති උපරිම අංගය ආපසු ලබාදෙන්න.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
"
"

def fizz_buzz(n: int):
    """"""n කින් වඩා අඩු සහ 11 හෝ 13 කින් බෙදිය හැකි පූර්ණ සංඛ්‍යා වල 7 අංකය පෙනී යන වාර ගණන නැවත ලබා දෙන්න.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

"
"

def sort_even(l: list):
    """"""මෙම ක්‍රියාව ලැයිස්තුවක් l ගෙන එය ආපසු ලබා දේ l' ලෙස එසේ නම්
    l' ලැයිස්තුවේ විකල්ප අංක වල අගයන් l වල විකල්ප අංක අගයන් සමඟ සමාන වේ, 
    එහි පවා අංක වල අගයන් l වල පවා අංක අගයන් සමඟ සමාන වේ, 
    නමුත් එම අගයන් අනුක්‍රමයෙන් සකස් කර ඇත.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

"
"

def encode_cyclic(s: str):
    """"""
    චරිත ත්‍රිත්වයන් වශයෙන් කාණ්ඩ කරමින් ආපසු දෙන ලද කේතනය කළ දූතය.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","    return encode_cyclic(encode_cyclic(s))
","def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

"
"

def prime_fib(n: int):
    """"""
    prime_fib මඟින් n-වන සංඛ්‍යාව ලබා දේ, එය ෆිබොනැචි සංඛ්‍යාවක් වන අතර එය ප්‍රයිම්ද වෙයි.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

"
"

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero නම් ක්‍රමවේදය මුලින්ම පුරනයක් වන පරිදි පිරිසලකුණු ලැයිස්තුවක් පරිශීලනය කරයි.
    එය සත්‍යය බවට පත් කරයි නම් ලැයිස්තුවේ වෙනස් ත්‍රිත්වයක් ඇති නම්
    ඒවායේ එකතුව ශුන්‍යයි, නැතහොත් අසත්‍යය බවට පත් කරයි.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

"
"

def car_race_collision(n: int):
    """"""
    අවධානය යොමු කරන්න, සෘජුවම නිතරම දිගු රේඛාවක් ලෙස පාරක් කල්පනය කරන්න.
    n කාර් වම් සිට දකුණට ගමන් කරමින් සිටී; ඒ සමගම, වෙනත් n කාර් එකතුවක්
    දකුණු සිට වමට ගමන් කරමින් සිටී. කාර් එකතුව දෙකක් පටන් ගන්නේ එකිනෙකාගෙන්
    ඉතා ඈතට සිටින අතර. සියලුම කාර් එකම වේගයෙන් ගමන් කරයි. වම් සිට දකුණට ගමන් කරන කාර් එකක් 
    දකුණු සිට වමට ගමන් කරන කාර් එකක් අතවර කරන විට ගැටුමක් ඇතිවෙනවා ලෙස කියනු ලබයි.
    කෙසේ වෙතත්, කාර් ඉතාමත් ශක්තිමත් සහ දෘඪ වේ; එම නිසා, ඔවුන් ගැටුමක් සිදු නොවූ වාගේම
    තම ගමන් මාර්ගයෙන් ගමන් කරනු ලබයි.

    මෙම කාර්යය එවැනි ගැටුම් ගණන ප්‍රතිඵල කිරීමක් වේ.
    """"""
","    return n**2
","def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

"
"

def incr_list(l: list):
    """"""අයිතම 1කින් වැඩි කර ඇති ලැයිස්තුව ආපසු ලබා දෙන්න.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","    return [(e + 1) for e in l]
","def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

"
"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero යනු පුරාලන ලද පූර්ණ සංඛ්‍යා ලැයිස්තුවක් ලෙස ආදානයක් ගන්නා ක්‍රියාවලියකි.
    එහිදී ලැයිස්තුවේ දී සම්පූර්ණයෙන්ම වෙනස් වූ දෙකක් එකට එකතු කල විට ප්‍රතිඵලය ශුන්‍ය වන සම්මතය ඇත්නම් True ප්‍රතිචාරය ලබා දේ, එසේ නොමැතිනම් False ප්‍රතිචාරය ලබා දේ.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

"
"

def change_base(x: int, base: int):
    """"""ආදාන සංඛ්‍යාතයේ x සංඛ්‍යාතය මූලය වෙනස් කරන්න.
    පරිවර්තනයෙන් පසු සංග්‍රහණීය නියෝජනය ප්‍රතිඵලය ලෙස ලබා දෙන්න.
    මූල සංඛ්‍යාත්මකයන් 10 ට අඩුය.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

"
"

def triangle_area(a, h):
    """"""අතක් දිග සහ උස ලබා දෙන්න, ත්‍රිකෝණයක ප්‍රදේශය ලබා දෙන්න.
    >>> triangle_area(5, 3)
    7.5
    """"""
","    return a * h / 2.0
","def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

"
"

def fib4(n: int):
    """"""Fib4 සංඛ්‍යානුක්‍රමය යනු පහත පරිදි අර්ථ දක්වන, Fibbonacci සංඛ්‍යානුක්‍රමයට සමාන සංඛ්‍යානුක්‍රමයකි:
    fib4 -> 0
    fib4 -> 0
    fib4 -> 2
    fib4 -> 0
    fib4 -> fib4 + fib4 + fib4 + fib4.
    කරුණාකර fib4 සංඛ්‍යානුක්‍රමයේ n-වැනි මුලකුර ඉක්මනින් ගණනය කිරීම සඳහා කාර්යක්ෂම ක්‍රියාවලියක් ලියන්න. නැවත නැවත කැඳවීම භාවිත නොකරන්න.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

"
"

def median(l: list):
    """"""ලැයිස්තුවේ l ඇති අංග වල මධ්‍යයන අගය ප්‍රතිලාභ කරන්න.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

"
"

def is_palindrome(text: str):
    """"""
    ඇතැම් ස්ත්‍රීන් පාලිඳ්‍රෝමයක් ද යැයි පරීක්ෂා කරයි
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

"
"

def modp(n: int, p: int):
    """"""2^n මොඩියුලෝ p ආපසු ලබා දෙන්න.
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

"
"

def encode_shift(s: str):
    """"""
    අක්ෂර මාලාවේ සෑම අක්ෂරයකම අකුර 5ක් මාරු කිරීමෙන් ආපසු යවන කේතගත වචනය.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

"
"

def remove_vowels(text):
    """"""
    remove_vowels යනු අක්ෂර මාලාවක් ගෙන එහි ස්වර අක්ෂර ඉවත් කර ඇති අක්ෂර මාලාවක් ආපසු ලබා දෙන ක්‍රියාවලියකි.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

"
"

def below_threshold(l: list, t: int):
    """"""ලැයිස්තුවේ සියලු සංඛ්‍යා t සීමාවට අඩු නම් True ආපසු දෙන්න.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","    for e in l:
        if e >= t:
            return False
    return True
","def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

"
"

def add(x: int, y: int):
    """"""අංක දෙකක් x සහ y එකතු කරන්න.
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","    return x + y
","def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

"
"

def same_chars(s0: str, s1: str):
    """"""
    වචන දෙකක් එකම අකුරු ඇතිදැයි පරීක්ෂා කරන්න.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","    return set(s0) == set(s1)
","def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

"
"

def fib(n: int):
    """"""n-වන ෆිබොනැචි සංඛ්‍යාව ආපසු ලබා දෙන්න.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

"
"

def correct_bracketing(brackets: str):
    """""" ```
ඇඟිලි කොටු ""<"" සහ "">"" එකතුවක් වේ.
    සෑම විවෘත ඇඟිලි කොටුවකටම සමානාත්මක වසා ඇති ඇඟිලි කොටුවක් ඇත්නම් True යැයි නැවත ලබා දේ.
```

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

"
"

def monotonic(l: list):
    """"""ලැයිස්තු අංග මොනොටෝනිකව වැඩිවීම හෝ අඩුවීම සිදු වේ නම්, True ආපසු ලබා දෙන්න.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

"
"

def common(l1: list, l2: list):
    """"""ලැයිස්තු දෙකක ආපසු හැරී සොයාගත් සම්මත තනිමහල් අමුත්තන් සඳහා.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

"
"

def largest_prime_factor(n: int):
    """"""n ට වඩා විශාල ප්‍රාථමික සාධකය ආපසු ලබා දෙන්න. n > 1 සහ ප්‍රාථමික නොවන එකක් ලෙස සැලකෙන්න.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

"
"

def sum_to_n(n: int):
    """"""sum_to_n යනු 1 සිට n දක්වා සංඛ්‍යා එකතු කරන ක්‍රියාවලියකි.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","    return sum(range(n + 1))
","def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

"
"

def correct_bracketing(brackets: str):
    """""" ඇතුළු කොටස් """" වලින් සමන්විත වේ.
    සෑම විවෘත කොටසකටම එයට සමාන වසන කොටසක් තිබේ නම් True අර්ථ දක්වයි.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

"
"

def derivative(xs: list):
    """""" xs පෝලිමියල් එකක ගුණකයන් නියෝජනය කරයි.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     මේ පෝලිමියල් එකේ අවකලනය ඒමම ආකාරයෙන් ලබා දෙන්න.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","    return [(i * x) for i, x in enumerate(xs)][1:]
","def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

"
"

def fibfib(n: int):
    """"""FibFib අංක අනුවර්තය යනු පහත සඳහන් පරිදි සංස්කරණය කරන ලද Fibbonacci අනුවර්තයට සමාන අනුවර්තයක් වේ:
    fibfib == 0
    fibfib == 0
    fibfib == 1
    fibfib == fibfib + fibfib + fibfib.
    කරුණාකර fibfib අංක අනුවර්තයේ n-වන අංගය කාර්යක්ෂමව ගණනය කිරීම සඳහා ක්‍රියාවලියක් ලියන්න.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

"
"
FIX = """"""
තවත් පරීක්ෂණ කේස් එකතු කරන්න.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def circular_shift(x, shift):
    """"""සංඛ්‍යාතය x හි ඉලක්කම් වෘත්තීයව මාරු කරන්න, ඉලක්කම් දකුණට මාරු කරන්න shift ප්‍රමාණයට
    හා ප්‍රතිඵලය වචනයක් ලෙස ලබා දෙන්න.
    shift > ඉලක්කම් ගණන නම්, ඉලක්කම් පසුබැසීමෙන් ලබා දෙන්න.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def digitSum(s):
    """"""මෙම වාක්‍යය සිංහලට පරිවර්තනය කරන්න.

```
කාර්යය
    ඇතුළත් කර ඇති පේළියක් ලබාගෙන එහි තේරුම් ගත් ඉහළ අකුරු වලට පමණක් අදාළ ASCII කේත වල එකතුව ප්‍රතිඵලයක් ලෙස ලබා දෙන ක්‍රමයක් ලියන්න.

    උදාහරණ:
        digitSum => 0
        digitSum => 131
        digitSum => 67
        digitSum => 69
        digitSum => 131
        digitSum => 153
```
    """"""
","    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

"
"
def fruit_distribution(s,n):
    """"""
    මෙම කාර්යයේදී ඔබට පළතුරු කූඩුවක බෙදා ඇති ඇපල් සහ දොඩම් සංඛ්‍යාව නිරූපණය කරන පේළියක් ලබා දෙනු ඇත. මෙම පළතුරු කූඩුව ඇපල්, දොඩම් සහ අඹ පළතුරු අඩංගු වේ. දොඩම් සහ ඇපල් සංඛ්‍යාව නිරූපණය කරන පේළියක් සහ පළතුරු කූඩුවක සමස්ත පළතුරු සංඛ්‍යාව නිරූපණය කරන පූර්ණ සංඛ්‍යාට අනුව, පළතුරු කූඩුවේ අඹ පළතුරු සංඛ්‍යාව ලබා දෙනු ඇත.
උදාහරණයක් ලෙස:
fruit_distribution -> 19 - 5 - 6 = 8
fruit_distribution -> 3 - 0 - 1 = 2
fruit_distribution -> 100 - 2 - 3 = 95
fruit_distribution -> 120 - 100 - 1 = 19
    """"""
","    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
"
"
def pluck(arr):
    """"""
    මෙම වාක්‍යය සිංහලට පරිවර්තනය කරන්න:

""ගස් ශාඛාවක නිරූපණය කරන අarraysයක නො-ඇණුම්කල අන්තර්ගතයන් තිබෙන විට,
ඔබේ කාර්යය නම් එක් අන්තර්ගතයක් උදුරා එය පළ කිරීමයි.
උදුරාගත් අන්තර්ගතය විය යුතුය, කුඩාම සමාන අගයක් ඇති අන්තර්ගතය.
එක් වර්ගයේ කුඩාම සමාන අගයක් ඇති බහුලව අන්තර්ගතයන් හමු වුවහොත් කුඩාම දර්ශකයක් ඇති අන්තර්ගතය පළ කරන්න.

උදුරාගත් අන්තර්ගතය ලැයිස්තුවේ පළ කරන්න, [ කුඩාම_අගය, එහි දර්ශකය ],
සමාන අගයන් නොමැති හෝ දී ඇති array එක හිස් නම්, [] පළ කරන්න.

උදාහරණ1:
    ආදානය: [4,2,3]
    ප්‍රතිදානය: [2, 1]
    විස්තර: 2 කුඩාම සමාන අගය ඇති අතර, 2 කුඩාම දර්ශකය ඇති.

උදාහරණ2:
    ආදානය: [1,2,3]
    ප්‍රතිදානය: [2, 1]
    විස්තර: 2 කුඩාම සමාන අගය ඇති අතර, 2 කුඩාම දර්ශකය ඇති.

උදාහරණ3:
    ආදානය: []
    ප්‍රතිදානය: []

උදාහරණ4:
    ආදානය: [5, 0, 3, 0, 4, 2]
    ප්‍රතිදානය: [0, 1]
    විස්තර: 0 කුඩාම අගය වන නමුත්, එහි දෙකක් ඇති, 
             කුඩාම දර්ශකය ඇති පළමු 0 එක තෝරාගන්නෙමු.

නිර්දේශ:
    * 1 <= nodes.length <= 10000
    * 0 <= node.value
    """"""
","    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

"
"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

"
"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

"
"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) â -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) â -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) â -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) â -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

"
"
def smallest_change(arr):
    """"""
    ඉලක්කම් සහිත arr අරයු තුළ, අරයුව පලින්ඩ්‍රෝමික කර ගැනීමට වෙනස් කළ යුතු අවම මට්ටමේ අංග සොයා ගන්න. පලින්ඩ්‍රෝමික අරයුවක් යනු පෙරට සහ පසුපසට එකසේ කියවිය හැකි අරයුවකි. එක් වෙනසකදී, ඔබට එක් අංගයක් වෙනත් අංගයක් ලෙස වෙනස් කළ හැක.

උදාහරණයක් ලෙස:
smallest_change == 4
smallest_change == 1
smallest_change == 0
    """"""
","    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

"
"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) â -> []
    total_match(['hi', 'admin'], ['hI', 'Hi']) â -> ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) â -> ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) â -> ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) â -> ['4']
    '''
","    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

"
"
def is_multiply_prime(a):
    """"""මෙම වාක්‍යය සිංහලයට පරිවර්තනය කරන්න.
    
```python
දේවකාරයක් ලියන්න, එය දෙන ලද සංඛ්‍යාව 3 ප්‍රාථමික සංඛ්‍යා තුනක ගුණිතයක් නම් සත්‍යය ප්‍රතිචාර දක්වයි, 
නැතහොත් බොරු ප්‍රතිචාර දක්වයි. 100 කට වඩා අඩු බව දැන ගැනීමක් ඇත.
උදාහරණය:
is_multiply_prime == True
30 = 2 * 3 * 5
```
    """"""
","    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

"
"
def is_simple_power(x, n):
    """"""ඔබගේ කාර්යය වන්නේ x යන සංඛ්‍යාව n යන සංඛ්‍යාවක සරල බලයක් නම් සත්‍යය ආපසු ලබාදෙන, නැතිනම් අසත්‍යය ආපසු ලබාදෙන ක්‍රියාවලියක් ලිවීමයි.
x n**int=x නම්, x n සරල බලයක් වේ.
උදාහරණයක් ලෙස:
is_simple_power => true
is_simple_power => true
is_simple_power => true
is_simple_power => false
is_simple_power => false
is_simple_power => false
    """"""
","    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

"
"
def hex_key(num):
    """"""ඔබට කාර්යභාරය ලැබී ඇත ක්‍රමලේඛනයක් ලිවීමට, එය ලැබෙනුයේ තන්තුයක් ලෙස හෙක්සඩෙසිමල් සංඛ්‍යාවක් සහ හෙක්සඩෙසිමල් ඡේදකයන් ගණන කිරීමට, ඒවා ප්‍රාද ද්වීතීය සංඛ්‍යාවන් විය යුතුය.
හෙක්සඩෙසිමල් ඡේදකයන් වේ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
ප්‍රාද සංඛ්‍යාවන් වේ 2, 3, 5, 7, 11, 13, 17,...
එසේනම් ඔබට තීරණය කළ යුතුය පහත ඡේදකයන් ගණනක්: 2, 3, 5, 7, B, D.
සටහන: ඔබට පුරාණයේ සැකසුම හෝ හිස් තන්තුයක් ලෙස ඇතුළත් කිරීම සෑම විටම සත්‍ය ලෙස එන බව සාමාන්‍යයෙන් සැලකිය හැක, සහ සංකේත A,B,C,D,E,F සෑම විටම මහා අක්ෂරයෙන් වේ.
උදාහරණ:
num = ""AB"" නම් පළලිය 1 විය යුතුය.
num = ""1077E"" නම් පළලිය 2 විය යුතුය.
num = ""ABED1A33"" නම් පළලිය 4 විය යුතුය.
num = ""123456789ABCDEF0"" නම් පළලිය 6 විය යුතුය.
num = ""2020"" නම් පළලිය 2 විය යුතුය.
    """"""
","    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

"
"
def decimal_to_binary(decimal):
    """"""ඔබට දශම රූපයෙන් අංකයක් ලබා දෙන අතර, එය ද්විතීයික ආකාරයට පරිවර්තනය කිරීම ඔබේ කාර්ය වේ. ක්‍රියාකාරීය වපසරියක් ආපසු ලබා දිය යුතු අතර, එහි සෑම අක්ෂරයක්ම ද්විතීයික අංකයක් නිරූපනය කරන අක්ෂරයක් වේ. වපසරියේ සෑම අක්ෂරයක්ම '0' හෝ '1' වනු ඇත.

වපසරියේ ආරම්භයේ සහ අවසානයේ 'db' යන අමතර අක්ෂර දෙකක්ම ඇති වේ. මෙම අමතර අක්ෂර ආකාරයට උපකාරී වීමට ඇත.

උදාහරණ:
decimal_to_binary   # ""db1111db"" ලෙස ආපසු ලබා දේ
decimal_to_binary   # ""db100000db"" ලෙස ආපසු ලබා දේ
    """"""
","    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def is_happy(s):
    """"""ඔබට ""s"" නම් අකුරු මාලාවක් ලබා දී ඇත.
    ඔබගේ කාර්යය නම්, එම අකුරු මාලාව ""සතුටින් පිරී ඇත""ද නැද්ද කියා පරීක්ෂා කිරීමයි.
    ""සතුටින් පිරී ඇත"" යන අකුරු මාලාවක් නම්, එහි දිග වත්මන 3 ක් වත් විය යුතු අතර, අඛණ්ඩව පැමිණෙන අකුරු තුනක්ම විවිධ විය යුතුය.
    උදාහරණයක් ලෙස:
    is_happy => වැරදි
    is_happy => වැරදි
    is_happy => සත්‍යයි
    is_happy => වැරදි
    is_happy => සත්‍යයි
    is_happy => වැරදි
    """"""
","    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
"
"
def numerical_letter_grade(grades):
    """"""මෙම සෙමෙස්ටර් අවසාන සතිය වන අතර ගුරුවරියට සිසුන්ට ශ්‍රේණි ලබා දීමට සිදු වේ.
ගුරුවරිය ඇයගේම ශ්‍රේණිගත කිරීමේ යාන්ත්‍රණය නිර්මාණය කර ඇත.
එහි එකම ගැටලුව වන්නේ, ඇය ශ්‍රේණිගත කිරීම සඳහා භාවිතා කළ කේතය නැතිවී ගොස් තිබීමයි.
ඇය ඔබට සිසුන් කිහිප දෙනෙකුගේ GPA ලැයිස්තුවක් ලබා දී ඇති අතර 
ඔබට පහත වගුව භාවිතා කරමින් අකුරු ශ්‍රේණි ලැයිස්තුවක් ප්‍රතිදාන කිරීමට හැකි ප්‍රායෝගික ක්‍රියාවලියක් ලිවිය යුතුය:
             GPA       |    අකුරු ශ්‍රේණිය
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    උදාහරණය:
    grade_equation ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def prime_length(string):
    """"""නිදහස් පරිවර්තනය: 
```python
ස්ත්රීරෝග විද්යාත්මක ලියන්න, එය තනනව ස්ත්රීරෝග එකක් හා ඇත්තේ ආපසු දිය යුතුය ස්ත්රීරෝගයේ දිගකාරකය ප්‍රථම සංඛ්‍යාවේ නම් හෝ නැතත් වෙනත් විට. උදාහරණ:
prime_length == ඇත්තේ
prime_length == ඇත්තේ
prime_length == ඇත්තේ
prime_length == නැතත්
```
    """"""
","    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

"
"
def starts_one_ends(n):
    """"""
    නී පවතින ඕනෑම ධනාත්මක පූර්ණ සංඛ්‍යාවක් n ලෙස ලබා දී තිබේ නම්, 1 ක් ආරම්භ වන හෝ අවසන් වන n-ඉලක්කම් ධනාත්මක සංඛ්‍යාවන් ගණන එවන්න.
    """"""
","    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(N):
    """"""උදාහරණයක් ලෙස N යන ධන පූර්ණ සංඛ්‍යාවක් ලබා දී ඇත්නම්, එහි ඉලක්කම් එකතුව බයිනරි සංඛ්‍යා පද්ධතියෙන් ලබා දෙන්න.

    උදාහරණය
        N = 1000 නම්, ඉලක්කම් එකතුව 1 වන අතර ප්‍රතිඵලය ""1"" විය යුතුය.
        N = 150 නම්, ඉලක්කම් එකතුව 6 වන අතර ප්‍රතිඵලය ""110"" විය යුතුය.
        N = 147 නම්, ඉලක්කම් එකතුව 12 වන අතර ප්‍රතිඵලය ""1100"" විය යුතුය.
    
    විචල්‍ය:
        @N පූර්ණ සංඛ්‍යාවක්
             සීමා: 0 ≤ N ≤ 10000.
    ප්‍රතිදාන:
         බයිනරි සංඛ්‍යා පද්ධතියෙන් අංකයක් වූ පේළියක්
    """"""
","    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

"
"
def add(lst):
    """"""අහිසි නොවන පූර්ණ සංඛ්‍යා ලැයිස්තුවක් ඇති විට lst. විකල්ප දර්ශකයන්හි ඇති සමා සංඛ්‍යා එකතු කරන්න.

    උදාහරණ:
        add ==> 2 
    """"""
","    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
"
"
def anti_shuffle(s):
    """"""
    පෙළක් ගෙන එහි පිළිවෙළ ගැන්වූ අනුවාදය ලබාදෙන ක්‍රියාවලියක් ලියන්න.
    පිළිවෙළ ගැන්වූ අනුවාදය, යනු සියලු වචන
    නව වචනයකින් වෙනස් වන පෙළකි. එහි සියලු අකුරු
    ascii අගය මත පදනම්ව ආරෝහණ පිළිවෙළින් සකස් කර තිබේ.
    සටහන: ඔබට වචන සහ අවකාශයන්ගේ අනුපිළිවෙළ
    වාක්‍යයේ තබාගත යුතුය.

    උදාහරණයක් සඳහා:
    anti_shuffle 'Hi' ලෙස ලබාදෙයි
    anti_shuffle 'ehllo' ලෙස ලබාදෙයි
    anti_shuffle 'Hello !!!Wdlor' ලෙස ලබාදෙයි
    """"""
","    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def get_row(lst, x):
    """"""
    ඔබට 2 ආයතනික දත්ත ලබාදී ඇත, එය නෙස්ටඩ් ලැයිස්ට් ලෙස පවතින අතර,
    එය මැට්‍රික්ස් වලට සමාන වේ. නමුත්, මැට්‍රික්ස් වලට වෙනස්ව,
    සෑම පේළියකම විවිධ ප්‍රමාණයේ තීරුවක් අඩංගු විය හැක.
    ලබාදී ඇති lst සහ පූර්ණ සංඛ්‍යා x යට, ලැයිස්ට් එකේ x පූර්ණ සංඛ්‍යා සොයා,
    පේළි සහ තීරු ලෙස [, ...] සටහන් වන ටියුපල් ලැයිස්ට් එකක් ආපසු ලබාදෙන්න.
    සෑම ටියුපල් එකක්ම සංඛ්‍යාකම ලෙස පවතී, 0 සිට පටන් ගනිමින්.
    ආරම්භයේදී පේළි අනුව වැඩිවන ක්‍රමයෙන් සම්බන්ධක හෝ සමුච්චයන් පරිසරාකළ යුතුය.
    එමෙන්ම, පේළි තීරු අනුව අබාධිතව වැඩිවන ක්‍රමයෙන් සම්බන්ධක හෝ සමුච්චයන් පරිසරාකළ යුතුය.

    උදාහරණ:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [,,,,]
    get_row == []
    get_row == []
    """"""
","    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def sort_array(array):
    """"""
    ඉදිරිපත් කරන ලද නොමඟ යන මුළුකුරු සංඛ්‍යා ගොනුවක් භාරදී, ඒ ගොනුවේ පිටපතක් ආපසු භාරදෙන්න,
ඔබ ඉදිරිපත් කරන ලද ගොනුව සෝට් කරන්නේ උඩුගත අගය සහ පහළ අගය එකතු කළ යුතු මුළුකුරු සංඛ්‍යාව ඔඩ් නම් ආරෝහණ ක්‍රමයට, නැතහොත් අඩිගත අගය හා පහළ අගය එකතු කළ යුතු මුළුකුරු සංඛ්‍යාව ඉවන් නම් අවරෝහණ ක්‍රමයට සෝට් කරනු ඇත.

සටහන:
* ඉදිරිපත් කරන ලද ගොනුව වෙනස් නොකරන්න.

උදාහරණ:
* sort_array => []
* sort_array => [5]
* sort_array => [0, 1, 2, 3, 4, 5]
* sort_array => [6, 5, 4, 3, 2, 1, 0]
    """"""
","    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

"
"
def encrypt(s):
    """"""ස්ත්‍රීං වාගයක් ගැනීමට encrypt නම් ක්‍රියාවලියක් සෑදීමට හා
    අකුර ආවරණය වූ ස්ත්‍රීං එකක් ආපසු ලබා දෙන්න. 
    අකුර ආවරණය විය යුතු ආකාරයට අකුරු දෙකක් බිඳ හරස්ව යන්න.
    උදාහරණයක් ලෙස:
    encrypt ආපසු ලබා දෙන්නේ 'lm'
    encrypt ආපසු ලබා දෙන්නේ 'ewhjklnop'
    encrypt ආපසු ලබා දෙන්නේ 'kj'
    encrypt ආපසු ලබා දෙන්නේ 'ix'
    """"""
","    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def next_smallest(lst):
    """"""
    ඔබට පිරිනැමෙනුයේ පූර්ව සංඛ්‍යා ලැයිස්තුවකි.
    next_smallest නම් ක්‍රියාවලියක් ලියන්න, එය ලැයිස්තුවේ 2වන කුඩාම මූලද්‍රව්‍යය ලබා දේ.
    එවැනි මූලද්‍රව්‍යයක් නොමැතිනම් None ලබා දෙන්න.

    next_smallest == 2
    next_smallest == 2
    next_smallest == None
    next_smallest == None
    """"""
","    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_bored(S):
    """"""
    ඔබට වචන සංඛ්‍යාවක් ලබා දෙනු ලැබේ, සහ ඔබේ කාර්යය වන්නේ විශාද ප්‍රමාණය ගණන් කිරීමයි. විශාදයක් යනු ""මම"" යන වචනයෙන් ආරම්භ වන වාක්‍යයකි. වාක්‍ය '.' '?' හෝ '!' මගින් සීමා වේ.

උදාහරණයක්:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    any_int(3.6, -2.2, 2) â -> False
  

    
    '''
","    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

"
"
def encode(message):
    """"""
    පණිවිඩයක් ගන්නා සහ එය කේතනය කරන ක්‍රියාවලියක් ලියන්න, 
    එවිට එය සියලු අක්ෂරවල නඩුව මාරු කරයි, පණිවිඩයේ සියලු ස්වර 
    ඍජුවම අකුරින් දක්වයි, එම ස්වරය ඉංග්‍රීසි වර්ණමාලාවේ එම ස්වරය 
    ඉදිරියෙන් ස්ථාන 2කින් දිස්වයි. 
    අකුරු පමණක් ගන්න. 
    
    උදාහරණ:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

"
"

def skjkasdkd(lst):
    """"""ඔබට පරිඝණක සංඛ්‍යා ලැයිස්තුවක් ලබා දී ඇත.
    ඔබට විශාලතම ප්‍රාථම සංඛ්‍යාව සොයා එහි ඉලක්කම් එකතුව ප්‍රතිලාභය ලෙස ලබා දීමට අවශ්‍ය වේ.

    උදාහරණ:
    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] සඳහා ප්‍රතිඵලය විය යුතුය 10
    lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] සඳහා ප්‍රතිඵලය විය යුතුය 25
    lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] සඳහා ප්‍රතිඵලය විය යුතුය 13
    lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] සඳහා ප්‍රතිඵලය විය යුතුය 11
    lst = [0,81,12,3,1,21] සඳහා ප්‍රතිඵලය විය යුතුය 3
    lst = [0,8,1,2,1,7] සඳහා ප්‍රතිඵලය විය යුතුය 7
    """"""
","    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
"
"
def check_dict_case(dict):
    """"""
    ලබා දී ඇති ශබ්දකෝෂයක් සඳහා, සියලුම යතුරු කුඩා අකුරින් ලියැවුණු ස්ට්‍රින් නම් හෝ සියලුම යතුරු විශාල අකුරින් ලියැවුණු ස්ට්‍රින් නම් ඇත්නම් True ආපසු ලබා දෙන්න, නැතහොත් False ලබා දෙන්න.
    ලබා දී ඇති ශබ්දකෝෂය හිස් නම් කාර්යය False ආපසු ලබා දිය යුතුය.
    උදාහරණ:
    check_dict_case True ලබා දිය යුතුය.
    check_dict_case False ලබා දිය යුතුය.
    check_dict_case False ලබා දිය යුතුය.
    check_dict_case False ලබා දිය යුතුය.
    check_dict_case True ලබා දිය යුතුය.
    """"""
","    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

"
"
def count_up_to(n):
    """"""අධිමානකර්මයක් ක්‍රියාත්මක කරන්න, එය අධිමානක ඉලක්කමක් ගනී සහ පළමු n අංකයන්ගෙන් තෝරාගත් අංක මාලාවක් ආපසු ලබා දෙයි, ඒවා ප්‍රාථමික සංඛ්‍යා සහ n ට වඩා අඩු.

උදාහරණයක් ලෙස:
count_up_to => [2, 3]
count_up_to => [2, 3, 5, 7]
count_up_to => []
count_up_to => [2, 3, 5, 7, 11, 13, 17, 19]
count_up_to => []
count_up_to => [2, 3, 5, 7, 11, 13, 17]
    """"""
","    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

"
"
def multiply(a, b):
    """"""මෙම ක්‍රියාවලිය සම්පූර්ණ කරන්න, එය අංක දෙකක් ගන්නා අතර ඔවුන්ගේ ඒකක ඉලක්කම් වල නිෂ්පාදනය ලබා දේ.
    ඇතුළත් කරුන සෑම විටම වලංගු බව පරිකථනය කරන්න.
    උදාහරණ:
    multiply 16 ලබා දිය යුතුය.
    multiply 72 ලබා දිය යුතුය.
    multiply 0 ලබා දිය යුතුය.
    multiply 20 ලබා දිය යුතුය.
    """"""
","    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

"
"
def count_upper(s):
    """"""
    මෙම වාක්‍යය සිංහලට පරිවර්තනය කරන්න.

ලබාදෙන string එක s නම්, සමාන දර්ශකවල ඇති වාක්‍ය රචකයේ විශාල අකුරු ගණන ගණන කරන්න.

උදාහරණයක් ලෙස:
count_upper 1ක් පෙන්වයි
count_upper 0ක් පෙන්වයි
count_upper 0ක් පෙන්වයි
    """"""
","    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For Exampleclosest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

"
"
def make_a_pile(n):
    """"""
    උදාහරණයක් ලෙස, ධනාත්මක පූර්ණ සංඛ්‍යා nක් දී ඇත්නම්, ඔබ n මට්ටමේ ගල් පිරමීඩයක් හදන්න ඕන.
    පළමු මට්ටම n ගල් ඇත.
    ඊළඟ මට්ටමේ ගල් ප්‍රමාණය:
        - n විකෘති නම්, ඊළඟ විකෘති සංඛ්‍යාවයි.
        - n සමා නම්, ඊළඟ සමා සංඛ්‍යාවයි.
    මට්ටම් එක් එක් මට්ටමේ ගල් ගණන ලැයිස්තුවකින් ලබා දෙන්න, ඒ ලැයිස්තුවේ i ස්ථානයේ ඇති මූලද්‍රව්‍යය මට්ටමේ ගල් ගණන නියෝජනය කරයි.

    උදාහරණ:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def words_string(s):
    """"""
    ඔබට සෙමිකෝලන් හෝ ඉස්සරහ යන වචනවලින් වෙන් කරන ලද වචන පෙළක් ලබා දෙනු ලැබේ. 
ඔබගේ කාර්යය වන්නේ පද පෙළ වචන වලට බෙදා ඒ වචන ගණනාව ආපසු ලබා දීමයි.

උදාහරණයක් ලෙස:
words_string == [""Hi"", ""my"", ""name"", ""is"", ""John""]
words_string == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

"
"
def choose_num(x, y):
    """"""මෙම කාර්යය ඵක්ස් සහ වයි යන ඍණ නොවන සංඛ්‍යා දෙකක් ගෙන, [ඵක්ස්, වයි] සීමාව තුළ ඇති විශාලතම සමා සංඛ්‍යා ගණන ප්‍රතිඵලය ලෙස ලබා දෙයි. එවැනි සංඛ්‍යාවක් නොමැති නම්, කාර්යය -1 ලෙස ප්‍රතිචාර දක්විය යුතුය.

උදාහරණයක් ලෙස:
choose_num = 14
choose_num = -1
    """"""
","    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

"
"
def rounded_avg(n, m):
    """"""ඔබට ධනාත්මක පූර්ණ සංඛ්‍යා දෙකක් n සහ m ලබා දී ඇති අතර, ඔබගේ කාර්යය නම් n සිට m දක්වා සංඛ්‍යාවන්ගේ සාමාන්‍යය ගණනය කිරීමයි.
පිළිතුර නුදුරුතම පූර්ණ සංඛ්‍යාවක් දක්වා වටකුරු කර, එය ද්විරූපට පරිවර්තනය කරන්න.
n m වලට වඩා විශාල නම්, -1 ප්‍රතිලාභ කරන්න.
උදාහරණ:
rounded_avg => ""0b11""
rounded_avg => -1
rounded_avg => ""0b1111""
rounded_avg => ""0b11010""
    """"""
","    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

"
"
def unique_digits(x):
    """"""උපලේඛනාවක් ලබා දුන් විට ඊට අඩංගු සියලුම ඍජු සංඛ්‍යා වලින් යුත් ලැයිස්තුවක්. කිසිදු සමා සංඛ්‍යාකාර अंकයක් නොමැති සියලුම අංග අඩංගු විය යුතු සSorted ලැයිස්තුවක් ආපසු ලබා දෙන්න.

සටහන: ආපසු ලබා දෙන ලැයිස්තුව ආරෝහණ ක්‍රමයට සSorted විය යුතුය.

උදාහරනයක්:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def by_length(arr):
    """"""
    අඛණ්ඩකාරකමකින් පවතින පද්ධතියකින් ගත් අංක පෙළක් ඇති විට, 1 සහ 9 අතර පවතින අංක පෙළ හෝඩියට අනුකූලව සකසන්න,
    ප්‍රතිඵල ප්‍රතිලෝම කර, එවිට එක් එක් සංඛ්‍යා නාමයන් ""එක්"", ""දෙක"", ""තුන"", ""හතර"", ""පහ"", ""හය"", ""හත"", ""අට"", ""නවය"" ලෙස ප්‍රතිස්ථාපනය කරන්න.

    උදාහරණයක් ලෙස:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> හෝඩියට අනුකූලව සකසන්න -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> ප්‍රතිලෝම කරන්න -> [8, 5, 4, 3, 2, 2, 1, 1]
      ප්‍රතිලබන්න [""අට"", ""පහ"", ""හතර"", ""තුන"", ""දෙක"", ""දෙක"", ""එක්"", ""එක්""]
    
      ඇරිය හිස් නම්, හිස් පෙළක් ප්‍රතිලාභ කරන්න:
      arr = []
      ප්‍රතිලබන්න []
    
      ඇරියට අමුතු අංකයක් තිබේ නම්, එය නොසලකා හරින්න:
      arr = [1, -1 , 55] 
            -> හෝඩියට අනුකූලව සකසන්න -> [-1, 1, 55]
            -> ප්‍රතිලෝම කරන්න -> [55, 1, -1]
      ප්‍රතිලබන්න = ['එක්']
    """"""
","    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

"
"
def f(n):
    """""" `f` ප්‍රතිඵලයක් ලෙස n ලන පරාමිතියක් ගන්නා ක්‍රියාවලිය ක්‍රියාත්මක කරන්න,
    සහ n ප්‍රමාණයේ ලැයිස්තුවක් ආපසු ලබා දේ, එසේ නම් i දර්ශකයේ තනි අගය i නම් අගය අතරේ වේ නම් i නම් අගය factorial එක වේ
    නැතහොත් 1 සිට i දක්වා සංඛ්‍යා වල එකතුව වේ.
    i 1 සිට ආරම්භ වේ.
    i නම් අගය i වන සංඛ්‍යාවන් 1 සිට i දක්වා ගුණනය කිරීමයි.
    උදාහරණය:
    f == [1, 2, 6, 24, 15]
    """"""
","    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
"
"
def even_odd_palindrome(n):
    """"""
    ධන පූර්ණ සංඛ්‍යාවක් n ලෙස ලබා දීමේදී, පරාසයේ පවා සහ විෂම පූර්ණ සංඛ්‍යා පලිඳ්‍රෝමයන් ගණන සහිත tuple එකක් ආපසු ලබා දෙන්න.

උදාහරණ1:

    ආදානය: 3
    ප්‍රතිදානය:
    විස්තරය:
    පූර්ණ සංඛ්‍යා පලිඳ්‍රෝමයන් වන්නේ 1, 2, 3. එයින් එකක් පාවා සහ දෙකක් විෂම වේ.

උදාහරණ2:

    ආදානය: 12
    ප්‍රතිදානය:
    විස්තරය:
    පූර්ණ සංඛ්‍යා පලිඳ්‍රෝමයන් වන්නේ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. එයින් හතරක් පාවා සහ හයක් විෂම වේ.

සටහන:
    1. 1 <= n <= 10^3
    2. ආපසු ලබා දෙන tuple එකේ පවා සහ විෂම පූර්ණ සංඛ්‍යා පලිඳ්‍රෝමයන් ගණන අවස්ථානුකූලව ඇත.
    """"""
","    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def count_nums(arr):
    """"""
    ඉන්ටිජර් වර්ගයේ අරේ එකක් ගන්නා සහ එහි සංඛ්‍යාතයන් ගණන පෙන්වන count_nums නම් ක්‍රියාවලියක් ලියන්න.
    ඉලක්කම් එකතුව > 0 වන මූලද්‍රව්‍ය ගණන පමණක් නැවත ලබා දෙනු ඇත.
    ඉලක්කම ඍණමය නම්, එහි පළමු ලකුණත් ඍණමය වනු ඇත:
    උදා. -123 හි ලකුණත් ලකුණ -1, 2, සහ 3 වේ.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def move_one_ball(arr):
    """"""මෙම වාක්‍යය සිංහලට පරිවර්තනය කරන්න:

අපට N පුරෝකථන 'arr' සහිත 'arr' නම් විනිවිද භාවිතා කළ හැකිය. ගණන් අහඹු ලෙස යෙදේ. ඔබේ කාර්යය නම්, ලබා දී ඇති විනිවිදව භාවිතා කරමින්, නොඅඩුනුම කේතය අනුව විනිවිදව සකසන හැකියාවක් ඇතිද නැද්ද තීරණය කිරීමයි:
    ඔබට ඔපරෙශන් කිහිපයක් ක්‍රියාත්මක කළ හැකිය.
    
    එක් වම් කේතයක් ක්‍රියාත්මක කිරීම යනු විනිවිදයේ සියලුම අංගයන් දකුණු දිශාවට එක් ස්ථානයකින් මාරු කිරීමයි. විනිවිදයේ අවසන් අංගය විනිවිදයේ ආරම්භක ස්ථානයට ගෙන යනු ලබයි.

    ඉහත ක්‍රියාත්මක කිරීම ක්‍රියාත්මක කරමින් සකසන හැකියාවක් ඇති නම්, සැබෑ ආපසු ලබා දෙන්න, නැත්නම් අසත්‍ය ආපසු ලබා දෙන්න.
    ලබා දී ඇති විනිවිදය හිස් නම් සැබෑ ආපසු ලබා දෙන්න.

    සටහන: ලබා දී ඇති ලැයිස්තුවේ අංගයන් අනන්‍ය වේ.

    උදාහරණයක් සඳහා:
    
    move_one_ball==>සැබෑ
    විස්තරය: 2 වම් කේත ක්‍රියාත්මක කිරීමක් ක්‍රියාත්මක කිරීමෙන්, ලබා දී ඇති විනිවිදය සඳහා නොඅඩුනුම කේතය ලබා ගත හැකිය.
    move_one_ball==>අසත්‍ය
    විස්තරය: කිසිදු වම් කේත ක්‍රියාත්මක කිරීමක් ක්‍රියාත්මක කරමින් ලබා දී ඇති විනිවිදය සඳහා නොඅඩුනුම කේතය ලබා ගත නොහැක.
                
    """"""
","    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
"
"
def exchange(lst1, lst2):
    """"""මෙම ගැටලුවේදී, ඔබට අංක ලැයිස්තු දෙකක් ගන්නා ක්‍රියාවලියක් ක්ෂේමයෙන් ක්‍රියාත්මක කිරීමට සිදු වනු ඇත. එහිදී, ලැයිස්තු අතර මුලකුරු හුවමාරු කිරීමක් කළ හැකිද කියා තීරණය කරනු ඇත, එවිට lst1 එකේ සියලුම අංක සාපේක්ෂව සමාන වීමට හැකි වේ. lst1 හා lst2 අතර හුවමාරු කළ හැකි මුලකුරු ගණන පිළිබඳව කිසිදු සීමාවක් නොමැත. lst1 එකේ සියලුම අංක සාපේක්ෂව සමාන වීමට හැකි නම්, ""YES"" ලෙස ප්‍රතිචාර දක්වන්න. එසේ නැත්නම්, ""NO"" ලෙස ප්‍රතිචාර දක්වන්න.

උදාහරණයක් ලෙස:
exchange => ""YES""
exchange => ""NO""

ආදාන ලැයිස්තු හිස් නොවනු ඇතැයි සිතමු.
    """"""
","    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

"
"
def histogram(test):
    """"""අක්ෂර සමහරක් අඩංගු ඉඩකඩින් වෙන්කළ ලොවර්කේස් අක්ෂර අන්තර්ගත සටහනක් ලබාදී ඇති විට, උපරිම පunarාවෘත්තිය සහිත අක්ෂර සහ අදාළ ගණන අඩංගු ශබ්දකෝෂයක් ප්‍රතිලාභ කරන්න. කීපයක් හෝ වැඩි අක්ෂරයක් එකම සංඛ්‍යාතය අඩංගු නම්, ඒ සියල්ල ප්‍රතිලාභ කරන්න.

උදාහරණය:
histogram == {'a': 1, 'b': 1, 'c': 1}
histogram == {'a': 2, 'b': 2}
histogram == {'a': 2, 'b': 2}
histogram == {'b': 4}
histogram == {}

    """"""
","    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

"
"
def reverse_delete(s,c):
    """"""මෙම කාර්යය සඳහා අපට දී ඇති දෙකක් වන අකුරු දණ්ඩ s සහ c. ඔබට s හි සිට c හි කිසියම් අකුරකට සමාන සියලුම අකුරු මකා දමන්නා විය යුතුය, ඉන්පසු ප්‍රතිඵලවත් සූත්‍රපන්තිය පරීක්ෂා කරන්න. යම් සූත්‍රපන්තිය පසුපසින් කියවීමේදී එය ඉදිරියෙන් කියවීමේදී බොහෝමයක් සමාන නම් එය පාලින්ඩ්‍රෝම් ලෙස හැඳින්වෙයි. 
ඔබ ප්‍රතිඵලවත් සූත්‍රපන්තිය සහ පරීක්ෂාව සඳහා True/False අඩංගු tuple එකක් ලබා දිය යුතුය.
උදාහරණ
s = ""abcde"", c = ""ae"" සඳහා ප්‍රතිඵලය විය යුතුය
s = ""abcdef"", c = ""b"" සඳහා ප්‍රතිඵලය විය යුතුය
s = ""abcdedcba"", c = ""ab"" සඳහා ප්‍රතිඵලය විය යුතුය
    """"""
","    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
"
"
def odd_count(lst):
    """"""ඉලක්කම් පමණක් අඩංගු වන සටහනලැයිස්තුවක් ලබා දී ඇති විට, ලැයිස්තුවක් ආපසු ලබා දෙන්න. 
ආපසු ලබා දෙන ලැයිස්තුවේ එක් එක් අංගය i යන්න ""ඉලක්කම i හි අවිලාසිත අංග සංඛ්‍යාව"" විය යුතු අතර, සියලු i-ලා i' ත් සටහනේ අවිලාසිත ඉලක්කම් සංඛ්‍යාවෙන් ප්‍රතිස්ථාපනය කළ යුතුය.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minSubArraySum(nums):
    """"""
    ඉන්ටීජර් අංකයන්ගෙන් සමන්විත nums නම් වූ අරේ එකක් ලබා දී ඇති විට, nums හි කිසිඳු හිස් නොවන උප අරේ එකක අවම එකතුව සොයා ගන්න.
    උදාහරණය
    minSubArraySum == 1
    minSubArraySum == -6
    """"""
","    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
"
"
def max_fill(grid, capacity):
    import math
    """"""
    ඔබට සිවියකින් යුත් චතුරස්‍රාකාර ජාලයක් ලබා දී ඇත. සෑම පේළියක්ම එක් කුළුණක් නිරූපණය කරයි, 
    සහ එක් පේළියක වාගේ එක් 1ක් එක් ජල ඒකකයක් නිරූපණය කරයි.
    සෑම කුළුණකම ජලය ලබා ගැනීමට භාවිතා කළ හැකි කුඩයක් ඇත, 
    සහ සියලුම කුඩවල් එකම ධාරිතාවයක් ඇත.
    ඔබේ කාර්යය නම් කුඩවල් භාවිතා කර කුළුණු හිස් කිරීමයි.
    ඔබට කුඩවල් පහළට හැරවිය යුතු වාර ගණන ප්‍රතිඵලය ලෙස ලබා දෙන්න.

    උදාහරණය1:
        ආදානය: 
            ජාලය: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            කුඩ ධාරිතාවය: 1
        ප්‍රතිඵලය: 6

    උදාහරණය2:
        ආදානය: 
            ජාලය: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            කුඩ ධාරිතාවය: 2
        ප්‍රතිඵලය: 5
    
    උදාහරණය3:
        ආදානය: 
            ජාලය: [[0,0,0], [0,0,0]]
            කුඩ ධාරිතාවය: 5
        ප්‍රතිඵලය: 0

    සීමා:
        * සියලුම කුළුණු එකම දිගකින් යුක්ත වේ
        * 1 <= ජාලය.length <= 10^2
        * 1 <= ජාලය[:,1].length <= 10^2
        * ජාලය[i][j] -> 0 | 1
        * 1 <= ධාරිතාවය <= 10
    """"""
","    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

"
"
def sort_array(arr):
    """"""
    මෙම කටා තුළ, ඔබට ඩිමානික් අගයන් ගණන අනුව අසෙනකින් පරිපාලනය කළ යුතුය.
    Binary නිරවද්‍යතාවයන්හි ඒකක ගණන අනුව ඔවුන් ආරෝහණ ක‍්‍රමයෙන් පරිපාලනය කරන්න.
    ඒකක ගණන සමාන නම්, දශම අගය මත පදනම්ව පරිපාලනය කරන්න.

    මෙය මෙහෙම ක්‍රියාත්මක කළ යුතුය:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def select_words(s, n):
    """"""```Sinhala
දිස්වෙන string s එකක් සහ ස්වාභාවික සංඛ්‍යාවක් n එකක් ඇති විට, ඔබට function එකක් ක්‍රියාත්මක කිරීමට පAssigned 
    string s එකෙන් n සංඛ්‍යායකට සමාන constant අඩංගු සියලුම වචනවල ලැයිස්තුවක් පෙන්වීමට.
    string s එක හිස් නම් function එක හිස් ලැයිස්තුවක් අලලා යුතුයි.
    සටහනක්: ඔබට input string එකට අකුරු සහ අවකාශ පමණක් අඩංගු බව assume කළ හැකිය.
    උදාහරණ:
    select_words ==> [""ස්ථානයක්""]
    select_words ==> [""මැරි"", ""ස්ථානයක්""]
    select_words ==> []
    select_words ==> [""ලෝකය""]
    select_words ==> [""අම්මා""]
```
    """"""
","    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

"
"
def get_closest_vowel(word):
    """"""ඔබට වචනයක් ලබා දී ඇත. ඔබගේ කාර්යය වන්නේ වචනයේ දකුණු පසින් යුගල සාධක අතර ඉදිරියෙන් ඇති ආසන්නතම ස්වරය හඳුනා ගැනීමයි.

ආරම්භයේ සහ අවසානයේ ඇති ස්වරයන් ගණනට නොගන්න. ඉහත තත්ත්වය සපුරන ස්වරයක් සොයා ගත නොහැකි නම් හිස් පටියක් ප්‍රතිලාභ කරන්න.

ඔබට දෙන අකුරු ඉංග්‍රීසි අකුරු පමණක් වනු ඇතැයි ඔබට فرض කර ගත හැක.

උදාහරණ:
get_closest_vowel ==> ""u""
get_closest_vowel ==> ""U""
get_closest_vowel ==> """"
get_closest_vowel ==> """"
    """"""
","    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

"
"
def maximum(arr, k):
    """"""
    අංක සංඛ්‍යාතයක නියමිත සංඛ්‍යාතයක් සහ ධන සංඛ්‍යාවක් ලබාදී ඇති විට, arr හි උපරිම k අංක සමඟ k දිගින් සෝඩිත ලැයිස්තුවක් ලබා දෙන්න.

උදාහරණ1:

ආදානය: arr = [-3, -4, 5], k = 3
ප්‍රතිලේඛනය: [-4, -3, 5]

උදාහරණ2:

ආදානය: arr = [4, -4, 4], k = 2
ප්‍රතිලේඛනය: [4, 4]

උදාහරණ3:

ආදානය: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
ප්‍රතිලේඛනය: [2]

සටහන:
1. සංඛ්‍යාතයේ දිග [1, 1000] පරාසයේ වේ.
2. සංඛ්‍යාතයේ අංග [-1000, 1000] පරාසයේ වේ.
3. 0 <= k <= len
    """"""
","    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

"
"
def solution(lst):
    """"""අවලංගු නොවන පූර්ණ සංඛ්‍යා ලැයිස්තුවක් ලබා දී ඇති විට, සමාන ස්ථානවල ඇති සියලු විකෘති අංගවල එකතුව නැවත ලබා දෙන්න.

    උදාහරණ
    විසඳුම ==> 12
    විසඳුම ==> 9
    විසඳුම ==> 0
    """"""
","    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

"
"
def add_elements(arr, k):
    """"""
    නොහිස් පඬුමක් සහිත පූර්ණ සංඛ්‍යා අරේක arr සහ පූර්ණ සංඛ්‍යාවක් k ලබාදී ඇති විට, arr හි පළමු k මූලද්‍රව්‍යවලින් වඩාත්ම දෙකක් පමණික් ගණනක අංගවල එකතුව ලබාදෙන්න.

උදාහරණයක්:

    ආදාන: arr = [111,21,3,4000,5,6,7,8,9], k = 4
    ප්‍රතිදාන: 24 # 21 + 3 ක එකතුව

සීමාවන්:
    1. 1 <= arr ගණන <= 100
    2. 1 <= k <= arr ගණන
    """"""
","    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def get_odd_collatz(n):
    """"""
    ඔබට ඕනෑම ධන ආකෘතික n ලබා දුන් විට, Collatz අනුක්‍රමයේ විකෘති අංක ඇති අනුක්‍රමික ලැයිස්තුව ලබා දෙන්න.

    Collatz ප්‍රතිඥාව ගණිතයේ ඇති ප්‍රතිඥාවකි. එය පහත පරිදි අර්ථ දැක්වෙයි: ඕනෑම ධන ආකෘතික n එකකින් ආරම්භ කරන්න. ඉන් පසු, පසුගිය පදය පහත පරිදි ලබා ගත හැක: පසුගිය පදය සමාන නම්, ඊළඟ පදය පසුගිය පදයේ සෘජු අර්ධය වේ. පසුගිය පදය විකෘති නම්, ඊළඟ පදය පසුගිය පදයට 3 ගුණ කරන ලද ප්‍රමාණයට එකතු කළ 1 වේ. ප්‍රතිඥාව එයයි: n කුමක් වුවත්, අනුක්‍රමය සෑම විටම 1 වෙත පැමිණේ.

    සටහන:
        1. Collatz [1] වේ.
        2. ලැබෙන ලැයිස්තුව වැඩිවන අනුක්‍රමයකින් අනුක්‍රමිකව පවතී.

    උදාහරණයක් ලෙස:
    get_odd_collatz [1, 5] ලබා දෙයි # 5 සඳහා Collatz අනුක්‍රමය [5, 16, 8, 4, 2, 1] වේ, එසේ නම් විකෘති අංක 1 සහ 5 පමණි.
    """"""
","    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def valid_date(date):
    """"""ඔබට දින නියමක වලංගුකම පරික්ෂා කරන ක්‍රියාවක් ලියන්න ඕන. එය දින නියමය වලංගු නම් True යන ප්‍රතිඵලය ලබා දෙයි, නැතහොත් False යන ප්‍රතිඵලය ලබා දෙයි.
දින නියමය වලංගු නම් පහත සියලුම නියමයන් සපුරා තිබිය යුතුය:
1. දින නියමය හිස් නොවිය යුතුය.
2. මාස 1, 3, 5, 7, 8, 10, 12 සඳහා දින ගණන 1 කට අඩු නොවිය යුතුය හෝ 31 කට වැඩි නොවිය යුතුය. මාස 4, 6, 9, 11 සඳහා දින ගණන 1 කට අඩු නොවිය යුතුය හෝ 30 කට වැඩි නොවිය යුතුය. මාස 2 සඳහා, දින ගණන 1 කට අඩු නොවිය යුතුය හෝ 29 කට වැඩි නොවිය යුතුය.
3. මාස 1 කට අඩු නොවිය යුතුය හෝ 12 කට වැඩි නොවිය යුතුය.
4. දින නියමය mm-dd-yyyy ආකාරයට තිබිය යුතුය.

උදාහරණයක් ලෙස:
valid_date => True

valid_date => False

valid_date => False

valid_date => True

valid_date => False
    """"""
","    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
"
"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") â -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") â -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
"
"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) â -> True
    is_sorted([1, 2, 3, 4, 5]) â -> True
    is_sorted([1, 3, 2, 4, 5]) â -> False
    is_sorted([1, 2, 3, 4, 5, 6]) â -> True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) â -> True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) â -> False
    is_sorted([1, 2, 2, 3, 3, 4]) â -> True
    is_sorted([1, 2, 2, 2, 3, 4]) â -> False
    '''
","    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

"
"
def intersection(interval1, interval2):
    """"""ඔබට අතට අත දෙන්න ලැබෙන්නේ අන්තරා බෙදන තැන් දෙකක්,
    එයින් එක් අන්තරාවක් අන්තර් එකක් වන පියුම් දෙකකි. උදාහරණයක් ලෙස, අන්තරාව = =.
    ප්‍රදාන අන්තරා සංකේය වන්නේ වසා සංකේය වන අතර එයින් අන්තරාව 
    ආරම්භය හා අවසානය යන දෙකම ඇතුළත් වේ.
    සෑම දෙවැනි අන්තරාවකටම එහි ආරම්භය අවසානයට වඩා අඩු හෝ සමාන බව පෙනී යයි.
    ඔබගේ කාර්යය වන්නේ මෙම සංකේය දෙකේ හමුවීමේ දිග ප්‍රාග් ඵකක්ද යන්න තීරණය කිරීමයි.
    උදාහරණයක් ලෙස, අන්තරා, හමුවීම වන අතර
    එහි දිග 1 වන අතර, එය ප්‍රාග් ඵකක් නොවේ.
    හමුවීමේ දිග ප්‍රාග් ඵකක් නම්, ""YES"" යන්න ප්‍රතිචාර කරන්න,
    එසේ නොමැති නම්, ""NO"" යන්න ප්‍රතිචාර කරන්න.
    වඩාත්ම අන්තරා සමඟ හමුවන්නේ නම්, ""NO"" යන්න ප්‍රතිචාර කරන්න.


    [ආදාන/ප්‍රතිදාන] උදාහරණ:
    intersection,) ==> ""NO""
    intersection,) ==> ""NO""
    intersection,) ==> ""YES""
    """"""
","    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

"
"
def prod_signs(arr):
    """"""
    ඔබට පිරිනමන ලද arr නම් පරිඝණකයක් ඇත. ඔබට පරිඝණකයේ සියලුම සංඛ්‍යා වල සංඛ්‍යාත්මක වටිනාකම් එකතු කර, එම සංඛ්‍යා වල සලකුණු වල ගුණිතය ගුණාකාරයට ප්‍රතිඵලය ලබා දිය යුතුය. 
සටහන: පරිඝණකය හිස් නම් None ලෙස ප්‍රතිඵලය ලබා දෙන්න.

උදාහරණයක්:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def minPath(grid, k):
    """"""
    මෙම වාක්‍යය සිංහලට පරිවර්තනය කරන්න:

N පේළි සහ N තීරු සහ ඕනෑම ධනාත්මක පූර්ණ සංඛ්‍යාවක් k සහිත පෘෂ්ඨයක් පිළිබඳව, 
    පෘෂ්ඨයේ සෑම කෝෂයක් විචල්‍යයක් අඩංගු වේ. [1, N * N] අන්තර්ගතයේ සියලුම පූර්ණ සංඛ්‍යා
    පෘෂ්ඨයේ කෝෂවලට නිශ්චිතව එක් වරක් පමණක් පෙනේ.

    ඔබ k දිගු අවම මාර්ගය සෙවීමට ඇත. ඔබ ඕනෑම කෝෂයකින් ආරම්භ කළ හැකි අතර, සෑම පියවරකදීම ඔබට
    ඔබේ වර්තමාන කෝෂය සමඟ කෙළවරක් බෙදාගන්නා ඕනෑම අසල්වැසියෙකු වෙත ගමන් කළ හැකිය.
    කරුණාකර සලකන්න, k දිගු මාර්ගයක් කියන තැනට එන විට එය නිශ්චිතව k කෝෂ හරහා ගමන් කිරීම යන්නයි.
    ඔබට පෘෂ්ඨයෙන් පිටතට ගමන් කළ නොහැක.
    k දිගු මාර්ගයක් A, k දිගු මාර්ගයක් B ට වඩා කුඩා යැයි සැලකේ නම්, A සහ B හරහා ගමන් කරන
    කෝෂවල විචල්‍යයන්ගෙන් නිර්මාණය කළ ඇණවුම් ලැයිස්තුවෙන්,
    lst_A විකල්පයෙන් lst_B ට වඩා කුඩා නම්, වෙනත් වචනයකින්, [1 <= i <= k] විය හැකි ඕනෑම
    දර්ශකයක් i සහිතව lst_A[i] < lst_B[i] සහ ඕනෑම j සඳහා lst_A[j] = lst_B[j] නම්.
    පිළිතුර අද්විතීය බවට සහතික වේ.
    k දිගු අවම මාර්ගය හරහා ගමන් කරන කෝෂවල විචල්‍යයන්ගෙන් සැකසූ ඇණවුම් ලැයිස්තුව
    ආපසු ලබා දෙන්න.

    උදාහරණ:

        ආදානය: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        ප්‍රතිදානය: [1, 2, 1]

        ආදානය: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        ප්‍රතිදානය: [1]
    """"""
","    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

"
"
def tri(n):
    """"""සියලුම දෙනා ෆිබොනැචි ක්‍රමය දන්නවා, එය ගණිතඥයින් විසින් පසුගිය සියවස් කිහිපයේදී ගැඹුරින් අධ්‍යයනය කර ඇත. එහෙත්, මිනිසුන් නොදන්නා දේ ත්‍රිබොනැචි ක්‍රමයයි. ත්‍රිබොනැචි ක්‍රමය යනු:

tri = 3
tri = 1 + n / 2, n සමාන නම්.
tri = tri + tri + tri, n විෂම නම්.

උදාහරණයක් ලෙස:
tri = 1 + = 2
tri = 3
tri = tri + tri + tri
           = 2 + 3 + 3 = 8 

ඔබට ඉවත් නොවන පූර්ණ සංඛ්‍යාත්මක සංඛ්‍යාවක් n ලබා දී ඇත, ඔබට ත්‍රිබොනැචි ක්‍රමයේ පළමු n + 1 සංඛ්‍යාන්ක ලැයිස්තුවක් ලබා දිය යුතුය.
උදාහරණ:
tri = [1, 3, 2, 8]
    """"""
","    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
"
"
def digits(n):
    """"""නිසි ආකාරයකින් පවතින n නම් අංකයක ධන සම්භාවනාවක් ලබා දී ඇති විට, විකල්ප අංක වල ගුණිතය ලබා දෙන්න. 
    සියලු අංක සමාන නම් 0 පමණක් ලබා දෙන්න.
    උදාහරණයක් ලෙස:
    digits == 1
    digits == 0
    digits == 15
    """"""
","    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

"
"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') â -> True
    is_nested('[]]]]]]][[[[[]') â -> False
    is_nested('[][]') â -> False
    is_nested('[]') â -> False
    is_nested('[[][]]') â -> True
    is_nested('[[]][[') â -> True
    '''
","    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

"
"

def sum_squares(lst):
    """"""ඔබට සංඛ්‍යා ලැයිස්තුවක් ලබා දී තිබේ.
    ඔබ විසින් ලබා දී ඇති ලැයිස්තුවේ ඇති සංඛ්‍යා වල වර්ගයක් එකතු කර ප්‍රතිඵලය ලබා දිය යුතුය,
    මුලින්ම ලැයිස්තුවේ ඇති එක් එක් අංශය ඉහළ මුලාවට වට කෙරේ.
    උදාහරණ:
    lst = [1,2,3] සඳහා ප්‍රතිඵලය 14 විය යුතුය
    lst = [1,4,9] සඳහා ප්‍රතිඵලය 98 විය යුතුය
    lst = [1,3,5,7] සඳහා ප්‍රතිඵලය 84 විය යුතුය
    lst = [1.4,4.2,0] සඳහා ප්‍රතිඵලය 29 විය යුතුය
    lst = [-2.4,1,1] සඳහා ප්‍රතිඵලය 6 විය යුතුය
    

    """"""
","    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''
"," 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def can_arrange(arr):
    """"""මේ පහත වාක්‍යය සිංහලට පරිවර්තනය කරන්න.

```python
Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange = 3
    can_arrange = -1
```

```python
ඉහත ඉලකය සමඟ සමාන හෝ වඩා වැඩි නොවන මූලද්‍රව්‍යයක විශාලතම දර්ශකය ආපසු ප්‍රතිලාභ කරන ක්‍රියාවලියක් නිර්මාණය කරන්න. එවැනි මූලද්‍රව්‍යයක් නොමැති නම් -1 ආපසු ලබා දෙන්න. ලබා දී ඇති අරාවේ අනුපිටපත් අගයන් නොමැත.

උදාහරණ:
can_arrange = 3
can_arrange = -1
```
    """"""
","    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

"
"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
"
"
def compare_one(a, b):
    """"""
    ඉන්ටිජර්, ෆ්ලෝට් හෝ ස්ට්‍රීම් ලෙස නියෝජනය කරන
    සත්‍ය සංඛ්‍යා භාරගන්නා ක්‍රියාවලියක් සෑදීමට. 
    එය ලබා දී ඇති ස්ථිර ප්‍රමාණයේ විශාලතම විචල්‍යය ලබා දෙයි.
    අගය සමාන නම් None ලබා දෙන්න.
    සටහන: සත්‍ය සංඛ්‍යාවක් ස්ට්‍රීම් ලෙස නියෝජනය කරන්නේ නම්, දශම ලක්ෂ්‍යය . හෝ , විය හැක.

    compare_one â -> 2.5
    compare_one â -> ""2,3""
    compare_one â -> ""6""
    compare_one â -> None
    """"""
","    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def is_equal_to_sum_even(n):
    """"""දෙන ලද n සංඛ්‍යාව නිවැරදිවම 4 ධන සම සංඛ්‍යා 4ක් එකට එකතු කිරීමෙන් ලැබිය හැකිදැයි ඇගයීමට.
    උදාහරණය
    is_equal_to_sum_even == වැරදි
    is_equal_to_sum_even == වැරදි
    is_equal_to_sum_even == සත්‍ය
    """"""
","    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
"
"
def special_factorial(n):
    """"""බ්රසීලීය ගුණකාරකය යනු:
    brazilian_factorial = n! *! *! * ... * 1!
    n > 0 වන විට

    උදාහරණයක් ලෙස:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

"
"
def fix_spaces(text):
    """"""
    පිළිබඳව ලිපියක් ලබා දෙන්නේ නම්, එහි සියලු ඉඩවල් යටිකුරු ලකුණු සමඟ ප්‍රතිස්ථාපනය කරන්න. 
    සහ ඉඩවල් 2 ට වඩා වැඩි අඛණ්ඩව තිබේ නම්, 
    එම සියලු අඛණ්ඩ ඉඩවල් - සමඟ ප්‍රතිස්ථාපනය කරන්න.
    
    fix_spaces == ""Example""
    fix_spaces == ""Example_1""
    fix_spaces == ""_Example_2""
    fix_spaces == ""_Example-3""
    """"""
","    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

"
"
def file_name_check(file_name):
    """"""මෙහෙයුම් ක්‍රියාවක් නිර්මාණය කරන්න, එය ගොනුවෙහි නාමය නියෝජනය කරන තන්තුයක් ගනී, සහ
    ගොනුවෙහි නාමය වලංගු නම් 'ඔව්' සහ අනිත් විට 'නැත' ලෙස ආපසු දෙයි.
    ගොනුවෙහි නාමය වලංගු බව සලකනු ලබන්නේ සහ පමණක් සියලු පහත සඳහන් කොන්දේසි 
    පිරී ඇත නම්:
    - ගොනුවෙහි නාමයේ තිස්සක් ඉලක්කම් ඉක්මවා නොයා යුතුය.
    - ගොනුවෙහි නාමයේ නිවැරදිව එක් බින්දුවක් '.' තිබිය යුතුය.
    - බින්දුවට පෙර අනුපිලිකාව හිස් නොවිය යුතු අතර, එය ලතින් අකුරකින් ආරම්භ විය යුතුය.
    - බින්දුවට පසු අනුපිලිකාව පහත සඳහන්වක් විය යුතුය: ['txt', 'exe', 'dll']
    උදාහරණ:
    file_name_check # => 'ඔව්'
    file_name_check # => 'නැත'
    """"""
","    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

"
"


def sum_squares(lst):
    """"""මෙම ක්‍රියාවලිය පූර්ණාංකයන්ගෙන් යුත් ලැයිස්තුවක් ගනී. ලැයිස්තුවේ සියලුම ප්‍රවේශ සඳහා, එහි දර්ශකය 3ට බෙදා හැරිය හැකි නම් ක්‍රියාවලිය පූර්ණාංක ප්‍රවේශය වර්ග කළ යුතුය සහ එහි දර්ශකය 4ට බෙදා හැරිය හැකි සහ 3ට බෙදා හැරිය නොහැකි නම් ක්‍රියාවලිය පූර්ණාංක ප්‍රවේශය ඝන කළ යුතුය. 3ට හෝ 4ට බෙදා හැරිය නොහැකි දර්ශකයන් ඇති ලැයිස්තුවේ ප්‍රවේශයන් වෙනස් නොකෙරේ. ඉන්පසු ක්‍රියාවලිය සියලුම ප්‍රවේශ එකතුව ලබා දෙයි.

උදාහරණ:
lst = [1,2,3] නම් ප්‍රතිඵලය 6 විය යුතුය
lst = [] නම් ප්‍රතිඵලය 0 විය යුතුය
lst = [-1,-5,2,-1,-5] නම් ප්‍රතිඵලය -126 විය යුතුය
    """"""
","    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
"
"
def words_in_sentence(sentence):
    """"""
    ඔබට වාක්‍යයක් නියෝජනය කරන පේළියක් ලබා දී ඇත,
    එම වාක්‍යයේ වචන කිහිපයක් ඉඩක් විසින් වෙන්කළ ඇත,
    සහ ඔබට මූලික වාක්‍යයෙන් වචන අඩංගු පේළියක් ආපසු යැවීමට සිදු වේ,
    ඒ වචනවල දිග ප්‍රායිම සංඛ්‍යා වේ,
    නව පේළියේ වචන මූලික පේළියේ සමඟ එකම අනුපිළිවෙලෙන් විය යුතුය.

    උදාහරණ 1:
        ආදානය: වාක්‍ය = ""This is a test""
        ප්‍රතිදානය: ""is""

    උදාහරණ 2:
        ආදානය: වාක්‍ය = ""lets go for swimming""
        ප්‍රතිදානය: ""go for""

    සීමා:
        * 1 <= len <= 100
        * වාක්‍යේ අඩංගු වන්නේ අකුරු පමණි
    """"""
","    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

"
"
def simplify(x, n):
    """"""ඔබගේ කාර්යය x * n ප්‍රකාශනය සරල කරනු වන අතර එය මුළු සංඛ්‍යාකාරයක් ලෙස අගය කරන විට සත්‍ය නම් True සහනම් False ප්‍රතිඵලය ලබා දෙන function එකක් ක්‍රියාත්මක කිරීමයි. x සහ n යනු පෞරාණික සංඛ්‍යාකාර ප්‍රමාණයන්ගෙන් යුත් පටිපාටියක් වන අතර, <අනුපිළිවෙල>/<අනුපිළිවෙල> ආකාරයෙන් යුත් වේ. අනුපිළිවෙල සහ අනුපිළිවෙල යන දෙකෙහිම අගයන් ස්ථායි සංඛ්‍යාන්කාවන් වන අතර, අනුපිළිවෙල ශුන්‍ය නොවේ.

ඔබට පවතින්නේ x සහ n වලට වලංගු පටිපාටයන් බවට විශ්වාස කෙරේ.

simplify = True
simplify = False
simplify = False
    """"""
","    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

"
"
def order_by_points(nums):
    """"""
    ඉදිරියේදී දක්වන ලද උදාහරණය මත පදනම්ව, ඉදිරිපත් කරන ලද අංක ලැයිස්තුවේ අංක සමස්තයන් අනුව නැංවිය යුතු ක්‍රියාවලියක් ලියන්න.
    සටහන: ඔවුන්ගේ අංක සමස්තයන් වැනි දේවල් සමඟ එකට ඇති අයිතම කිහිපයක් තිබේනම්,
    මුල් ලැයිස්තුවේ ඔවුන්ගේ දර්ශකය අනුව ඔවුන්ව නැංවන්න.

    උදාහරණයක් ලෙස:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def specialFilter(nums):
    """"""අංක විච්ඡේදනයක් ආදානය ලෙස ගෙන එහි අංක 10 ට වැඩි සහ එක් අංකයේ පළමු සහ අවසන් ඉලකම් විකල්ප වන අංක ගණන ප්‍රතිලාභ කරන ක්‍රියාවලියක් ලියන්න.
උදාහරණයක් ලෙස:
specialFilter => 1 
specialFilter => 2
    """"""
","    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

"
"
def get_max_triples(n):
    """"""
    ඔබට ඕනෑම ධන සම්පූර්ණ සංඛ්‍යාවක් n ලබා දී ඇත. ඔබට n දිගු පූර්ණ සංඛ්‍යා අරේ එකක් a නිර්මාණය කරන්න විය යුතුය.
        සෑම i සඳහාම, a[i] = i * i - i + 1.
        i < j < k වන තැනැත්තා තුනක් ගණන් කරන්න, 
    සහ a[i] + a[j] + a[k] 3ක ගුණිතයක් වේ.

    උදාහරණය:
        ආදානය: n = 5
        ප්‍රතිදානය: 1
        පැහැදිළි කිරීම: 
        a = [1, 3, 7, 13, 21]
        එකම වලංගු ත්‍රිත්වය වේ.
    """"""
","    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
"
"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

"
"
def sorted_list_sum(lst):
    """"""මෙම වාක්‍යය සිංහලට පරිවර්තනය කරන්න:

```python
ලිපිනයන්ගේ ලැයිස්තුවක් පරාමිතියක් ලෙස පිළිගන්නා කාර්යයක් ලියන්න,
එහි සිට අසමාන දිගක් ඇති ලිපිනයන් මකා දමන්න,
සැකසූ ලැයිස්තුව පිළිවෙලින් ආපසු ලබා දෙන්න,
ලැයිස්තුව සෑම විටම ලිපිනයන්ගේ ලැයිස්තුවක් වන අතර කුමනත් අංක මාලාවක් නොවේ,
එය පිටපත් අඩංගු විය හැක.
ලැයිස්තුවේ පිළිවෙල සෑම වචනයක දිග අනුව ආසන්නව තිබිය යුතුය, 
ඔබට එම නියමයට අනුව ලැයිස්තුව සැකසිය යුතුය.
වචන දෙකක් එකම දිගක් ඇති නම්, ලැයිස්තුව අකාරාදීව පිළිවෙලින් සැකසන්න.
කාර්යය පිළිවෙලින් ලියන ලැයිස්තුවක් ආපසු ලබා දිය යුතුය.
සියලුම වචන එකම දිගක් ඇති බව ඔබට යොමු කළ හැක.
උදාහරණයක් ලෙස:
assert list_sort => [""aa""]
assert list_sort => [""ab"", ""cd""]
```
    """"""
","    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

"
"
def x_or_y(n, x, y):
    """"""n ප්‍රාථමික සංඛ්‍යාවක් නම් x අගය ලබා දිය යුතු සරල වැඩසටහනක් සහිතව, වෙනත් අවස්ථාවල y අගය ලබා දිය යුතුයි.

උදාහරණ:
x_or_y == 34
x_or_y == 5
    
    """"""
","    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

"
"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

"
"
def compare(game,guess):
    """"""මම හිතන්නේ අපි හැමෝම මතක තබා ගන්නවා ඒ හැගීම, කාලයක් බලාසිටිපු සිදුවීමක ප්‍රතිපලය අවසානයේ දැනගන්නා විට. ඔයාට ඒ අවස්ථාවේ ඇති හැගීම් සහ සිතුවිලි ලිවීම වටිනවා. ඔබේ කාර්යය වන්නේ කිහිපයක් තරගයේ ප්‍රතිපලයන් නිවැරදිව අනාවැකි පළ කර තිබේද යන්න තීරණය කිරීමයි. ඔබට සමාන දිගක ලකුණු සහ අනාවැකි ලැයිස්තු දෙකක් ලබා දී ඇත, එහි එක් දර්ශකයක් එක් තරගයක් පෙන්වයි. එක් එක් අනාවැකිය කොතරම දුරට වැරදියිද යන්න සනිටුහන් කරන සමාන දිගක ලැයිස්තුවක් ආපසු ලබා දෙන්න. ඔවුන් නිවැරදිව අනාවැකි පළ කර සිටින නම්, අගය 0 වේ, එසේ නැත්නම්, අගය අනාවැකිය සහ ලකුණ අතර සම්පූර්ණ වෙනස වේ.

උදාහරණය:
    
compare -> [0,0,0,0,3,3]
compare -> [4,4,1,0,0,6]
    """"""
","    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def Strongest_Extension(class_name, extensions):
    """"""ඔබට පන්තියක නම සහ දිගුවල ලැයිස්තුවක් ලබා දෙනු ඇත.
    මෙම දිගුවල පන්තියට අමතර පන්ති පූරණය කිරීමට භාවිතා කරනු ඇත.
    දිගුවේ ශක්තිය පහත පරිදි වේ: CAP යනු දිගුවේ නම තුළ ඇති මහා අකුරු සංඛ්‍යාව වන අතර, SM යනු දිගුවේ නම තුළ ඇති කුඩා අකුරු සංඛ්‍යාව වේ. ශක්තිය CAP - SM කුලකයෙන් ලබාගන්නා ලද අගය වේ.
    ඔබට ශක්තිමත්ම දිගුව සොයා ගෙන පහත ආකාරයට ටෙක්ස්ට් එකක් ආපසු යොමු කළ යුතුය: ClassName.StrongestExtensionName.
    එකම ශක්තියක් ඇති දිගුවල දෙකක් හෝ වැඩි ප්‍රමාණයක් තිබේ නම්, ලැයිස්තුවේ පළමුව ඇති එක තෝරා ගත යුතුය.
    උදාහරණයක් ලෙස, ඔබට ""Slices"" යන පන්තිය සහ දිගුවල ලැයිස්තුවක් ['SErviNGSliCes', 'Cheese', 'StuFfed'] ලබා දී ඇත්නම්, ඔබ 'Slices.SErviNGSliCes' ආපසු යොමු කළ යුතුය, 'SErviNGSliCes' ශක්තිමත්ම දිගුව වන බැවින්.
    උදාහරණයක්:
    Strongest_Extension == 'my_class.AA'
    """"""
","    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
"
"
def cycpattern_check(a , b):
    """"""ඔබට වචන 2 ක් ලබා දී ඇත. පළමු වචනයේ දෙවන වචනය හෝ එහි ඕනෑම භ්‍රමණයක් උපවචනයක්ද යන්න සත්‍ය නම් True ලෙස ප්‍රතිචාරදිය යුතුය.
    cycpattern_check => අසත්‍යයි
    cycpattern_check => සත්‍යයි
    cycpattern_check => අසත්‍යයි
    cycpattern_check => සත්‍යයි
    cycpattern_check => අසත්‍යයි
    cycpattern_check => සත්‍යයි

    """"""
","    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

"
"
def even_odd_count(num):
    """"""ලැබුණු පූර්ණ සංඛ්‍යාවක් ඇත. එහි ඉස්සන් සහ විස්සන් ඉලකුරු ගණන අදාලව ඇති ටියුපලයක් ආපසු ලබාදෙන්න.

     උදාහරණ:
        even_odd_count ==>
        even_odd_count ==>
    """"""
","    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def int_to_mini_roman(number):
    """"""
    ඉදිරිපත් කරන ලද ධනාත්මක පූර්ණ සංඛ්‍යාවක් ලැබුණු විට, එහි රෝමානු අක්‍ෂර equivalent එක string එකක් ලෙස ලබා ගන්න,
    සහ එය කුඩා අකුරින් ලබා දෙන්න.
    සීමා: 1 <= num <= 1000

    උදාහරණ:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

"
"
def find_max(words):
    """"""ස්තූතිමත් කරුණු ලැයිස්තුවක් පිළිගන්නා කාර්යයක් ලිවීමට උත්සාහ කරන්න.
    ලැයිස්තුවේ විවිධ වචන අන්තර්ගත වේ. විවිධ අක්ෂර ගණනවලින් උපරිම ගණනක් ඇති
    වචනය නැවත ලබා දෙන්න. උපරිම සංඛ්‍යාත්මක අක්ෂර ගණනක් ඇති විවිධ
    ලැයිස්තු තියෙනවා නම්, Lexicographical ක‍්‍රමයේ පළමු එක නැවත ලබා දෙන්න.

    find_max == ""string""
    find_max == ""enam""
    find_max == ""aaaaaaa""
    """"""
","    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

"
"
def eat(number, need, remaining):
    """"""
    ඔබ බඩවැල්කාර හාවෙක්, සහ ඔබ කලින්ම කිසියම් ගණනක ගජජා කෑවා, නමුත් දැන් ඔබට දිනයේ ආහාර සම්පුර්ණ කිරීමට තවත් ගජජා කෑමට අවශ්‍ය වේ. 

ඔබේ ආහාර සම්පුර්ණ කිරීමෙන් පසු [ මුළු කෑ ගත් ගජජා ගණන, ඔබේ ආහාර සම්පුර්ණ කිරීමෙන් පසු ඉතිරි ගජජා ගණන ] ලෙස අරයාවක් විපරම් කළ යුතුය. 

එසේත් නැත්නම්, ඉතිරි ගජජා ප්‍රමාණය ප්‍රමාණවත් නැති නම්, ඔබ සියලු ඉතිරි ගජජා කෑවද, ඔබ තවමත් බඩවැල්කාරයි.

උදාහරණ:
* eat -> [11, 4]
* eat -> [12, 1]
* eat -> [11, 0]
* eat -> [7, 0]

වෙරිවල්ස්:
@number : පූර්ණ සංඛ්‍යාව
    ඔබ කෑ ගත් ගජජා ගණන.
@need : පූර්ණ සංඛ්‍යාව
    ඔබට කෑමට අවශ්‍ය ගජජා ගණන.
@remaining : පූර්ණ සංඛ්‍යාව
    ඉතිරි ගජජා ගණන, තොගයේ තිබෙන

සීමාව:
* 0 <= number <= 1000
* 0 <= need <= 1000
* 0 <= remaining <= 1000

මजा ගන්න :)
    """"""
","    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

"
"
def do_algebra(operator, operand):
    """"""
    මෙම වාක්‍යය සිංහලට පරිවර්තනය කරන්න:

දෙක ලැයිස්තුක් ඇති අතර, එකක් ක්‍රියාකරු ලැයිස්තුවක් සහ අනෙක් ලැයිස්තුව ස්ථාන බවේ. පළමු ලැයිස්තුව මූලික බීජගණිත ක්‍රියාකාරකම් අඩංගු වන අතර, දෙවැනි ලැයිස්තුව පූර්ණාංක ලැයිස්තුවක් වේ. දෙන ලදී ලැයිස්තු දෙක භාවිත කර බීජගණිත ප්‍රකාශනයක් සකස් කර ප්‍රකාශනයේ ප්‍රතිඵලය ආපසු ලබා දෙන්න.

මූලික බීජගණිත ක්‍රියාකාරකම්:
එකතු කිරීම
අදාල කිරීම
ගුණ කිරීම
පිළිතුරු බෙදීම
උච්චශ්‍රේණිකරණය

උදාහරණය:
ක්‍රියාකරු['+', '*', '-']
ආරේ = [2, 3, 4, 5]
ප්‍රතිඵල = 2 + 3 * 4 - 5
=> ප්‍රතිඵල = 9

සටහන:
    ක්‍රියාකරු ලැයිස්තුවේ දිග ස්ථාන ලැයිස්තුවේ දිග අඩු එකට සමාන වේ.
    ස්ථාන ලැයිස්තුව අසම්භාව්‍ය පූර්ණාංක ලැයිස්තුවකි.
    ක්‍රියාකරු ලැයිස්තුවේ අනිවාර්යයෙන්ම එක් ක්‍රියාකරුක් තිබෙන අතර, ස්ථාන ලැයිස්තුවේ අනිවාර්යයෙන්ම ස්ථාන දෙකක් තිබේ.

    """"""
","    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
"
def solve(s):
    """"""ඔබට සවන්දායකයක් ලබා දී ඇත s.
    s[i] අකුරක් නම්, එහි අකුරු කේස්ය පාලිනයෙන් ඉහළට හෝ පහළට හරවන්න, 
    නැතහොත් එය එසේම තබා ගන්න.
    සවන්දායකයේ අකුරු නොමැති නම්, සවන්දායකය හරවන්න.
    මෙය ප්‍රතිඵල සවන්දායකය ආපසු ලබා දෙයි.
    උදාහරණ
    solve = ""4321""
    solve = ""AB""
    solve = ""#A@c""
    """"""
","    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
"
"
def string_to_md5(text):
    """"""
    පෙළ 'text' ලෙස දී ඇති විට, එහි md5 හෑෂ් සමාන පෙළ ලෙස ආපසු ලබා දෙන්න.
    'text' හිස් පෙළක් නම්, None ආපසු ලබා දෙන්න.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

"
"
def generate_integers(a, b):
    """"""
    ```
a සහ b යන ධන පූර්ණ සංඛ්‍යා දෙකක් දෙන විට, a සහ b අතර ඇති සම සංඛ්‍යා ආරෝහණ පිළිවෙලින් 
ආපසු ලබා දෙන්න.

උදාහරණයක් ලෙස:
generate_integers => [2, 4, 6, 8]
generate_integers => [2, 4, 6, 8]
generate_integers => []
```
    """"""
","    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

"
